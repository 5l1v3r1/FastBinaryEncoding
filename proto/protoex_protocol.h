// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: protoex.fbe
// Version: 1.3.0.0

#pragma once

#if defined(__clang__)
#pragma clang system_header
#elif defined(__GNUC__)
#pragma GCC system_header
#elif defined(_MSC_VER)
#pragma system_header
#endif

#include "protoex_models.h"

#include "proto_protocol.h"

namespace FBE {
namespace protoex {

// Fast Binary Encoding protoex sender
template <class TBuffer>
class Sender : public virtual FBE::Sender<TBuffer>
    , public virtual proto::Sender<TBuffer>
{
public:
    Sender()
        : OrderModel(this->_buffer)
        , BalanceModel(this->_buffer)
        , AccountModel(this->_buffer)
    {}
    Sender(const Sender&) = default;
    Sender(Sender&&) noexcept = default;
    virtual ~Sender() = default;

    Sender& operator=(const Sender&) = default;
    Sender& operator=(Sender&&) noexcept = default;

    // Imported senders
    proto::Sender<TBuffer>& proto_sender() noexcept { return *this; }

    size_t send(const ::protoex::Order& value)
    {
        // Serialize the value into the FBE stream
        size_t serialized = OrderModel.serialize(value);
        assert((serialized > 0) && "protoex::Order serialization failed!");
        assert(OrderModel.verify() && "protoex::Order validation failed!");

        // Log the value
        if (this->_logging)
        {
            std::string message = value.string();
            this->onSendLog(message);
        }

        // Send the serialized value
        return this->send_serialized(serialized);
    }

    size_t send(const ::protoex::Balance& value)
    {
        // Serialize the value into the FBE stream
        size_t serialized = BalanceModel.serialize(value);
        assert((serialized > 0) && "protoex::Balance serialization failed!");
        assert(BalanceModel.verify() && "protoex::Balance validation failed!");

        // Log the value
        if (this->_logging)
        {
            std::string message = value.string();
            this->onSendLog(message);
        }

        // Send the serialized value
        return this->send_serialized(serialized);
    }

    size_t send(const ::protoex::Account& value)
    {
        // Serialize the value into the FBE stream
        size_t serialized = AccountModel.serialize(value);
        assert((serialized > 0) && "protoex::Account serialization failed!");
        assert(AccountModel.verify() && "protoex::Account validation failed!");

        // Log the value
        if (this->_logging)
        {
            std::string message = value.string();
            this->onSendLog(message);
        }

        // Send the serialized value
        return this->send_serialized(serialized);
    }

public:
    // Sender models accessors
    FBE::protoex::OrderModel<TBuffer> OrderModel;
    FBE::protoex::BalanceModel<TBuffer> BalanceModel;
    FBE::protoex::AccountModel<TBuffer> AccountModel;
};

} // namespace protoex
} // namespace FBE

namespace FBE {
namespace protoex {

// Fast Binary Encoding protoex receiver
template <class TBuffer>
class Receiver : public virtual FBE::Receiver<TBuffer>
    , public virtual proto::Receiver<TBuffer>
{
public:
    Receiver() {}
    Receiver(const Receiver&) = default;
    Receiver(Receiver&&) = default;
    virtual ~Receiver() = default;

    Receiver& operator=(const Receiver&) = default;
    Receiver& operator=(Receiver&&) = default;

protected:
    // Receive handlers
    virtual void onReceive(const ::protoex::Order& value) {}
    virtual void onReceive(const ::protoex::Balance& value) {}
    virtual void onReceive(const ::protoex::Account& value) {}

    // Receive message handler
    bool onReceive(size_t type, const void* data, size_t size) override
    {
        switch (type)
        {
            case FBE::protoex::OrderModel<ReadBuffer>::fbe_type():
            {
                // Deserialize the value from the FBE stream
                OrderModel.attach(data, size);
                assert(OrderModel.verify() && "protoex::Order validation failed!");
                [[maybe_unused]] size_t deserialized = OrderModel.deserialize(OrderValue);
                assert((deserialized > 0) && "protoex::Order deserialization failed!");

                // Log the value
                if (this->_logging)
                {
                    std::string message = OrderValue.string();
                    this->onReceiveLog(message);
                }

                // Call receive handler with deserialized value
                onReceive(OrderValue);
                return true;
            }
            case FBE::protoex::BalanceModel<ReadBuffer>::fbe_type():
            {
                // Deserialize the value from the FBE stream
                BalanceModel.attach(data, size);
                assert(BalanceModel.verify() && "protoex::Balance validation failed!");
                [[maybe_unused]] size_t deserialized = BalanceModel.deserialize(BalanceValue);
                assert((deserialized > 0) && "protoex::Balance deserialization failed!");

                // Log the value
                if (this->_logging)
                {
                    std::string message = BalanceValue.string();
                    this->onReceiveLog(message);
                }

                // Call receive handler with deserialized value
                onReceive(BalanceValue);
                return true;
            }
            case FBE::protoex::AccountModel<ReadBuffer>::fbe_type():
            {
                // Deserialize the value from the FBE stream
                AccountModel.attach(data, size);
                assert(AccountModel.verify() && "protoex::Account validation failed!");
                [[maybe_unused]] size_t deserialized = AccountModel.deserialize(AccountValue);
                assert((deserialized > 0) && "protoex::Account deserialization failed!");

                // Log the value
                if (this->_logging)
                {
                    std::string message = AccountValue.string();
                    this->onReceiveLog(message);
                }

                // Call receive handler with deserialized value
                onReceive(AccountValue);
                return true;
            }
        }

        if (proto::Receiver<TBuffer>::onReceive(type, data, size))
            return true;

        return false;
    }

private:
    // Receiver values accessors
    ::protoex::Order OrderValue;
    ::protoex::Balance BalanceValue;
    ::protoex::Account AccountValue;

    // Receiver models accessors
    FBE::protoex::OrderModel<ReadBuffer> OrderModel;
    FBE::protoex::BalanceModel<ReadBuffer> BalanceModel;
    FBE::protoex::AccountModel<ReadBuffer> AccountModel;
};

} // namespace protoex
} // namespace FBE

namespace FBE {
namespace protoex {

// Fast Binary Encoding protoex proxy
template <class TBuffer>
class Proxy : public virtual FBE::Receiver<TBuffer>
    , public virtual proto::Proxy<TBuffer>
{
public:
    Proxy() {}
    Proxy(const Proxy&) = default;
    Proxy(Proxy&&) = default;
    virtual ~Proxy() = default;

    Proxy& operator=(const Proxy&) = default;
    Proxy& operator=(Proxy&&) = default;

protected:
    // Proxy handlers
    virtual void onProxy(FBE::protoex::OrderModel<ReadBuffer>& model, size_t type, const void* data, size_t size) {}
    virtual void onProxy(FBE::protoex::BalanceModel<ReadBuffer>& model, size_t type, const void* data, size_t size) {}
    virtual void onProxy(FBE::protoex::AccountModel<ReadBuffer>& model, size_t type, const void* data, size_t size) {}

    // Receive message handler
    bool onReceive(size_t type, const void* data, size_t size) override
    {
        switch (type)
        {
            case FBE::protoex::OrderModel<ReadBuffer>::fbe_type():
            {
                // Attach the FBE stream to the proxy model
                OrderModel.attach(data, size);
                assert(OrderModel.verify() && "protoex::Order validation failed!");

                size_t fbe_begin = OrderModel.model.get_begin();
                if (fbe_begin == 0)
                    return false;
                // Call proxy handler
                onProxy(OrderModel, type, data, size);
                OrderModel.model.get_end(fbe_begin);
                return true;
            }
            case FBE::protoex::BalanceModel<ReadBuffer>::fbe_type():
            {
                // Attach the FBE stream to the proxy model
                BalanceModel.attach(data, size);
                assert(BalanceModel.verify() && "protoex::Balance validation failed!");

                size_t fbe_begin = BalanceModel.model.get_begin();
                if (fbe_begin == 0)
                    return false;
                // Call proxy handler
                onProxy(BalanceModel, type, data, size);
                BalanceModel.model.get_end(fbe_begin);
                return true;
            }
            case FBE::protoex::AccountModel<ReadBuffer>::fbe_type():
            {
                // Attach the FBE stream to the proxy model
                AccountModel.attach(data, size);
                assert(AccountModel.verify() && "protoex::Account validation failed!");

                size_t fbe_begin = AccountModel.model.get_begin();
                if (fbe_begin == 0)
                    return false;
                // Call proxy handler
                onProxy(AccountModel, type, data, size);
                AccountModel.model.get_end(fbe_begin);
                return true;
            }
        }

        if (proto::Proxy<TBuffer>::onReceive(type, data, size))
            return true;

        return false;
    }

private:
    // Proxy models accessors
    FBE::protoex::OrderModel<ReadBuffer> OrderModel;
    FBE::protoex::BalanceModel<ReadBuffer> BalanceModel;
    FBE::protoex::AccountModel<ReadBuffer> AccountModel;
};

} // namespace protoex
} // namespace FBE

namespace FBE {
namespace protoex {

// Fast Binary Encoding protoex client
template <class TBuffer>
class Client : public virtual Sender<TBuffer>, protected virtual Receiver<TBuffer>
    , public virtual proto::Client<TBuffer>
{
public:
    typedef proto::Client<TBuffer> protoClient;

    Client() = default;
    Client(const Client&) = default;
    Client(Client&&) = default;
    virtual ~Client() = default;

    Client& operator=(const Client&) = default;
    Client& operator=(Client&&) = default;

    // Imported clients
    proto::Client<TBuffer>& proto_client() noexcept { return *this; }

    // Reset client buffers
    void reset()
    {
        std::scoped_lock locker(this->_lock);
        reset_requests();
    }

    // Watchdog for timeouts
    void watchdog(uint64_t utc)
    {
        std::scoped_lock locker(this->_lock);
        watchdog_requests(utc);
    }

protected:
    virtual bool onReceiveResponse(const ::protoex::Order& response) { return false; }
    virtual bool onReceiveResponse(const ::protoex::Balance& response) { return false; }
    virtual bool onReceiveResponse(const ::protoex::Account& response) { return false; }

    virtual bool onReceiveReject(const ::protoex::Order& reject) { return false; }
    virtual bool onReceiveReject(const ::protoex::Balance& reject) { return false; }
    virtual bool onReceiveReject(const ::protoex::Account& reject) { return false; }

    virtual void onReceiveNotify(const ::protoex::Order& notify) {}
    virtual void onReceiveNotify(const ::protoex::Balance& notify) {}
    virtual void onReceiveNotify(const ::protoex::Account& notify) {}

    virtual void onReceive(const ::protoex::Order& value) override { if (!onReceiveResponse(value) && !onReceiveReject(value)) onReceiveNotify(value); }
    virtual void onReceive(const ::protoex::Balance& value) override { if (!onReceiveResponse(value) && !onReceiveReject(value)) onReceiveNotify(value); }
    virtual void onReceive(const ::protoex::Account& value) override { if (!onReceiveResponse(value) && !onReceiveReject(value)) onReceiveNotify(value); }

    // Reset client requests
    virtual void reset_requests()
    {
        proto::Client<TBuffer>::reset_requests();
    }

    // Watchdog client requests for timeouts
    virtual void watchdog_requests(uint64_t utc)
    {
        proto::Client<TBuffer>::watchdog_requests(utc);

    }
};

} // namespace protoex
} // namespace FBE

namespace FBE {
namespace protoex {

// Fast Binary Encoding protoex final sender
template <class TBuffer>
class FinalSender : public virtual FBE::Sender<TBuffer>
    , public virtual proto::FinalSender<TBuffer>
{
public:
    FinalSender()
        : OrderModel(this->_buffer)
        , BalanceModel(this->_buffer)
        , AccountModel(this->_buffer)
    { this->final(true); }
    FinalSender(const FinalSender&) = default;
    FinalSender(FinalSender&&) noexcept = default;
    virtual ~FinalSender() = default;

    FinalSender& operator=(const FinalSender&) = default;
    FinalSender& operator=(FinalSender&&) noexcept = default;

    // Imported senders
    proto::FinalSender<TBuffer>& proto_sender() noexcept { return *this; }

    size_t send(const ::protoex::Order& value)
    {
        // Serialize the value into the FBE stream
        size_t serialized = OrderModel.serialize(value);
        assert((serialized > 0) && "protoex::Order serialization failed!");
        assert(OrderModel.verify() && "protoex::Order validation failed!");

        // Log the value
        if (this->_logging)
        {
            std::string message = value.string();
            this->onSendLog(message);
        }

        // Send the serialized value
        return this->send_serialized(serialized);
    }

    size_t send(const ::protoex::Balance& value)
    {
        // Serialize the value into the FBE stream
        size_t serialized = BalanceModel.serialize(value);
        assert((serialized > 0) && "protoex::Balance serialization failed!");
        assert(BalanceModel.verify() && "protoex::Balance validation failed!");

        // Log the value
        if (this->_logging)
        {
            std::string message = value.string();
            this->onSendLog(message);
        }

        // Send the serialized value
        return this->send_serialized(serialized);
    }

    size_t send(const ::protoex::Account& value)
    {
        // Serialize the value into the FBE stream
        size_t serialized = AccountModel.serialize(value);
        assert((serialized > 0) && "protoex::Account serialization failed!");
        assert(AccountModel.verify() && "protoex::Account validation failed!");

        // Log the value
        if (this->_logging)
        {
            std::string message = value.string();
            this->onSendLog(message);
        }

        // Send the serialized value
        return this->send_serialized(serialized);
    }

public:
    // Sender models accessors
    FBE::protoex::OrderFinalModel<TBuffer> OrderModel;
    FBE::protoex::BalanceFinalModel<TBuffer> BalanceModel;
    FBE::protoex::AccountFinalModel<TBuffer> AccountModel;
};

} // namespace protoex
} // namespace FBE

namespace FBE {
namespace protoex {

// Fast Binary Encoding protoex final receiver
template <class TBuffer>
class FinalReceiver : public virtual FBE::Receiver<TBuffer>
    , public virtual proto::FinalReceiver<TBuffer>
{
public:
    FinalReceiver() { this->final(true); }
    FinalReceiver(const FinalReceiver&) = default;
    FinalReceiver(FinalReceiver&&) = default;
    virtual ~FinalReceiver() = default;

    FinalReceiver& operator=(const FinalReceiver&) = default;
    FinalReceiver& operator=(FinalReceiver&&) = default;

protected:
    // Receive handlers
    virtual void onReceive(const ::protoex::Order& value) {}
    virtual void onReceive(const ::protoex::Balance& value) {}
    virtual void onReceive(const ::protoex::Account& value) {}

    // Receive message handler
    bool onReceive(size_t type, const void* data, size_t size) override
    {
        switch (type)
        {
            case FBE::protoex::OrderFinalModel<ReadBuffer>::fbe_type():
            {
                // Deserialize the value from the FBE stream
                OrderModel.attach(data, size);
                assert(OrderModel.verify() && "protoex::Order validation failed!");
                [[maybe_unused]] size_t deserialized = OrderModel.deserialize(OrderValue);
                assert((deserialized > 0) && "protoex::Order deserialization failed!");

                // Log the value
                if (this->_logging)
                {
                    std::string message = OrderValue.string();
                    this->onReceiveLog(message);
                }

                // Call receive handler with deserialized value
                onReceive(OrderValue);
                return true;
            }
            case FBE::protoex::BalanceFinalModel<ReadBuffer>::fbe_type():
            {
                // Deserialize the value from the FBE stream
                BalanceModel.attach(data, size);
                assert(BalanceModel.verify() && "protoex::Balance validation failed!");
                [[maybe_unused]] size_t deserialized = BalanceModel.deserialize(BalanceValue);
                assert((deserialized > 0) && "protoex::Balance deserialization failed!");

                // Log the value
                if (this->_logging)
                {
                    std::string message = BalanceValue.string();
                    this->onReceiveLog(message);
                }

                // Call receive handler with deserialized value
                onReceive(BalanceValue);
                return true;
            }
            case FBE::protoex::AccountFinalModel<ReadBuffer>::fbe_type():
            {
                // Deserialize the value from the FBE stream
                AccountModel.attach(data, size);
                assert(AccountModel.verify() && "protoex::Account validation failed!");
                [[maybe_unused]] size_t deserialized = AccountModel.deserialize(AccountValue);
                assert((deserialized > 0) && "protoex::Account deserialization failed!");

                // Log the value
                if (this->_logging)
                {
                    std::string message = AccountValue.string();
                    this->onReceiveLog(message);
                }

                // Call receive handler with deserialized value
                onReceive(AccountValue);
                return true;
            }
        }

        if (proto::FinalReceiver<TBuffer>::onReceive(type, data, size))
            return true;

        return false;
    }

private:
    // Receiver values accessors
    ::protoex::Order OrderValue;
    ::protoex::Balance BalanceValue;
    ::protoex::Account AccountValue;

    // Receiver models accessors
    FBE::protoex::OrderFinalModel<ReadBuffer> OrderModel;
    FBE::protoex::BalanceFinalModel<ReadBuffer> BalanceModel;
    FBE::protoex::AccountFinalModel<ReadBuffer> AccountModel;
};

} // namespace protoex
} // namespace FBE

namespace FBE {
namespace protoex {

// Fast Binary Encoding protoex final client
template <class TBuffer>
class FinalClient : public virtual FinalSender<TBuffer>, protected virtual FinalReceiver<TBuffer>
    , public virtual proto::FinalClient<TBuffer>
{
public:
    typedef proto::FinalClient<TBuffer> protoFinalClient;

    FinalClient() = default;
    FinalClient(const FinalClient&) = default;
    FinalClient(FinalClient&&) = default;
    virtual ~FinalClient() = default;

    FinalClient& operator=(const FinalClient&) = default;
    FinalClient& operator=(FinalClient&&) = default;

    // Imported clients
    proto::FinalClient<TBuffer>& proto_client() noexcept { return *this; }

    // Reset client buffers
    void reset()
    {
        std::scoped_lock locker(this->_lock);
        reset_requests();
    }

    // Watchdog for timeouts
    void watchdog(uint64_t utc)
    {
        std::scoped_lock locker(this->_lock);
        watchdog_requests(utc);
    }

protected:
    virtual bool onReceiveResponse(const ::protoex::Order& response) { return false; }
    virtual bool onReceiveResponse(const ::protoex::Balance& response) { return false; }
    virtual bool onReceiveResponse(const ::protoex::Account& response) { return false; }

    virtual bool onReceiveReject(const ::protoex::Order& reject) { return false; }
    virtual bool onReceiveReject(const ::protoex::Balance& reject) { return false; }
    virtual bool onReceiveReject(const ::protoex::Account& reject) { return false; }

    virtual void onReceiveNotify(const ::protoex::Order& notify) {}
    virtual void onReceiveNotify(const ::protoex::Balance& notify) {}
    virtual void onReceiveNotify(const ::protoex::Account& notify) {}

    virtual void onReceive(const ::protoex::Order& value) override { if (!onReceiveResponse(value) && !onReceiveReject(value)) onReceiveNotify(value); }
    virtual void onReceive(const ::protoex::Balance& value) override { if (!onReceiveResponse(value) && !onReceiveReject(value)) onReceiveNotify(value); }
    virtual void onReceive(const ::protoex::Account& value) override { if (!onReceiveResponse(value) && !onReceiveReject(value)) onReceiveNotify(value); }

    // Reset client requests
    virtual void reset_requests()
    {
        proto::FinalClient<TBuffer>::reset_requests();
    }

    // Watchdog client requests for timeouts
    virtual void watchdog_requests(uint64_t utc)
    {
        proto::FinalClient<TBuffer>::watchdog_requests(utc);

    }
};

} // namespace protoex
} // namespace FBE
