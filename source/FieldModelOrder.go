// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: proto.fbe
// Version: 1.1.0.0

package proto

import "errors"
import "../fbe"

// Fast Binary Encoding Order field model
type FieldModelOrder struct {
    buffer *fbe.Buffer  // Field model buffer
    offset int          // Field model buffer offset

    // Order fields
    Uid *fbe.FieldModelInt32
    Symbol *fbe.FieldModelString
    Side *FieldModelOrderSide
    Type *FieldModelOrderType
    Price *fbe.FieldModelDouble
    Volume *fbe.FieldModelDouble
}

// Create a new field model
func NewFieldModelOrder(buffer *fbe.Buffer, offset int) *FieldModelOrder {
    fbeResult := FieldModelOrder{buffer: buffer, offset: offset}
    fbeResult.Uid = fbe.NewFieldModelInt32(buffer, 4 + 4)
    fbeResult.Symbol = fbe.NewFieldModelString(buffer, fbeResult.Uid.FBEOffset() + fbeResult.Uid.FBESize())
    fbeResult.Side = NewFieldModelOrderSide(buffer, fbeResult.Symbol.FBEOffset() + fbeResult.Symbol.FBESize())
    fbeResult.Type = NewFieldModelOrderType(buffer, fbeResult.Side.FBEOffset() + fbeResult.Side.FBESize())
    fbeResult.Price = fbe.NewFieldModelDouble(buffer, fbeResult.Type.FBEOffset() + fbeResult.Type.FBESize())
    fbeResult.Volume = fbe.NewFieldModelDouble(buffer, fbeResult.Price.FBEOffset() + fbeResult.Price.FBESize())
    return &fbeResult
}

// Get the field size
func (fm *FieldModelOrder) FBESize() int { return 1 }

// Get the field body size
func (fm *FieldModelOrder) FBEBody() int {
    fbeResult := 4 + 4 +
        fm.Uid.FBESize() +
        fm.Symbol.FBESize() +
        fm.Side.FBESize() +
        fm.Type.FBESize() +
        fm.Price.FBESize() +
        fm.Volume.FBESize() +
        0
    return fbeResult
}

// Get the field extra size
func (fm *FieldModelOrder) FBEExtra() int {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return 0
    }

    fbeStructOffset := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset()))
    if (fbeStructOffset == 0) || ((fm.buffer.Offset() + fbeStructOffset + 4) > fm.buffer.Size()) {
        return 0
    }

    fm.buffer.Shift(fbeStructOffset)

    fbeResult := fm.FBEBody() +
        fm.Uid.FBEExtra() +
        fm.Symbol.FBEExtra() +
        fm.Side.FBEExtra() +
        fm.Type.FBEExtra() +
        fm.Price.FBEExtra() +
        fm.Volume.FBEExtra() +
        0

    fm.buffer.Unshift(fbeStructOffset)

    return fbeResult
}

// Get the field type
func (fm *FieldModelOrder) FBEType() int { return 1 }

// Get the field offset
func (fm *FieldModelOrder) FBEOffset() int { return fm.offset }
// Set the field offset
func (fm *FieldModelOrder) SetFBEOffset(value int) { fm.offset = value }

// Shift the current field offset
func (fm *FieldModelOrder) FBEShift(size int) { fm.offset += size }
// Unshift the current field offset
func (fm *FieldModelOrder) FBEUnshift(size int) { fm.offset -= size }

// Check if the value is valid
func (fm *FieldModelOrder) Verify() bool { return fm.VerifyType(true) }

// Check if the value and its type are valid
func (fm *FieldModelOrder) VerifyType(fbeVerifyType bool) bool {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return true
    }

    fbeStructOffset := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset()))
    if (fbeStructOffset == 0) || ((fm.buffer.Offset() + fbeStructOffset + 4 + 4) > fm.buffer.Size()) {
        return false
    }

    fbeStructSize := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fbeStructOffset))
    if fbeStructSize < (4 + 4) {
        return false
    }

    fbeStructType := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fbeStructOffset + 4))
    if fbeVerifyType && (fbeStructType != fm.FBEType()) {
        return false
    }

    fm.buffer.Shift(fbeStructOffset)
    fbeResult := fm.VerifyFields(fbeStructSize)
    fm.buffer.Unshift(fbeStructOffset)
    return fbeResult
}

// Check if the value fields are valid
func (fm *FieldModelOrder) VerifyFields(fbeStructSize int) bool {
    fbeCurrentSize := 4 + 4

    if (fbeCurrentSize + fm.Uid.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.Uid.Verify() {
        return false
    }
    fbeCurrentSize += fm.Uid.FBESize()

    return true
}

// Get the struct value (begin phase)
func (fm *FieldModelOrder) GetBegin() (int, error) {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return 0, nil
    }

    fbeStructOffset := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset()))
    if (fbeStructOffset == 0) || ((fm.buffer.Offset() + fbeStructOffset + 4 + 4) > fm.buffer.Size()) {
        return 0, errors.New("model is broken")
    }

    fbeStructSize := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fbeStructOffset))
    if fbeStructSize < (4 + 4) {
        return 0, errors.New("model is broken")
    }

    fm.buffer.Shift(fbeStructOffset)
    return fbeStructOffset, nil
}

// Get the struct value (end phase)
func (fm *FieldModelOrder) GetEnd(fbeBegin int) {
    fm.buffer.Unshift(fbeBegin)
}

// Get the struct value
func (fm *FieldModelOrder) Get() (*Order, error) {
    fbeResult := NewOrder()
    return fm.GetValue(fbeResult)
}

// Get the struct value in place
func (fm *FieldModelOrder) GetValue(fbeValue *Order) (*Order, error) {
    fbeBegin, err := fm.GetBegin()
    if fbeBegin == 0 {
        return fbeValue, err
    }

    fbeStructSize := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset()))
    fm.GetFields(fbeValue, fbeStructSize)
    fm.GetEnd(fbeBegin)
    return fbeValue, nil
}

// Get the struct fields values
func (fm *FieldModelOrder) GetFields(fbeValue *Order, fbeStructSize int) {
    fbeCurrentSize := 4 + 4

    if (fbeCurrentSize + fm.Uid.FBESize()) <= fbeStructSize {
        fbeValue.Uid, _ = fm.Uid.Get()
    } else {
        fbeValue.Uid = 0
    }
    fbeCurrentSize += fm.Uid.FBESize()

    if (fbeCurrentSize + fm.Symbol.FBESize()) <= fbeStructSize {
        fbeValue.Symbol, _ = fm.Symbol.Get()
    } else {
        fbeValue.Symbol = ""
    }
    fbeCurrentSize += fm.Uid.FBESize()

    if (fbeCurrentSize + fm.Side.FBESize()) <= fbeStructSize {
        _, _ = fm.Side.GetValue(&fbeValue.Side)
    } else {
        fbeValue.Side = *NewOrderSide()
    }
    fbeCurrentSize += fm.Uid.FBESize()

    if (fbeCurrentSize + fm.Type.FBESize()) <= fbeStructSize {
        _, _ = fm.Type.GetValue(&fbeValue.Type)
    } else {
        fbeValue.Type = *NewOrderType()
    }
    fbeCurrentSize += fm.Uid.FBESize()

    if (fbeCurrentSize + fm.Price.FBESize()) <= fbeStructSize {
        fbeValue.Price, _ = fm.Price.GetDefault(0.0)
    } else {
        fbeValue.Price = 0.0
    }
    fbeCurrentSize += fm.Uid.FBESize()

    if (fbeCurrentSize + fm.Volume.FBESize()) <= fbeStructSize {
        fbeValue.Volume, _ = fm.Volume.GetDefault(0.0)
    } else {
        fbeValue.Volume = 0.0
    }
    fbeCurrentSize += fm.Uid.FBESize()
}

// Set the struct value (begin phase)
func (fm *FieldModelOrder) SetBegin() (int, error) {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return 0, errors.New("model is broken")
    }

    fbeStructSize := fm.FBEBody()
    fbeStructOffset := fm.buffer.Allocate(fbeStructSize) - fm.buffer.Offset()
    if (fbeStructOffset <= 0) || ((fm.buffer.Offset() + fbeStructOffset + fbeStructSize) > fm.buffer.Size()) {
        return 0, errors.New("model is broken")
    }

    fbe.WriteUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset(), uint32(fbeStructOffset))
    fbe.WriteUInt32(fm.buffer.Data(), fm.buffer.Offset() + fbeStructOffset, uint32(fbeStructSize))
    fbe.WriteUInt32(fm.buffer.Data(), fm.buffer.Offset() + fbeStructOffset + 4, uint32(fm.FBEType()))

    fm.buffer.Shift(fbeStructOffset)
    return fbeStructOffset, nil
}

// Set the struct value (end phase)
func (fm *FieldModelOrder) SetEnd(fbeBegin int) {
    fm.buffer.Unshift(fbeBegin)
}

// Set the struct value
func (fm *FieldModelOrder) Set(fbeValue *Order) error {
    fbeBegin, err := fm.SetBegin()
    if fbeBegin == 0 {
        return err
    }

    fm.SetFields(fbeValue)
    fm.SetEnd(fbeBegin)
    return nil
}

// Set the struct fields values
func (fm *FieldModelOrder) SetFields(fbeValue *Order) {
    _ = fm.Uid.Set(fbeValue.Uid)
    _ = fm.Symbol.Set(fbeValue.Symbol)
    _ = fm.Side.Set(&fbeValue.Side)
    _ = fm.Type.Set(&fbeValue.Type)
    _ = fm.Price.Set(fbeValue.Price)
    _ = fm.Volume.Set(fbeValue.Volume)
}
