// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding

const util = require('util')

const big = require('./big')
const fbe = require('./fbe')
const int64 = require('./int64')
const uuid = require('./uuid')

const Big = big.Big // eslint-disable-line
const Int64 = int64.Int64 // eslint-disable-line
const UInt64 = int64.UInt64 // eslint-disable-line
const UUID = uuid.UUID // eslint-disable-line
const proto = require('./proto')

/**
 * EnumSimple enum
 */
class EnumSimple {
  /**
   * Initialize enum with a given value
   * @param {EnumSimple|number|Int64|UInt64=} value Enum value, defaults is 0
   * @constructor
   */
  constructor (value = 0) {
    if (value instanceof EnumSimple) {
      this.value = value.value
    } else {
      this.value = value
    }
  }

  /**
   * Is this enum equal to other one?
   * @this {!EnumSimple}
   * @param {!EnumSimple} other Other enum
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof EnumSimple)) {
      throw new TypeError('Instance of EnumSimple is required!')
    }
    return this.value === other.value
  }

  /**
   * Get enum value
   * @this {!EnumSimple}
   * @returns {!number|!Int64|!UInt64} Enum value
   */
  valueOf () {
    return this.value
  }

  /**
   * Convert enum to string
   * @this {!EnumSimple}
   * @returns {!string} Enum value string
   */
  toString () {
    if (this.value === EnumSimple.ENUM_VALUE_0.value) {
      return 'ENUM_VALUE_0'
    }
    if (this.value === EnumSimple.ENUM_VALUE_1.value) {
      return 'ENUM_VALUE_1'
    }
    if (this.value === EnumSimple.ENUM_VALUE_2.value) {
      return 'ENUM_VALUE_2'
    }
    if (this.value === EnumSimple.ENUM_VALUE_3.value) {
      return 'ENUM_VALUE_3'
    }
    if (this.value === EnumSimple.ENUM_VALUE_4.value) {
      return 'ENUM_VALUE_4'
    }
    if (this.value === EnumSimple.ENUM_VALUE_5.value) {
      return 'ENUM_VALUE_5'
    }
    return '<unknown>'
  }

  /**
   * Inspect enum
   * @this {!EnumSimple}
   * @returns {!string} Enum value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert enum to JSON
   * @this {!EnumSimple}
   * @returns {!number} Enum value for JSON
   */
  toJSON () {
    return this.value
  }

  /**
   * Create enum from object value
   * @param {!number} other Object value
   * @returns {!EnumSimple} Created enum
   */
  static fromObject (other) {
    return new EnumSimple(other)
  }
}

// noinspection PointlessArithmeticExpressionJS
EnumSimple.ENUM_VALUE_0 = new EnumSimple(0 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumSimple.ENUM_VALUE_1 = new EnumSimple(1 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumSimple.ENUM_VALUE_2 = new EnumSimple(1 + 1)
// noinspection PointlessArithmeticExpressionJS
EnumSimple.ENUM_VALUE_3 = new EnumSimple(3 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumSimple.ENUM_VALUE_4 = new EnumSimple(0x4 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumSimple.ENUM_VALUE_5 = new EnumSimple(EnumSimple.ENUM_VALUE_3)

exports.EnumSimple = EnumSimple

/**
 * Fast Binary Encoding EnumSimple field model class
 */
class FieldModelEnumSimple extends fbe.FieldModel {
  /**
   * Get the field size
   * @this {!FieldModelEnumSimple}
   * @returns {!number} Field size
   */
  get FBESize () {
    return 4
  }

  /**
   * Get the value
   * @this {!FieldModelEnumSimple}
   * @param {EnumSimple=} defaults Default value, defaults is new EnumSimple()
   * @returns {!EnumSimple} Result value
   */
  get (defaults = new EnumSimple()) {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return defaults
    }

    return new EnumSimple(this.readInt32(this.FBEOffset))
  }

  /**
   * Set the value
   * @this {!FieldModelEnumSimple}
   * @param {!EnumSimple} value Value
   */
  set (value) {
    console.assert(((this._buffer.offset + this.FBEOffset + this.FBESize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return
    }

    this.writeInt32(this.FBEOffset, value.value)
  }
}
exports.FieldModelEnumSimple = FieldModelEnumSimple

/**
 * Fast Binary Encoding EnumSimple final model class
 */
class FinalModelEnumSimple extends fbe.FinalModel {
  /**
   * Get the allocation size
   * @this {!FinalModelEnumSimple}
   * @param {!EnumSimple} value Value
   * @returns {!number} Allocation size
   */
  FBEAllocationSize (value) {
    return this.FBESize
  }

  /**
   * Get the final size
   * @this {!FieldModelEnumSimple}
   * @returns {!number} Final size
   */
  get FBESize () {
    return 4
  }

  /**
   * Check if the value is valid
   * @this {!FinalModelEnumSimple}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return Number.MAX_SAFE_INTEGER
    }

    return this.FBESize
  }

  /**
   * Get the value
   * @this {!FieldModelEnumSimple}
   * @returns {!object} Result value and its size
   */
  get () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return { value: new EnumSimple(), size: 0 }
    }

    return { value: new EnumSimple(this.readInt32(this.FBEOffset)), size: this.FBESize }
  }

  /**
   * Set the value
   * @this {!FieldModelEnumSimple}
   * @param {!EnumSimple} value Value
   * @returns {!number} Final model size
   */
  set (value) {
    console.assert(((this._buffer.offset + this.FBEOffset + this.FBESize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    this.writeInt32(this.FBEOffset, value.value)
    return this.FBESize
  }
}

exports.FinalModelEnumSimple = FinalModelEnumSimple

/**
 * EnumTyped enum
 */
class EnumTyped {
  /**
   * Initialize enum with a given value
   * @param {EnumTyped|number|Int64|UInt64=} value Enum value, defaults is 0
   * @constructor
   */
  constructor (value = 0) {
    if (value instanceof EnumTyped) {
      this.value = value.value
    } else {
      this.value = value
    }
  }

  /**
   * Is this enum equal to other one?
   * @this {!EnumTyped}
   * @param {!EnumTyped} other Other enum
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof EnumTyped)) {
      throw new TypeError('Instance of EnumTyped is required!')
    }
    return this.value === other.value
  }

  /**
   * Get enum value
   * @this {!EnumTyped}
   * @returns {!number|!Int64|!UInt64} Enum value
   */
  valueOf () {
    return this.value
  }

  /**
   * Convert enum to string
   * @this {!EnumTyped}
   * @returns {!string} Enum value string
   */
  toString () {
    if (this.value === EnumTyped.ENUM_VALUE_0.value) {
      return 'ENUM_VALUE_0'
    }
    if (this.value === EnumTyped.ENUM_VALUE_1.value) {
      return 'ENUM_VALUE_1'
    }
    if (this.value === EnumTyped.ENUM_VALUE_2.value) {
      return 'ENUM_VALUE_2'
    }
    if (this.value === EnumTyped.ENUM_VALUE_3.value) {
      return 'ENUM_VALUE_3'
    }
    if (this.value === EnumTyped.ENUM_VALUE_4.value) {
      return 'ENUM_VALUE_4'
    }
    if (this.value === EnumTyped.ENUM_VALUE_5.value) {
      return 'ENUM_VALUE_5'
    }
    return '<unknown>'
  }

  /**
   * Inspect enum
   * @this {!EnumTyped}
   * @returns {!string} Enum value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert enum to JSON
   * @this {!EnumTyped}
   * @returns {!number} Enum value for JSON
   */
  toJSON () {
    return this.value
  }

  /**
   * Create enum from object value
   * @param {!number} other Object value
   * @returns {!EnumTyped} Created enum
   */
  static fromObject (other) {
    return new EnumTyped(other)
  }
}

// noinspection PointlessArithmeticExpressionJS
EnumTyped.ENUM_VALUE_0 = new EnumTyped(0 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumTyped.ENUM_VALUE_1 = new EnumTyped('1'.charCodeAt(0) + 0)
// noinspection PointlessArithmeticExpressionJS
EnumTyped.ENUM_VALUE_2 = new EnumTyped('1'.charCodeAt(0) + 1)
// noinspection PointlessArithmeticExpressionJS
EnumTyped.ENUM_VALUE_3 = new EnumTyped('3'.charCodeAt(0) + 0)
// noinspection PointlessArithmeticExpressionJS
EnumTyped.ENUM_VALUE_4 = new EnumTyped('3'.charCodeAt(0) + 1)
// noinspection PointlessArithmeticExpressionJS
EnumTyped.ENUM_VALUE_5 = new EnumTyped(EnumTyped.ENUM_VALUE_3)

exports.EnumTyped = EnumTyped

/**
 * Fast Binary Encoding EnumTyped field model class
 */
class FieldModelEnumTyped extends fbe.FieldModel {
  /**
   * Get the field size
   * @this {!FieldModelEnumTyped}
   * @returns {!number} Field size
   */
  get FBESize () {
    return 1
  }

  /**
   * Get the value
   * @this {!FieldModelEnumTyped}
   * @param {EnumTyped=} defaults Default value, defaults is new EnumTyped()
   * @returns {!EnumTyped} Result value
   */
  get (defaults = new EnumTyped()) {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return defaults
    }

    return new EnumTyped(this.readUInt8(this.FBEOffset))
  }

  /**
   * Set the value
   * @this {!FieldModelEnumTyped}
   * @param {!EnumTyped} value Value
   */
  set (value) {
    console.assert(((this._buffer.offset + this.FBEOffset + this.FBESize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return
    }

    this.writeUInt8(this.FBEOffset, value.value)
  }
}
exports.FieldModelEnumTyped = FieldModelEnumTyped

/**
 * Fast Binary Encoding EnumTyped final model class
 */
class FinalModelEnumTyped extends fbe.FinalModel {
  /**
   * Get the allocation size
   * @this {!FinalModelEnumTyped}
   * @param {!EnumTyped} value Value
   * @returns {!number} Allocation size
   */
  FBEAllocationSize (value) {
    return this.FBESize
  }

  /**
   * Get the final size
   * @this {!FieldModelEnumTyped}
   * @returns {!number} Final size
   */
  get FBESize () {
    return 1
  }

  /**
   * Check if the value is valid
   * @this {!FinalModelEnumTyped}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return Number.MAX_SAFE_INTEGER
    }

    return this.FBESize
  }

  /**
   * Get the value
   * @this {!FieldModelEnumTyped}
   * @returns {!object} Result value and its size
   */
  get () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return { value: new EnumTyped(), size: 0 }
    }

    return { value: new EnumTyped(this.readUInt8(this.FBEOffset)), size: this.FBESize }
  }

  /**
   * Set the value
   * @this {!FieldModelEnumTyped}
   * @param {!EnumTyped} value Value
   * @returns {!number} Final model size
   */
  set (value) {
    console.assert(((this._buffer.offset + this.FBEOffset + this.FBESize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    this.writeUInt8(this.FBEOffset, value.value)
    return this.FBESize
  }
}

exports.FinalModelEnumTyped = FinalModelEnumTyped

/**
 * FlagsSimple flags
 */
class FlagsSimple {
  /**
   * Initialize flags with a given value
   * @param {FlagsSimple|number|Int64|UInt64=} value Flags value, defaults is 0
   * @constructor
   */
  constructor (value = 0) {
    if (value instanceof FlagsSimple) {
      this.value = value.value
    } else {
      this.value = value
    }
  }

  /**
   * Check for the given flags set state
   * @this {!FlagsSimple}
   * @param {!FlagsSimple|!number|!Int64|!UInt64} flags Flags
   * @returns {!boolean} Flags set state
   */
  hasFlags (flags) {
    if (flags instanceof FlagsSimple) {
      flags = flags.value
    }
    return ((this.value & flags) !== 0) && ((this.value & flags) === flags)
  }

  /**
   * Set the given flags
   * @this {!FlagsSimple}
   * @param {!FlagsSimple|!number|!Int64|!UInt64} flags Flags
   */
  setFlags (flags) {
    if (flags instanceof FlagsSimple) {
      flags = flags.value
    }
    this.value |= flags
    return this
  }

  /**
   * Remove the given flags
   * @this {!FlagsSimple}
   * @param {!FlagsSimple|!number|!Int64|!UInt64} flags Flags
   */
  removeFlags (flags) {
    if (flags instanceof FlagsSimple) {
      flags = flags.value
    }
    this.value &= ~flags
    return this
  }

  /**
   * Is this flags equal to other one?
   * @this {!FlagsSimple}
   * @param {!FlagsSimple} other Other flags
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof FlagsSimple)) {
      throw new TypeError('Instance of FlagsSimple is required!')
    }
    return this.value === other.value
  }

  /**
   * Get flags value
   * @this {!FlagsSimple}
   * @returns {!number|!Int64|!UInt64} Flags value
   */
  valueOf () {
    return this.value
  }

  /**
   * Convert flags to string
   * @this {!FlagsSimple}
   * @returns {!string} Flags value string
   */
  toString () {
    let result = ''
    let first = true
    if ((this.value & FlagsSimple.FLAG_VALUE_0.value) && ((this.value & FlagsSimple.FLAG_VALUE_0.value) === FlagsSimple.FLAG_VALUE_0.value)) {
      result += (first ? '' : '|') + 'FLAG_VALUE_0'
      // noinspection JSUnusedAssignment
      first = false
    }
    if ((this.value & FlagsSimple.FLAG_VALUE_1.value) && ((this.value & FlagsSimple.FLAG_VALUE_1.value) === FlagsSimple.FLAG_VALUE_1.value)) {
      result += (first ? '' : '|') + 'FLAG_VALUE_1'
      // noinspection JSUnusedAssignment
      first = false
    }
    if ((this.value & FlagsSimple.FLAG_VALUE_2.value) && ((this.value & FlagsSimple.FLAG_VALUE_2.value) === FlagsSimple.FLAG_VALUE_2.value)) {
      result += (first ? '' : '|') + 'FLAG_VALUE_2'
      // noinspection JSUnusedAssignment
      first = false
    }
    if ((this.value & FlagsSimple.FLAG_VALUE_3.value) && ((this.value & FlagsSimple.FLAG_VALUE_3.value) === FlagsSimple.FLAG_VALUE_3.value)) {
      result += (first ? '' : '|') + 'FLAG_VALUE_3'
      // noinspection JSUnusedAssignment
      first = false
    }
    if ((this.value & FlagsSimple.FLAG_VALUE_4.value) && ((this.value & FlagsSimple.FLAG_VALUE_4.value) === FlagsSimple.FLAG_VALUE_4.value)) {
      result += (first ? '' : '|') + 'FLAG_VALUE_4'
      // noinspection JSUnusedAssignment
      first = false
    }
    if ((this.value & FlagsSimple.FLAG_VALUE_5.value) && ((this.value & FlagsSimple.FLAG_VALUE_5.value) === FlagsSimple.FLAG_VALUE_5.value)) {
      result += (first ? '' : '|') + 'FLAG_VALUE_5'
      // noinspection JSUnusedAssignment
      first = false
    }
    return result
  }

  /**
   * Inspect flags
   * @this {!FlagsSimple}
   * @returns {!string} Flags value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert flags to JSON
   * @this {!FlagsSimple}
   * @returns {!number} Flags value for JSON
   */
  toJSON () {
    return this.value
  }

  /**
   * Create flags from number flags representation
   * @param {!number} flags Number flags representation
   * @returns {!FlagsSimple} Created flags
   */
  static fromFlags (flags) {
    return new FlagsSimple(flags)
  }

  /**
   * Create flags from object value
   * @param {!number} other Object value
   * @returns {!FlagsSimple} Created flags
   */
  static fromObject (other) {
    return new FlagsSimple(other)
  }
}

// noinspection PointlessArithmeticExpressionJS
FlagsSimple.FLAG_VALUE_0 = new FlagsSimple(0x0 + 0)
// noinspection PointlessArithmeticExpressionJS
FlagsSimple.FLAG_VALUE_1 = new FlagsSimple(0x1 + 0)
// noinspection PointlessArithmeticExpressionJS
FlagsSimple.FLAG_VALUE_2 = new FlagsSimple(0x2 + 0)
// noinspection PointlessArithmeticExpressionJS
FlagsSimple.FLAG_VALUE_3 = new FlagsSimple(0x4 + 0)
// noinspection PointlessArithmeticExpressionJS
FlagsSimple.FLAG_VALUE_4 = new FlagsSimple(FlagsSimple.FLAG_VALUE_3)
// noinspection PointlessArithmeticExpressionJS
FlagsSimple.FLAG_VALUE_5 = new FlagsSimple(FlagsSimple.FLAG_VALUE_1 | FlagsSimple.FLAG_VALUE_3)

exports.FlagsSimple = FlagsSimple

/**
 * Fast Binary Encoding FlagsSimple field model class
 */
class FieldModelFlagsSimple extends fbe.FieldModel {
  /**
   * Get the field size
   * @this {!FieldModelFlagsSimple}
   * @returns {!number} Field size
   */
  get FBESize () {
    return 4
  }

  /**
   * Get the value
   * @this {!FieldModelFlagsSimple}
   * @param {FlagsSimple=} defaults Default value, defaults is new FlagsSimple()
   * @returns {!FlagsSimple} Result value
   */
  get (defaults = new FlagsSimple()) {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return defaults
    }

    return new FlagsSimple(this.readInt32(this.FBEOffset))
  }

  /**
   * Set the value
   * @this {!FieldModelFlagsSimple}
   * @param {!FlagsSimple} value Value
   */
  set (value) {
    console.assert(((this._buffer.offset + this.FBEOffset + this.FBESize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return
    }

    this.writeInt32(this.FBEOffset, value.value)
  }
}

exports.FieldModelFlagsSimple = FieldModelFlagsSimple

/**
 * Fast Binary Encoding FlagsSimple final model class
 */
class FinalModelFlagsSimple extends fbe.FinalModel {
  /**
   * Get the allocation size
   * @this {!FinalModelFlagsSimple}
   * @param {!FlagsSimple} value Value
   * @returns {!number} Allocation size
   */
  FBEAllocationSize (value) {
    return this.FBESize
  }

  /**
   * Get the final size
   * @this {!FieldModelFlagsSimple}
   * @returns {!number} Final size
   */
  get FBESize () {
    return 4
  }

  /**
   * Check if the value is valid
   * @this {!FinalModelFlagsSimple}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return Number.MAX_SAFE_INTEGER
    }

    return this.FBESize
  }

  /**
   * Get the value
   * @this {!FieldModelFlagsSimple}
   * @returns {!object} Result value and its size
   */
  get () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return { value: new FlagsSimple(), size: 0 }
    }

    return { value: new FlagsSimple(this.readInt32(this.FBEOffset)), size: this.FBESize }
  }

  /**
   * Set the value
   * @this {!FieldModelFlagsSimple}
   * @param {!FlagsSimple} value Value
   * @returns {!number} Final model size
   */
  set (value) {
    console.assert(((this._buffer.offset + this.FBEOffset + this.FBESize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    this.writeInt32(this.FBEOffset, value.value)
    return this.FBESize
  }
}

exports.FinalModelFlagsSimple = FinalModelFlagsSimple

/**
 * FlagsTyped flags
 */
class FlagsTyped {
  /**
   * Initialize flags with a given value
   * @param {FlagsTyped|number|Int64|UInt64=} value Flags value, defaults is 0
   * @constructor
   */
  constructor (value = 0) {
    if (value instanceof FlagsTyped) {
      this.value = value.value
    } else {
      this.value = value
    }
  }

  /**
   * Check for the given flags set state
   * @this {!FlagsTyped}
   * @param {!FlagsTyped|!number|!Int64|!UInt64} flags Flags
   * @returns {!boolean} Flags set state
   */
  hasFlags (flags) {
    if (flags instanceof FlagsTyped) {
      flags = flags.value
    }
    return ((this.value & flags) !== 0) && ((this.value & flags) === flags)
  }

  /**
   * Set the given flags
   * @this {!FlagsTyped}
   * @param {!FlagsTyped|!number|!Int64|!UInt64} flags Flags
   */
  setFlags (flags) {
    if (flags instanceof FlagsTyped) {
      flags = flags.value
    }
    this.value |= flags
    return this
  }

  /**
   * Remove the given flags
   * @this {!FlagsTyped}
   * @param {!FlagsTyped|!number|!Int64|!UInt64} flags Flags
   */
  removeFlags (flags) {
    if (flags instanceof FlagsTyped) {
      flags = flags.value
    }
    this.value &= ~flags
    return this
  }

  /**
   * Is this flags equal to other one?
   * @this {!FlagsTyped}
   * @param {!FlagsTyped} other Other flags
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof FlagsTyped)) {
      throw new TypeError('Instance of FlagsTyped is required!')
    }
    return this.value === other.value
  }

  /**
   * Get flags value
   * @this {!FlagsTyped}
   * @returns {!number|!Int64|!UInt64} Flags value
   */
  valueOf () {
    return this.value
  }

  /**
   * Convert flags to string
   * @this {!FlagsTyped}
   * @returns {!string} Flags value string
   */
  toString () {
    let result = ''
    let first = true
    if ((this.value & FlagsTyped.FLAG_VALUE_0.value) && ((this.value & FlagsTyped.FLAG_VALUE_0.value) === FlagsTyped.FLAG_VALUE_0.value)) {
      result += (first ? '' : '|') + 'FLAG_VALUE_0'
      // noinspection JSUnusedAssignment
      first = false
    }
    if ((this.value & FlagsTyped.FLAG_VALUE_1.value) && ((this.value & FlagsTyped.FLAG_VALUE_1.value) === FlagsTyped.FLAG_VALUE_1.value)) {
      result += (first ? '' : '|') + 'FLAG_VALUE_1'
      // noinspection JSUnusedAssignment
      first = false
    }
    if ((this.value & FlagsTyped.FLAG_VALUE_2.value) && ((this.value & FlagsTyped.FLAG_VALUE_2.value) === FlagsTyped.FLAG_VALUE_2.value)) {
      result += (first ? '' : '|') + 'FLAG_VALUE_2'
      // noinspection JSUnusedAssignment
      first = false
    }
    if ((this.value & FlagsTyped.FLAG_VALUE_3.value) && ((this.value & FlagsTyped.FLAG_VALUE_3.value) === FlagsTyped.FLAG_VALUE_3.value)) {
      result += (first ? '' : '|') + 'FLAG_VALUE_3'
      // noinspection JSUnusedAssignment
      first = false
    }
    if ((this.value & FlagsTyped.FLAG_VALUE_4.value) && ((this.value & FlagsTyped.FLAG_VALUE_4.value) === FlagsTyped.FLAG_VALUE_4.value)) {
      result += (first ? '' : '|') + 'FLAG_VALUE_4'
      // noinspection JSUnusedAssignment
      first = false
    }
    if ((this.value & FlagsTyped.FLAG_VALUE_5.value) && ((this.value & FlagsTyped.FLAG_VALUE_5.value) === FlagsTyped.FLAG_VALUE_5.value)) {
      result += (first ? '' : '|') + 'FLAG_VALUE_5'
      // noinspection JSUnusedAssignment
      first = false
    }
    if ((this.value & FlagsTyped.FLAG_VALUE_6.value) && ((this.value & FlagsTyped.FLAG_VALUE_6.value) === FlagsTyped.FLAG_VALUE_6.value)) {
      result += (first ? '' : '|') + 'FLAG_VALUE_6'
      // noinspection JSUnusedAssignment
      first = false
    }
    if ((this.value & FlagsTyped.FLAG_VALUE_7.value) && ((this.value & FlagsTyped.FLAG_VALUE_7.value) === FlagsTyped.FLAG_VALUE_7.value)) {
      result += (first ? '' : '|') + 'FLAG_VALUE_7'
      // noinspection JSUnusedAssignment
      first = false
    }
    if ((this.value & FlagsTyped.FLAG_VALUE_8.value) && ((this.value & FlagsTyped.FLAG_VALUE_8.value) === FlagsTyped.FLAG_VALUE_8.value)) {
      result += (first ? '' : '|') + 'FLAG_VALUE_8'
      // noinspection JSUnusedAssignment
      first = false
    }
    if ((this.value & FlagsTyped.FLAG_VALUE_9.value) && ((this.value & FlagsTyped.FLAG_VALUE_9.value) === FlagsTyped.FLAG_VALUE_9.value)) {
      result += (first ? '' : '|') + 'FLAG_VALUE_9'
      // noinspection JSUnusedAssignment
      first = false
    }
    return result
  }

  /**
   * Inspect flags
   * @this {!FlagsTyped}
   * @returns {!string} Flags value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert flags to JSON
   * @this {!FlagsTyped}
   * @returns {!number} Flags value for JSON
   */
  toJSON () {
    return this.value
  }

  /**
   * Create flags from number flags representation
   * @param {!number} flags Number flags representation
   * @returns {!FlagsTyped} Created flags
   */
  static fromFlags (flags) {
    return new FlagsTyped(flags)
  }

  /**
   * Create flags from object value
   * @param {!number} other Object value
   * @returns {!FlagsTyped} Created flags
   */
  static fromObject (other) {
    return new FlagsTyped(other)
  }
}

// noinspection PointlessArithmeticExpressionJS
FlagsTyped.FLAG_VALUE_0 = new FlagsTyped(0x00 + 0)
// noinspection PointlessArithmeticExpressionJS
FlagsTyped.FLAG_VALUE_1 = new FlagsTyped(0x01 + 0)
// noinspection PointlessArithmeticExpressionJS
FlagsTyped.FLAG_VALUE_2 = new FlagsTyped(0x02 + 0)
// noinspection PointlessArithmeticExpressionJS
FlagsTyped.FLAG_VALUE_3 = new FlagsTyped(0x04 + 0)
// noinspection PointlessArithmeticExpressionJS
FlagsTyped.FLAG_VALUE_4 = new FlagsTyped(0x08 + 0)
// noinspection PointlessArithmeticExpressionJS
FlagsTyped.FLAG_VALUE_5 = new FlagsTyped(0x10 + 0)
// noinspection PointlessArithmeticExpressionJS
FlagsTyped.FLAG_VALUE_6 = new FlagsTyped(0x20 + 0)
// noinspection PointlessArithmeticExpressionJS
FlagsTyped.FLAG_VALUE_7 = new FlagsTyped(0x40 + 0)
// noinspection PointlessArithmeticExpressionJS
FlagsTyped.FLAG_VALUE_8 = new FlagsTyped(FlagsTyped.FLAG_VALUE_7)
// noinspection PointlessArithmeticExpressionJS
FlagsTyped.FLAG_VALUE_9 = new FlagsTyped(FlagsTyped.FLAG_VALUE_2 | FlagsTyped.FLAG_VALUE_4 | FlagsTyped.FLAG_VALUE_6)

exports.FlagsTyped = FlagsTyped

/**
 * Fast Binary Encoding FlagsTyped field model class
 */
class FieldModelFlagsTyped extends fbe.FieldModel {
  /**
   * Get the field size
   * @this {!FieldModelFlagsTyped}
   * @returns {!number} Field size
   */
  get FBESize () {
    return 8
  }

  /**
   * Get the value
   * @this {!FieldModelFlagsTyped}
   * @param {FlagsTyped=} defaults Default value, defaults is new FlagsTyped()
   * @returns {!FlagsTyped} Result value
   */
  get (defaults = new FlagsTyped()) {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return defaults
    }

    return new FlagsTyped(this.readUInt64(this.FBEOffset).toNumber())
  }

  /**
   * Set the value
   * @this {!FieldModelFlagsTyped}
   * @param {!FlagsTyped} value Value
   */
  set (value) {
    console.assert(((this._buffer.offset + this.FBEOffset + this.FBESize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return
    }

    this.writeUInt64(this.FBEOffset, UInt64.fromNumber(value.value))
  }
}

exports.FieldModelFlagsTyped = FieldModelFlagsTyped

/**
 * Fast Binary Encoding FlagsTyped final model class
 */
class FinalModelFlagsTyped extends fbe.FinalModel {
  /**
   * Get the allocation size
   * @this {!FinalModelFlagsTyped}
   * @param {!FlagsTyped} value Value
   * @returns {!number} Allocation size
   */
  FBEAllocationSize (value) {
    return this.FBESize
  }

  /**
   * Get the final size
   * @this {!FieldModelFlagsTyped}
   * @returns {!number} Final size
   */
  get FBESize () {
    return 8
  }

  /**
   * Check if the value is valid
   * @this {!FinalModelFlagsTyped}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return Number.MAX_SAFE_INTEGER
    }

    return this.FBESize
  }

  /**
   * Get the value
   * @this {!FieldModelFlagsTyped}
   * @returns {!object} Result value and its size
   */
  get () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return { value: new FlagsTyped(), size: 0 }
    }

    return { value: new FlagsTyped(this.readUInt64(this.FBEOffset).toNumber()), size: this.FBESize }
  }

  /**
   * Set the value
   * @this {!FieldModelFlagsTyped}
   * @param {!FlagsTyped} value Value
   * @returns {!number} Final model size
   */
  set (value) {
    console.assert(((this._buffer.offset + this.FBEOffset + this.FBESize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    this.writeUInt64(this.FBEOffset, UInt64.fromNumber(value.value))
    return this.FBESize
  }
}

exports.FinalModelFlagsTyped = FinalModelFlagsTyped

/**
 * StructSimple struct
 */
class StructSimple {
  /**
   * Initialize struct
   * @param {!number=} uid
   * @param {!boolean=} f1
   * @param {!boolean=} f2
   * @param {!number=} f3
   * @param {!number=} f4
   * @param {!string=} f5
   * @param {!string=} f6
   * @param {!string=} f7
   * @param {!string=} f8
   * @param {!number=} f9
   * @param {!number=} f10
   * @param {!number=} f11
   * @param {!number=} f12
   * @param {!number=} f13
   * @param {!number=} f14
   * @param {!number=} f15
   * @param {!number=} f16
   * @param {!number=} f17
   * @param {!number=} f18
   * @param {!number=} f19
   * @param {!number=} f20
   * @param {!number=} f21
   * @param {!number=} f22
   * @param {!number=} f23
   * @param {!number=} f24
   * @param {!number=} f25
   * @param {!number=} f26
   * @param {!number=} f27
   * @param {!number=} f28
   * @param {!Big=} f29
   * @param {!Big=} f30
   * @param {!string=} f31
   * @param {!string=} f32
   * @param {!Date=} f33
   * @param {!Date=} f34
   * @param {!Date=} f35
   * @param {!UUID=} f36
   * @param {!UUID=} f37
   * @param {!UUID=} f38
   * @param {!proto.OrderSide=} f39
   * @param {!proto.OrderType=} f40
   * @param {!proto.Order=} f41
   * @param {!proto.Balance=} f42
   * @param {!proto.State=} f43
   * @param {!proto.Account=} f44
   * @constructor
   */
  constructor (uid = 0, f1 = false, f2 = true, f3 = 0, f4 = 255, f5 = '\0', f6 = '!', f7 = '\0', f8 = String.fromCharCode(0x0444), f9 = 0, f10 = 127, f11 = 0, f12 = 255, f13 = 0, f14 = 32767, f15 = 0, f16 = 65535, f17 = 0, f18 = 2147483647, f19 = 0, f20 = 0xFFFFFFFF, f21 = new Int64(0, 0), f22 = new Int64(4294967295, 2147483647), f23 = new UInt64(0, 0), f24 = new UInt64(4294967295, 4294967295), f25 = 0.0, f26 = 123.456, f27 = 0.0, f28 = -123.456e+123, f29 = new Big(0), f30 = new Big('123456.123456'), f31 = '', f32 = 'Initial string!', f33 = new Date(0), f34 = new Date(0), f35 = new Date(Date.now()), f36 = new UUID(), f37 = UUID.sequential(), f38 = new UUID('123e4567-e89b-12d3-a456-426655440000'), f39 = new proto.OrderSide(), f40 = new proto.OrderType(), f41 = new proto.Order(), f42 = new proto.Balance(), f43 = new proto.State(), f44 = new proto.Account()) {
    this.uid = uid
    this.f1 = f1
    this.f2 = f2
    this.f3 = f3
    this.f4 = f4
    this.f5 = f5
    this.f6 = f6
    this.f7 = f7
    this.f8 = f8
    this.f9 = f9
    this.f10 = f10
    this.f11 = f11
    this.f12 = f12
    this.f13 = f13
    this.f14 = f14
    this.f15 = f15
    this.f16 = f16
    this.f17 = f17
    this.f18 = f18
    this.f19 = f19
    this.f20 = f20
    this.f21 = f21
    this.f22 = f22
    this.f23 = f23
    this.f24 = f24
    this.f25 = f25
    this.f26 = f26
    this.f27 = f27
    this.f28 = f28
    this.f29 = f29
    this.f30 = f30
    this.f31 = f31
    this.f32 = f32
    this.f33 = f33
    this.f34 = f34
    this.f35 = f35
    this.f36 = f36
    this.f37 = f37
    this.f38 = f38
    this.f39 = f39
    this.f40 = f40
    this.f41 = f41
    this.f42 = f42
    this.f43 = f43
    this.f44 = f44
  }

  /**
   * Copy struct
   * @this {!StructSimple}
   * @param {!StructSimple} other Other struct
   * @returns {!StructSimple} This struct
   */
  copy (other) {
    if (other.uid != null) {
      this.uid = other.uid
    } else {
      this.uid = undefined
    }
    if (other.f1 != null) {
      this.f1 = other.f1
    } else {
      this.f1 = undefined
    }
    if (other.f2 != null) {
      this.f2 = other.f2
    } else {
      this.f2 = undefined
    }
    if (other.f3 != null) {
      this.f3 = other.f3
    } else {
      this.f3 = undefined
    }
    if (other.f4 != null) {
      this.f4 = other.f4
    } else {
      this.f4 = undefined
    }
    if (other.f5 != null) {
      this.f5 = other.f5
    } else {
      this.f5 = undefined
    }
    if (other.f6 != null) {
      this.f6 = other.f6
    } else {
      this.f6 = undefined
    }
    if (other.f7 != null) {
      this.f7 = other.f7
    } else {
      this.f7 = undefined
    }
    if (other.f8 != null) {
      this.f8 = other.f8
    } else {
      this.f8 = undefined
    }
    if (other.f9 != null) {
      this.f9 = other.f9
    } else {
      this.f9 = undefined
    }
    if (other.f10 != null) {
      this.f10 = other.f10
    } else {
      this.f10 = undefined
    }
    if (other.f11 != null) {
      this.f11 = other.f11
    } else {
      this.f11 = undefined
    }
    if (other.f12 != null) {
      this.f12 = other.f12
    } else {
      this.f12 = undefined
    }
    if (other.f13 != null) {
      this.f13 = other.f13
    } else {
      this.f13 = undefined
    }
    if (other.f14 != null) {
      this.f14 = other.f14
    } else {
      this.f14 = undefined
    }
    if (other.f15 != null) {
      this.f15 = other.f15
    } else {
      this.f15 = undefined
    }
    if (other.f16 != null) {
      this.f16 = other.f16
    } else {
      this.f16 = undefined
    }
    if (other.f17 != null) {
      this.f17 = other.f17
    } else {
      this.f17 = undefined
    }
    if (other.f18 != null) {
      this.f18 = other.f18
    } else {
      this.f18 = undefined
    }
    if (other.f19 != null) {
      this.f19 = other.f19
    } else {
      this.f19 = undefined
    }
    if (other.f20 != null) {
      this.f20 = other.f20
    } else {
      this.f20 = undefined
    }
    if (other.f21 != null) {
      this.f21 = Int64.fromNumber(other.f21)
    } else {
      this.f21 = undefined
    }
    if (other.f22 != null) {
      this.f22 = Int64.fromNumber(other.f22)
    } else {
      this.f22 = undefined
    }
    if (other.f23 != null) {
      this.f23 = UInt64.fromNumber(other.f23)
    } else {
      this.f23 = undefined
    }
    if (other.f24 != null) {
      this.f24 = UInt64.fromNumber(other.f24)
    } else {
      this.f24 = undefined
    }
    if (other.f25 != null) {
      this.f25 = other.f25
    } else {
      this.f25 = undefined
    }
    if (other.f26 != null) {
      this.f26 = other.f26
    } else {
      this.f26 = undefined
    }
    if (other.f27 != null) {
      this.f27 = other.f27
    } else {
      this.f27 = undefined
    }
    if (other.f28 != null) {
      this.f28 = other.f28
    } else {
      this.f28 = undefined
    }
    if (other.f29 != null) {
      this.f29 = new Big(other.f29)
    } else {
      this.f29 = undefined
    }
    if (other.f30 != null) {
      this.f30 = new Big(other.f30)
    } else {
      this.f30 = undefined
    }
    if (other.f31 != null) {
      this.f31 = other.f31
    } else {
      this.f31 = undefined
    }
    if (other.f32 != null) {
      this.f32 = other.f32
    } else {
      this.f32 = undefined
    }
    if (other.f33 != null) {
      if (other.f33 instanceof Date) {
        this.f33 = new Date(other.f33.getTime())
      } else {
        this.f33 = new Date(Math.round(other.f33 / 1000000))
      }
    } else {
      this.f33 = undefined
    }
    if (other.f34 != null) {
      if (other.f34 instanceof Date) {
        this.f34 = new Date(other.f34.getTime())
      } else {
        this.f34 = new Date(Math.round(other.f34 / 1000000))
      }
    } else {
      this.f34 = undefined
    }
    if (other.f35 != null) {
      if (other.f35 instanceof Date) {
        this.f35 = new Date(other.f35.getTime())
      } else {
        this.f35 = new Date(Math.round(other.f35 / 1000000))
      }
    } else {
      this.f35 = undefined
    }
    if (other.f36 != null) {
      this.f36 = new UUID(other.f36)
    } else {
      this.f36 = undefined
    }
    if (other.f37 != null) {
      this.f37 = new UUID(other.f37)
    } else {
      this.f37 = undefined
    }
    if (other.f38 != null) {
      this.f38 = new UUID(other.f38)
    } else {
      this.f38 = undefined
    }
    if (other.f39 != null) {
      this.f39 = proto.OrderSide.fromObject(other.f39)
    } else {
      this.f39 = undefined
    }
    if (other.f40 != null) {
      this.f40 = proto.OrderType.fromObject(other.f40)
    } else {
      this.f40 = undefined
    }
    if (other.f41 != null) {
      this.f41 = proto.Order.fromObject(other.f41)
    } else {
      this.f41 = undefined
    }
    if (other.f42 != null) {
      this.f42 = proto.Balance.fromObject(other.f42)
    } else {
      this.f42 = undefined
    }
    if (other.f43 != null) {
      this.f43 = proto.State.fromObject(other.f43)
    } else {
      this.f43 = undefined
    }
    if (other.f44 != null) {
      this.f44 = proto.Account.fromObject(other.f44)
    } else {
      this.f44 = undefined
    }
    return this
  }

  /**
   * Clone struct
   * @this {!StructSimple}
   * @returns {!StructSimple} Cloned struct
   */
  clone () {
    // Serialize the struct to the FBE stream
    let writer = new StructSimpleModel(new fbe.WriteBuffer())
    writer.serialize(this)

    // Deserialize the struct from the FBE stream
    let reader = new StructSimpleModel(new fbe.ReadBuffer())
    reader.attachBuffer(writer.buffer)
    return reader.deserialize().value
  }

  /**
   * Is this struct equal to other one?
   * @this {!StructSimple}
   * @param {!StructSimple} other Other struct
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof StructSimple)) {
      throw new TypeError('Instance of StructSimple is required!')
    }
    // noinspection RedundantIfStatementJS
    if (this.uid === other.uid) {
      return false
    }
    return true
  }

  /**
   * Convert struct to string
   * @this {!StructSimple}
   * @returns {!string} Struct value string
   */
  toString () {
    let result = ''
    result += 'StructSimple('
    result += 'uid='
    result += this.uid.toString()
    result += ',f1='
    result += this.f1 ? 'true' : 'false'
    result += ',f2='
    result += this.f2 ? 'true' : 'false'
    result += ',f3='
    result += this.f3.toString()
    result += ',f4='
    result += this.f4.toString()
    result += ',f5='
    result += "'"
    result += this.f5.toString()
    result += "'"
    result += ',f6='
    result += "'"
    result += this.f6.toString()
    result += "'"
    result += ',f7='
    result += "'"
    result += this.f7.toString()
    result += "'"
    result += ',f8='
    result += "'"
    result += this.f8.toString()
    result += "'"
    result += ',f9='
    result += this.f9.toString()
    result += ',f10='
    result += this.f10.toString()
    result += ',f11='
    result += this.f11.toString()
    result += ',f12='
    result += this.f12.toString()
    result += ',f13='
    result += this.f13.toString()
    result += ',f14='
    result += this.f14.toString()
    result += ',f15='
    result += this.f15.toString()
    result += ',f16='
    result += this.f16.toString()
    result += ',f17='
    result += this.f17.toString()
    result += ',f18='
    result += this.f18.toString()
    result += ',f19='
    result += this.f19.toString()
    result += ',f20='
    result += this.f20.toString()
    result += ',f21='
    result += this.f21.toString()
    result += ',f22='
    result += this.f22.toString()
    result += ',f23='
    result += this.f23.toString()
    result += ',f24='
    result += this.f24.toString()
    result += ',f25='
    result += this.f25.toString()
    result += ',f26='
    result += this.f26.toString()
    result += ',f27='
    result += this.f27.toString()
    result += ',f28='
    result += this.f28.toString()
    result += ',f29='
    if (this.f29 != null) {
      result += this.f29.toFixed()
    } else {
      result += 'null'
    }
    result += ',f30='
    if (this.f30 != null) {
      result += this.f30.toFixed()
    } else {
      result += 'null'
    }
    result += ',f31='
    if (this.f31 != null) {
      result += '"'
      result += this.f31.toString()
      result += '"'
    } else {
      result += 'null'
    }
    result += ',f32='
    if (this.f32 != null) {
      result += '"'
      result += this.f32.toString()
      result += '"'
    } else {
      result += 'null'
    }
    result += ',f33='
    if (this.f33 != null) {
      result += this.f33.getTime() * 1000000
    } else {
      result += 'null'
    }
    result += ',f34='
    if (this.f34 != null) {
      result += this.f34.getTime() * 1000000
    } else {
      result += 'null'
    }
    result += ',f35='
    if (this.f35 != null) {
      result += this.f35.getTime() * 1000000
    } else {
      result += 'null'
    }
    result += ',f36='
    if (this.f36 != null) {
      result += '"'
      result += this.f36.toString()
      result += '"'
    } else {
      result += 'null'
    }
    result += ',f37='
    if (this.f37 != null) {
      result += '"'
      result += this.f37.toString()
      result += '"'
    } else {
      result += 'null'
    }
    result += ',f38='
    if (this.f38 != null) {
      result += '"'
      result += this.f38.toString()
      result += '"'
    } else {
      result += 'null'
    }
    result += ',f39='
    result += this.f39.toString()
    result += ',f40='
    result += this.f40.toString()
    result += ',f41='
    result += this.f41.toString()
    result += ',f42='
    result += this.f42.toString()
    result += ',f43='
    result += this.f43.toString()
    result += ',f44='
    result += this.f44.toString()
    result += ')'
    return result
  }

  /**
   * Inspect struct
   * @this {!StructSimple}
   * @returns {!string} Struct value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert struct to JSON
   * @this {!StructSimple}
   * @returns {!object} Struct value for JSON
   */
  toJSON () {
    return {
      uid: ((this.uid != null) ? this.uid : null),
      f1: ((this.f1 != null) ? this.f1 : null),
      f2: ((this.f2 != null) ? this.f2 : null),
      f3: ((this.f3 != null) ? this.f3 : null),
      f4: ((this.f4 != null) ? this.f4 : null),
      f5: ((this.f5 != null) ? this.f5 : null),
      f6: ((this.f6 != null) ? this.f6 : null),
      f7: ((this.f7 != null) ? this.f7 : null),
      f8: ((this.f8 != null) ? this.f8 : null),
      f9: ((this.f9 != null) ? this.f9 : null),
      f10: ((this.f10 != null) ? this.f10 : null),
      f11: ((this.f11 != null) ? this.f11 : null),
      f12: ((this.f12 != null) ? this.f12 : null),
      f13: ((this.f13 != null) ? this.f13 : null),
      f14: ((this.f14 != null) ? this.f14 : null),
      f15: ((this.f15 != null) ? this.f15 : null),
      f16: ((this.f16 != null) ? this.f16 : null),
      f17: ((this.f17 != null) ? this.f17 : null),
      f18: ((this.f18 != null) ? this.f18 : null),
      f19: ((this.f19 != null) ? this.f19 : null),
      f20: ((this.f20 != null) ? this.f20 : null),
      f21: ((this.f21 != null) ? this.f21.toNumber() : null),
      f22: ((this.f22 != null) ? this.f22.toNumber() : null),
      f23: ((this.f23 != null) ? this.f23.toNumber() : null),
      f24: ((this.f24 != null) ? this.f24.toNumber() : null),
      f25: ((this.f25 != null) ? this.f25 : null),
      f26: ((this.f26 != null) ? this.f26 : null),
      f27: ((this.f27 != null) ? this.f27 : null),
      f28: ((this.f28 != null) ? this.f28 : null),
      f29: ((this.f29 != null) ? this.f29.toFixed() : null),
      f30: ((this.f30 != null) ? this.f30.toFixed() : null),
      f31: ((this.f31 != null) ? this.f31 : null),
      f32: ((this.f32 != null) ? this.f32 : null),
      f33: ((this.f33 != null) ? (this.f33.getTime() * 1000000) : null),
      f34: ((this.f34 != null) ? (this.f34.getTime() * 1000000) : null),
      f35: ((this.f35 != null) ? (this.f35.getTime() * 1000000) : null),
      f36: ((this.f36 != null) ? this.f36.toString() : null),
      f37: ((this.f37 != null) ? this.f37.toString() : null),
      f38: ((this.f38 != null) ? this.f38.toString() : null),
      f39: ((this.f39 != null) ? this.f39 : null),
      f40: ((this.f40 != null) ? this.f40 : null),
      f41: ((this.f41 != null) ? this.f41 : null),
      f42: ((this.f42 != null) ? this.f42 : null),
      f43: ((this.f43 != null) ? this.f43 : null),
      f44: ((this.f44 != null) ? this.f44 : null)
    }
  }

  /**
   * Convert JSON to struct
   * @param {!string} json JSON string
   * @returns {!object} Struct value for JSON
   */
  static fromJSON (json) {
    return StructSimple.fromObject(JSON.parse(json))
  }

  /**
   * Create struct from object value
   * @param {!StructSimple} other Object value
   * @returns {!StructSimple} Created struct
   */
  static fromObject (other) {
    return new StructSimple().copy(other)
  }
}

exports.StructSimple = StructSimple

/**
 * Fast Binary Encoding StructSimple field model class
 */
class FieldModelStructSimple extends fbe.FieldModel {
  /**
   * Initialize field model with the given buffer and offset
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Buffer
   * @param {!number} offset Offset
   * @constructor
   */
  constructor (buffer, offset) {
    super(buffer, offset)
    this._uid = new fbe.FieldModelInt32(buffer, 4 + 4)
    this._f1 = new fbe.FieldModelBool(buffer, this._uid.FBEOffset + this._uid.FBESize)
    this._f2 = new fbe.FieldModelBool(buffer, this._f1.FBEOffset + this._f1.FBESize)
    this._f3 = new fbe.FieldModelByte(buffer, this._f2.FBEOffset + this._f2.FBESize)
    this._f4 = new fbe.FieldModelByte(buffer, this._f3.FBEOffset + this._f3.FBESize)
    this._f5 = new fbe.FieldModelChar(buffer, this._f4.FBEOffset + this._f4.FBESize)
    this._f6 = new fbe.FieldModelChar(buffer, this._f5.FBEOffset + this._f5.FBESize)
    this._f7 = new fbe.FieldModelWChar(buffer, this._f6.FBEOffset + this._f6.FBESize)
    this._f8 = new fbe.FieldModelWChar(buffer, this._f7.FBEOffset + this._f7.FBESize)
    this._f9 = new fbe.FieldModelInt8(buffer, this._f8.FBEOffset + this._f8.FBESize)
    this._f10 = new fbe.FieldModelInt8(buffer, this._f9.FBEOffset + this._f9.FBESize)
    this._f11 = new fbe.FieldModelUInt8(buffer, this._f10.FBEOffset + this._f10.FBESize)
    this._f12 = new fbe.FieldModelUInt8(buffer, this._f11.FBEOffset + this._f11.FBESize)
    this._f13 = new fbe.FieldModelInt16(buffer, this._f12.FBEOffset + this._f12.FBESize)
    this._f14 = new fbe.FieldModelInt16(buffer, this._f13.FBEOffset + this._f13.FBESize)
    this._f15 = new fbe.FieldModelUInt16(buffer, this._f14.FBEOffset + this._f14.FBESize)
    this._f16 = new fbe.FieldModelUInt16(buffer, this._f15.FBEOffset + this._f15.FBESize)
    this._f17 = new fbe.FieldModelInt32(buffer, this._f16.FBEOffset + this._f16.FBESize)
    this._f18 = new fbe.FieldModelInt32(buffer, this._f17.FBEOffset + this._f17.FBESize)
    this._f19 = new fbe.FieldModelUInt32(buffer, this._f18.FBEOffset + this._f18.FBESize)
    this._f20 = new fbe.FieldModelUInt32(buffer, this._f19.FBEOffset + this._f19.FBESize)
    this._f21 = new fbe.FieldModelInt64(buffer, this._f20.FBEOffset + this._f20.FBESize)
    this._f22 = new fbe.FieldModelInt64(buffer, this._f21.FBEOffset + this._f21.FBESize)
    this._f23 = new fbe.FieldModelUInt64(buffer, this._f22.FBEOffset + this._f22.FBESize)
    this._f24 = new fbe.FieldModelUInt64(buffer, this._f23.FBEOffset + this._f23.FBESize)
    this._f25 = new fbe.FieldModelFloat(buffer, this._f24.FBEOffset + this._f24.FBESize)
    this._f26 = new fbe.FieldModelFloat(buffer, this._f25.FBEOffset + this._f25.FBESize)
    this._f27 = new fbe.FieldModelDouble(buffer, this._f26.FBEOffset + this._f26.FBESize)
    this._f28 = new fbe.FieldModelDouble(buffer, this._f27.FBEOffset + this._f27.FBESize)
    this._f29 = new fbe.FieldModelDecimal(buffer, this._f28.FBEOffset + this._f28.FBESize)
    this._f30 = new fbe.FieldModelDecimal(buffer, this._f29.FBEOffset + this._f29.FBESize)
    this._f31 = new fbe.FieldModelString(buffer, this._f30.FBEOffset + this._f30.FBESize)
    this._f32 = new fbe.FieldModelString(buffer, this._f31.FBEOffset + this._f31.FBESize)
    this._f33 = new fbe.FieldModelTimestamp(buffer, this._f32.FBEOffset + this._f32.FBESize)
    this._f34 = new fbe.FieldModelTimestamp(buffer, this._f33.FBEOffset + this._f33.FBESize)
    this._f35 = new fbe.FieldModelTimestamp(buffer, this._f34.FBEOffset + this._f34.FBESize)
    this._f36 = new fbe.FieldModelUUID(buffer, this._f35.FBEOffset + this._f35.FBESize)
    this._f37 = new fbe.FieldModelUUID(buffer, this._f36.FBEOffset + this._f36.FBESize)
    this._f38 = new fbe.FieldModelUUID(buffer, this._f37.FBEOffset + this._f37.FBESize)
    this._f39 = new proto.FieldModelOrderSide(buffer, this._f38.FBEOffset + this._f38.FBESize)
    this._f40 = new proto.FieldModelOrderType(buffer, this._f39.FBEOffset + this._f39.FBESize)
    this._f41 = new proto.FieldModelOrder(buffer, this._f40.FBEOffset + this._f40.FBESize)
    this._f42 = new proto.FieldModelBalance(buffer, this._f41.FBEOffset + this._f41.FBESize)
    this._f43 = new proto.FieldModelState(buffer, this._f42.FBEOffset + this._f42.FBESize)
    this._f44 = new proto.FieldModelAccount(buffer, this._f43.FBEOffset + this._f43.FBESize)
  }

  /**
   * Get the uid field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelInt32} uid field model
   */
  get uid () {
    return this._uid
  }

  /**
   * Get the f1 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelBool} f1 field model
   */
  get f1 () {
    return this._f1
  }

  /**
   * Get the f2 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelBool} f2 field model
   */
  get f2 () {
    return this._f2
  }

  /**
   * Get the f3 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelByte} f3 field model
   */
  get f3 () {
    return this._f3
  }

  /**
   * Get the f4 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelByte} f4 field model
   */
  get f4 () {
    return this._f4
  }

  /**
   * Get the f5 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelChar} f5 field model
   */
  get f5 () {
    return this._f5
  }

  /**
   * Get the f6 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelChar} f6 field model
   */
  get f6 () {
    return this._f6
  }

  /**
   * Get the f7 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelWChar} f7 field model
   */
  get f7 () {
    return this._f7
  }

  /**
   * Get the f8 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelWChar} f8 field model
   */
  get f8 () {
    return this._f8
  }

  /**
   * Get the f9 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelInt8} f9 field model
   */
  get f9 () {
    return this._f9
  }

  /**
   * Get the f10 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelInt8} f10 field model
   */
  get f10 () {
    return this._f10
  }

  /**
   * Get the f11 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelUInt8} f11 field model
   */
  get f11 () {
    return this._f11
  }

  /**
   * Get the f12 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelUInt8} f12 field model
   */
  get f12 () {
    return this._f12
  }

  /**
   * Get the f13 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelInt16} f13 field model
   */
  get f13 () {
    return this._f13
  }

  /**
   * Get the f14 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelInt16} f14 field model
   */
  get f14 () {
    return this._f14
  }

  /**
   * Get the f15 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelUInt16} f15 field model
   */
  get f15 () {
    return this._f15
  }

  /**
   * Get the f16 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelUInt16} f16 field model
   */
  get f16 () {
    return this._f16
  }

  /**
   * Get the f17 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelInt32} f17 field model
   */
  get f17 () {
    return this._f17
  }

  /**
   * Get the f18 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelInt32} f18 field model
   */
  get f18 () {
    return this._f18
  }

  /**
   * Get the f19 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelUInt32} f19 field model
   */
  get f19 () {
    return this._f19
  }

  /**
   * Get the f20 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelUInt32} f20 field model
   */
  get f20 () {
    return this._f20
  }

  /**
   * Get the f21 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelInt64} f21 field model
   */
  get f21 () {
    return this._f21
  }

  /**
   * Get the f22 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelInt64} f22 field model
   */
  get f22 () {
    return this._f22
  }

  /**
   * Get the f23 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelUInt64} f23 field model
   */
  get f23 () {
    return this._f23
  }

  /**
   * Get the f24 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelUInt64} f24 field model
   */
  get f24 () {
    return this._f24
  }

  /**
   * Get the f25 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelFloat} f25 field model
   */
  get f25 () {
    return this._f25
  }

  /**
   * Get the f26 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelFloat} f26 field model
   */
  get f26 () {
    return this._f26
  }

  /**
   * Get the f27 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelDouble} f27 field model
   */
  get f27 () {
    return this._f27
  }

  /**
   * Get the f28 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelDouble} f28 field model
   */
  get f28 () {
    return this._f28
  }

  /**
   * Get the f29 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelDecimal} f29 field model
   */
  get f29 () {
    return this._f29
  }

  /**
   * Get the f30 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelDecimal} f30 field model
   */
  get f30 () {
    return this._f30
  }

  /**
   * Get the f31 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelString} f31 field model
   */
  get f31 () {
    return this._f31
  }

  /**
   * Get the f32 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelString} f32 field model
   */
  get f32 () {
    return this._f32
  }

  /**
   * Get the f33 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelTimestamp} f33 field model
   */
  get f33 () {
    return this._f33
  }

  /**
   * Get the f34 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelTimestamp} f34 field model
   */
  get f34 () {
    return this._f34
  }

  /**
   * Get the f35 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelTimestamp} f35 field model
   */
  get f35 () {
    return this._f35
  }

  /**
   * Get the f36 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelUUID} f36 field model
   */
  get f36 () {
    return this._f36
  }

  /**
   * Get the f37 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelUUID} f37 field model
   */
  get f37 () {
    return this._f37
  }

  /**
   * Get the f38 field model
   * @this {!FieldModelStructSimple}
   * @returns {!fbe.FieldModelUUID} f38 field model
   */
  get f38 () {
    return this._f38
  }

  /**
   * Get the f39 field model
   * @this {!FieldModelStructSimple}
   * @returns {!proto.FieldModelOrderSide} f39 field model
   */
  get f39 () {
    return this._f39
  }

  /**
   * Get the f40 field model
   * @this {!FieldModelStructSimple}
   * @returns {!proto.FieldModelOrderType} f40 field model
   */
  get f40 () {
    return this._f40
  }

  /**
   * Get the f41 field model
   * @this {!FieldModelStructSimple}
   * @returns {!proto.FieldModelOrder} f41 field model
   */
  get f41 () {
    return this._f41
  }

  /**
   * Get the f42 field model
   * @this {!FieldModelStructSimple}
   * @returns {!proto.FieldModelBalance} f42 field model
   */
  get f42 () {
    return this._f42
  }

  /**
   * Get the f43 field model
   * @this {!FieldModelStructSimple}
   * @returns {!proto.FieldModelState} f43 field model
   */
  get f43 () {
    return this._f43
  }

  /**
   * Get the f44 field model
   * @this {!FieldModelStructSimple}
   * @returns {!proto.FieldModelAccount} f44 field model
   */
  get f44 () {
    return this._f44
  }

  /**
   * Get the field size
   * @this {!FieldModelStructSimple}
   * @returns {!number} Field size
   */
  get FBESize () {
    return 4
  }

  /**
   * Get the field body size
   * @this {!FieldModelStructSimple}
   * @returns {!number} Field body size
   */
  get FBEBody () {
    return 4 + 4 + this.uid.FBESize + this.f1.FBESize + this.f2.FBESize + this.f3.FBESize + this.f4.FBESize + this.f5.FBESize + this.f6.FBESize + this.f7.FBESize + this.f8.FBESize + this.f9.FBESize + this.f10.FBESize + this.f11.FBESize + this.f12.FBESize + this.f13.FBESize + this.f14.FBESize + this.f15.FBESize + this.f16.FBESize + this.f17.FBESize + this.f18.FBESize + this.f19.FBESize + this.f20.FBESize + this.f21.FBESize + this.f22.FBESize + this.f23.FBESize + this.f24.FBESize + this.f25.FBESize + this.f26.FBESize + this.f27.FBESize + this.f28.FBESize + this.f29.FBESize + this.f30.FBESize + this.f31.FBESize + this.f32.FBESize + this.f33.FBESize + this.f34.FBESize + this.f35.FBESize + this.f36.FBESize + this.f37.FBESize + this.f38.FBESize + this.f39.FBESize + this.f40.FBESize + this.f41.FBESize + this.f42.FBESize + this.f43.FBESize + this.f44.FBESize
  }

  /**
   * Get the field extra size
   * @this {!FieldModelStructSimple}
   * @returns {!number} Field extra size
   */
  get FBEExtra () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4) > this._buffer.size)) {
      return 0
    }

    this._buffer.shift(fbeStructOffset)

    let fbeResult = this.FBEBody + this.uid.FBEExtra + this.f1.FBEExtra + this.f2.FBEExtra + this.f3.FBEExtra + this.f4.FBEExtra + this.f5.FBEExtra + this.f6.FBEExtra + this.f7.FBEExtra + this.f8.FBEExtra + this.f9.FBEExtra + this.f10.FBEExtra + this.f11.FBEExtra + this.f12.FBEExtra + this.f13.FBEExtra + this.f14.FBEExtra + this.f15.FBEExtra + this.f16.FBEExtra + this.f17.FBEExtra + this.f18.FBEExtra + this.f19.FBEExtra + this.f20.FBEExtra + this.f21.FBEExtra + this.f22.FBEExtra + this.f23.FBEExtra + this.f24.FBEExtra + this.f25.FBEExtra + this.f26.FBEExtra + this.f27.FBEExtra + this.f28.FBEExtra + this.f29.FBEExtra + this.f30.FBEExtra + this.f31.FBEExtra + this.f32.FBEExtra + this.f33.FBEExtra + this.f34.FBEExtra + this.f35.FBEExtra + this.f36.FBEExtra + this.f37.FBEExtra + this.f38.FBEExtra + this.f39.FBEExtra + this.f40.FBEExtra + this.f41.FBEExtra + this.f42.FBEExtra + this.f43.FBEExtra + this.f44.FBEExtra

    this._buffer.unshift(fbeStructOffset)

    return fbeResult
  }

  /**
   * Get the field type
   * @this {!FieldModelStructSimple}
   * @returns {!number} Field type
   */
  get FBEType () {
    return FieldModelStructSimple.FBEType
  }

  /**
   * Get the field type (static)
   * @this {!FieldModelStructSimple}
   * @returns {!number} Field type
   */
  static get FBEType () {
    return 110
  }

  /**
   * Check if the struct value is valid
   * @this {!FieldModelStructSimple}
   * @param {!boolean} fbeVerifyType Verify model type flag, defaults is true
   * @returns {!boolean} Field model valid state
   */
  verify (fbeVerifyType = true) {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return true
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4 + 4) > this._buffer.size)) {
      return false
    }

    let fbeStructSize = this.readUInt32(fbeStructOffset)
    if (fbeStructSize < 4 + 4) {
      return false
    }

    let fbeStructType = this.readUInt32(fbeStructOffset + 4)
    if (fbeVerifyType && (fbeStructType !== this.FBEType)) {
      return false
    }

    this._buffer.shift(fbeStructOffset)
    let fbeResult = this.verifyFields(fbeStructSize)
    this._buffer.unshift(fbeStructOffset)
    return fbeResult
  }

  /**
   * Check if the struct fields are valid
   * @this {!FieldModelStructSimple}
   * @param {!number} fbeStructSize FBE struct size
   * @returns {!boolean} Field model valid state
   */
  verifyFields (fbeStructSize) {
    let fbeCurrentSize = 4 + 4

    if ((fbeCurrentSize + this.uid.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.uid.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uid.FBESize

    if ((fbeCurrentSize + this.f1.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f1.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1.FBESize

    if ((fbeCurrentSize + this.f2.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f2.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f2.FBESize

    if ((fbeCurrentSize + this.f3.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f3.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f3.FBESize

    if ((fbeCurrentSize + this.f4.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f4.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f4.FBESize

    if ((fbeCurrentSize + this.f5.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f5.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f5.FBESize

    if ((fbeCurrentSize + this.f6.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f6.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f6.FBESize

    if ((fbeCurrentSize + this.f7.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f7.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f7.FBESize

    if ((fbeCurrentSize + this.f8.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f8.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f8.FBESize

    if ((fbeCurrentSize + this.f9.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f9.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f9.FBESize

    if ((fbeCurrentSize + this.f10.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f10.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f10.FBESize

    if ((fbeCurrentSize + this.f11.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f11.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f11.FBESize

    if ((fbeCurrentSize + this.f12.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f12.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f12.FBESize

    if ((fbeCurrentSize + this.f13.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f13.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f13.FBESize

    if ((fbeCurrentSize + this.f14.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f14.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f14.FBESize

    if ((fbeCurrentSize + this.f15.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f15.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f15.FBESize

    if ((fbeCurrentSize + this.f16.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f16.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f16.FBESize

    if ((fbeCurrentSize + this.f17.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f17.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f17.FBESize

    if ((fbeCurrentSize + this.f18.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f18.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f18.FBESize

    if ((fbeCurrentSize + this.f19.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f19.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f19.FBESize

    if ((fbeCurrentSize + this.f20.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f20.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f20.FBESize

    if ((fbeCurrentSize + this.f21.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f21.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f21.FBESize

    if ((fbeCurrentSize + this.f22.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f22.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f22.FBESize

    if ((fbeCurrentSize + this.f23.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f23.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f23.FBESize

    if ((fbeCurrentSize + this.f24.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f24.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f24.FBESize

    if ((fbeCurrentSize + this.f25.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f25.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f25.FBESize

    if ((fbeCurrentSize + this.f26.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f26.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f26.FBESize

    if ((fbeCurrentSize + this.f27.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f27.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f27.FBESize

    if ((fbeCurrentSize + this.f28.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f28.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f28.FBESize

    if ((fbeCurrentSize + this.f29.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f29.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f29.FBESize

    if ((fbeCurrentSize + this.f30.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f30.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f30.FBESize

    if ((fbeCurrentSize + this.f31.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f31.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f31.FBESize

    if ((fbeCurrentSize + this.f32.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f32.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f32.FBESize

    if ((fbeCurrentSize + this.f33.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f33.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f33.FBESize

    if ((fbeCurrentSize + this.f34.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f34.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f34.FBESize

    if ((fbeCurrentSize + this.f35.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f35.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f35.FBESize

    if ((fbeCurrentSize + this.f36.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f36.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f36.FBESize

    if ((fbeCurrentSize + this.f37.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f37.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f37.FBESize

    if ((fbeCurrentSize + this.f38.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f38.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f38.FBESize

    if ((fbeCurrentSize + this.f39.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f39.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f39.FBESize

    if ((fbeCurrentSize + this.f40.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f40.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f40.FBESize

    if ((fbeCurrentSize + this.f41.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f41.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f41.FBESize

    if ((fbeCurrentSize + this.f42.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f42.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f42.FBESize

    if ((fbeCurrentSize + this.f43.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f43.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f43.FBESize

    if ((fbeCurrentSize + this.f44.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f44.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f44.FBESize

    return true
  }

  /**
   * Get the struct value (begin phase)
   * @this {!FieldModelStructSimple}
   * @returns {!number} Field model begin offset
   */
  getBegin () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    console.assert((fbeStructOffset > 0) && ((this._buffer.offset + fbeStructOffset + 4 + 4) <= this._buffer.size), 'Model is broken!')
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4 + 4) > this._buffer.size)) {
      return 0
    }

    let fbeStructSize = this.readUInt32(fbeStructOffset)
    console.assert((fbeStructSize >= 4 + 4), 'Model is broken!')
    if (fbeStructSize < 4 + 4) {
      return 0
    }

    this._buffer.shift(fbeStructOffset)
    return fbeStructOffset
  }

  /**
   * Get the struct value (end phase)
   * @this {!FieldModelStructSimple}
   * @param {!number} fbeBegin Field model begin offset
   */
  getEnd (fbeBegin) {
    this._buffer.unshift(fbeBegin)
  }

  /**
   * Get the struct value
   * @this {!FieldModelStructSimple}
   * @param {!StructSimple} fbeValue Default value, defaults is new StructSimple()
   * @returns {!StructSimple} StructSimple value
   */
  get (fbeValue = new StructSimple()) {
    let fbeBegin = this.getBegin()
    if (fbeBegin === 0) {
      return fbeValue
    }

    let fbeStructSize = this.readUInt32(0)
    this.getFields(fbeValue, fbeStructSize)
    this.getEnd(fbeBegin)
    return fbeValue
  }

  /**
   * Get the struct fields values
   * @this {!FieldModelStructSimple}
   * @param {!StructSimple} fbeValue StructSimple value
   * @param {!number} fbeStructSize Struct size
   */
  getFields (fbeValue, fbeStructSize) {
    let fbeCurrentSize = 4 + 4

    if ((fbeCurrentSize + this.uid.FBESize) <= fbeStructSize) {
      fbeValue.uid = this.uid.get()
    } else {
      fbeValue.uid = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uid.FBESize

    if ((fbeCurrentSize + this.f1.FBESize) <= fbeStructSize) {
      fbeValue.f1 = this.f1.get()
    } else {
      fbeValue.f1 = false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1.FBESize

    if ((fbeCurrentSize + this.f2.FBESize) <= fbeStructSize) {
      fbeValue.f2 = this.f2.get(true)
    } else {
      fbeValue.f2 = true
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f2.FBESize

    if ((fbeCurrentSize + this.f3.FBESize) <= fbeStructSize) {
      fbeValue.f3 = this.f3.get()
    } else {
      fbeValue.f3 = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f3.FBESize

    if ((fbeCurrentSize + this.f4.FBESize) <= fbeStructSize) {
      fbeValue.f4 = this.f4.get(255)
    } else {
      fbeValue.f4 = 255
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f4.FBESize

    if ((fbeCurrentSize + this.f5.FBESize) <= fbeStructSize) {
      fbeValue.f5 = this.f5.get()
    } else {
      fbeValue.f5 = '\0'
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f5.FBESize

    if ((fbeCurrentSize + this.f6.FBESize) <= fbeStructSize) {
      fbeValue.f6 = this.f6.get('!')
    } else {
      fbeValue.f6 = '!'
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f6.FBESize

    if ((fbeCurrentSize + this.f7.FBESize) <= fbeStructSize) {
      fbeValue.f7 = this.f7.get()
    } else {
      fbeValue.f7 = '\0'
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f7.FBESize

    if ((fbeCurrentSize + this.f8.FBESize) <= fbeStructSize) {
      fbeValue.f8 = this.f8.get(String.fromCharCode(0x0444))
    } else {
      fbeValue.f8 = String.fromCharCode(0x0444)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f8.FBESize

    if ((fbeCurrentSize + this.f9.FBESize) <= fbeStructSize) {
      fbeValue.f9 = this.f9.get()
    } else {
      fbeValue.f9 = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f9.FBESize

    if ((fbeCurrentSize + this.f10.FBESize) <= fbeStructSize) {
      fbeValue.f10 = this.f10.get(127)
    } else {
      fbeValue.f10 = 127
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f10.FBESize

    if ((fbeCurrentSize + this.f11.FBESize) <= fbeStructSize) {
      fbeValue.f11 = this.f11.get()
    } else {
      fbeValue.f11 = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f11.FBESize

    if ((fbeCurrentSize + this.f12.FBESize) <= fbeStructSize) {
      fbeValue.f12 = this.f12.get(255)
    } else {
      fbeValue.f12 = 255
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f12.FBESize

    if ((fbeCurrentSize + this.f13.FBESize) <= fbeStructSize) {
      fbeValue.f13 = this.f13.get()
    } else {
      fbeValue.f13 = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f13.FBESize

    if ((fbeCurrentSize + this.f14.FBESize) <= fbeStructSize) {
      fbeValue.f14 = this.f14.get(32767)
    } else {
      fbeValue.f14 = 32767
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f14.FBESize

    if ((fbeCurrentSize + this.f15.FBESize) <= fbeStructSize) {
      fbeValue.f15 = this.f15.get()
    } else {
      fbeValue.f15 = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f15.FBESize

    if ((fbeCurrentSize + this.f16.FBESize) <= fbeStructSize) {
      fbeValue.f16 = this.f16.get(65535)
    } else {
      fbeValue.f16 = 65535
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f16.FBESize

    if ((fbeCurrentSize + this.f17.FBESize) <= fbeStructSize) {
      fbeValue.f17 = this.f17.get()
    } else {
      fbeValue.f17 = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f17.FBESize

    if ((fbeCurrentSize + this.f18.FBESize) <= fbeStructSize) {
      fbeValue.f18 = this.f18.get(2147483647)
    } else {
      fbeValue.f18 = 2147483647
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f18.FBESize

    if ((fbeCurrentSize + this.f19.FBESize) <= fbeStructSize) {
      fbeValue.f19 = this.f19.get()
    } else {
      fbeValue.f19 = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f19.FBESize

    if ((fbeCurrentSize + this.f20.FBESize) <= fbeStructSize) {
      fbeValue.f20 = this.f20.get(0xFFFFFFFF)
    } else {
      fbeValue.f20 = 0xFFFFFFFF
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f20.FBESize

    if ((fbeCurrentSize + this.f21.FBESize) <= fbeStructSize) {
      fbeValue.f21 = this.f21.get()
    } else {
      fbeValue.f21 = new Int64(0, 0)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f21.FBESize

    if ((fbeCurrentSize + this.f22.FBESize) <= fbeStructSize) {
      fbeValue.f22 = this.f22.get(new Int64(4294967295, 2147483647))
    } else {
      fbeValue.f22 = new Int64(4294967295, 2147483647)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f22.FBESize

    if ((fbeCurrentSize + this.f23.FBESize) <= fbeStructSize) {
      fbeValue.f23 = this.f23.get()
    } else {
      fbeValue.f23 = new UInt64(0, 0)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f23.FBESize

    if ((fbeCurrentSize + this.f24.FBESize) <= fbeStructSize) {
      fbeValue.f24 = this.f24.get(new UInt64(4294967295, 4294967295))
    } else {
      fbeValue.f24 = new UInt64(4294967295, 4294967295)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f24.FBESize

    if ((fbeCurrentSize + this.f25.FBESize) <= fbeStructSize) {
      fbeValue.f25 = this.f25.get()
    } else {
      fbeValue.f25 = 0.0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f25.FBESize

    if ((fbeCurrentSize + this.f26.FBESize) <= fbeStructSize) {
      fbeValue.f26 = this.f26.get(123.456)
    } else {
      fbeValue.f26 = 123.456
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f26.FBESize

    if ((fbeCurrentSize + this.f27.FBESize) <= fbeStructSize) {
      fbeValue.f27 = this.f27.get()
    } else {
      fbeValue.f27 = 0.0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f27.FBESize

    if ((fbeCurrentSize + this.f28.FBESize) <= fbeStructSize) {
      fbeValue.f28 = this.f28.get(-123.456e+123)
    } else {
      fbeValue.f28 = -123.456e+123
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f28.FBESize

    if ((fbeCurrentSize + this.f29.FBESize) <= fbeStructSize) {
      fbeValue.f29 = this.f29.get()
    } else {
      fbeValue.f29 = new Big(0)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f29.FBESize

    if ((fbeCurrentSize + this.f30.FBESize) <= fbeStructSize) {
      fbeValue.f30 = this.f30.get(new Big('123456.123456'))
    } else {
      fbeValue.f30 = new Big('123456.123456')
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f30.FBESize

    if ((fbeCurrentSize + this.f31.FBESize) <= fbeStructSize) {
      fbeValue.f31 = this.f31.get()
    } else {
      fbeValue.f31 = ''
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f31.FBESize

    if ((fbeCurrentSize + this.f32.FBESize) <= fbeStructSize) {
      fbeValue.f32 = this.f32.get('Initial string!')
    } else {
      fbeValue.f32 = 'Initial string!'
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f32.FBESize

    if ((fbeCurrentSize + this.f33.FBESize) <= fbeStructSize) {
      fbeValue.f33 = this.f33.get()
    } else {
      fbeValue.f33 = new Date(0)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f33.FBESize

    if ((fbeCurrentSize + this.f34.FBESize) <= fbeStructSize) {
      fbeValue.f34 = this.f34.get(new Date(0))
    } else {
      fbeValue.f34 = new Date(0)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f34.FBESize

    if ((fbeCurrentSize + this.f35.FBESize) <= fbeStructSize) {
      fbeValue.f35 = this.f35.get(new Date(Date.now()))
    } else {
      fbeValue.f35 = new Date(Date.now())
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f35.FBESize

    if ((fbeCurrentSize + this.f36.FBESize) <= fbeStructSize) {
      fbeValue.f36 = this.f36.get()
    } else {
      fbeValue.f36 = new UUID()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f36.FBESize

    if ((fbeCurrentSize + this.f37.FBESize) <= fbeStructSize) {
      fbeValue.f37 = this.f37.get(UUID.sequential())
    } else {
      fbeValue.f37 = UUID.sequential()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f37.FBESize

    if ((fbeCurrentSize + this.f38.FBESize) <= fbeStructSize) {
      fbeValue.f38 = this.f38.get(new UUID('123e4567-e89b-12d3-a456-426655440000'))
    } else {
      fbeValue.f38 = new UUID('123e4567-e89b-12d3-a456-426655440000')
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f38.FBESize

    if ((fbeCurrentSize + this.f39.FBESize) <= fbeStructSize) {
      fbeValue.f39 = this.f39.get()
    } else {
      fbeValue.f39 = new proto.OrderSide()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f39.FBESize

    if ((fbeCurrentSize + this.f40.FBESize) <= fbeStructSize) {
      fbeValue.f40 = this.f40.get()
    } else {
      fbeValue.f40 = new proto.OrderType()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f40.FBESize

    if ((fbeCurrentSize + this.f41.FBESize) <= fbeStructSize) {
      fbeValue.f41 = this.f41.get()
    } else {
      fbeValue.f41 = new proto.Order()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f41.FBESize

    if ((fbeCurrentSize + this.f42.FBESize) <= fbeStructSize) {
      fbeValue.f42 = this.f42.get()
    } else {
      fbeValue.f42 = new proto.Balance()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f42.FBESize

    if ((fbeCurrentSize + this.f43.FBESize) <= fbeStructSize) {
      fbeValue.f43 = this.f43.get()
    } else {
      fbeValue.f43 = new proto.State()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f43.FBESize

    if ((fbeCurrentSize + this.f44.FBESize) <= fbeStructSize) {
      fbeValue.f44 = this.f44.get()
    } else {
      fbeValue.f44 = new proto.Account()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f44.FBESize
  }

  /**
   * Set the struct value (begin phase)
   * @this {!FieldModelStructSimple}
   * @returns {!number} Field model begin offset
   */
  setBegin () {
    console.assert(((this._buffer.offset + this.FBEOffset + this.FBESize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructSize = this.FBEBody
    let fbeStructOffset = this._buffer.allocate(fbeStructSize) - this._buffer.offset
    console.assert((fbeStructOffset > 0) && ((this._buffer.offset + fbeStructOffset + fbeStructSize) <= this._buffer.size), 'Model is broken!')
    if ((fbeStructOffset <= 0) || ((this._buffer.offset + fbeStructOffset + fbeStructSize) > this._buffer.size)) {
      return 0
    }

    this.writeUInt32(this.FBEOffset, fbeStructOffset)
    this.writeUInt32(fbeStructOffset, fbeStructSize)
    this.writeUInt32(fbeStructOffset + 4, this.FBEType)

    this._buffer.shift(fbeStructOffset)
    return fbeStructOffset
  }

  /**
   * Set the struct value (end phase)
   * @this {!FieldModelStructSimple}
   * @param {!number} fbeBegin Field model begin offset
   */
  setEnd (fbeBegin) {
    this._buffer.unshift(fbeBegin)
  }

  /**
   * Set the struct value
   * @this {!FieldModelStructSimple}
   * @param {!StructSimple} fbeValue StructSimple value
   */
  set (fbeValue) {
    let fbeBegin = this.setBegin()
    if (fbeBegin === 0) {
      return
    }

    this.setFields(fbeValue)
    this.setEnd(fbeBegin)
  }

  /**
   * Set the struct fields values
   * @this {!FieldModelStructSimple}
   * @param {StructSimple} fbeValue StructSimple value
   */
  setFields (fbeValue) {
    this.uid.set(fbeValue.uid)
    this.f1.set(fbeValue.f1)
    this.f2.set(fbeValue.f2)
    this.f3.set(fbeValue.f3)
    this.f4.set(fbeValue.f4)
    this.f5.set(fbeValue.f5)
    this.f6.set(fbeValue.f6)
    this.f7.set(fbeValue.f7)
    this.f8.set(fbeValue.f8)
    this.f9.set(fbeValue.f9)
    this.f10.set(fbeValue.f10)
    this.f11.set(fbeValue.f11)
    this.f12.set(fbeValue.f12)
    this.f13.set(fbeValue.f13)
    this.f14.set(fbeValue.f14)
    this.f15.set(fbeValue.f15)
    this.f16.set(fbeValue.f16)
    this.f17.set(fbeValue.f17)
    this.f18.set(fbeValue.f18)
    this.f19.set(fbeValue.f19)
    this.f20.set(fbeValue.f20)
    this.f21.set(fbeValue.f21)
    this.f22.set(fbeValue.f22)
    this.f23.set(fbeValue.f23)
    this.f24.set(fbeValue.f24)
    this.f25.set(fbeValue.f25)
    this.f26.set(fbeValue.f26)
    this.f27.set(fbeValue.f27)
    this.f28.set(fbeValue.f28)
    this.f29.set(fbeValue.f29)
    this.f30.set(fbeValue.f30)
    this.f31.set(fbeValue.f31)
    this.f32.set(fbeValue.f32)
    this.f33.set(fbeValue.f33)
    this.f34.set(fbeValue.f34)
    this.f35.set(fbeValue.f35)
    this.f36.set(fbeValue.f36)
    this.f37.set(fbeValue.f37)
    this.f38.set(fbeValue.f38)
    this.f39.set(fbeValue.f39)
    this.f40.set(fbeValue.f40)
    this.f41.set(fbeValue.f41)
    this.f42.set(fbeValue.f42)
    this.f43.set(fbeValue.f43)
    this.f44.set(fbeValue.f44)
  }
}

exports.FieldModelStructSimple = FieldModelStructSimple

/**
 * Fast Binary Encoding StructSimple model class
 */
class StructSimpleModel extends fbe.Model {
  /**
   * Initialize model with the given buffer
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Read/Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer)
    this._model = new FieldModelStructSimple(this.buffer, 4)
  }

  /**
   * Get the StructSimple model
   * @this {!StructSimpleModel}
   * @returns {!FieldModelStructSimple} model StructSimple model
   */
  get model () {
    return this._model
  }

  /**
   * Get the model size
   * @this {!StructSimpleModel}
   * @returns {!number} Model size
   */
  get FBESize () {
    return this.model.FBESize + this.model.FBEExtra
  }

  /**
   * Get the model type
   * @this {!StructSimpleModel}
   * @returns {!number} Model type
   */
  get FBEType () {
    return StructSimpleModel.FBEType
  }

  /**
   * Get the model type (static)
   * @this {!StructSimpleModel}
   * @returns {!number} Model type
   */
  static get FBEType () {
    return FieldModelStructSimple.FBEType
  }

  /**
   * Check if the struct value is valid
   * @this {!StructSimpleModel}
   * @returns {!boolean} Model valid state
   */
  verify () {
    if ((this.buffer.offset + this.model.FBEOffset - 4) > this.buffer.size) {
      return false
    }

    let fbeFullSize = this.readUInt32(this.model.FBEOffset - 4)
    if (fbeFullSize < this.model.FBESize) {
      return false
    }

    return this.model.verify()
  }

  /**
   * Create a new model (begin phase)
   * @this {!StructSimpleModel}
   * @returns {!number} Model begin offset
   */
  createBegin () {
    return this.buffer.allocate(4 + this.model.FBESize)
  }

  /**
   * Create a new model (end phase)
   * @this {!StructSimpleModel}
   * @param {!number} fbeBegin Model begin offset
   */
  createEnd (fbeBegin) {
    let fbeEnd = this.buffer.size
    let fbeFullSize = fbeEnd - fbeBegin
    this.writeUInt32(this.model.FBEOffset - 4, fbeFullSize)
    return fbeFullSize
  }

  /**
   * Serialize the struct value
   * @this {!StructSimpleModel}
   * @param {!StructSimple} value StructSimple value
   * @return {!number} Model begin offset
   */
  serialize (value) {
    let fbeBegin = this.createBegin()
    this.model.set(value)
    return this.createEnd(fbeBegin)
  }

  /**
   * Deserialize the struct value
   * @this {!StructSimpleModel}
   * @param {!StructSimple} value StructSimple value, defaults is new StructSimple()
   * @return {!object} Deserialized StructSimple value and its size
   */
  deserialize (value = new StructSimple()) {
    if ((this.buffer.offset + this.model.FBEOffset - 4) > this.buffer.size) {
      return { value: new StructSimple(), size: 0 }
    }

    let fbeFullSize = this.readUInt32(this.model.FBEOffset - 4)
    console.assert((fbeFullSize >= this.model.FBESize), 'Model is broken!')
    if (fbeFullSize < this.model.FBESize) {
      return { value: new StructSimple(), size: 0 }
    }

    this.model.get(value)
    return { value: value, size: fbeFullSize }
  }

  /**
   * Move to the next struct value
   * @this {!StructSimpleModel}
   * @param {!number} prev Previous StructSimple model size
   */
  next (prev) {
    this.model.FBEShift(prev)
  }
}

exports.StructSimpleModel = StructSimpleModel

/**
 * Fast Binary Encoding StructSimple final model class
 */
class FinalModelStructSimple extends fbe.FinalModel {
  /**
   * Initialize final model with the given buffer and offset
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Buffer
   * @param {!number} offset Offset
   * @constructor
   */
  constructor (buffer, offset) {
    super(buffer, offset)
    this._uid = new fbe.FinalModelInt32(buffer, 0)
    this._f1 = new fbe.FinalModelBool(buffer, 0)
    this._f2 = new fbe.FinalModelBool(buffer, 0)
    this._f3 = new fbe.FinalModelByte(buffer, 0)
    this._f4 = new fbe.FinalModelByte(buffer, 0)
    this._f5 = new fbe.FinalModelChar(buffer, 0)
    this._f6 = new fbe.FinalModelChar(buffer, 0)
    this._f7 = new fbe.FinalModelWChar(buffer, 0)
    this._f8 = new fbe.FinalModelWChar(buffer, 0)
    this._f9 = new fbe.FinalModelInt8(buffer, 0)
    this._f10 = new fbe.FinalModelInt8(buffer, 0)
    this._f11 = new fbe.FinalModelUInt8(buffer, 0)
    this._f12 = new fbe.FinalModelUInt8(buffer, 0)
    this._f13 = new fbe.FinalModelInt16(buffer, 0)
    this._f14 = new fbe.FinalModelInt16(buffer, 0)
    this._f15 = new fbe.FinalModelUInt16(buffer, 0)
    this._f16 = new fbe.FinalModelUInt16(buffer, 0)
    this._f17 = new fbe.FinalModelInt32(buffer, 0)
    this._f18 = new fbe.FinalModelInt32(buffer, 0)
    this._f19 = new fbe.FinalModelUInt32(buffer, 0)
    this._f20 = new fbe.FinalModelUInt32(buffer, 0)
    this._f21 = new fbe.FinalModelInt64(buffer, 0)
    this._f22 = new fbe.FinalModelInt64(buffer, 0)
    this._f23 = new fbe.FinalModelUInt64(buffer, 0)
    this._f24 = new fbe.FinalModelUInt64(buffer, 0)
    this._f25 = new fbe.FinalModelFloat(buffer, 0)
    this._f26 = new fbe.FinalModelFloat(buffer, 0)
    this._f27 = new fbe.FinalModelDouble(buffer, 0)
    this._f28 = new fbe.FinalModelDouble(buffer, 0)
    this._f29 = new fbe.FinalModelDecimal(buffer, 0)
    this._f30 = new fbe.FinalModelDecimal(buffer, 0)
    this._f31 = new fbe.FinalModelString(buffer, 0)
    this._f32 = new fbe.FinalModelString(buffer, 0)
    this._f33 = new fbe.FinalModelTimestamp(buffer, 0)
    this._f34 = new fbe.FinalModelTimestamp(buffer, 0)
    this._f35 = new fbe.FinalModelTimestamp(buffer, 0)
    this._f36 = new fbe.FinalModelUUID(buffer, 0)
    this._f37 = new fbe.FinalModelUUID(buffer, 0)
    this._f38 = new fbe.FinalModelUUID(buffer, 0)
    this._f39 = new proto.FinalModelOrderSide(buffer, 0)
    this._f40 = new proto.FinalModelOrderType(buffer, 0)
    this._f41 = new proto.FinalModelOrder(buffer, 0)
    this._f42 = new proto.FinalModelBalance(buffer, 0)
    this._f43 = new proto.FinalModelState(buffer, 0)
    this._f44 = new proto.FinalModelAccount(buffer, 0)
  }

  /**
   * Get the uid final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelInt32} uid final model
   */
  get uid () {
    return this._uid
  }

  /**
   * Get the f1 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelBool} f1 final model
   */
  get f1 () {
    return this._f1
  }

  /**
   * Get the f2 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelBool} f2 final model
   */
  get f2 () {
    return this._f2
  }

  /**
   * Get the f3 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelByte} f3 final model
   */
  get f3 () {
    return this._f3
  }

  /**
   * Get the f4 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelByte} f4 final model
   */
  get f4 () {
    return this._f4
  }

  /**
   * Get the f5 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelChar} f5 final model
   */
  get f5 () {
    return this._f5
  }

  /**
   * Get the f6 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelChar} f6 final model
   */
  get f6 () {
    return this._f6
  }

  /**
   * Get the f7 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelWChar} f7 final model
   */
  get f7 () {
    return this._f7
  }

  /**
   * Get the f8 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelWChar} f8 final model
   */
  get f8 () {
    return this._f8
  }

  /**
   * Get the f9 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelInt8} f9 final model
   */
  get f9 () {
    return this._f9
  }

  /**
   * Get the f10 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelInt8} f10 final model
   */
  get f10 () {
    return this._f10
  }

  /**
   * Get the f11 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelUInt8} f11 final model
   */
  get f11 () {
    return this._f11
  }

  /**
   * Get the f12 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelUInt8} f12 final model
   */
  get f12 () {
    return this._f12
  }

  /**
   * Get the f13 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelInt16} f13 final model
   */
  get f13 () {
    return this._f13
  }

  /**
   * Get the f14 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelInt16} f14 final model
   */
  get f14 () {
    return this._f14
  }

  /**
   * Get the f15 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelUInt16} f15 final model
   */
  get f15 () {
    return this._f15
  }

  /**
   * Get the f16 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelUInt16} f16 final model
   */
  get f16 () {
    return this._f16
  }

  /**
   * Get the f17 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelInt32} f17 final model
   */
  get f17 () {
    return this._f17
  }

  /**
   * Get the f18 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelInt32} f18 final model
   */
  get f18 () {
    return this._f18
  }

  /**
   * Get the f19 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelUInt32} f19 final model
   */
  get f19 () {
    return this._f19
  }

  /**
   * Get the f20 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelUInt32} f20 final model
   */
  get f20 () {
    return this._f20
  }

  /**
   * Get the f21 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelInt64} f21 final model
   */
  get f21 () {
    return this._f21
  }

  /**
   * Get the f22 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelInt64} f22 final model
   */
  get f22 () {
    return this._f22
  }

  /**
   * Get the f23 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelUInt64} f23 final model
   */
  get f23 () {
    return this._f23
  }

  /**
   * Get the f24 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelUInt64} f24 final model
   */
  get f24 () {
    return this._f24
  }

  /**
   * Get the f25 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelFloat} f25 final model
   */
  get f25 () {
    return this._f25
  }

  /**
   * Get the f26 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelFloat} f26 final model
   */
  get f26 () {
    return this._f26
  }

  /**
   * Get the f27 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelDouble} f27 final model
   */
  get f27 () {
    return this._f27
  }

  /**
   * Get the f28 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelDouble} f28 final model
   */
  get f28 () {
    return this._f28
  }

  /**
   * Get the f29 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelDecimal} f29 final model
   */
  get f29 () {
    return this._f29
  }

  /**
   * Get the f30 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelDecimal} f30 final model
   */
  get f30 () {
    return this._f30
  }

  /**
   * Get the f31 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelString} f31 final model
   */
  get f31 () {
    return this._f31
  }

  /**
   * Get the f32 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelString} f32 final model
   */
  get f32 () {
    return this._f32
  }

  /**
   * Get the f33 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelTimestamp} f33 final model
   */
  get f33 () {
    return this._f33
  }

  /**
   * Get the f34 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelTimestamp} f34 final model
   */
  get f34 () {
    return this._f34
  }

  /**
   * Get the f35 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelTimestamp} f35 final model
   */
  get f35 () {
    return this._f35
  }

  /**
   * Get the f36 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelUUID} f36 final model
   */
  get f36 () {
    return this._f36
  }

  /**
   * Get the f37 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelUUID} f37 final model
   */
  get f37 () {
    return this._f37
  }

  /**
   * Get the f38 final model
   * @this {!FinalModelStructSimple}
   * @returns {!fbe.FinalModelUUID} f38 final model
   */
  get f38 () {
    return this._f38
  }

  /**
   * Get the f39 final model
   * @this {!FinalModelStructSimple}
   * @returns {!proto.FinalModelOrderSide} f39 final model
   */
  get f39 () {
    return this._f39
  }

  /**
   * Get the f40 final model
   * @this {!FinalModelStructSimple}
   * @returns {!proto.FinalModelOrderType} f40 final model
   */
  get f40 () {
    return this._f40
  }

  /**
   * Get the f41 final model
   * @this {!FinalModelStructSimple}
   * @returns {!proto.FinalModelOrder} f41 final model
   */
  get f41 () {
    return this._f41
  }

  /**
   * Get the f42 final model
   * @this {!FinalModelStructSimple}
   * @returns {!proto.FinalModelBalance} f42 final model
   */
  get f42 () {
    return this._f42
  }

  /**
   * Get the f43 final model
   * @this {!FinalModelStructSimple}
   * @returns {!proto.FinalModelState} f43 final model
   */
  get f43 () {
    return this._f43
  }

  /**
   * Get the f44 final model
   * @this {!FinalModelStructSimple}
   * @returns {!proto.FinalModelAccount} f44 final model
   */
  get f44 () {
    return this._f44
  }

  /**
   * Get the allocation size
   * @this {!FinalModelStructSimple}
   * @param {!StructSimple} fbeValue StructSimple value
   * @returns {!number} Allocation size
   */
  FBEAllocationSize (fbeValue) {
    return 0 + this.uid.FBEAllocationSize(fbeValue.uid) + this.f1.FBEAllocationSize(fbeValue.f1) + this.f2.FBEAllocationSize(fbeValue.f2) + this.f3.FBEAllocationSize(fbeValue.f3) + this.f4.FBEAllocationSize(fbeValue.f4) + this.f5.FBEAllocationSize(fbeValue.f5) + this.f6.FBEAllocationSize(fbeValue.f6) + this.f7.FBEAllocationSize(fbeValue.f7) + this.f8.FBEAllocationSize(fbeValue.f8) + this.f9.FBEAllocationSize(fbeValue.f9) + this.f10.FBEAllocationSize(fbeValue.f10) + this.f11.FBEAllocationSize(fbeValue.f11) + this.f12.FBEAllocationSize(fbeValue.f12) + this.f13.FBEAllocationSize(fbeValue.f13) + this.f14.FBEAllocationSize(fbeValue.f14) + this.f15.FBEAllocationSize(fbeValue.f15) + this.f16.FBEAllocationSize(fbeValue.f16) + this.f17.FBEAllocationSize(fbeValue.f17) + this.f18.FBEAllocationSize(fbeValue.f18) + this.f19.FBEAllocationSize(fbeValue.f19) + this.f20.FBEAllocationSize(fbeValue.f20) + this.f21.FBEAllocationSize(fbeValue.f21) + this.f22.FBEAllocationSize(fbeValue.f22) + this.f23.FBEAllocationSize(fbeValue.f23) + this.f24.FBEAllocationSize(fbeValue.f24) + this.f25.FBEAllocationSize(fbeValue.f25) + this.f26.FBEAllocationSize(fbeValue.f26) + this.f27.FBEAllocationSize(fbeValue.f27) + this.f28.FBEAllocationSize(fbeValue.f28) + this.f29.FBEAllocationSize(fbeValue.f29) + this.f30.FBEAllocationSize(fbeValue.f30) + this.f31.FBEAllocationSize(fbeValue.f31) + this.f32.FBEAllocationSize(fbeValue.f32) + this.f33.FBEAllocationSize(fbeValue.f33) + this.f34.FBEAllocationSize(fbeValue.f34) + this.f35.FBEAllocationSize(fbeValue.f35) + this.f36.FBEAllocationSize(fbeValue.f36) + this.f37.FBEAllocationSize(fbeValue.f37) + this.f38.FBEAllocationSize(fbeValue.f38) + this.f39.FBEAllocationSize(fbeValue.f39) + this.f40.FBEAllocationSize(fbeValue.f40) + this.f41.FBEAllocationSize(fbeValue.f41) + this.f42.FBEAllocationSize(fbeValue.f42) + this.f43.FBEAllocationSize(fbeValue.f43) + this.f44.FBEAllocationSize(fbeValue.f44)
  }

  /**
   * Get the field type
   * @this {!FinalModelStructSimple}
   * @returns {!number} Field type
   */
  get FBEType () {
    return FinalModelStructSimple.FBEType
  }

  /**
   * Get the field type (static)
   * @this {!FinalModelStructSimple}
   * @returns {!number} Field type
   */
  static get FBEType () {
    return 110
  }

  /**
   * Check if the struct value is valid
   * @this {!FinalModelStructSimple}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    this._buffer.shift(this.FBEOffset)
    let fbeResult = this.verifyFields()
    this._buffer.unshift(this.FBEOffset)
    return fbeResult
  }

  /**
   * Check if the struct fields are valid
   * @this {!FinalModelStructSimple}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verifyFields () {
    let fbeCurrentOffset = 0
    let fbeFieldSize

    this.uid.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.uid.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f1.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f2.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f2.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f3.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f3.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f4.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f4.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f5.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f5.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f6.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f6.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f7.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f7.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f8.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f8.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f9.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f9.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f10.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f10.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f11.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f11.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f12.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f12.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f13.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f13.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f14.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f14.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f15.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f15.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f16.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f16.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f17.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f17.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f18.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f18.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f19.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f19.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f20.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f20.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f21.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f21.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f22.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f22.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f23.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f23.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f24.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f24.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f25.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f25.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f26.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f26.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f27.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f27.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f28.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f28.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f29.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f29.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f30.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f30.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f31.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f31.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f32.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f32.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f33.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f33.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f34.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f34.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f35.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f35.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f36.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f36.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f37.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f37.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f38.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f38.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f39.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f39.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f40.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f40.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f41.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f41.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f42.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f42.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f43.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f43.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f44.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f44.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    return fbeCurrentOffset
  }

  /**
   * Get the struct value
   * @this {!FinalModelStructSimple}
   * @param {!StructSimple} fbeValue StructSimple value, defaults is new StructSimple()
   * @returns {!object} Result struct value and its size
   */
  get (fbeValue = new StructSimple()) {
    this._buffer.shift(this.FBEOffset)
    let fbeSize = this.getFields(fbeValue)
    this._buffer.unshift(this.FBEOffset)
    return { value: fbeValue, size: fbeSize }
  }

  /**
   * Get the struct fields values
   * @this {!FinalModelStructSimple}
   * @param {!StructSimple} fbeValue StructSimple value
   * @returns {!number} Struct size
   */
  getFields (fbeValue) {
    let fbeCurrentOffset = 0
    let fbeCurrentSize = 0
    let fbeResult

    this.uid.FBEOffset = fbeCurrentOffset
    fbeResult = this.uid.get()
    fbeValue.uid = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f1.FBEOffset = fbeCurrentOffset
    fbeResult = this.f1.get()
    fbeValue.f1 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f2.FBEOffset = fbeCurrentOffset
    fbeResult = this.f2.get()
    fbeValue.f2 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f3.FBEOffset = fbeCurrentOffset
    fbeResult = this.f3.get()
    fbeValue.f3 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f4.FBEOffset = fbeCurrentOffset
    fbeResult = this.f4.get()
    fbeValue.f4 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f5.FBEOffset = fbeCurrentOffset
    fbeResult = this.f5.get()
    fbeValue.f5 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f6.FBEOffset = fbeCurrentOffset
    fbeResult = this.f6.get()
    fbeValue.f6 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f7.FBEOffset = fbeCurrentOffset
    fbeResult = this.f7.get()
    fbeValue.f7 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f8.FBEOffset = fbeCurrentOffset
    fbeResult = this.f8.get()
    fbeValue.f8 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f9.FBEOffset = fbeCurrentOffset
    fbeResult = this.f9.get()
    fbeValue.f9 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f10.FBEOffset = fbeCurrentOffset
    fbeResult = this.f10.get()
    fbeValue.f10 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f11.FBEOffset = fbeCurrentOffset
    fbeResult = this.f11.get()
    fbeValue.f11 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f12.FBEOffset = fbeCurrentOffset
    fbeResult = this.f12.get()
    fbeValue.f12 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f13.FBEOffset = fbeCurrentOffset
    fbeResult = this.f13.get()
    fbeValue.f13 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f14.FBEOffset = fbeCurrentOffset
    fbeResult = this.f14.get()
    fbeValue.f14 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f15.FBEOffset = fbeCurrentOffset
    fbeResult = this.f15.get()
    fbeValue.f15 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f16.FBEOffset = fbeCurrentOffset
    fbeResult = this.f16.get()
    fbeValue.f16 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f17.FBEOffset = fbeCurrentOffset
    fbeResult = this.f17.get()
    fbeValue.f17 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f18.FBEOffset = fbeCurrentOffset
    fbeResult = this.f18.get()
    fbeValue.f18 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f19.FBEOffset = fbeCurrentOffset
    fbeResult = this.f19.get()
    fbeValue.f19 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f20.FBEOffset = fbeCurrentOffset
    fbeResult = this.f20.get()
    fbeValue.f20 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f21.FBEOffset = fbeCurrentOffset
    fbeResult = this.f21.get()
    fbeValue.f21 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f22.FBEOffset = fbeCurrentOffset
    fbeResult = this.f22.get()
    fbeValue.f22 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f23.FBEOffset = fbeCurrentOffset
    fbeResult = this.f23.get()
    fbeValue.f23 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f24.FBEOffset = fbeCurrentOffset
    fbeResult = this.f24.get()
    fbeValue.f24 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f25.FBEOffset = fbeCurrentOffset
    fbeResult = this.f25.get()
    fbeValue.f25 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f26.FBEOffset = fbeCurrentOffset
    fbeResult = this.f26.get()
    fbeValue.f26 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f27.FBEOffset = fbeCurrentOffset
    fbeResult = this.f27.get()
    fbeValue.f27 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f28.FBEOffset = fbeCurrentOffset
    fbeResult = this.f28.get()
    fbeValue.f28 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f29.FBEOffset = fbeCurrentOffset
    fbeResult = this.f29.get()
    fbeValue.f29 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f30.FBEOffset = fbeCurrentOffset
    fbeResult = this.f30.get()
    fbeValue.f30 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f31.FBEOffset = fbeCurrentOffset
    fbeResult = this.f31.get()
    fbeValue.f31 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f32.FBEOffset = fbeCurrentOffset
    fbeResult = this.f32.get()
    fbeValue.f32 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f33.FBEOffset = fbeCurrentOffset
    fbeResult = this.f33.get()
    fbeValue.f33 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f34.FBEOffset = fbeCurrentOffset
    fbeResult = this.f34.get()
    fbeValue.f34 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f35.FBEOffset = fbeCurrentOffset
    fbeResult = this.f35.get()
    fbeValue.f35 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f36.FBEOffset = fbeCurrentOffset
    fbeResult = this.f36.get()
    fbeValue.f36 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f37.FBEOffset = fbeCurrentOffset
    fbeResult = this.f37.get()
    fbeValue.f37 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f38.FBEOffset = fbeCurrentOffset
    fbeResult = this.f38.get()
    fbeValue.f38 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f39.FBEOffset = fbeCurrentOffset
    fbeResult = this.f39.get()
    fbeValue.f39 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f40.FBEOffset = fbeCurrentOffset
    fbeResult = this.f40.get()
    fbeValue.f40 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f41.FBEOffset = fbeCurrentOffset
    fbeResult = this.f41.get()
    fbeValue.f41 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f42.FBEOffset = fbeCurrentOffset
    fbeResult = this.f42.get()
    fbeValue.f42 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f43.FBEOffset = fbeCurrentOffset
    fbeResult = this.f43.get()
    fbeValue.f43 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f44.FBEOffset = fbeCurrentOffset
    fbeResult = this.f44.get()
    fbeValue.f44 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    return fbeCurrentSize
  }

  /**
   * Set the struct value
   * @this {!FinalModelStructSimple}
   * @param {!StructSimple} fbeValue StructSimple value
   * @returns {!number} Final model size
   */
  set (fbeValue) {
    this._buffer.shift(this.FBEOffset)
    let fbeSize = this.setFields(fbeValue)
    this._buffer.unshift(this.FBEOffset)
    return fbeSize
  }

  /**
   * Set the struct fields values
   * @this {!FinalModelStructSimple}
   * @param {StructSimple} fbeValue StructSimple value
   * @returns {!number} Final model size
   */
  setFields (fbeValue) {
    let fbeCurrentOffset = 0
    let fbeCurrentSize = 0
    let fbeFieldSize

    this.uid.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.uid.set(fbeValue.uid)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f1.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1.set(fbeValue.f1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f2.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f2.set(fbeValue.f2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f3.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f3.set(fbeValue.f3)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f4.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f4.set(fbeValue.f4)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f5.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f5.set(fbeValue.f5)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f6.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f6.set(fbeValue.f6)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f7.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f7.set(fbeValue.f7)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f8.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f8.set(fbeValue.f8)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f9.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f9.set(fbeValue.f9)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f10.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f10.set(fbeValue.f10)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f11.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f11.set(fbeValue.f11)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f12.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f12.set(fbeValue.f12)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f13.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f13.set(fbeValue.f13)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f14.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f14.set(fbeValue.f14)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f15.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f15.set(fbeValue.f15)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f16.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f16.set(fbeValue.f16)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f17.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f17.set(fbeValue.f17)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f18.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f18.set(fbeValue.f18)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f19.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f19.set(fbeValue.f19)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f20.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f20.set(fbeValue.f20)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f21.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f21.set(fbeValue.f21)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f22.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f22.set(fbeValue.f22)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f23.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f23.set(fbeValue.f23)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f24.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f24.set(fbeValue.f24)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f25.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f25.set(fbeValue.f25)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f26.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f26.set(fbeValue.f26)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f27.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f27.set(fbeValue.f27)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f28.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f28.set(fbeValue.f28)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f29.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f29.set(fbeValue.f29)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f30.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f30.set(fbeValue.f30)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f31.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f31.set(fbeValue.f31)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f32.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f32.set(fbeValue.f32)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f33.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f33.set(fbeValue.f33)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f34.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f34.set(fbeValue.f34)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f35.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f35.set(fbeValue.f35)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f36.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f36.set(fbeValue.f36)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f37.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f37.set(fbeValue.f37)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f38.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f38.set(fbeValue.f38)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f39.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f39.set(fbeValue.f39)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f40.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f40.set(fbeValue.f40)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f41.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f41.set(fbeValue.f41)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f42.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f42.set(fbeValue.f42)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f43.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f43.set(fbeValue.f43)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f44.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f44.set(fbeValue.f44)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    return fbeCurrentSize
  }
}

exports.FinalModelStructSimple = FinalModelStructSimple

/**
 * Fast Binary Encoding StructSimple final model class
 */
class StructSimpleFinalModel extends fbe.Model {
  /**
   * Initialize final model with the given buffer
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Read/Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer)
    this._model = new FinalModelStructSimple(this.buffer, 8)
  }

  /**
   * Get the model type
   * @this {!StructSimpleFinalModel}
   * @returns {!number} Model type
   */
  get FBEType () {
    return StructSimpleFinalModel.FBEType
  }

  /**
   * Get the model type (static)
   * @this {!StructSimpleFinalModel}
   * @returns {!number} Model type
   */
  static get FBEType () {
    return FinalModelStructSimple.FBEType
  }

  /**
   * Check if the struct value is valid
   * @this {!StructSimpleFinalModel}
   * @returns {!boolean} Model valid state
   */
  verify () {
    if ((this.buffer.offset + this._model.FBEOffset) > this.buffer.size) {
      return false
    }

    let fbeStructSize = this.readUInt32(this._model.FBEOffset - 8)
    let fbeStructType = this.readUInt32(this._model.FBEOffset - 4)
    if ((fbeStructSize <= 0) || (fbeStructType !== this.FBEType)) {
      return false
    }

    return ((8 + this._model.verify()) === fbeStructSize)
  }

  /**
   * Serialize the struct value
   * @this {!StructSimpleFinalModel}
   * @param {!StructSimple} value StructSimple value
   * @return {!number} Struct size
   */
  serialize (value) {
    let fbeInitialSize = this.buffer.size

    let fbeStructType = this.FBEType
    let fbeStructSize = 8 + this._model.FBEAllocationSize(value)
    let fbeStructOffset = this.buffer.allocate(fbeStructSize) - this.buffer.offset
    console.assert(((this.buffer.offset + fbeStructOffset + fbeStructSize) <= this.buffer.size), 'Model is broken!')
    if ((this.buffer.offset + fbeStructOffset + fbeStructSize) > this.buffer.size) {
      return 0
    }

    fbeStructSize = 8 + this._model.set(value)
    this.buffer.resize(fbeInitialSize + fbeStructSize)

    this.writeUInt32(this._model.FBEOffset - 8, fbeStructSize)
    this.writeUInt32(this._model.FBEOffset - 4, fbeStructType)

    return fbeStructSize
  }

  /**
   * Deserialize the struct value
   * @this {!StructSimpleFinalModel}
   * @param {!StructSimple} value StructSimple value, defaults is new StructSimple()
   * @return {!object} Deserialized StructSimple value and its size
   */
  deserialize (value = new StructSimple()) {
    console.assert(((this.buffer.offset + this._model.FBEOffset) <= this.buffer.size), 'Model is broken!')
    if ((this.buffer.offset + this._model.FBEOffset) > this.buffer.size) {
      return { value: new StructSimple(), size: 0 }
    }

    let fbeStructSize = this.readUInt32(this._model.FBEOffset - 8)
    let fbeStructType = this.readUInt32(this._model.FBEOffset - 4)
    console.assert(((fbeStructSize > 0) && (fbeStructType === this.FBEType)), 'Model is broken!')
    if ((fbeStructSize <= 0) || (fbeStructType !== this.FBEType)) {
      return { value: new StructSimple(), size: 8 }
    }

    let fbeResult = this._model.get(value)
    return { value: fbeResult.value, size: (8 + fbeResult.size) }
  }

  /**
   * Move to the next struct value
   * @this {!StructSimpleFinalModel}
   * @param {!number} prev Previous StructSimple model size
   */
  next (prev) {
    this._model.FBEShift(prev)
  }
}

exports.StructSimpleFinalModel = StructSimpleFinalModel

/**
 * StructOptional struct
 */
class StructOptional extends StructSimple {
  /**
   * Initialize struct
   * @param {!StructSimple=} parent
   * @param {boolean=} f100
   * @param {boolean=} f101
   * @param {boolean=} f102
   * @param {number=} f103
   * @param {number=} f104
   * @param {number=} f105
   * @param {string=} f106
   * @param {string=} f107
   * @param {string=} f108
   * @param {string=} f109
   * @param {string=} f110
   * @param {string=} f111
   * @param {number=} f112
   * @param {number=} f113
   * @param {number=} f114
   * @param {number=} f115
   * @param {number=} f116
   * @param {number=} f117
   * @param {number=} f118
   * @param {number=} f119
   * @param {number=} f120
   * @param {number=} f121
   * @param {number=} f122
   * @param {number=} f123
   * @param {number=} f124
   * @param {number=} f125
   * @param {number=} f126
   * @param {number=} f127
   * @param {number=} f128
   * @param {number=} f129
   * @param {number=} f130
   * @param {number=} f131
   * @param {number=} f132
   * @param {number=} f133
   * @param {number=} f134
   * @param {number=} f135
   * @param {number=} f136
   * @param {number=} f137
   * @param {number=} f138
   * @param {number=} f139
   * @param {number=} f140
   * @param {number=} f141
   * @param {Big=} f142
   * @param {Big=} f143
   * @param {Big=} f144
   * @param {string=} f145
   * @param {string=} f146
   * @param {string=} f147
   * @param {Date=} f148
   * @param {Date=} f149
   * @param {Date=} f150
   * @param {UUID=} f151
   * @param {UUID=} f152
   * @param {UUID=} f153
   * @param {proto.OrderSide=} f154
   * @param {proto.OrderSide=} f155
   * @param {proto.OrderType=} f156
   * @param {proto.OrderType=} f157
   * @param {proto.Order=} f158
   * @param {proto.Order=} f159
   * @param {proto.Balance=} f160
   * @param {proto.Balance=} f161
   * @param {proto.State=} f162
   * @param {proto.State=} f163
   * @param {proto.Account=} f164
   * @param {proto.Account=} f165
   * @constructor
   */
  constructor (parent = new StructSimple(), f100 = undefined, f101 = true, f102 = undefined, f103 = undefined, f104 = 255, f105 = undefined, f106 = undefined, f107 = '!', f108 = undefined, f109 = undefined, f110 = String.fromCharCode(0x0444), f111 = undefined, f112 = undefined, f113 = 127, f114 = undefined, f115 = undefined, f116 = 255, f117 = undefined, f118 = undefined, f119 = 32767, f120 = undefined, f121 = undefined, f122 = 65535, f123 = undefined, f124 = undefined, f125 = 2147483647, f126 = undefined, f127 = undefined, f128 = 0xFFFFFFFF, f129 = undefined, f130 = undefined, f131 = new Int64(4294967295, 2147483647), f132 = undefined, f133 = undefined, f134 = new UInt64(4294967295, 4294967295), f135 = undefined, f136 = undefined, f137 = 123.456, f138 = undefined, f139 = undefined, f140 = -123.456e+123, f141 = undefined, f142 = undefined, f143 = new Big('123456.123456'), f144 = undefined, f145 = undefined, f146 = 'Initial string!', f147 = undefined, f148 = undefined, f149 = new Date(Date.now()), f150 = undefined, f151 = undefined, f152 = new UUID('123e4567-e89b-12d3-a456-426655440000'), f153 = undefined, f154 = undefined, f155 = undefined, f156 = undefined, f157 = undefined, f158 = undefined, f159 = undefined, f160 = undefined, f161 = undefined, f162 = undefined, f163 = undefined, f164 = undefined, f165 = undefined) {
    super()
    super.copy(parent.clone())
    this.f100 = f100
    this.f101 = f101
    this.f102 = f102
    this.f103 = f103
    this.f104 = f104
    this.f105 = f105
    this.f106 = f106
    this.f107 = f107
    this.f108 = f108
    this.f109 = f109
    this.f110 = f110
    this.f111 = f111
    this.f112 = f112
    this.f113 = f113
    this.f114 = f114
    this.f115 = f115
    this.f116 = f116
    this.f117 = f117
    this.f118 = f118
    this.f119 = f119
    this.f120 = f120
    this.f121 = f121
    this.f122 = f122
    this.f123 = f123
    this.f124 = f124
    this.f125 = f125
    this.f126 = f126
    this.f127 = f127
    this.f128 = f128
    this.f129 = f129
    this.f130 = f130
    this.f131 = f131
    this.f132 = f132
    this.f133 = f133
    this.f134 = f134
    this.f135 = f135
    this.f136 = f136
    this.f137 = f137
    this.f138 = f138
    this.f139 = f139
    this.f140 = f140
    this.f141 = f141
    this.f142 = f142
    this.f143 = f143
    this.f144 = f144
    this.f145 = f145
    this.f146 = f146
    this.f147 = f147
    this.f148 = f148
    this.f149 = f149
    this.f150 = f150
    this.f151 = f151
    this.f152 = f152
    this.f153 = f153
    this.f154 = f154
    this.f155 = f155
    this.f156 = f156
    this.f157 = f157
    this.f158 = f158
    this.f159 = f159
    this.f160 = f160
    this.f161 = f161
    this.f162 = f162
    this.f163 = f163
    this.f164 = f164
    this.f165 = f165
  }

  /**
   * Copy struct
   * @this {!StructOptional}
   * @param {!StructOptional} other Other struct
   * @returns {!StructOptional} This struct
   */
  copy (other) {
    super.copy(other)
    if (other.f100 != null) {
      this.f100 = other.f100
    } else {
      this.f100 = undefined
    }
    if (other.f101 != null) {
      this.f101 = other.f101
    } else {
      this.f101 = undefined
    }
    if (other.f102 != null) {
      this.f102 = other.f102
    } else {
      this.f102 = undefined
    }
    if (other.f103 != null) {
      this.f103 = other.f103
    } else {
      this.f103 = undefined
    }
    if (other.f104 != null) {
      this.f104 = other.f104
    } else {
      this.f104 = undefined
    }
    if (other.f105 != null) {
      this.f105 = other.f105
    } else {
      this.f105 = undefined
    }
    if (other.f106 != null) {
      this.f106 = other.f106
    } else {
      this.f106 = undefined
    }
    if (other.f107 != null) {
      this.f107 = other.f107
    } else {
      this.f107 = undefined
    }
    if (other.f108 != null) {
      this.f108 = other.f108
    } else {
      this.f108 = undefined
    }
    if (other.f109 != null) {
      this.f109 = other.f109
    } else {
      this.f109 = undefined
    }
    if (other.f110 != null) {
      this.f110 = other.f110
    } else {
      this.f110 = undefined
    }
    if (other.f111 != null) {
      this.f111 = other.f111
    } else {
      this.f111 = undefined
    }
    if (other.f112 != null) {
      this.f112 = other.f112
    } else {
      this.f112 = undefined
    }
    if (other.f113 != null) {
      this.f113 = other.f113
    } else {
      this.f113 = undefined
    }
    if (other.f114 != null) {
      this.f114 = other.f114
    } else {
      this.f114 = undefined
    }
    if (other.f115 != null) {
      this.f115 = other.f115
    } else {
      this.f115 = undefined
    }
    if (other.f116 != null) {
      this.f116 = other.f116
    } else {
      this.f116 = undefined
    }
    if (other.f117 != null) {
      this.f117 = other.f117
    } else {
      this.f117 = undefined
    }
    if (other.f118 != null) {
      this.f118 = other.f118
    } else {
      this.f118 = undefined
    }
    if (other.f119 != null) {
      this.f119 = other.f119
    } else {
      this.f119 = undefined
    }
    if (other.f120 != null) {
      this.f120 = other.f120
    } else {
      this.f120 = undefined
    }
    if (other.f121 != null) {
      this.f121 = other.f121
    } else {
      this.f121 = undefined
    }
    if (other.f122 != null) {
      this.f122 = other.f122
    } else {
      this.f122 = undefined
    }
    if (other.f123 != null) {
      this.f123 = other.f123
    } else {
      this.f123 = undefined
    }
    if (other.f124 != null) {
      this.f124 = other.f124
    } else {
      this.f124 = undefined
    }
    if (other.f125 != null) {
      this.f125 = other.f125
    } else {
      this.f125 = undefined
    }
    if (other.f126 != null) {
      this.f126 = other.f126
    } else {
      this.f126 = undefined
    }
    if (other.f127 != null) {
      this.f127 = other.f127
    } else {
      this.f127 = undefined
    }
    if (other.f128 != null) {
      this.f128 = other.f128
    } else {
      this.f128 = undefined
    }
    if (other.f129 != null) {
      this.f129 = other.f129
    } else {
      this.f129 = undefined
    }
    if (other.f130 != null) {
      this.f130 = Int64.fromNumber(other.f130)
    } else {
      this.f130 = undefined
    }
    if (other.f131 != null) {
      this.f131 = Int64.fromNumber(other.f131)
    } else {
      this.f131 = undefined
    }
    if (other.f132 != null) {
      this.f132 = Int64.fromNumber(other.f132)
    } else {
      this.f132 = undefined
    }
    if (other.f133 != null) {
      this.f133 = UInt64.fromNumber(other.f133)
    } else {
      this.f133 = undefined
    }
    if (other.f134 != null) {
      this.f134 = UInt64.fromNumber(other.f134)
    } else {
      this.f134 = undefined
    }
    if (other.f135 != null) {
      this.f135 = UInt64.fromNumber(other.f135)
    } else {
      this.f135 = undefined
    }
    if (other.f136 != null) {
      this.f136 = other.f136
    } else {
      this.f136 = undefined
    }
    if (other.f137 != null) {
      this.f137 = other.f137
    } else {
      this.f137 = undefined
    }
    if (other.f138 != null) {
      this.f138 = other.f138
    } else {
      this.f138 = undefined
    }
    if (other.f139 != null) {
      this.f139 = other.f139
    } else {
      this.f139 = undefined
    }
    if (other.f140 != null) {
      this.f140 = other.f140
    } else {
      this.f140 = undefined
    }
    if (other.f141 != null) {
      this.f141 = other.f141
    } else {
      this.f141 = undefined
    }
    if (other.f142 != null) {
      this.f142 = new Big(other.f142)
    } else {
      this.f142 = undefined
    }
    if (other.f143 != null) {
      this.f143 = new Big(other.f143)
    } else {
      this.f143 = undefined
    }
    if (other.f144 != null) {
      this.f144 = new Big(other.f144)
    } else {
      this.f144 = undefined
    }
    if (other.f145 != null) {
      this.f145 = other.f145
    } else {
      this.f145 = undefined
    }
    if (other.f146 != null) {
      this.f146 = other.f146
    } else {
      this.f146 = undefined
    }
    if (other.f147 != null) {
      this.f147 = other.f147
    } else {
      this.f147 = undefined
    }
    if (other.f148 != null) {
      if (other.f148 instanceof Date) {
        this.f148 = new Date(other.f148.getTime())
      } else {
        this.f148 = new Date(Math.round(other.f148 / 1000000))
      }
    } else {
      this.f148 = undefined
    }
    if (other.f149 != null) {
      if (other.f149 instanceof Date) {
        this.f149 = new Date(other.f149.getTime())
      } else {
        this.f149 = new Date(Math.round(other.f149 / 1000000))
      }
    } else {
      this.f149 = undefined
    }
    if (other.f150 != null) {
      if (other.f150 instanceof Date) {
        this.f150 = new Date(other.f150.getTime())
      } else {
        this.f150 = new Date(Math.round(other.f150 / 1000000))
      }
    } else {
      this.f150 = undefined
    }
    if (other.f151 != null) {
      this.f151 = new UUID(other.f151)
    } else {
      this.f151 = undefined
    }
    if (other.f152 != null) {
      this.f152 = new UUID(other.f152)
    } else {
      this.f152 = undefined
    }
    if (other.f153 != null) {
      this.f153 = new UUID(other.f153)
    } else {
      this.f153 = undefined
    }
    if (other.f154 != null) {
      this.f154 = proto.OrderSide.fromObject(other.f154)
    } else {
      this.f154 = undefined
    }
    if (other.f155 != null) {
      this.f155 = proto.OrderSide.fromObject(other.f155)
    } else {
      this.f155 = undefined
    }
    if (other.f156 != null) {
      this.f156 = proto.OrderType.fromObject(other.f156)
    } else {
      this.f156 = undefined
    }
    if (other.f157 != null) {
      this.f157 = proto.OrderType.fromObject(other.f157)
    } else {
      this.f157 = undefined
    }
    if (other.f158 != null) {
      this.f158 = proto.Order.fromObject(other.f158)
    } else {
      this.f158 = undefined
    }
    if (other.f159 != null) {
      this.f159 = proto.Order.fromObject(other.f159)
    } else {
      this.f159 = undefined
    }
    if (other.f160 != null) {
      this.f160 = proto.Balance.fromObject(other.f160)
    } else {
      this.f160 = undefined
    }
    if (other.f161 != null) {
      this.f161 = proto.Balance.fromObject(other.f161)
    } else {
      this.f161 = undefined
    }
    if (other.f162 != null) {
      this.f162 = proto.State.fromObject(other.f162)
    } else {
      this.f162 = undefined
    }
    if (other.f163 != null) {
      this.f163 = proto.State.fromObject(other.f163)
    } else {
      this.f163 = undefined
    }
    if (other.f164 != null) {
      this.f164 = proto.Account.fromObject(other.f164)
    } else {
      this.f164 = undefined
    }
    if (other.f165 != null) {
      this.f165 = proto.Account.fromObject(other.f165)
    } else {
      this.f165 = undefined
    }
    return this
  }

  /**
   * Clone struct
   * @this {!StructOptional}
   * @returns {!StructOptional} Cloned struct
   */
  clone () {
    // Serialize the struct to the FBE stream
    let writer = new StructOptionalModel(new fbe.WriteBuffer())
    writer.serialize(this)

    // Deserialize the struct from the FBE stream
    let reader = new StructOptionalModel(new fbe.ReadBuffer())
    reader.attachBuffer(writer.buffer)
    return reader.deserialize().value
  }

  /**
   * Is this struct equal to other one?
   * @this {!StructOptional}
   * @param {!StructOptional} other Other struct
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof StructOptional)) {
      throw new TypeError('Instance of StructOptional is required!')
    }
    // noinspection RedundantIfStatementJS
    if (!super.eq(other)) {
      return false
    }
    return true
  }

  /**
   * Convert struct to string
   * @this {!StructOptional}
   * @returns {!string} Struct value string
   */
  toString () {
    let result = ''
    result += 'StructOptional('
    result += super.toString()
    result += ',f100='
    if (this.f100 != null) {
      result += this.f100 ? 'true' : 'false'
    } else {
      result += 'null'
    }
    result += ',f101='
    if (this.f101 != null) {
      result += this.f101 ? 'true' : 'false'
    } else {
      result += 'null'
    }
    result += ',f102='
    if (this.f102 != null) {
      result += this.f102 ? 'true' : 'false'
    } else {
      result += 'null'
    }
    result += ',f103='
    if (this.f103 != null) {
      result += this.f103.toString()
    } else {
      result += 'null'
    }
    result += ',f104='
    if (this.f104 != null) {
      result += this.f104.toString()
    } else {
      result += 'null'
    }
    result += ',f105='
    if (this.f105 != null) {
      result += this.f105.toString()
    } else {
      result += 'null'
    }
    result += ',f106='
    if (this.f106 != null) {
      result += "'"
      result += this.f106.toString()
      result += "'"
    } else {
      result += 'null'
    }
    result += ',f107='
    if (this.f107 != null) {
      result += "'"
      result += this.f107.toString()
      result += "'"
    } else {
      result += 'null'
    }
    result += ',f108='
    if (this.f108 != null) {
      result += "'"
      result += this.f108.toString()
      result += "'"
    } else {
      result += 'null'
    }
    result += ',f109='
    if (this.f109 != null) {
      result += "'"
      result += this.f109.toString()
      result += "'"
    } else {
      result += 'null'
    }
    result += ',f110='
    if (this.f110 != null) {
      result += "'"
      result += this.f110.toString()
      result += "'"
    } else {
      result += 'null'
    }
    result += ',f111='
    if (this.f111 != null) {
      result += "'"
      result += this.f111.toString()
      result += "'"
    } else {
      result += 'null'
    }
    result += ',f112='
    if (this.f112 != null) {
      result += this.f112.toString()
    } else {
      result += 'null'
    }
    result += ',f113='
    if (this.f113 != null) {
      result += this.f113.toString()
    } else {
      result += 'null'
    }
    result += ',f114='
    if (this.f114 != null) {
      result += this.f114.toString()
    } else {
      result += 'null'
    }
    result += ',f115='
    if (this.f115 != null) {
      result += this.f115.toString()
    } else {
      result += 'null'
    }
    result += ',f116='
    if (this.f116 != null) {
      result += this.f116.toString()
    } else {
      result += 'null'
    }
    result += ',f117='
    if (this.f117 != null) {
      result += this.f117.toString()
    } else {
      result += 'null'
    }
    result += ',f118='
    if (this.f118 != null) {
      result += this.f118.toString()
    } else {
      result += 'null'
    }
    result += ',f119='
    if (this.f119 != null) {
      result += this.f119.toString()
    } else {
      result += 'null'
    }
    result += ',f120='
    if (this.f120 != null) {
      result += this.f120.toString()
    } else {
      result += 'null'
    }
    result += ',f121='
    if (this.f121 != null) {
      result += this.f121.toString()
    } else {
      result += 'null'
    }
    result += ',f122='
    if (this.f122 != null) {
      result += this.f122.toString()
    } else {
      result += 'null'
    }
    result += ',f123='
    if (this.f123 != null) {
      result += this.f123.toString()
    } else {
      result += 'null'
    }
    result += ',f124='
    if (this.f124 != null) {
      result += this.f124.toString()
    } else {
      result += 'null'
    }
    result += ',f125='
    if (this.f125 != null) {
      result += this.f125.toString()
    } else {
      result += 'null'
    }
    result += ',f126='
    if (this.f126 != null) {
      result += this.f126.toString()
    } else {
      result += 'null'
    }
    result += ',f127='
    if (this.f127 != null) {
      result += this.f127.toString()
    } else {
      result += 'null'
    }
    result += ',f128='
    if (this.f128 != null) {
      result += this.f128.toString()
    } else {
      result += 'null'
    }
    result += ',f129='
    if (this.f129 != null) {
      result += this.f129.toString()
    } else {
      result += 'null'
    }
    result += ',f130='
    if (this.f130 != null) {
      result += this.f130.toString()
    } else {
      result += 'null'
    }
    result += ',f131='
    if (this.f131 != null) {
      result += this.f131.toString()
    } else {
      result += 'null'
    }
    result += ',f132='
    if (this.f132 != null) {
      result += this.f132.toString()
    } else {
      result += 'null'
    }
    result += ',f133='
    if (this.f133 != null) {
      result += this.f133.toString()
    } else {
      result += 'null'
    }
    result += ',f134='
    if (this.f134 != null) {
      result += this.f134.toString()
    } else {
      result += 'null'
    }
    result += ',f135='
    if (this.f135 != null) {
      result += this.f135.toString()
    } else {
      result += 'null'
    }
    result += ',f136='
    if (this.f136 != null) {
      result += this.f136.toString()
    } else {
      result += 'null'
    }
    result += ',f137='
    if (this.f137 != null) {
      result += this.f137.toString()
    } else {
      result += 'null'
    }
    result += ',f138='
    if (this.f138 != null) {
      result += this.f138.toString()
    } else {
      result += 'null'
    }
    result += ',f139='
    if (this.f139 != null) {
      result += this.f139.toString()
    } else {
      result += 'null'
    }
    result += ',f140='
    if (this.f140 != null) {
      result += this.f140.toString()
    } else {
      result += 'null'
    }
    result += ',f141='
    if (this.f141 != null) {
      result += this.f141.toString()
    } else {
      result += 'null'
    }
    result += ',f142='
    if (this.f142 != null) {
      result += this.f142.toFixed()
    } else {
      result += 'null'
    }
    result += ',f143='
    if (this.f143 != null) {
      result += this.f143.toFixed()
    } else {
      result += 'null'
    }
    result += ',f144='
    if (this.f144 != null) {
      result += this.f144.toFixed()
    } else {
      result += 'null'
    }
    result += ',f145='
    if (this.f145 != null) {
      result += '"'
      result += this.f145.toString()
      result += '"'
    } else {
      result += 'null'
    }
    result += ',f146='
    if (this.f146 != null) {
      result += '"'
      result += this.f146.toString()
      result += '"'
    } else {
      result += 'null'
    }
    result += ',f147='
    if (this.f147 != null) {
      result += '"'
      result += this.f147.toString()
      result += '"'
    } else {
      result += 'null'
    }
    result += ',f148='
    if (this.f148 != null) {
      result += this.f148.getTime() * 1000000
    } else {
      result += 'null'
    }
    result += ',f149='
    if (this.f149 != null) {
      result += this.f149.getTime() * 1000000
    } else {
      result += 'null'
    }
    result += ',f150='
    if (this.f150 != null) {
      result += this.f150.getTime() * 1000000
    } else {
      result += 'null'
    }
    result += ',f151='
    if (this.f151 != null) {
      result += '"'
      result += this.f151.toString()
      result += '"'
    } else {
      result += 'null'
    }
    result += ',f152='
    if (this.f152 != null) {
      result += '"'
      result += this.f152.toString()
      result += '"'
    } else {
      result += 'null'
    }
    result += ',f153='
    if (this.f153 != null) {
      result += '"'
      result += this.f153.toString()
      result += '"'
    } else {
      result += 'null'
    }
    result += ',f154='
    if (this.f154 != null) {
      result += this.f154.toString()
    } else {
      result += 'null'
    }
    result += ',f155='
    if (this.f155 != null) {
      result += this.f155.toString()
    } else {
      result += 'null'
    }
    result += ',f156='
    if (this.f156 != null) {
      result += this.f156.toString()
    } else {
      result += 'null'
    }
    result += ',f157='
    if (this.f157 != null) {
      result += this.f157.toString()
    } else {
      result += 'null'
    }
    result += ',f158='
    if (this.f158 != null) {
      result += this.f158.toString()
    } else {
      result += 'null'
    }
    result += ',f159='
    if (this.f159 != null) {
      result += this.f159.toString()
    } else {
      result += 'null'
    }
    result += ',f160='
    if (this.f160 != null) {
      result += this.f160.toString()
    } else {
      result += 'null'
    }
    result += ',f161='
    if (this.f161 != null) {
      result += this.f161.toString()
    } else {
      result += 'null'
    }
    result += ',f162='
    if (this.f162 != null) {
      result += this.f162.toString()
    } else {
      result += 'null'
    }
    result += ',f163='
    if (this.f163 != null) {
      result += this.f163.toString()
    } else {
      result += 'null'
    }
    result += ',f164='
    if (this.f164 != null) {
      result += this.f164.toString()
    } else {
      result += 'null'
    }
    result += ',f165='
    if (this.f165 != null) {
      result += this.f165.toString()
    } else {
      result += 'null'
    }
    result += ')'
    return result
  }

  /**
   * Inspect struct
   * @this {!StructOptional}
   * @returns {!string} Struct value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert struct to JSON
   * @this {!StructOptional}
   * @returns {!object} Struct value for JSON
   */
  toJSON () {
    let parent = super.toJSON()
    let current = {
      f100: ((this.f100 != null) ? this.f100 : null),
      f101: ((this.f101 != null) ? this.f101 : null),
      f102: ((this.f102 != null) ? this.f102 : null),
      f103: ((this.f103 != null) ? this.f103 : null),
      f104: ((this.f104 != null) ? this.f104 : null),
      f105: ((this.f105 != null) ? this.f105 : null),
      f106: ((this.f106 != null) ? this.f106 : null),
      f107: ((this.f107 != null) ? this.f107 : null),
      f108: ((this.f108 != null) ? this.f108 : null),
      f109: ((this.f109 != null) ? this.f109 : null),
      f110: ((this.f110 != null) ? this.f110 : null),
      f111: ((this.f111 != null) ? this.f111 : null),
      f112: ((this.f112 != null) ? this.f112 : null),
      f113: ((this.f113 != null) ? this.f113 : null),
      f114: ((this.f114 != null) ? this.f114 : null),
      f115: ((this.f115 != null) ? this.f115 : null),
      f116: ((this.f116 != null) ? this.f116 : null),
      f117: ((this.f117 != null) ? this.f117 : null),
      f118: ((this.f118 != null) ? this.f118 : null),
      f119: ((this.f119 != null) ? this.f119 : null),
      f120: ((this.f120 != null) ? this.f120 : null),
      f121: ((this.f121 != null) ? this.f121 : null),
      f122: ((this.f122 != null) ? this.f122 : null),
      f123: ((this.f123 != null) ? this.f123 : null),
      f124: ((this.f124 != null) ? this.f124 : null),
      f125: ((this.f125 != null) ? this.f125 : null),
      f126: ((this.f126 != null) ? this.f126 : null),
      f127: ((this.f127 != null) ? this.f127 : null),
      f128: ((this.f128 != null) ? this.f128 : null),
      f129: ((this.f129 != null) ? this.f129 : null),
      f130: ((this.f130 != null) ? this.f130.toNumber() : null),
      f131: ((this.f131 != null) ? this.f131.toNumber() : null),
      f132: ((this.f132 != null) ? this.f132.toNumber() : null),
      f133: ((this.f133 != null) ? this.f133.toNumber() : null),
      f134: ((this.f134 != null) ? this.f134.toNumber() : null),
      f135: ((this.f135 != null) ? this.f135.toNumber() : null),
      f136: ((this.f136 != null) ? this.f136 : null),
      f137: ((this.f137 != null) ? this.f137 : null),
      f138: ((this.f138 != null) ? this.f138 : null),
      f139: ((this.f139 != null) ? this.f139 : null),
      f140: ((this.f140 != null) ? this.f140 : null),
      f141: ((this.f141 != null) ? this.f141 : null),
      f142: ((this.f142 != null) ? this.f142.toFixed() : null),
      f143: ((this.f143 != null) ? this.f143.toFixed() : null),
      f144: ((this.f144 != null) ? this.f144.toFixed() : null),
      f145: ((this.f145 != null) ? this.f145 : null),
      f146: ((this.f146 != null) ? this.f146 : null),
      f147: ((this.f147 != null) ? this.f147 : null),
      f148: ((this.f148 != null) ? (this.f148.getTime() * 1000000) : null),
      f149: ((this.f149 != null) ? (this.f149.getTime() * 1000000) : null),
      f150: ((this.f150 != null) ? (this.f150.getTime() * 1000000) : null),
      f151: ((this.f151 != null) ? this.f151.toString() : null),
      f152: ((this.f152 != null) ? this.f152.toString() : null),
      f153: ((this.f153 != null) ? this.f153.toString() : null),
      f154: ((this.f154 != null) ? this.f154 : null),
      f155: ((this.f155 != null) ? this.f155 : null),
      f156: ((this.f156 != null) ? this.f156 : null),
      f157: ((this.f157 != null) ? this.f157 : null),
      f158: ((this.f158 != null) ? this.f158 : null),
      f159: ((this.f159 != null) ? this.f159 : null),
      f160: ((this.f160 != null) ? this.f160 : null),
      f161: ((this.f161 != null) ? this.f161 : null),
      f162: ((this.f162 != null) ? this.f162 : null),
      f163: ((this.f163 != null) ? this.f163 : null),
      f164: ((this.f164 != null) ? this.f164 : null),
      f165: ((this.f165 != null) ? this.f165 : null)
    }
    return { ...parent, ...current }
  }

  /**
   * Convert JSON to struct
   * @param {!string} json JSON string
   * @returns {!object} Struct value for JSON
   */
  static fromJSON (json) {
    return StructOptional.fromObject(JSON.parse(json))
  }

  /**
   * Create struct from object value
   * @param {!StructOptional} other Object value
   * @returns {!StructOptional} Created struct
   */
  static fromObject (other) {
    return new StructOptional().copy(other)
  }
}

exports.StructOptional = StructOptional

/**
 * Fast Binary Encoding StructOptional field model class
 */
class FieldModelStructOptional extends fbe.FieldModel {
  /**
   * Initialize field model with the given buffer and offset
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Buffer
   * @param {!number} offset Offset
   * @constructor
   */
  constructor (buffer, offset) {
    super(buffer, offset)
    this._parent = new FieldModelStructSimple(buffer, 4 + 4)
    this._f100 = new fbe.FieldModelOptional(new fbe.FieldModelBool(buffer, this._parent.FBEOffset + this._parent.FBEBody - 4 - 4), buffer, this._parent.FBEOffset + this._parent.FBEBody - 4 - 4)
    this._f101 = new fbe.FieldModelOptional(new fbe.FieldModelBool(buffer, this._f100.FBEOffset + this._f100.FBESize), buffer, this._f100.FBEOffset + this._f100.FBESize)
    this._f102 = new fbe.FieldModelOptional(new fbe.FieldModelBool(buffer, this._f101.FBEOffset + this._f101.FBESize), buffer, this._f101.FBEOffset + this._f101.FBESize)
    this._f103 = new fbe.FieldModelOptional(new fbe.FieldModelByte(buffer, this._f102.FBEOffset + this._f102.FBESize), buffer, this._f102.FBEOffset + this._f102.FBESize)
    this._f104 = new fbe.FieldModelOptional(new fbe.FieldModelByte(buffer, this._f103.FBEOffset + this._f103.FBESize), buffer, this._f103.FBEOffset + this._f103.FBESize)
    this._f105 = new fbe.FieldModelOptional(new fbe.FieldModelByte(buffer, this._f104.FBEOffset + this._f104.FBESize), buffer, this._f104.FBEOffset + this._f104.FBESize)
    this._f106 = new fbe.FieldModelOptional(new fbe.FieldModelChar(buffer, this._f105.FBEOffset + this._f105.FBESize), buffer, this._f105.FBEOffset + this._f105.FBESize)
    this._f107 = new fbe.FieldModelOptional(new fbe.FieldModelChar(buffer, this._f106.FBEOffset + this._f106.FBESize), buffer, this._f106.FBEOffset + this._f106.FBESize)
    this._f108 = new fbe.FieldModelOptional(new fbe.FieldModelChar(buffer, this._f107.FBEOffset + this._f107.FBESize), buffer, this._f107.FBEOffset + this._f107.FBESize)
    this._f109 = new fbe.FieldModelOptional(new fbe.FieldModelWChar(buffer, this._f108.FBEOffset + this._f108.FBESize), buffer, this._f108.FBEOffset + this._f108.FBESize)
    this._f110 = new fbe.FieldModelOptional(new fbe.FieldModelWChar(buffer, this._f109.FBEOffset + this._f109.FBESize), buffer, this._f109.FBEOffset + this._f109.FBESize)
    this._f111 = new fbe.FieldModelOptional(new fbe.FieldModelWChar(buffer, this._f110.FBEOffset + this._f110.FBESize), buffer, this._f110.FBEOffset + this._f110.FBESize)
    this._f112 = new fbe.FieldModelOptional(new fbe.FieldModelInt8(buffer, this._f111.FBEOffset + this._f111.FBESize), buffer, this._f111.FBEOffset + this._f111.FBESize)
    this._f113 = new fbe.FieldModelOptional(new fbe.FieldModelInt8(buffer, this._f112.FBEOffset + this._f112.FBESize), buffer, this._f112.FBEOffset + this._f112.FBESize)
    this._f114 = new fbe.FieldModelOptional(new fbe.FieldModelInt8(buffer, this._f113.FBEOffset + this._f113.FBESize), buffer, this._f113.FBEOffset + this._f113.FBESize)
    this._f115 = new fbe.FieldModelOptional(new fbe.FieldModelUInt8(buffer, this._f114.FBEOffset + this._f114.FBESize), buffer, this._f114.FBEOffset + this._f114.FBESize)
    this._f116 = new fbe.FieldModelOptional(new fbe.FieldModelUInt8(buffer, this._f115.FBEOffset + this._f115.FBESize), buffer, this._f115.FBEOffset + this._f115.FBESize)
    this._f117 = new fbe.FieldModelOptional(new fbe.FieldModelUInt8(buffer, this._f116.FBEOffset + this._f116.FBESize), buffer, this._f116.FBEOffset + this._f116.FBESize)
    this._f118 = new fbe.FieldModelOptional(new fbe.FieldModelInt16(buffer, this._f117.FBEOffset + this._f117.FBESize), buffer, this._f117.FBEOffset + this._f117.FBESize)
    this._f119 = new fbe.FieldModelOptional(new fbe.FieldModelInt16(buffer, this._f118.FBEOffset + this._f118.FBESize), buffer, this._f118.FBEOffset + this._f118.FBESize)
    this._f120 = new fbe.FieldModelOptional(new fbe.FieldModelInt16(buffer, this._f119.FBEOffset + this._f119.FBESize), buffer, this._f119.FBEOffset + this._f119.FBESize)
    this._f121 = new fbe.FieldModelOptional(new fbe.FieldModelUInt16(buffer, this._f120.FBEOffset + this._f120.FBESize), buffer, this._f120.FBEOffset + this._f120.FBESize)
    this._f122 = new fbe.FieldModelOptional(new fbe.FieldModelUInt16(buffer, this._f121.FBEOffset + this._f121.FBESize), buffer, this._f121.FBEOffset + this._f121.FBESize)
    this._f123 = new fbe.FieldModelOptional(new fbe.FieldModelUInt16(buffer, this._f122.FBEOffset + this._f122.FBESize), buffer, this._f122.FBEOffset + this._f122.FBESize)
    this._f124 = new fbe.FieldModelOptional(new fbe.FieldModelInt32(buffer, this._f123.FBEOffset + this._f123.FBESize), buffer, this._f123.FBEOffset + this._f123.FBESize)
    this._f125 = new fbe.FieldModelOptional(new fbe.FieldModelInt32(buffer, this._f124.FBEOffset + this._f124.FBESize), buffer, this._f124.FBEOffset + this._f124.FBESize)
    this._f126 = new fbe.FieldModelOptional(new fbe.FieldModelInt32(buffer, this._f125.FBEOffset + this._f125.FBESize), buffer, this._f125.FBEOffset + this._f125.FBESize)
    this._f127 = new fbe.FieldModelOptional(new fbe.FieldModelUInt32(buffer, this._f126.FBEOffset + this._f126.FBESize), buffer, this._f126.FBEOffset + this._f126.FBESize)
    this._f128 = new fbe.FieldModelOptional(new fbe.FieldModelUInt32(buffer, this._f127.FBEOffset + this._f127.FBESize), buffer, this._f127.FBEOffset + this._f127.FBESize)
    this._f129 = new fbe.FieldModelOptional(new fbe.FieldModelUInt32(buffer, this._f128.FBEOffset + this._f128.FBESize), buffer, this._f128.FBEOffset + this._f128.FBESize)
    this._f130 = new fbe.FieldModelOptional(new fbe.FieldModelInt64(buffer, this._f129.FBEOffset + this._f129.FBESize), buffer, this._f129.FBEOffset + this._f129.FBESize)
    this._f131 = new fbe.FieldModelOptional(new fbe.FieldModelInt64(buffer, this._f130.FBEOffset + this._f130.FBESize), buffer, this._f130.FBEOffset + this._f130.FBESize)
    this._f132 = new fbe.FieldModelOptional(new fbe.FieldModelInt64(buffer, this._f131.FBEOffset + this._f131.FBESize), buffer, this._f131.FBEOffset + this._f131.FBESize)
    this._f133 = new fbe.FieldModelOptional(new fbe.FieldModelUInt64(buffer, this._f132.FBEOffset + this._f132.FBESize), buffer, this._f132.FBEOffset + this._f132.FBESize)
    this._f134 = new fbe.FieldModelOptional(new fbe.FieldModelUInt64(buffer, this._f133.FBEOffset + this._f133.FBESize), buffer, this._f133.FBEOffset + this._f133.FBESize)
    this._f135 = new fbe.FieldModelOptional(new fbe.FieldModelUInt64(buffer, this._f134.FBEOffset + this._f134.FBESize), buffer, this._f134.FBEOffset + this._f134.FBESize)
    this._f136 = new fbe.FieldModelOptional(new fbe.FieldModelFloat(buffer, this._f135.FBEOffset + this._f135.FBESize), buffer, this._f135.FBEOffset + this._f135.FBESize)
    this._f137 = new fbe.FieldModelOptional(new fbe.FieldModelFloat(buffer, this._f136.FBEOffset + this._f136.FBESize), buffer, this._f136.FBEOffset + this._f136.FBESize)
    this._f138 = new fbe.FieldModelOptional(new fbe.FieldModelFloat(buffer, this._f137.FBEOffset + this._f137.FBESize), buffer, this._f137.FBEOffset + this._f137.FBESize)
    this._f139 = new fbe.FieldModelOptional(new fbe.FieldModelDouble(buffer, this._f138.FBEOffset + this._f138.FBESize), buffer, this._f138.FBEOffset + this._f138.FBESize)
    this._f140 = new fbe.FieldModelOptional(new fbe.FieldModelDouble(buffer, this._f139.FBEOffset + this._f139.FBESize), buffer, this._f139.FBEOffset + this._f139.FBESize)
    this._f141 = new fbe.FieldModelOptional(new fbe.FieldModelDouble(buffer, this._f140.FBEOffset + this._f140.FBESize), buffer, this._f140.FBEOffset + this._f140.FBESize)
    this._f142 = new fbe.FieldModelOptional(new fbe.FieldModelDecimal(buffer, this._f141.FBEOffset + this._f141.FBESize), buffer, this._f141.FBEOffset + this._f141.FBESize)
    this._f143 = new fbe.FieldModelOptional(new fbe.FieldModelDecimal(buffer, this._f142.FBEOffset + this._f142.FBESize), buffer, this._f142.FBEOffset + this._f142.FBESize)
    this._f144 = new fbe.FieldModelOptional(new fbe.FieldModelDecimal(buffer, this._f143.FBEOffset + this._f143.FBESize), buffer, this._f143.FBEOffset + this._f143.FBESize)
    this._f145 = new fbe.FieldModelOptional(new fbe.FieldModelString(buffer, this._f144.FBEOffset + this._f144.FBESize), buffer, this._f144.FBEOffset + this._f144.FBESize)
    this._f146 = new fbe.FieldModelOptional(new fbe.FieldModelString(buffer, this._f145.FBEOffset + this._f145.FBESize), buffer, this._f145.FBEOffset + this._f145.FBESize)
    this._f147 = new fbe.FieldModelOptional(new fbe.FieldModelString(buffer, this._f146.FBEOffset + this._f146.FBESize), buffer, this._f146.FBEOffset + this._f146.FBESize)
    this._f148 = new fbe.FieldModelOptional(new fbe.FieldModelTimestamp(buffer, this._f147.FBEOffset + this._f147.FBESize), buffer, this._f147.FBEOffset + this._f147.FBESize)
    this._f149 = new fbe.FieldModelOptional(new fbe.FieldModelTimestamp(buffer, this._f148.FBEOffset + this._f148.FBESize), buffer, this._f148.FBEOffset + this._f148.FBESize)
    this._f150 = new fbe.FieldModelOptional(new fbe.FieldModelTimestamp(buffer, this._f149.FBEOffset + this._f149.FBESize), buffer, this._f149.FBEOffset + this._f149.FBESize)
    this._f151 = new fbe.FieldModelOptional(new fbe.FieldModelUUID(buffer, this._f150.FBEOffset + this._f150.FBESize), buffer, this._f150.FBEOffset + this._f150.FBESize)
    this._f152 = new fbe.FieldModelOptional(new fbe.FieldModelUUID(buffer, this._f151.FBEOffset + this._f151.FBESize), buffer, this._f151.FBEOffset + this._f151.FBESize)
    this._f153 = new fbe.FieldModelOptional(new fbe.FieldModelUUID(buffer, this._f152.FBEOffset + this._f152.FBESize), buffer, this._f152.FBEOffset + this._f152.FBESize)
    this._f154 = new fbe.FieldModelOptional(new proto.FieldModelOrderSide(buffer, this._f153.FBEOffset + this._f153.FBESize), buffer, this._f153.FBEOffset + this._f153.FBESize)
    this._f155 = new fbe.FieldModelOptional(new proto.FieldModelOrderSide(buffer, this._f154.FBEOffset + this._f154.FBESize), buffer, this._f154.FBEOffset + this._f154.FBESize)
    this._f156 = new fbe.FieldModelOptional(new proto.FieldModelOrderType(buffer, this._f155.FBEOffset + this._f155.FBESize), buffer, this._f155.FBEOffset + this._f155.FBESize)
    this._f157 = new fbe.FieldModelOptional(new proto.FieldModelOrderType(buffer, this._f156.FBEOffset + this._f156.FBESize), buffer, this._f156.FBEOffset + this._f156.FBESize)
    this._f158 = new fbe.FieldModelOptional(new proto.FieldModelOrder(buffer, this._f157.FBEOffset + this._f157.FBESize), buffer, this._f157.FBEOffset + this._f157.FBESize)
    this._f159 = new fbe.FieldModelOptional(new proto.FieldModelOrder(buffer, this._f158.FBEOffset + this._f158.FBESize), buffer, this._f158.FBEOffset + this._f158.FBESize)
    this._f160 = new fbe.FieldModelOptional(new proto.FieldModelBalance(buffer, this._f159.FBEOffset + this._f159.FBESize), buffer, this._f159.FBEOffset + this._f159.FBESize)
    this._f161 = new fbe.FieldModelOptional(new proto.FieldModelBalance(buffer, this._f160.FBEOffset + this._f160.FBESize), buffer, this._f160.FBEOffset + this._f160.FBESize)
    this._f162 = new fbe.FieldModelOptional(new proto.FieldModelState(buffer, this._f161.FBEOffset + this._f161.FBESize), buffer, this._f161.FBEOffset + this._f161.FBESize)
    this._f163 = new fbe.FieldModelOptional(new proto.FieldModelState(buffer, this._f162.FBEOffset + this._f162.FBESize), buffer, this._f162.FBEOffset + this._f162.FBESize)
    this._f164 = new fbe.FieldModelOptional(new proto.FieldModelAccount(buffer, this._f163.FBEOffset + this._f163.FBESize), buffer, this._f163.FBEOffset + this._f163.FBESize)
    this._f165 = new fbe.FieldModelOptional(new proto.FieldModelAccount(buffer, this._f164.FBEOffset + this._f164.FBESize), buffer, this._f164.FBEOffset + this._f164.FBESize)
  }

  /**
   * Get the StructSimple field model
   * @this {!FieldModelStructOptional}
   * @returns {!FieldModelStructSimple} StructSimple field model
   */
  get parent () {
    return this._parent
  }

  /**
   * Get the f100 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f100 field model
   */
  get f100 () {
    return this._f100
  }

  /**
   * Get the f101 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f101 field model
   */
  get f101 () {
    return this._f101
  }

  /**
   * Get the f102 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f102 field model
   */
  get f102 () {
    return this._f102
  }

  /**
   * Get the f103 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f103 field model
   */
  get f103 () {
    return this._f103
  }

  /**
   * Get the f104 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f104 field model
   */
  get f104 () {
    return this._f104
  }

  /**
   * Get the f105 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f105 field model
   */
  get f105 () {
    return this._f105
  }

  /**
   * Get the f106 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f106 field model
   */
  get f106 () {
    return this._f106
  }

  /**
   * Get the f107 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f107 field model
   */
  get f107 () {
    return this._f107
  }

  /**
   * Get the f108 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f108 field model
   */
  get f108 () {
    return this._f108
  }

  /**
   * Get the f109 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f109 field model
   */
  get f109 () {
    return this._f109
  }

  /**
   * Get the f110 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f110 field model
   */
  get f110 () {
    return this._f110
  }

  /**
   * Get the f111 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f111 field model
   */
  get f111 () {
    return this._f111
  }

  /**
   * Get the f112 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f112 field model
   */
  get f112 () {
    return this._f112
  }

  /**
   * Get the f113 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f113 field model
   */
  get f113 () {
    return this._f113
  }

  /**
   * Get the f114 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f114 field model
   */
  get f114 () {
    return this._f114
  }

  /**
   * Get the f115 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f115 field model
   */
  get f115 () {
    return this._f115
  }

  /**
   * Get the f116 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f116 field model
   */
  get f116 () {
    return this._f116
  }

  /**
   * Get the f117 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f117 field model
   */
  get f117 () {
    return this._f117
  }

  /**
   * Get the f118 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f118 field model
   */
  get f118 () {
    return this._f118
  }

  /**
   * Get the f119 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f119 field model
   */
  get f119 () {
    return this._f119
  }

  /**
   * Get the f120 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f120 field model
   */
  get f120 () {
    return this._f120
  }

  /**
   * Get the f121 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f121 field model
   */
  get f121 () {
    return this._f121
  }

  /**
   * Get the f122 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f122 field model
   */
  get f122 () {
    return this._f122
  }

  /**
   * Get the f123 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f123 field model
   */
  get f123 () {
    return this._f123
  }

  /**
   * Get the f124 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f124 field model
   */
  get f124 () {
    return this._f124
  }

  /**
   * Get the f125 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f125 field model
   */
  get f125 () {
    return this._f125
  }

  /**
   * Get the f126 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f126 field model
   */
  get f126 () {
    return this._f126
  }

  /**
   * Get the f127 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f127 field model
   */
  get f127 () {
    return this._f127
  }

  /**
   * Get the f128 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f128 field model
   */
  get f128 () {
    return this._f128
  }

  /**
   * Get the f129 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f129 field model
   */
  get f129 () {
    return this._f129
  }

  /**
   * Get the f130 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f130 field model
   */
  get f130 () {
    return this._f130
  }

  /**
   * Get the f131 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f131 field model
   */
  get f131 () {
    return this._f131
  }

  /**
   * Get the f132 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f132 field model
   */
  get f132 () {
    return this._f132
  }

  /**
   * Get the f133 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f133 field model
   */
  get f133 () {
    return this._f133
  }

  /**
   * Get the f134 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f134 field model
   */
  get f134 () {
    return this._f134
  }

  /**
   * Get the f135 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f135 field model
   */
  get f135 () {
    return this._f135
  }

  /**
   * Get the f136 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f136 field model
   */
  get f136 () {
    return this._f136
  }

  /**
   * Get the f137 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f137 field model
   */
  get f137 () {
    return this._f137
  }

  /**
   * Get the f138 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f138 field model
   */
  get f138 () {
    return this._f138
  }

  /**
   * Get the f139 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f139 field model
   */
  get f139 () {
    return this._f139
  }

  /**
   * Get the f140 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f140 field model
   */
  get f140 () {
    return this._f140
  }

  /**
   * Get the f141 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f141 field model
   */
  get f141 () {
    return this._f141
  }

  /**
   * Get the f142 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f142 field model
   */
  get f142 () {
    return this._f142
  }

  /**
   * Get the f143 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f143 field model
   */
  get f143 () {
    return this._f143
  }

  /**
   * Get the f144 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f144 field model
   */
  get f144 () {
    return this._f144
  }

  /**
   * Get the f145 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f145 field model
   */
  get f145 () {
    return this._f145
  }

  /**
   * Get the f146 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f146 field model
   */
  get f146 () {
    return this._f146
  }

  /**
   * Get the f147 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f147 field model
   */
  get f147 () {
    return this._f147
  }

  /**
   * Get the f148 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f148 field model
   */
  get f148 () {
    return this._f148
  }

  /**
   * Get the f149 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f149 field model
   */
  get f149 () {
    return this._f149
  }

  /**
   * Get the f150 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f150 field model
   */
  get f150 () {
    return this._f150
  }

  /**
   * Get the f151 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f151 field model
   */
  get f151 () {
    return this._f151
  }

  /**
   * Get the f152 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f152 field model
   */
  get f152 () {
    return this._f152
  }

  /**
   * Get the f153 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f153 field model
   */
  get f153 () {
    return this._f153
  }

  /**
   * Get the f154 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f154 field model
   */
  get f154 () {
    return this._f154
  }

  /**
   * Get the f155 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f155 field model
   */
  get f155 () {
    return this._f155
  }

  /**
   * Get the f156 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f156 field model
   */
  get f156 () {
    return this._f156
  }

  /**
   * Get the f157 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f157 field model
   */
  get f157 () {
    return this._f157
  }

  /**
   * Get the f158 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f158 field model
   */
  get f158 () {
    return this._f158
  }

  /**
   * Get the f159 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f159 field model
   */
  get f159 () {
    return this._f159
  }

  /**
   * Get the f160 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f160 field model
   */
  get f160 () {
    return this._f160
  }

  /**
   * Get the f161 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f161 field model
   */
  get f161 () {
    return this._f161
  }

  /**
   * Get the f162 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f162 field model
   */
  get f162 () {
    return this._f162
  }

  /**
   * Get the f163 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f163 field model
   */
  get f163 () {
    return this._f163
  }

  /**
   * Get the f164 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f164 field model
   */
  get f164 () {
    return this._f164
  }

  /**
   * Get the f165 field model
   * @this {!FieldModelStructOptional}
   * @returns {!fbe.FieldModelOptional} f165 field model
   */
  get f165 () {
    return this._f165
  }

  /**
   * Get the field size
   * @this {!FieldModelStructOptional}
   * @returns {!number} Field size
   */
  get FBESize () {
    return 4
  }

  /**
   * Get the field body size
   * @this {!FieldModelStructOptional}
   * @returns {!number} Field body size
   */
  get FBEBody () {
    return 4 + 4 + this.parent.FBEBody - 4 - 4 + this.f100.FBESize + this.f101.FBESize + this.f102.FBESize + this.f103.FBESize + this.f104.FBESize + this.f105.FBESize + this.f106.FBESize + this.f107.FBESize + this.f108.FBESize + this.f109.FBESize + this.f110.FBESize + this.f111.FBESize + this.f112.FBESize + this.f113.FBESize + this.f114.FBESize + this.f115.FBESize + this.f116.FBESize + this.f117.FBESize + this.f118.FBESize + this.f119.FBESize + this.f120.FBESize + this.f121.FBESize + this.f122.FBESize + this.f123.FBESize + this.f124.FBESize + this.f125.FBESize + this.f126.FBESize + this.f127.FBESize + this.f128.FBESize + this.f129.FBESize + this.f130.FBESize + this.f131.FBESize + this.f132.FBESize + this.f133.FBESize + this.f134.FBESize + this.f135.FBESize + this.f136.FBESize + this.f137.FBESize + this.f138.FBESize + this.f139.FBESize + this.f140.FBESize + this.f141.FBESize + this.f142.FBESize + this.f143.FBESize + this.f144.FBESize + this.f145.FBESize + this.f146.FBESize + this.f147.FBESize + this.f148.FBESize + this.f149.FBESize + this.f150.FBESize + this.f151.FBESize + this.f152.FBESize + this.f153.FBESize + this.f154.FBESize + this.f155.FBESize + this.f156.FBESize + this.f157.FBESize + this.f158.FBESize + this.f159.FBESize + this.f160.FBESize + this.f161.FBESize + this.f162.FBESize + this.f163.FBESize + this.f164.FBESize + this.f165.FBESize
  }

  /**
   * Get the field extra size
   * @this {!FieldModelStructOptional}
   * @returns {!number} Field extra size
   */
  get FBEExtra () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4) > this._buffer.size)) {
      return 0
    }

    this._buffer.shift(fbeStructOffset)

    let fbeResult = this.FBEBody + this.parent.FBEExtra + this.f100.FBEExtra + this.f101.FBEExtra + this.f102.FBEExtra + this.f103.FBEExtra + this.f104.FBEExtra + this.f105.FBEExtra + this.f106.FBEExtra + this.f107.FBEExtra + this.f108.FBEExtra + this.f109.FBEExtra + this.f110.FBEExtra + this.f111.FBEExtra + this.f112.FBEExtra + this.f113.FBEExtra + this.f114.FBEExtra + this.f115.FBEExtra + this.f116.FBEExtra + this.f117.FBEExtra + this.f118.FBEExtra + this.f119.FBEExtra + this.f120.FBEExtra + this.f121.FBEExtra + this.f122.FBEExtra + this.f123.FBEExtra + this.f124.FBEExtra + this.f125.FBEExtra + this.f126.FBEExtra + this.f127.FBEExtra + this.f128.FBEExtra + this.f129.FBEExtra + this.f130.FBEExtra + this.f131.FBEExtra + this.f132.FBEExtra + this.f133.FBEExtra + this.f134.FBEExtra + this.f135.FBEExtra + this.f136.FBEExtra + this.f137.FBEExtra + this.f138.FBEExtra + this.f139.FBEExtra + this.f140.FBEExtra + this.f141.FBEExtra + this.f142.FBEExtra + this.f143.FBEExtra + this.f144.FBEExtra + this.f145.FBEExtra + this.f146.FBEExtra + this.f147.FBEExtra + this.f148.FBEExtra + this.f149.FBEExtra + this.f150.FBEExtra + this.f151.FBEExtra + this.f152.FBEExtra + this.f153.FBEExtra + this.f154.FBEExtra + this.f155.FBEExtra + this.f156.FBEExtra + this.f157.FBEExtra + this.f158.FBEExtra + this.f159.FBEExtra + this.f160.FBEExtra + this.f161.FBEExtra + this.f162.FBEExtra + this.f163.FBEExtra + this.f164.FBEExtra + this.f165.FBEExtra

    this._buffer.unshift(fbeStructOffset)

    return fbeResult
  }

  /**
   * Get the field type
   * @this {!FieldModelStructOptional}
   * @returns {!number} Field type
   */
  get FBEType () {
    return FieldModelStructOptional.FBEType
  }

  /**
   * Get the field type (static)
   * @this {!FieldModelStructOptional}
   * @returns {!number} Field type
   */
  static get FBEType () {
    return 111
  }

  /**
   * Check if the struct value is valid
   * @this {!FieldModelStructOptional}
   * @param {!boolean} fbeVerifyType Verify model type flag, defaults is true
   * @returns {!boolean} Field model valid state
   */
  verify (fbeVerifyType = true) {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return true
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4 + 4) > this._buffer.size)) {
      return false
    }

    let fbeStructSize = this.readUInt32(fbeStructOffset)
    if (fbeStructSize < 4 + 4) {
      return false
    }

    let fbeStructType = this.readUInt32(fbeStructOffset + 4)
    if (fbeVerifyType && (fbeStructType !== this.FBEType)) {
      return false
    }

    this._buffer.shift(fbeStructOffset)
    let fbeResult = this.verifyFields(fbeStructSize)
    this._buffer.unshift(fbeStructOffset)
    return fbeResult
  }

  /**
   * Check if the struct fields are valid
   * @this {!FieldModelStructOptional}
   * @param {!number} fbeStructSize FBE struct size
   * @returns {!boolean} Field model valid state
   */
  verifyFields (fbeStructSize) {
    let fbeCurrentSize = 4 + 4

    if ((fbeCurrentSize + this.parent.FBEBody - 4 - 4) > fbeStructSize) {
      return true
    }
    if (!this.parent.verifyFields(fbeStructSize)) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.parent.FBEBody - 4 - 4

    if ((fbeCurrentSize + this.f100.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f100.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f100.FBESize

    if ((fbeCurrentSize + this.f101.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f101.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f101.FBESize

    if ((fbeCurrentSize + this.f102.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f102.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f102.FBESize

    if ((fbeCurrentSize + this.f103.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f103.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f103.FBESize

    if ((fbeCurrentSize + this.f104.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f104.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f104.FBESize

    if ((fbeCurrentSize + this.f105.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f105.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f105.FBESize

    if ((fbeCurrentSize + this.f106.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f106.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f106.FBESize

    if ((fbeCurrentSize + this.f107.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f107.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f107.FBESize

    if ((fbeCurrentSize + this.f108.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f108.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f108.FBESize

    if ((fbeCurrentSize + this.f109.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f109.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f109.FBESize

    if ((fbeCurrentSize + this.f110.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f110.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f110.FBESize

    if ((fbeCurrentSize + this.f111.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f111.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f111.FBESize

    if ((fbeCurrentSize + this.f112.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f112.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f112.FBESize

    if ((fbeCurrentSize + this.f113.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f113.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f113.FBESize

    if ((fbeCurrentSize + this.f114.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f114.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f114.FBESize

    if ((fbeCurrentSize + this.f115.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f115.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f115.FBESize

    if ((fbeCurrentSize + this.f116.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f116.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f116.FBESize

    if ((fbeCurrentSize + this.f117.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f117.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f117.FBESize

    if ((fbeCurrentSize + this.f118.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f118.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f118.FBESize

    if ((fbeCurrentSize + this.f119.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f119.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f119.FBESize

    if ((fbeCurrentSize + this.f120.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f120.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f120.FBESize

    if ((fbeCurrentSize + this.f121.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f121.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f121.FBESize

    if ((fbeCurrentSize + this.f122.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f122.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f122.FBESize

    if ((fbeCurrentSize + this.f123.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f123.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f123.FBESize

    if ((fbeCurrentSize + this.f124.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f124.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f124.FBESize

    if ((fbeCurrentSize + this.f125.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f125.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f125.FBESize

    if ((fbeCurrentSize + this.f126.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f126.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f126.FBESize

    if ((fbeCurrentSize + this.f127.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f127.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f127.FBESize

    if ((fbeCurrentSize + this.f128.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f128.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f128.FBESize

    if ((fbeCurrentSize + this.f129.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f129.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f129.FBESize

    if ((fbeCurrentSize + this.f130.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f130.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f130.FBESize

    if ((fbeCurrentSize + this.f131.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f131.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f131.FBESize

    if ((fbeCurrentSize + this.f132.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f132.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f132.FBESize

    if ((fbeCurrentSize + this.f133.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f133.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f133.FBESize

    if ((fbeCurrentSize + this.f134.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f134.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f134.FBESize

    if ((fbeCurrentSize + this.f135.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f135.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f135.FBESize

    if ((fbeCurrentSize + this.f136.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f136.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f136.FBESize

    if ((fbeCurrentSize + this.f137.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f137.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f137.FBESize

    if ((fbeCurrentSize + this.f138.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f138.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f138.FBESize

    if ((fbeCurrentSize + this.f139.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f139.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f139.FBESize

    if ((fbeCurrentSize + this.f140.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f140.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f140.FBESize

    if ((fbeCurrentSize + this.f141.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f141.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f141.FBESize

    if ((fbeCurrentSize + this.f142.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f142.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f142.FBESize

    if ((fbeCurrentSize + this.f143.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f143.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f143.FBESize

    if ((fbeCurrentSize + this.f144.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f144.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f144.FBESize

    if ((fbeCurrentSize + this.f145.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f145.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f145.FBESize

    if ((fbeCurrentSize + this.f146.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f146.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f146.FBESize

    if ((fbeCurrentSize + this.f147.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f147.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f147.FBESize

    if ((fbeCurrentSize + this.f148.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f148.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f148.FBESize

    if ((fbeCurrentSize + this.f149.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f149.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f149.FBESize

    if ((fbeCurrentSize + this.f150.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f150.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f150.FBESize

    if ((fbeCurrentSize + this.f151.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f151.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f151.FBESize

    if ((fbeCurrentSize + this.f152.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f152.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f152.FBESize

    if ((fbeCurrentSize + this.f153.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f153.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f153.FBESize

    if ((fbeCurrentSize + this.f154.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f154.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f154.FBESize

    if ((fbeCurrentSize + this.f155.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f155.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f155.FBESize

    if ((fbeCurrentSize + this.f156.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f156.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f156.FBESize

    if ((fbeCurrentSize + this.f157.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f157.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f157.FBESize

    if ((fbeCurrentSize + this.f158.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f158.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f158.FBESize

    if ((fbeCurrentSize + this.f159.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f159.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f159.FBESize

    if ((fbeCurrentSize + this.f160.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f160.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f160.FBESize

    if ((fbeCurrentSize + this.f161.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f161.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f161.FBESize

    if ((fbeCurrentSize + this.f162.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f162.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f162.FBESize

    if ((fbeCurrentSize + this.f163.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f163.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f163.FBESize

    if ((fbeCurrentSize + this.f164.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f164.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f164.FBESize

    if ((fbeCurrentSize + this.f165.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f165.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f165.FBESize

    return true
  }

  /**
   * Get the struct value (begin phase)
   * @this {!FieldModelStructOptional}
   * @returns {!number} Field model begin offset
   */
  getBegin () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    console.assert((fbeStructOffset > 0) && ((this._buffer.offset + fbeStructOffset + 4 + 4) <= this._buffer.size), 'Model is broken!')
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4 + 4) > this._buffer.size)) {
      return 0
    }

    let fbeStructSize = this.readUInt32(fbeStructOffset)
    console.assert((fbeStructSize >= 4 + 4), 'Model is broken!')
    if (fbeStructSize < 4 + 4) {
      return 0
    }

    this._buffer.shift(fbeStructOffset)
    return fbeStructOffset
  }

  /**
   * Get the struct value (end phase)
   * @this {!FieldModelStructOptional}
   * @param {!number} fbeBegin Field model begin offset
   */
  getEnd (fbeBegin) {
    this._buffer.unshift(fbeBegin)
  }

  /**
   * Get the struct value
   * @this {!FieldModelStructOptional}
   * @param {!StructOptional} fbeValue Default value, defaults is new StructOptional()
   * @returns {!StructOptional} StructOptional value
   */
  get (fbeValue = new StructOptional()) {
    let fbeBegin = this.getBegin()
    if (fbeBegin === 0) {
      return fbeValue
    }

    let fbeStructSize = this.readUInt32(0)
    this.getFields(fbeValue, fbeStructSize)
    this.getEnd(fbeBegin)
    return fbeValue
  }

  /**
   * Get the struct fields values
   * @this {!FieldModelStructOptional}
   * @param {!StructOptional} fbeValue StructOptional value
   * @param {!number} fbeStructSize Struct size
   */
  getFields (fbeValue, fbeStructSize) {
    let fbeCurrentSize = 4 + 4

    if ((fbeCurrentSize + this.parent.FBEBody - 4 - 4) <= fbeStructSize) {
      this.parent.getFields(fbeValue, fbeStructSize)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.parent.FBEBody - 4 - 4

    if ((fbeCurrentSize + this.f100.FBESize) <= fbeStructSize) {
      fbeValue.f100 = this.f100.get()
    } else {
      fbeValue.f100 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f100.FBESize

    if ((fbeCurrentSize + this.f101.FBESize) <= fbeStructSize) {
      fbeValue.f101 = this.f101.get(true)
    } else {
      fbeValue.f101 = true
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f101.FBESize

    if ((fbeCurrentSize + this.f102.FBESize) <= fbeStructSize) {
      fbeValue.f102 = this.f102.get(undefined)
    } else {
      fbeValue.f102 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f102.FBESize

    if ((fbeCurrentSize + this.f103.FBESize) <= fbeStructSize) {
      fbeValue.f103 = this.f103.get()
    } else {
      fbeValue.f103 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f103.FBESize

    if ((fbeCurrentSize + this.f104.FBESize) <= fbeStructSize) {
      fbeValue.f104 = this.f104.get(255)
    } else {
      fbeValue.f104 = 255
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f104.FBESize

    if ((fbeCurrentSize + this.f105.FBESize) <= fbeStructSize) {
      fbeValue.f105 = this.f105.get(undefined)
    } else {
      fbeValue.f105 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f105.FBESize

    if ((fbeCurrentSize + this.f106.FBESize) <= fbeStructSize) {
      fbeValue.f106 = this.f106.get()
    } else {
      fbeValue.f106 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f106.FBESize

    if ((fbeCurrentSize + this.f107.FBESize) <= fbeStructSize) {
      fbeValue.f107 = this.f107.get('!')
    } else {
      fbeValue.f107 = '!'
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f107.FBESize

    if ((fbeCurrentSize + this.f108.FBESize) <= fbeStructSize) {
      fbeValue.f108 = this.f108.get(undefined)
    } else {
      fbeValue.f108 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f108.FBESize

    if ((fbeCurrentSize + this.f109.FBESize) <= fbeStructSize) {
      fbeValue.f109 = this.f109.get()
    } else {
      fbeValue.f109 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f109.FBESize

    if ((fbeCurrentSize + this.f110.FBESize) <= fbeStructSize) {
      fbeValue.f110 = this.f110.get(String.fromCharCode(0x0444))
    } else {
      fbeValue.f110 = String.fromCharCode(0x0444)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f110.FBESize

    if ((fbeCurrentSize + this.f111.FBESize) <= fbeStructSize) {
      fbeValue.f111 = this.f111.get(undefined)
    } else {
      fbeValue.f111 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f111.FBESize

    if ((fbeCurrentSize + this.f112.FBESize) <= fbeStructSize) {
      fbeValue.f112 = this.f112.get()
    } else {
      fbeValue.f112 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f112.FBESize

    if ((fbeCurrentSize + this.f113.FBESize) <= fbeStructSize) {
      fbeValue.f113 = this.f113.get(127)
    } else {
      fbeValue.f113 = 127
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f113.FBESize

    if ((fbeCurrentSize + this.f114.FBESize) <= fbeStructSize) {
      fbeValue.f114 = this.f114.get(undefined)
    } else {
      fbeValue.f114 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f114.FBESize

    if ((fbeCurrentSize + this.f115.FBESize) <= fbeStructSize) {
      fbeValue.f115 = this.f115.get()
    } else {
      fbeValue.f115 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f115.FBESize

    if ((fbeCurrentSize + this.f116.FBESize) <= fbeStructSize) {
      fbeValue.f116 = this.f116.get(255)
    } else {
      fbeValue.f116 = 255
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f116.FBESize

    if ((fbeCurrentSize + this.f117.FBESize) <= fbeStructSize) {
      fbeValue.f117 = this.f117.get(undefined)
    } else {
      fbeValue.f117 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f117.FBESize

    if ((fbeCurrentSize + this.f118.FBESize) <= fbeStructSize) {
      fbeValue.f118 = this.f118.get()
    } else {
      fbeValue.f118 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f118.FBESize

    if ((fbeCurrentSize + this.f119.FBESize) <= fbeStructSize) {
      fbeValue.f119 = this.f119.get(32767)
    } else {
      fbeValue.f119 = 32767
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f119.FBESize

    if ((fbeCurrentSize + this.f120.FBESize) <= fbeStructSize) {
      fbeValue.f120 = this.f120.get(undefined)
    } else {
      fbeValue.f120 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f120.FBESize

    if ((fbeCurrentSize + this.f121.FBESize) <= fbeStructSize) {
      fbeValue.f121 = this.f121.get()
    } else {
      fbeValue.f121 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f121.FBESize

    if ((fbeCurrentSize + this.f122.FBESize) <= fbeStructSize) {
      fbeValue.f122 = this.f122.get(65535)
    } else {
      fbeValue.f122 = 65535
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f122.FBESize

    if ((fbeCurrentSize + this.f123.FBESize) <= fbeStructSize) {
      fbeValue.f123 = this.f123.get(undefined)
    } else {
      fbeValue.f123 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f123.FBESize

    if ((fbeCurrentSize + this.f124.FBESize) <= fbeStructSize) {
      fbeValue.f124 = this.f124.get()
    } else {
      fbeValue.f124 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f124.FBESize

    if ((fbeCurrentSize + this.f125.FBESize) <= fbeStructSize) {
      fbeValue.f125 = this.f125.get(2147483647)
    } else {
      fbeValue.f125 = 2147483647
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f125.FBESize

    if ((fbeCurrentSize + this.f126.FBESize) <= fbeStructSize) {
      fbeValue.f126 = this.f126.get(undefined)
    } else {
      fbeValue.f126 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f126.FBESize

    if ((fbeCurrentSize + this.f127.FBESize) <= fbeStructSize) {
      fbeValue.f127 = this.f127.get()
    } else {
      fbeValue.f127 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f127.FBESize

    if ((fbeCurrentSize + this.f128.FBESize) <= fbeStructSize) {
      fbeValue.f128 = this.f128.get(0xFFFFFFFF)
    } else {
      fbeValue.f128 = 0xFFFFFFFF
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f128.FBESize

    if ((fbeCurrentSize + this.f129.FBESize) <= fbeStructSize) {
      fbeValue.f129 = this.f129.get(undefined)
    } else {
      fbeValue.f129 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f129.FBESize

    if ((fbeCurrentSize + this.f130.FBESize) <= fbeStructSize) {
      fbeValue.f130 = this.f130.get()
    } else {
      fbeValue.f130 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f130.FBESize

    if ((fbeCurrentSize + this.f131.FBESize) <= fbeStructSize) {
      fbeValue.f131 = this.f131.get(new Int64(4294967295, 2147483647))
    } else {
      fbeValue.f131 = new Int64(4294967295, 2147483647)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f131.FBESize

    if ((fbeCurrentSize + this.f132.FBESize) <= fbeStructSize) {
      fbeValue.f132 = this.f132.get(undefined)
    } else {
      fbeValue.f132 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f132.FBESize

    if ((fbeCurrentSize + this.f133.FBESize) <= fbeStructSize) {
      fbeValue.f133 = this.f133.get()
    } else {
      fbeValue.f133 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f133.FBESize

    if ((fbeCurrentSize + this.f134.FBESize) <= fbeStructSize) {
      fbeValue.f134 = this.f134.get(new UInt64(4294967295, 4294967295))
    } else {
      fbeValue.f134 = new UInt64(4294967295, 4294967295)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f134.FBESize

    if ((fbeCurrentSize + this.f135.FBESize) <= fbeStructSize) {
      fbeValue.f135 = this.f135.get(undefined)
    } else {
      fbeValue.f135 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f135.FBESize

    if ((fbeCurrentSize + this.f136.FBESize) <= fbeStructSize) {
      fbeValue.f136 = this.f136.get()
    } else {
      fbeValue.f136 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f136.FBESize

    if ((fbeCurrentSize + this.f137.FBESize) <= fbeStructSize) {
      fbeValue.f137 = this.f137.get(123.456)
    } else {
      fbeValue.f137 = 123.456
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f137.FBESize

    if ((fbeCurrentSize + this.f138.FBESize) <= fbeStructSize) {
      fbeValue.f138 = this.f138.get(undefined)
    } else {
      fbeValue.f138 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f138.FBESize

    if ((fbeCurrentSize + this.f139.FBESize) <= fbeStructSize) {
      fbeValue.f139 = this.f139.get()
    } else {
      fbeValue.f139 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f139.FBESize

    if ((fbeCurrentSize + this.f140.FBESize) <= fbeStructSize) {
      fbeValue.f140 = this.f140.get(-123.456e+123)
    } else {
      fbeValue.f140 = -123.456e+123
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f140.FBESize

    if ((fbeCurrentSize + this.f141.FBESize) <= fbeStructSize) {
      fbeValue.f141 = this.f141.get(undefined)
    } else {
      fbeValue.f141 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f141.FBESize

    if ((fbeCurrentSize + this.f142.FBESize) <= fbeStructSize) {
      fbeValue.f142 = this.f142.get()
    } else {
      fbeValue.f142 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f142.FBESize

    if ((fbeCurrentSize + this.f143.FBESize) <= fbeStructSize) {
      fbeValue.f143 = this.f143.get(new Big('123456.123456'))
    } else {
      fbeValue.f143 = new Big('123456.123456')
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f143.FBESize

    if ((fbeCurrentSize + this.f144.FBESize) <= fbeStructSize) {
      fbeValue.f144 = this.f144.get(undefined)
    } else {
      fbeValue.f144 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f144.FBESize

    if ((fbeCurrentSize + this.f145.FBESize) <= fbeStructSize) {
      fbeValue.f145 = this.f145.get()
    } else {
      fbeValue.f145 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f145.FBESize

    if ((fbeCurrentSize + this.f146.FBESize) <= fbeStructSize) {
      fbeValue.f146 = this.f146.get('Initial string!')
    } else {
      fbeValue.f146 = 'Initial string!'
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f146.FBESize

    if ((fbeCurrentSize + this.f147.FBESize) <= fbeStructSize) {
      fbeValue.f147 = this.f147.get(undefined)
    } else {
      fbeValue.f147 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f147.FBESize

    if ((fbeCurrentSize + this.f148.FBESize) <= fbeStructSize) {
      fbeValue.f148 = this.f148.get()
    } else {
      fbeValue.f148 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f148.FBESize

    if ((fbeCurrentSize + this.f149.FBESize) <= fbeStructSize) {
      fbeValue.f149 = this.f149.get(new Date(Date.now()))
    } else {
      fbeValue.f149 = new Date(Date.now())
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f149.FBESize

    if ((fbeCurrentSize + this.f150.FBESize) <= fbeStructSize) {
      fbeValue.f150 = this.f150.get(undefined)
    } else {
      fbeValue.f150 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f150.FBESize

    if ((fbeCurrentSize + this.f151.FBESize) <= fbeStructSize) {
      fbeValue.f151 = this.f151.get()
    } else {
      fbeValue.f151 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f151.FBESize

    if ((fbeCurrentSize + this.f152.FBESize) <= fbeStructSize) {
      fbeValue.f152 = this.f152.get(new UUID('123e4567-e89b-12d3-a456-426655440000'))
    } else {
      fbeValue.f152 = new UUID('123e4567-e89b-12d3-a456-426655440000')
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f152.FBESize

    if ((fbeCurrentSize + this.f153.FBESize) <= fbeStructSize) {
      fbeValue.f153 = this.f153.get(undefined)
    } else {
      fbeValue.f153 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f153.FBESize

    if ((fbeCurrentSize + this.f154.FBESize) <= fbeStructSize) {
      fbeValue.f154 = this.f154.get()
    } else {
      fbeValue.f154 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f154.FBESize

    if ((fbeCurrentSize + this.f155.FBESize) <= fbeStructSize) {
      fbeValue.f155 = this.f155.get(undefined)
    } else {
      fbeValue.f155 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f155.FBESize

    if ((fbeCurrentSize + this.f156.FBESize) <= fbeStructSize) {
      fbeValue.f156 = this.f156.get()
    } else {
      fbeValue.f156 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f156.FBESize

    if ((fbeCurrentSize + this.f157.FBESize) <= fbeStructSize) {
      fbeValue.f157 = this.f157.get(undefined)
    } else {
      fbeValue.f157 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f157.FBESize

    if ((fbeCurrentSize + this.f158.FBESize) <= fbeStructSize) {
      fbeValue.f158 = this.f158.get()
    } else {
      fbeValue.f158 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f158.FBESize

    if ((fbeCurrentSize + this.f159.FBESize) <= fbeStructSize) {
      fbeValue.f159 = this.f159.get(undefined)
    } else {
      fbeValue.f159 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f159.FBESize

    if ((fbeCurrentSize + this.f160.FBESize) <= fbeStructSize) {
      fbeValue.f160 = this.f160.get()
    } else {
      fbeValue.f160 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f160.FBESize

    if ((fbeCurrentSize + this.f161.FBESize) <= fbeStructSize) {
      fbeValue.f161 = this.f161.get(undefined)
    } else {
      fbeValue.f161 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f161.FBESize

    if ((fbeCurrentSize + this.f162.FBESize) <= fbeStructSize) {
      fbeValue.f162 = this.f162.get()
    } else {
      fbeValue.f162 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f162.FBESize

    if ((fbeCurrentSize + this.f163.FBESize) <= fbeStructSize) {
      fbeValue.f163 = this.f163.get(undefined)
    } else {
      fbeValue.f163 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f163.FBESize

    if ((fbeCurrentSize + this.f164.FBESize) <= fbeStructSize) {
      fbeValue.f164 = this.f164.get()
    } else {
      fbeValue.f164 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f164.FBESize

    if ((fbeCurrentSize + this.f165.FBESize) <= fbeStructSize) {
      fbeValue.f165 = this.f165.get(undefined)
    } else {
      fbeValue.f165 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f165.FBESize
  }

  /**
   * Set the struct value (begin phase)
   * @this {!FieldModelStructOptional}
   * @returns {!number} Field model begin offset
   */
  setBegin () {
    console.assert(((this._buffer.offset + this.FBEOffset + this.FBESize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructSize = this.FBEBody
    let fbeStructOffset = this._buffer.allocate(fbeStructSize) - this._buffer.offset
    console.assert((fbeStructOffset > 0) && ((this._buffer.offset + fbeStructOffset + fbeStructSize) <= this._buffer.size), 'Model is broken!')
    if ((fbeStructOffset <= 0) || ((this._buffer.offset + fbeStructOffset + fbeStructSize) > this._buffer.size)) {
      return 0
    }

    this.writeUInt32(this.FBEOffset, fbeStructOffset)
    this.writeUInt32(fbeStructOffset, fbeStructSize)
    this.writeUInt32(fbeStructOffset + 4, this.FBEType)

    this._buffer.shift(fbeStructOffset)
    return fbeStructOffset
  }

  /**
   * Set the struct value (end phase)
   * @this {!FieldModelStructOptional}
   * @param {!number} fbeBegin Field model begin offset
   */
  setEnd (fbeBegin) {
    this._buffer.unshift(fbeBegin)
  }

  /**
   * Set the struct value
   * @this {!FieldModelStructOptional}
   * @param {!StructOptional} fbeValue StructOptional value
   */
  set (fbeValue) {
    let fbeBegin = this.setBegin()
    if (fbeBegin === 0) {
      return
    }

    this.setFields(fbeValue)
    this.setEnd(fbeBegin)
  }

  /**
   * Set the struct fields values
   * @this {!FieldModelStructOptional}
   * @param {StructOptional} fbeValue StructOptional value
   */
  setFields (fbeValue) {
    this.parent.setFields(fbeValue)
    this.f100.set(fbeValue.f100)
    this.f101.set(fbeValue.f101)
    this.f102.set(fbeValue.f102)
    this.f103.set(fbeValue.f103)
    this.f104.set(fbeValue.f104)
    this.f105.set(fbeValue.f105)
    this.f106.set(fbeValue.f106)
    this.f107.set(fbeValue.f107)
    this.f108.set(fbeValue.f108)
    this.f109.set(fbeValue.f109)
    this.f110.set(fbeValue.f110)
    this.f111.set(fbeValue.f111)
    this.f112.set(fbeValue.f112)
    this.f113.set(fbeValue.f113)
    this.f114.set(fbeValue.f114)
    this.f115.set(fbeValue.f115)
    this.f116.set(fbeValue.f116)
    this.f117.set(fbeValue.f117)
    this.f118.set(fbeValue.f118)
    this.f119.set(fbeValue.f119)
    this.f120.set(fbeValue.f120)
    this.f121.set(fbeValue.f121)
    this.f122.set(fbeValue.f122)
    this.f123.set(fbeValue.f123)
    this.f124.set(fbeValue.f124)
    this.f125.set(fbeValue.f125)
    this.f126.set(fbeValue.f126)
    this.f127.set(fbeValue.f127)
    this.f128.set(fbeValue.f128)
    this.f129.set(fbeValue.f129)
    this.f130.set(fbeValue.f130)
    this.f131.set(fbeValue.f131)
    this.f132.set(fbeValue.f132)
    this.f133.set(fbeValue.f133)
    this.f134.set(fbeValue.f134)
    this.f135.set(fbeValue.f135)
    this.f136.set(fbeValue.f136)
    this.f137.set(fbeValue.f137)
    this.f138.set(fbeValue.f138)
    this.f139.set(fbeValue.f139)
    this.f140.set(fbeValue.f140)
    this.f141.set(fbeValue.f141)
    this.f142.set(fbeValue.f142)
    this.f143.set(fbeValue.f143)
    this.f144.set(fbeValue.f144)
    this.f145.set(fbeValue.f145)
    this.f146.set(fbeValue.f146)
    this.f147.set(fbeValue.f147)
    this.f148.set(fbeValue.f148)
    this.f149.set(fbeValue.f149)
    this.f150.set(fbeValue.f150)
    this.f151.set(fbeValue.f151)
    this.f152.set(fbeValue.f152)
    this.f153.set(fbeValue.f153)
    this.f154.set(fbeValue.f154)
    this.f155.set(fbeValue.f155)
    this.f156.set(fbeValue.f156)
    this.f157.set(fbeValue.f157)
    this.f158.set(fbeValue.f158)
    this.f159.set(fbeValue.f159)
    this.f160.set(fbeValue.f160)
    this.f161.set(fbeValue.f161)
    this.f162.set(fbeValue.f162)
    this.f163.set(fbeValue.f163)
    this.f164.set(fbeValue.f164)
    this.f165.set(fbeValue.f165)
  }
}

exports.FieldModelStructOptional = FieldModelStructOptional

/**
 * Fast Binary Encoding StructOptional model class
 */
class StructOptionalModel extends fbe.Model {
  /**
   * Initialize model with the given buffer
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Read/Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer)
    this._model = new FieldModelStructOptional(this.buffer, 4)
  }

  /**
   * Get the StructOptional model
   * @this {!StructOptionalModel}
   * @returns {!FieldModelStructOptional} model StructOptional model
   */
  get model () {
    return this._model
  }

  /**
   * Get the model size
   * @this {!StructOptionalModel}
   * @returns {!number} Model size
   */
  get FBESize () {
    return this.model.FBESize + this.model.FBEExtra
  }

  /**
   * Get the model type
   * @this {!StructOptionalModel}
   * @returns {!number} Model type
   */
  get FBEType () {
    return StructOptionalModel.FBEType
  }

  /**
   * Get the model type (static)
   * @this {!StructOptionalModel}
   * @returns {!number} Model type
   */
  static get FBEType () {
    return FieldModelStructOptional.FBEType
  }

  /**
   * Check if the struct value is valid
   * @this {!StructOptionalModel}
   * @returns {!boolean} Model valid state
   */
  verify () {
    if ((this.buffer.offset + this.model.FBEOffset - 4) > this.buffer.size) {
      return false
    }

    let fbeFullSize = this.readUInt32(this.model.FBEOffset - 4)
    if (fbeFullSize < this.model.FBESize) {
      return false
    }

    return this.model.verify()
  }

  /**
   * Create a new model (begin phase)
   * @this {!StructOptionalModel}
   * @returns {!number} Model begin offset
   */
  createBegin () {
    return this.buffer.allocate(4 + this.model.FBESize)
  }

  /**
   * Create a new model (end phase)
   * @this {!StructOptionalModel}
   * @param {!number} fbeBegin Model begin offset
   */
  createEnd (fbeBegin) {
    let fbeEnd = this.buffer.size
    let fbeFullSize = fbeEnd - fbeBegin
    this.writeUInt32(this.model.FBEOffset - 4, fbeFullSize)
    return fbeFullSize
  }

  /**
   * Serialize the struct value
   * @this {!StructOptionalModel}
   * @param {!StructOptional} value StructOptional value
   * @return {!number} Model begin offset
   */
  serialize (value) {
    let fbeBegin = this.createBegin()
    this.model.set(value)
    return this.createEnd(fbeBegin)
  }

  /**
   * Deserialize the struct value
   * @this {!StructOptionalModel}
   * @param {!StructOptional} value StructOptional value, defaults is new StructOptional()
   * @return {!object} Deserialized StructOptional value and its size
   */
  deserialize (value = new StructOptional()) {
    if ((this.buffer.offset + this.model.FBEOffset - 4) > this.buffer.size) {
      return { value: new StructOptional(), size: 0 }
    }

    let fbeFullSize = this.readUInt32(this.model.FBEOffset - 4)
    console.assert((fbeFullSize >= this.model.FBESize), 'Model is broken!')
    if (fbeFullSize < this.model.FBESize) {
      return { value: new StructOptional(), size: 0 }
    }

    this.model.get(value)
    return { value: value, size: fbeFullSize }
  }

  /**
   * Move to the next struct value
   * @this {!StructOptionalModel}
   * @param {!number} prev Previous StructOptional model size
   */
  next (prev) {
    this.model.FBEShift(prev)
  }
}

exports.StructOptionalModel = StructOptionalModel

/**
 * Fast Binary Encoding StructOptional final model class
 */
class FinalModelStructOptional extends fbe.FinalModel {
  /**
   * Initialize final model with the given buffer and offset
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Buffer
   * @param {!number} offset Offset
   * @constructor
   */
  constructor (buffer, offset) {
    super(buffer, offset)
    this._parent = new FinalModelStructSimple(buffer, 0)
    this._f100 = new fbe.FinalModelOptional(new fbe.FinalModelBool(buffer, 0), buffer, 0)
    this._f101 = new fbe.FinalModelOptional(new fbe.FinalModelBool(buffer, 0), buffer, 0)
    this._f102 = new fbe.FinalModelOptional(new fbe.FinalModelBool(buffer, 0), buffer, 0)
    this._f103 = new fbe.FinalModelOptional(new fbe.FinalModelByte(buffer, 0), buffer, 0)
    this._f104 = new fbe.FinalModelOptional(new fbe.FinalModelByte(buffer, 0), buffer, 0)
    this._f105 = new fbe.FinalModelOptional(new fbe.FinalModelByte(buffer, 0), buffer, 0)
    this._f106 = new fbe.FinalModelOptional(new fbe.FinalModelChar(buffer, 0), buffer, 0)
    this._f107 = new fbe.FinalModelOptional(new fbe.FinalModelChar(buffer, 0), buffer, 0)
    this._f108 = new fbe.FinalModelOptional(new fbe.FinalModelChar(buffer, 0), buffer, 0)
    this._f109 = new fbe.FinalModelOptional(new fbe.FinalModelWChar(buffer, 0), buffer, 0)
    this._f110 = new fbe.FinalModelOptional(new fbe.FinalModelWChar(buffer, 0), buffer, 0)
    this._f111 = new fbe.FinalModelOptional(new fbe.FinalModelWChar(buffer, 0), buffer, 0)
    this._f112 = new fbe.FinalModelOptional(new fbe.FinalModelInt8(buffer, 0), buffer, 0)
    this._f113 = new fbe.FinalModelOptional(new fbe.FinalModelInt8(buffer, 0), buffer, 0)
    this._f114 = new fbe.FinalModelOptional(new fbe.FinalModelInt8(buffer, 0), buffer, 0)
    this._f115 = new fbe.FinalModelOptional(new fbe.FinalModelUInt8(buffer, 0), buffer, 0)
    this._f116 = new fbe.FinalModelOptional(new fbe.FinalModelUInt8(buffer, 0), buffer, 0)
    this._f117 = new fbe.FinalModelOptional(new fbe.FinalModelUInt8(buffer, 0), buffer, 0)
    this._f118 = new fbe.FinalModelOptional(new fbe.FinalModelInt16(buffer, 0), buffer, 0)
    this._f119 = new fbe.FinalModelOptional(new fbe.FinalModelInt16(buffer, 0), buffer, 0)
    this._f120 = new fbe.FinalModelOptional(new fbe.FinalModelInt16(buffer, 0), buffer, 0)
    this._f121 = new fbe.FinalModelOptional(new fbe.FinalModelUInt16(buffer, 0), buffer, 0)
    this._f122 = new fbe.FinalModelOptional(new fbe.FinalModelUInt16(buffer, 0), buffer, 0)
    this._f123 = new fbe.FinalModelOptional(new fbe.FinalModelUInt16(buffer, 0), buffer, 0)
    this._f124 = new fbe.FinalModelOptional(new fbe.FinalModelInt32(buffer, 0), buffer, 0)
    this._f125 = new fbe.FinalModelOptional(new fbe.FinalModelInt32(buffer, 0), buffer, 0)
    this._f126 = new fbe.FinalModelOptional(new fbe.FinalModelInt32(buffer, 0), buffer, 0)
    this._f127 = new fbe.FinalModelOptional(new fbe.FinalModelUInt32(buffer, 0), buffer, 0)
    this._f128 = new fbe.FinalModelOptional(new fbe.FinalModelUInt32(buffer, 0), buffer, 0)
    this._f129 = new fbe.FinalModelOptional(new fbe.FinalModelUInt32(buffer, 0), buffer, 0)
    this._f130 = new fbe.FinalModelOptional(new fbe.FinalModelInt64(buffer, 0), buffer, 0)
    this._f131 = new fbe.FinalModelOptional(new fbe.FinalModelInt64(buffer, 0), buffer, 0)
    this._f132 = new fbe.FinalModelOptional(new fbe.FinalModelInt64(buffer, 0), buffer, 0)
    this._f133 = new fbe.FinalModelOptional(new fbe.FinalModelUInt64(buffer, 0), buffer, 0)
    this._f134 = new fbe.FinalModelOptional(new fbe.FinalModelUInt64(buffer, 0), buffer, 0)
    this._f135 = new fbe.FinalModelOptional(new fbe.FinalModelUInt64(buffer, 0), buffer, 0)
    this._f136 = new fbe.FinalModelOptional(new fbe.FinalModelFloat(buffer, 0), buffer, 0)
    this._f137 = new fbe.FinalModelOptional(new fbe.FinalModelFloat(buffer, 0), buffer, 0)
    this._f138 = new fbe.FinalModelOptional(new fbe.FinalModelFloat(buffer, 0), buffer, 0)
    this._f139 = new fbe.FinalModelOptional(new fbe.FinalModelDouble(buffer, 0), buffer, 0)
    this._f140 = new fbe.FinalModelOptional(new fbe.FinalModelDouble(buffer, 0), buffer, 0)
    this._f141 = new fbe.FinalModelOptional(new fbe.FinalModelDouble(buffer, 0), buffer, 0)
    this._f142 = new fbe.FinalModelOptional(new fbe.FinalModelDecimal(buffer, 0), buffer, 0)
    this._f143 = new fbe.FinalModelOptional(new fbe.FinalModelDecimal(buffer, 0), buffer, 0)
    this._f144 = new fbe.FinalModelOptional(new fbe.FinalModelDecimal(buffer, 0), buffer, 0)
    this._f145 = new fbe.FinalModelOptional(new fbe.FinalModelString(buffer, 0), buffer, 0)
    this._f146 = new fbe.FinalModelOptional(new fbe.FinalModelString(buffer, 0), buffer, 0)
    this._f147 = new fbe.FinalModelOptional(new fbe.FinalModelString(buffer, 0), buffer, 0)
    this._f148 = new fbe.FinalModelOptional(new fbe.FinalModelTimestamp(buffer, 0), buffer, 0)
    this._f149 = new fbe.FinalModelOptional(new fbe.FinalModelTimestamp(buffer, 0), buffer, 0)
    this._f150 = new fbe.FinalModelOptional(new fbe.FinalModelTimestamp(buffer, 0), buffer, 0)
    this._f151 = new fbe.FinalModelOptional(new fbe.FinalModelUUID(buffer, 0), buffer, 0)
    this._f152 = new fbe.FinalModelOptional(new fbe.FinalModelUUID(buffer, 0), buffer, 0)
    this._f153 = new fbe.FinalModelOptional(new fbe.FinalModelUUID(buffer, 0), buffer, 0)
    this._f154 = new fbe.FinalModelOptional(new proto.FinalModelOrderSide(buffer, 0), buffer, 0)
    this._f155 = new fbe.FinalModelOptional(new proto.FinalModelOrderSide(buffer, 0), buffer, 0)
    this._f156 = new fbe.FinalModelOptional(new proto.FinalModelOrderType(buffer, 0), buffer, 0)
    this._f157 = new fbe.FinalModelOptional(new proto.FinalModelOrderType(buffer, 0), buffer, 0)
    this._f158 = new fbe.FinalModelOptional(new proto.FinalModelOrder(buffer, 0), buffer, 0)
    this._f159 = new fbe.FinalModelOptional(new proto.FinalModelOrder(buffer, 0), buffer, 0)
    this._f160 = new fbe.FinalModelOptional(new proto.FinalModelBalance(buffer, 0), buffer, 0)
    this._f161 = new fbe.FinalModelOptional(new proto.FinalModelBalance(buffer, 0), buffer, 0)
    this._f162 = new fbe.FinalModelOptional(new proto.FinalModelState(buffer, 0), buffer, 0)
    this._f163 = new fbe.FinalModelOptional(new proto.FinalModelState(buffer, 0), buffer, 0)
    this._f164 = new fbe.FinalModelOptional(new proto.FinalModelAccount(buffer, 0), buffer, 0)
    this._f165 = new fbe.FinalModelOptional(new proto.FinalModelAccount(buffer, 0), buffer, 0)
  }

  /**
   * Get the StructSimple final model
   * @this {!FinalModelStructOptional}
   * @returns {!FinalModelStructSimple} StructSimple field model
   */
  get parent () {
    return this._parent
  }

  /**
   * Get the f100 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f100 final model
   */
  get f100 () {
    return this._f100
  }

  /**
   * Get the f101 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f101 final model
   */
  get f101 () {
    return this._f101
  }

  /**
   * Get the f102 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f102 final model
   */
  get f102 () {
    return this._f102
  }

  /**
   * Get the f103 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f103 final model
   */
  get f103 () {
    return this._f103
  }

  /**
   * Get the f104 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f104 final model
   */
  get f104 () {
    return this._f104
  }

  /**
   * Get the f105 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f105 final model
   */
  get f105 () {
    return this._f105
  }

  /**
   * Get the f106 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f106 final model
   */
  get f106 () {
    return this._f106
  }

  /**
   * Get the f107 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f107 final model
   */
  get f107 () {
    return this._f107
  }

  /**
   * Get the f108 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f108 final model
   */
  get f108 () {
    return this._f108
  }

  /**
   * Get the f109 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f109 final model
   */
  get f109 () {
    return this._f109
  }

  /**
   * Get the f110 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f110 final model
   */
  get f110 () {
    return this._f110
  }

  /**
   * Get the f111 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f111 final model
   */
  get f111 () {
    return this._f111
  }

  /**
   * Get the f112 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f112 final model
   */
  get f112 () {
    return this._f112
  }

  /**
   * Get the f113 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f113 final model
   */
  get f113 () {
    return this._f113
  }

  /**
   * Get the f114 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f114 final model
   */
  get f114 () {
    return this._f114
  }

  /**
   * Get the f115 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f115 final model
   */
  get f115 () {
    return this._f115
  }

  /**
   * Get the f116 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f116 final model
   */
  get f116 () {
    return this._f116
  }

  /**
   * Get the f117 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f117 final model
   */
  get f117 () {
    return this._f117
  }

  /**
   * Get the f118 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f118 final model
   */
  get f118 () {
    return this._f118
  }

  /**
   * Get the f119 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f119 final model
   */
  get f119 () {
    return this._f119
  }

  /**
   * Get the f120 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f120 final model
   */
  get f120 () {
    return this._f120
  }

  /**
   * Get the f121 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f121 final model
   */
  get f121 () {
    return this._f121
  }

  /**
   * Get the f122 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f122 final model
   */
  get f122 () {
    return this._f122
  }

  /**
   * Get the f123 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f123 final model
   */
  get f123 () {
    return this._f123
  }

  /**
   * Get the f124 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f124 final model
   */
  get f124 () {
    return this._f124
  }

  /**
   * Get the f125 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f125 final model
   */
  get f125 () {
    return this._f125
  }

  /**
   * Get the f126 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f126 final model
   */
  get f126 () {
    return this._f126
  }

  /**
   * Get the f127 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f127 final model
   */
  get f127 () {
    return this._f127
  }

  /**
   * Get the f128 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f128 final model
   */
  get f128 () {
    return this._f128
  }

  /**
   * Get the f129 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f129 final model
   */
  get f129 () {
    return this._f129
  }

  /**
   * Get the f130 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f130 final model
   */
  get f130 () {
    return this._f130
  }

  /**
   * Get the f131 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f131 final model
   */
  get f131 () {
    return this._f131
  }

  /**
   * Get the f132 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f132 final model
   */
  get f132 () {
    return this._f132
  }

  /**
   * Get the f133 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f133 final model
   */
  get f133 () {
    return this._f133
  }

  /**
   * Get the f134 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f134 final model
   */
  get f134 () {
    return this._f134
  }

  /**
   * Get the f135 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f135 final model
   */
  get f135 () {
    return this._f135
  }

  /**
   * Get the f136 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f136 final model
   */
  get f136 () {
    return this._f136
  }

  /**
   * Get the f137 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f137 final model
   */
  get f137 () {
    return this._f137
  }

  /**
   * Get the f138 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f138 final model
   */
  get f138 () {
    return this._f138
  }

  /**
   * Get the f139 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f139 final model
   */
  get f139 () {
    return this._f139
  }

  /**
   * Get the f140 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f140 final model
   */
  get f140 () {
    return this._f140
  }

  /**
   * Get the f141 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f141 final model
   */
  get f141 () {
    return this._f141
  }

  /**
   * Get the f142 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f142 final model
   */
  get f142 () {
    return this._f142
  }

  /**
   * Get the f143 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f143 final model
   */
  get f143 () {
    return this._f143
  }

  /**
   * Get the f144 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f144 final model
   */
  get f144 () {
    return this._f144
  }

  /**
   * Get the f145 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f145 final model
   */
  get f145 () {
    return this._f145
  }

  /**
   * Get the f146 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f146 final model
   */
  get f146 () {
    return this._f146
  }

  /**
   * Get the f147 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f147 final model
   */
  get f147 () {
    return this._f147
  }

  /**
   * Get the f148 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f148 final model
   */
  get f148 () {
    return this._f148
  }

  /**
   * Get the f149 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f149 final model
   */
  get f149 () {
    return this._f149
  }

  /**
   * Get the f150 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f150 final model
   */
  get f150 () {
    return this._f150
  }

  /**
   * Get the f151 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f151 final model
   */
  get f151 () {
    return this._f151
  }

  /**
   * Get the f152 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f152 final model
   */
  get f152 () {
    return this._f152
  }

  /**
   * Get the f153 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f153 final model
   */
  get f153 () {
    return this._f153
  }

  /**
   * Get the f154 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f154 final model
   */
  get f154 () {
    return this._f154
  }

  /**
   * Get the f155 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f155 final model
   */
  get f155 () {
    return this._f155
  }

  /**
   * Get the f156 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f156 final model
   */
  get f156 () {
    return this._f156
  }

  /**
   * Get the f157 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f157 final model
   */
  get f157 () {
    return this._f157
  }

  /**
   * Get the f158 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f158 final model
   */
  get f158 () {
    return this._f158
  }

  /**
   * Get the f159 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f159 final model
   */
  get f159 () {
    return this._f159
  }

  /**
   * Get the f160 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f160 final model
   */
  get f160 () {
    return this._f160
  }

  /**
   * Get the f161 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f161 final model
   */
  get f161 () {
    return this._f161
  }

  /**
   * Get the f162 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f162 final model
   */
  get f162 () {
    return this._f162
  }

  /**
   * Get the f163 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f163 final model
   */
  get f163 () {
    return this._f163
  }

  /**
   * Get the f164 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f164 final model
   */
  get f164 () {
    return this._f164
  }

  /**
   * Get the f165 final model
   * @this {!FinalModelStructOptional}
   * @returns {!fbe.FinalModelOptional} f165 final model
   */
  get f165 () {
    return this._f165
  }

  /**
   * Get the allocation size
   * @this {!FinalModelStructOptional}
   * @param {!StructOptional} fbeValue StructOptional value
   * @returns {!number} Allocation size
   */
  FBEAllocationSize (fbeValue) {
    return 0 + this.parent.FBEAllocationSize(fbeValue) + this.f100.FBEAllocationSize(fbeValue.f100) + this.f101.FBEAllocationSize(fbeValue.f101) + this.f102.FBEAllocationSize(fbeValue.f102) + this.f103.FBEAllocationSize(fbeValue.f103) + this.f104.FBEAllocationSize(fbeValue.f104) + this.f105.FBEAllocationSize(fbeValue.f105) + this.f106.FBEAllocationSize(fbeValue.f106) + this.f107.FBEAllocationSize(fbeValue.f107) + this.f108.FBEAllocationSize(fbeValue.f108) + this.f109.FBEAllocationSize(fbeValue.f109) + this.f110.FBEAllocationSize(fbeValue.f110) + this.f111.FBEAllocationSize(fbeValue.f111) + this.f112.FBEAllocationSize(fbeValue.f112) + this.f113.FBEAllocationSize(fbeValue.f113) + this.f114.FBEAllocationSize(fbeValue.f114) + this.f115.FBEAllocationSize(fbeValue.f115) + this.f116.FBEAllocationSize(fbeValue.f116) + this.f117.FBEAllocationSize(fbeValue.f117) + this.f118.FBEAllocationSize(fbeValue.f118) + this.f119.FBEAllocationSize(fbeValue.f119) + this.f120.FBEAllocationSize(fbeValue.f120) + this.f121.FBEAllocationSize(fbeValue.f121) + this.f122.FBEAllocationSize(fbeValue.f122) + this.f123.FBEAllocationSize(fbeValue.f123) + this.f124.FBEAllocationSize(fbeValue.f124) + this.f125.FBEAllocationSize(fbeValue.f125) + this.f126.FBEAllocationSize(fbeValue.f126) + this.f127.FBEAllocationSize(fbeValue.f127) + this.f128.FBEAllocationSize(fbeValue.f128) + this.f129.FBEAllocationSize(fbeValue.f129) + this.f130.FBEAllocationSize(fbeValue.f130) + this.f131.FBEAllocationSize(fbeValue.f131) + this.f132.FBEAllocationSize(fbeValue.f132) + this.f133.FBEAllocationSize(fbeValue.f133) + this.f134.FBEAllocationSize(fbeValue.f134) + this.f135.FBEAllocationSize(fbeValue.f135) + this.f136.FBEAllocationSize(fbeValue.f136) + this.f137.FBEAllocationSize(fbeValue.f137) + this.f138.FBEAllocationSize(fbeValue.f138) + this.f139.FBEAllocationSize(fbeValue.f139) + this.f140.FBEAllocationSize(fbeValue.f140) + this.f141.FBEAllocationSize(fbeValue.f141) + this.f142.FBEAllocationSize(fbeValue.f142) + this.f143.FBEAllocationSize(fbeValue.f143) + this.f144.FBEAllocationSize(fbeValue.f144) + this.f145.FBEAllocationSize(fbeValue.f145) + this.f146.FBEAllocationSize(fbeValue.f146) + this.f147.FBEAllocationSize(fbeValue.f147) + this.f148.FBEAllocationSize(fbeValue.f148) + this.f149.FBEAllocationSize(fbeValue.f149) + this.f150.FBEAllocationSize(fbeValue.f150) + this.f151.FBEAllocationSize(fbeValue.f151) + this.f152.FBEAllocationSize(fbeValue.f152) + this.f153.FBEAllocationSize(fbeValue.f153) + this.f154.FBEAllocationSize(fbeValue.f154) + this.f155.FBEAllocationSize(fbeValue.f155) + this.f156.FBEAllocationSize(fbeValue.f156) + this.f157.FBEAllocationSize(fbeValue.f157) + this.f158.FBEAllocationSize(fbeValue.f158) + this.f159.FBEAllocationSize(fbeValue.f159) + this.f160.FBEAllocationSize(fbeValue.f160) + this.f161.FBEAllocationSize(fbeValue.f161) + this.f162.FBEAllocationSize(fbeValue.f162) + this.f163.FBEAllocationSize(fbeValue.f163) + this.f164.FBEAllocationSize(fbeValue.f164) + this.f165.FBEAllocationSize(fbeValue.f165)
  }

  /**
   * Get the field type
   * @this {!FinalModelStructOptional}
   * @returns {!number} Field type
   */
  get FBEType () {
    return FinalModelStructOptional.FBEType
  }

  /**
   * Get the field type (static)
   * @this {!FinalModelStructOptional}
   * @returns {!number} Field type
   */
  static get FBEType () {
    return 111
  }

  /**
   * Check if the struct value is valid
   * @this {!FinalModelStructOptional}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    this._buffer.shift(this.FBEOffset)
    let fbeResult = this.verifyFields()
    this._buffer.unshift(this.FBEOffset)
    return fbeResult
  }

  /**
   * Check if the struct fields are valid
   * @this {!FinalModelStructOptional}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verifyFields () {
    let fbeCurrentOffset = 0
    let fbeFieldSize

    this.parent.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.parent.verifyFields()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f100.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f100.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f101.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f101.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f102.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f102.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f103.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f103.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f104.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f104.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f105.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f105.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f106.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f106.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f107.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f107.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f108.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f108.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f109.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f109.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f110.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f110.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f111.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f111.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f112.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f112.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f113.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f113.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f114.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f114.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f115.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f115.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f116.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f116.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f117.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f117.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f118.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f118.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f119.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f119.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f120.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f120.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f121.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f121.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f122.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f122.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f123.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f123.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f124.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f124.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f125.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f125.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f126.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f126.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f127.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f127.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f128.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f128.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f129.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f129.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f130.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f130.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f131.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f131.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f132.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f132.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f133.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f133.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f134.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f134.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f135.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f135.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f136.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f136.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f137.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f137.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f138.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f138.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f139.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f139.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f140.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f140.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f141.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f141.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f142.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f142.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f143.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f143.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f144.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f144.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f145.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f145.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f146.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f146.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f147.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f147.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f148.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f148.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f149.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f149.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f150.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f150.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f151.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f151.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f152.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f152.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f153.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f153.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f154.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f154.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f155.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f155.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f156.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f156.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f157.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f157.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f158.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f158.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f159.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f159.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f160.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f160.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f161.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f161.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f162.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f162.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f163.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f163.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f164.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f164.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f165.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f165.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    return fbeCurrentOffset
  }

  /**
   * Get the struct value
   * @this {!FinalModelStructOptional}
   * @param {!StructOptional} fbeValue StructOptional value, defaults is new StructOptional()
   * @returns {!object} Result struct value and its size
   */
  get (fbeValue = new StructOptional()) {
    this._buffer.shift(this.FBEOffset)
    let fbeSize = this.getFields(fbeValue)
    this._buffer.unshift(this.FBEOffset)
    return { value: fbeValue, size: fbeSize }
  }

  /**
   * Get the struct fields values
   * @this {!FinalModelStructOptional}
   * @param {!StructOptional} fbeValue StructOptional value
   * @returns {!number} Struct size
   */
  getFields (fbeValue) {
    let fbeCurrentOffset = 0
    let fbeCurrentSize = 0
    let fbeResult

    this.parent.FBEOffset = fbeCurrentOffset
    fbeResult = this.parent.getFields(fbeValue)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult
    fbeCurrentSize += fbeResult

    this.f100.FBEOffset = fbeCurrentOffset
    fbeResult = this.f100.get()
    fbeValue.f100 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f101.FBEOffset = fbeCurrentOffset
    fbeResult = this.f101.get()
    fbeValue.f101 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f102.FBEOffset = fbeCurrentOffset
    fbeResult = this.f102.get()
    fbeValue.f102 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f103.FBEOffset = fbeCurrentOffset
    fbeResult = this.f103.get()
    fbeValue.f103 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f104.FBEOffset = fbeCurrentOffset
    fbeResult = this.f104.get()
    fbeValue.f104 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f105.FBEOffset = fbeCurrentOffset
    fbeResult = this.f105.get()
    fbeValue.f105 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f106.FBEOffset = fbeCurrentOffset
    fbeResult = this.f106.get()
    fbeValue.f106 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f107.FBEOffset = fbeCurrentOffset
    fbeResult = this.f107.get()
    fbeValue.f107 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f108.FBEOffset = fbeCurrentOffset
    fbeResult = this.f108.get()
    fbeValue.f108 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f109.FBEOffset = fbeCurrentOffset
    fbeResult = this.f109.get()
    fbeValue.f109 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f110.FBEOffset = fbeCurrentOffset
    fbeResult = this.f110.get()
    fbeValue.f110 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f111.FBEOffset = fbeCurrentOffset
    fbeResult = this.f111.get()
    fbeValue.f111 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f112.FBEOffset = fbeCurrentOffset
    fbeResult = this.f112.get()
    fbeValue.f112 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f113.FBEOffset = fbeCurrentOffset
    fbeResult = this.f113.get()
    fbeValue.f113 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f114.FBEOffset = fbeCurrentOffset
    fbeResult = this.f114.get()
    fbeValue.f114 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f115.FBEOffset = fbeCurrentOffset
    fbeResult = this.f115.get()
    fbeValue.f115 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f116.FBEOffset = fbeCurrentOffset
    fbeResult = this.f116.get()
    fbeValue.f116 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f117.FBEOffset = fbeCurrentOffset
    fbeResult = this.f117.get()
    fbeValue.f117 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f118.FBEOffset = fbeCurrentOffset
    fbeResult = this.f118.get()
    fbeValue.f118 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f119.FBEOffset = fbeCurrentOffset
    fbeResult = this.f119.get()
    fbeValue.f119 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f120.FBEOffset = fbeCurrentOffset
    fbeResult = this.f120.get()
    fbeValue.f120 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f121.FBEOffset = fbeCurrentOffset
    fbeResult = this.f121.get()
    fbeValue.f121 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f122.FBEOffset = fbeCurrentOffset
    fbeResult = this.f122.get()
    fbeValue.f122 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f123.FBEOffset = fbeCurrentOffset
    fbeResult = this.f123.get()
    fbeValue.f123 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f124.FBEOffset = fbeCurrentOffset
    fbeResult = this.f124.get()
    fbeValue.f124 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f125.FBEOffset = fbeCurrentOffset
    fbeResult = this.f125.get()
    fbeValue.f125 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f126.FBEOffset = fbeCurrentOffset
    fbeResult = this.f126.get()
    fbeValue.f126 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f127.FBEOffset = fbeCurrentOffset
    fbeResult = this.f127.get()
    fbeValue.f127 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f128.FBEOffset = fbeCurrentOffset
    fbeResult = this.f128.get()
    fbeValue.f128 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f129.FBEOffset = fbeCurrentOffset
    fbeResult = this.f129.get()
    fbeValue.f129 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f130.FBEOffset = fbeCurrentOffset
    fbeResult = this.f130.get()
    fbeValue.f130 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f131.FBEOffset = fbeCurrentOffset
    fbeResult = this.f131.get()
    fbeValue.f131 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f132.FBEOffset = fbeCurrentOffset
    fbeResult = this.f132.get()
    fbeValue.f132 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f133.FBEOffset = fbeCurrentOffset
    fbeResult = this.f133.get()
    fbeValue.f133 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f134.FBEOffset = fbeCurrentOffset
    fbeResult = this.f134.get()
    fbeValue.f134 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f135.FBEOffset = fbeCurrentOffset
    fbeResult = this.f135.get()
    fbeValue.f135 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f136.FBEOffset = fbeCurrentOffset
    fbeResult = this.f136.get()
    fbeValue.f136 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f137.FBEOffset = fbeCurrentOffset
    fbeResult = this.f137.get()
    fbeValue.f137 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f138.FBEOffset = fbeCurrentOffset
    fbeResult = this.f138.get()
    fbeValue.f138 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f139.FBEOffset = fbeCurrentOffset
    fbeResult = this.f139.get()
    fbeValue.f139 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f140.FBEOffset = fbeCurrentOffset
    fbeResult = this.f140.get()
    fbeValue.f140 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f141.FBEOffset = fbeCurrentOffset
    fbeResult = this.f141.get()
    fbeValue.f141 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f142.FBEOffset = fbeCurrentOffset
    fbeResult = this.f142.get()
    fbeValue.f142 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f143.FBEOffset = fbeCurrentOffset
    fbeResult = this.f143.get()
    fbeValue.f143 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f144.FBEOffset = fbeCurrentOffset
    fbeResult = this.f144.get()
    fbeValue.f144 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f145.FBEOffset = fbeCurrentOffset
    fbeResult = this.f145.get()
    fbeValue.f145 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f146.FBEOffset = fbeCurrentOffset
    fbeResult = this.f146.get()
    fbeValue.f146 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f147.FBEOffset = fbeCurrentOffset
    fbeResult = this.f147.get()
    fbeValue.f147 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f148.FBEOffset = fbeCurrentOffset
    fbeResult = this.f148.get()
    fbeValue.f148 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f149.FBEOffset = fbeCurrentOffset
    fbeResult = this.f149.get()
    fbeValue.f149 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f150.FBEOffset = fbeCurrentOffset
    fbeResult = this.f150.get()
    fbeValue.f150 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f151.FBEOffset = fbeCurrentOffset
    fbeResult = this.f151.get()
    fbeValue.f151 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f152.FBEOffset = fbeCurrentOffset
    fbeResult = this.f152.get()
    fbeValue.f152 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f153.FBEOffset = fbeCurrentOffset
    fbeResult = this.f153.get()
    fbeValue.f153 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f154.FBEOffset = fbeCurrentOffset
    fbeResult = this.f154.get()
    fbeValue.f154 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f155.FBEOffset = fbeCurrentOffset
    fbeResult = this.f155.get()
    fbeValue.f155 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f156.FBEOffset = fbeCurrentOffset
    fbeResult = this.f156.get()
    fbeValue.f156 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f157.FBEOffset = fbeCurrentOffset
    fbeResult = this.f157.get()
    fbeValue.f157 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f158.FBEOffset = fbeCurrentOffset
    fbeResult = this.f158.get()
    fbeValue.f158 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f159.FBEOffset = fbeCurrentOffset
    fbeResult = this.f159.get()
    fbeValue.f159 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f160.FBEOffset = fbeCurrentOffset
    fbeResult = this.f160.get()
    fbeValue.f160 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f161.FBEOffset = fbeCurrentOffset
    fbeResult = this.f161.get()
    fbeValue.f161 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f162.FBEOffset = fbeCurrentOffset
    fbeResult = this.f162.get()
    fbeValue.f162 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f163.FBEOffset = fbeCurrentOffset
    fbeResult = this.f163.get()
    fbeValue.f163 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f164.FBEOffset = fbeCurrentOffset
    fbeResult = this.f164.get()
    fbeValue.f164 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f165.FBEOffset = fbeCurrentOffset
    fbeResult = this.f165.get()
    fbeValue.f165 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    return fbeCurrentSize
  }

  /**
   * Set the struct value
   * @this {!FinalModelStructOptional}
   * @param {!StructOptional} fbeValue StructOptional value
   * @returns {!number} Final model size
   */
  set (fbeValue) {
    this._buffer.shift(this.FBEOffset)
    let fbeSize = this.setFields(fbeValue)
    this._buffer.unshift(this.FBEOffset)
    return fbeSize
  }

  /**
   * Set the struct fields values
   * @this {!FinalModelStructOptional}
   * @param {StructOptional} fbeValue StructOptional value
   * @returns {!number} Final model size
   */
  setFields (fbeValue) {
    let fbeCurrentOffset = 0
    let fbeCurrentSize = 0
    let fbeFieldSize

    this.parent.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.parent.setFields(fbeValue)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f100.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f100.set(fbeValue.f100)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f101.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f101.set(fbeValue.f101)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f102.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f102.set(fbeValue.f102)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f103.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f103.set(fbeValue.f103)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f104.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f104.set(fbeValue.f104)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f105.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f105.set(fbeValue.f105)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f106.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f106.set(fbeValue.f106)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f107.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f107.set(fbeValue.f107)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f108.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f108.set(fbeValue.f108)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f109.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f109.set(fbeValue.f109)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f110.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f110.set(fbeValue.f110)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f111.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f111.set(fbeValue.f111)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f112.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f112.set(fbeValue.f112)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f113.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f113.set(fbeValue.f113)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f114.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f114.set(fbeValue.f114)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f115.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f115.set(fbeValue.f115)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f116.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f116.set(fbeValue.f116)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f117.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f117.set(fbeValue.f117)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f118.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f118.set(fbeValue.f118)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f119.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f119.set(fbeValue.f119)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f120.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f120.set(fbeValue.f120)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f121.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f121.set(fbeValue.f121)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f122.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f122.set(fbeValue.f122)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f123.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f123.set(fbeValue.f123)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f124.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f124.set(fbeValue.f124)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f125.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f125.set(fbeValue.f125)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f126.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f126.set(fbeValue.f126)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f127.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f127.set(fbeValue.f127)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f128.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f128.set(fbeValue.f128)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f129.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f129.set(fbeValue.f129)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f130.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f130.set(fbeValue.f130)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f131.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f131.set(fbeValue.f131)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f132.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f132.set(fbeValue.f132)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f133.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f133.set(fbeValue.f133)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f134.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f134.set(fbeValue.f134)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f135.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f135.set(fbeValue.f135)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f136.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f136.set(fbeValue.f136)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f137.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f137.set(fbeValue.f137)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f138.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f138.set(fbeValue.f138)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f139.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f139.set(fbeValue.f139)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f140.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f140.set(fbeValue.f140)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f141.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f141.set(fbeValue.f141)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f142.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f142.set(fbeValue.f142)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f143.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f143.set(fbeValue.f143)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f144.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f144.set(fbeValue.f144)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f145.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f145.set(fbeValue.f145)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f146.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f146.set(fbeValue.f146)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f147.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f147.set(fbeValue.f147)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f148.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f148.set(fbeValue.f148)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f149.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f149.set(fbeValue.f149)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f150.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f150.set(fbeValue.f150)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f151.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f151.set(fbeValue.f151)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f152.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f152.set(fbeValue.f152)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f153.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f153.set(fbeValue.f153)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f154.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f154.set(fbeValue.f154)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f155.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f155.set(fbeValue.f155)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f156.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f156.set(fbeValue.f156)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f157.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f157.set(fbeValue.f157)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f158.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f158.set(fbeValue.f158)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f159.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f159.set(fbeValue.f159)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f160.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f160.set(fbeValue.f160)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f161.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f161.set(fbeValue.f161)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f162.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f162.set(fbeValue.f162)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f163.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f163.set(fbeValue.f163)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f164.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f164.set(fbeValue.f164)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f165.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f165.set(fbeValue.f165)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    return fbeCurrentSize
  }
}

exports.FinalModelStructOptional = FinalModelStructOptional

/**
 * Fast Binary Encoding StructOptional final model class
 */
class StructOptionalFinalModel extends fbe.Model {
  /**
   * Initialize final model with the given buffer
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Read/Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer)
    this._model = new FinalModelStructOptional(this.buffer, 8)
  }

  /**
   * Get the model type
   * @this {!StructOptionalFinalModel}
   * @returns {!number} Model type
   */
  get FBEType () {
    return StructOptionalFinalModel.FBEType
  }

  /**
   * Get the model type (static)
   * @this {!StructOptionalFinalModel}
   * @returns {!number} Model type
   */
  static get FBEType () {
    return FinalModelStructOptional.FBEType
  }

  /**
   * Check if the struct value is valid
   * @this {!StructOptionalFinalModel}
   * @returns {!boolean} Model valid state
   */
  verify () {
    if ((this.buffer.offset + this._model.FBEOffset) > this.buffer.size) {
      return false
    }

    let fbeStructSize = this.readUInt32(this._model.FBEOffset - 8)
    let fbeStructType = this.readUInt32(this._model.FBEOffset - 4)
    if ((fbeStructSize <= 0) || (fbeStructType !== this.FBEType)) {
      return false
    }

    return ((8 + this._model.verify()) === fbeStructSize)
  }

  /**
   * Serialize the struct value
   * @this {!StructOptionalFinalModel}
   * @param {!StructOptional} value StructOptional value
   * @return {!number} Struct size
   */
  serialize (value) {
    let fbeInitialSize = this.buffer.size

    let fbeStructType = this.FBEType
    let fbeStructSize = 8 + this._model.FBEAllocationSize(value)
    let fbeStructOffset = this.buffer.allocate(fbeStructSize) - this.buffer.offset
    console.assert(((this.buffer.offset + fbeStructOffset + fbeStructSize) <= this.buffer.size), 'Model is broken!')
    if ((this.buffer.offset + fbeStructOffset + fbeStructSize) > this.buffer.size) {
      return 0
    }

    fbeStructSize = 8 + this._model.set(value)
    this.buffer.resize(fbeInitialSize + fbeStructSize)

    this.writeUInt32(this._model.FBEOffset - 8, fbeStructSize)
    this.writeUInt32(this._model.FBEOffset - 4, fbeStructType)

    return fbeStructSize
  }

  /**
   * Deserialize the struct value
   * @this {!StructOptionalFinalModel}
   * @param {!StructOptional} value StructOptional value, defaults is new StructOptional()
   * @return {!object} Deserialized StructOptional value and its size
   */
  deserialize (value = new StructOptional()) {
    console.assert(((this.buffer.offset + this._model.FBEOffset) <= this.buffer.size), 'Model is broken!')
    if ((this.buffer.offset + this._model.FBEOffset) > this.buffer.size) {
      return { value: new StructOptional(), size: 0 }
    }

    let fbeStructSize = this.readUInt32(this._model.FBEOffset - 8)
    let fbeStructType = this.readUInt32(this._model.FBEOffset - 4)
    console.assert(((fbeStructSize > 0) && (fbeStructType === this.FBEType)), 'Model is broken!')
    if ((fbeStructSize <= 0) || (fbeStructType !== this.FBEType)) {
      return { value: new StructOptional(), size: 8 }
    }

    let fbeResult = this._model.get(value)
    return { value: fbeResult.value, size: (8 + fbeResult.size) }
  }

  /**
   * Move to the next struct value
   * @this {!StructOptionalFinalModel}
   * @param {!number} prev Previous StructOptional model size
   */
  next (prev) {
    this._model.FBEShift(prev)
  }
}

exports.StructOptionalFinalModel = StructOptionalFinalModel

/**
 * StructNested struct
 */
class StructNested extends StructOptional {
  /**
   * Initialize struct
   * @param {!StructOptional=} parent
   * @param {!EnumSimple=} f1000
   * @param {EnumSimple=} f1001
   * @param {!EnumTyped=} f1002
   * @param {EnumTyped=} f1003
   * @param {!FlagsSimple=} f1004
   * @param {FlagsSimple=} f1005
   * @param {!FlagsTyped=} f1006
   * @param {FlagsTyped=} f1007
   * @param {!StructSimple=} f1008
   * @param {StructSimple=} f1009
   * @param {!StructOptional=} f1010
   * @param {StructOptional=} f1011
   * @constructor
   */
  constructor (parent = new StructOptional(), f1000 = new EnumSimple(), f1001 = undefined, f1002 = new EnumTyped(EnumTyped.ENUM_VALUE_2), f1003 = undefined, f1004 = new FlagsSimple(), f1005 = undefined, f1006 = new FlagsTyped(FlagsTyped.FLAG_VALUE_2 | FlagsTyped.FLAG_VALUE_4 | FlagsTyped.FLAG_VALUE_6), f1007 = undefined, f1008 = new StructSimple(), f1009 = undefined, f1010 = new StructOptional(), f1011 = undefined) {
    super()
    super.copy(parent.clone())
    this.f1000 = f1000
    this.f1001 = f1001
    this.f1002 = f1002
    this.f1003 = f1003
    this.f1004 = f1004
    this.f1005 = f1005
    this.f1006 = f1006
    this.f1007 = f1007
    this.f1008 = f1008
    this.f1009 = f1009
    this.f1010 = f1010
    this.f1011 = f1011
  }

  /**
   * Copy struct
   * @this {!StructNested}
   * @param {!StructNested} other Other struct
   * @returns {!StructNested} This struct
   */
  copy (other) {
    super.copy(other)
    if (other.f1000 != null) {
      this.f1000 = EnumSimple.fromObject(other.f1000)
    } else {
      this.f1000 = undefined
    }
    if (other.f1001 != null) {
      this.f1001 = EnumSimple.fromObject(other.f1001)
    } else {
      this.f1001 = undefined
    }
    if (other.f1002 != null) {
      this.f1002 = EnumTyped.fromObject(other.f1002)
    } else {
      this.f1002 = undefined
    }
    if (other.f1003 != null) {
      this.f1003 = EnumTyped.fromObject(other.f1003)
    } else {
      this.f1003 = undefined
    }
    if (other.f1004 != null) {
      this.f1004 = FlagsSimple.fromObject(other.f1004)
    } else {
      this.f1004 = undefined
    }
    if (other.f1005 != null) {
      this.f1005 = FlagsSimple.fromObject(other.f1005)
    } else {
      this.f1005 = undefined
    }
    if (other.f1006 != null) {
      this.f1006 = FlagsTyped.fromObject(other.f1006)
    } else {
      this.f1006 = undefined
    }
    if (other.f1007 != null) {
      this.f1007 = FlagsTyped.fromObject(other.f1007)
    } else {
      this.f1007 = undefined
    }
    if (other.f1008 != null) {
      this.f1008 = StructSimple.fromObject(other.f1008)
    } else {
      this.f1008 = undefined
    }
    if (other.f1009 != null) {
      this.f1009 = StructSimple.fromObject(other.f1009)
    } else {
      this.f1009 = undefined
    }
    if (other.f1010 != null) {
      this.f1010 = StructOptional.fromObject(other.f1010)
    } else {
      this.f1010 = undefined
    }
    if (other.f1011 != null) {
      this.f1011 = StructOptional.fromObject(other.f1011)
    } else {
      this.f1011 = undefined
    }
    return this
  }

  /**
   * Clone struct
   * @this {!StructNested}
   * @returns {!StructNested} Cloned struct
   */
  clone () {
    // Serialize the struct to the FBE stream
    let writer = new StructNestedModel(new fbe.WriteBuffer())
    writer.serialize(this)

    // Deserialize the struct from the FBE stream
    let reader = new StructNestedModel(new fbe.ReadBuffer())
    reader.attachBuffer(writer.buffer)
    return reader.deserialize().value
  }

  /**
   * Is this struct equal to other one?
   * @this {!StructNested}
   * @param {!StructNested} other Other struct
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof StructNested)) {
      throw new TypeError('Instance of StructNested is required!')
    }
    // noinspection RedundantIfStatementJS
    if (!super.eq(other)) {
      return false
    }
    return true
  }

  /**
   * Convert struct to string
   * @this {!StructNested}
   * @returns {!string} Struct value string
   */
  toString () {
    let result = ''
    result += 'StructNested('
    result += super.toString()
    result += ',f1000='
    result += this.f1000.toString()
    result += ',f1001='
    if (this.f1001 != null) {
      result += this.f1001.toString()
    } else {
      result += 'null'
    }
    result += ',f1002='
    result += this.f1002.toString()
    result += ',f1003='
    if (this.f1003 != null) {
      result += this.f1003.toString()
    } else {
      result += 'null'
    }
    result += ',f1004='
    result += this.f1004.toString()
    result += ',f1005='
    if (this.f1005 != null) {
      result += this.f1005.toString()
    } else {
      result += 'null'
    }
    result += ',f1006='
    result += this.f1006.toString()
    result += ',f1007='
    if (this.f1007 != null) {
      result += this.f1007.toString()
    } else {
      result += 'null'
    }
    result += ',f1008='
    result += this.f1008.toString()
    result += ',f1009='
    if (this.f1009 != null) {
      result += this.f1009.toString()
    } else {
      result += 'null'
    }
    result += ',f1010='
    result += this.f1010.toString()
    result += ',f1011='
    if (this.f1011 != null) {
      result += this.f1011.toString()
    } else {
      result += 'null'
    }
    result += ')'
    return result
  }

  /**
   * Inspect struct
   * @this {!StructNested}
   * @returns {!string} Struct value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert struct to JSON
   * @this {!StructNested}
   * @returns {!object} Struct value for JSON
   */
  toJSON () {
    let parent = super.toJSON()
    let current = {
      f1000: ((this.f1000 != null) ? this.f1000 : null),
      f1001: ((this.f1001 != null) ? this.f1001 : null),
      f1002: ((this.f1002 != null) ? this.f1002 : null),
      f1003: ((this.f1003 != null) ? this.f1003 : null),
      f1004: ((this.f1004 != null) ? this.f1004 : null),
      f1005: ((this.f1005 != null) ? this.f1005 : null),
      f1006: ((this.f1006 != null) ? this.f1006 : null),
      f1007: ((this.f1007 != null) ? this.f1007 : null),
      f1008: ((this.f1008 != null) ? this.f1008 : null),
      f1009: ((this.f1009 != null) ? this.f1009 : null),
      f1010: ((this.f1010 != null) ? this.f1010 : null),
      f1011: ((this.f1011 != null) ? this.f1011 : null)
    }
    return { ...parent, ...current }
  }

  /**
   * Convert JSON to struct
   * @param {!string} json JSON string
   * @returns {!object} Struct value for JSON
   */
  static fromJSON (json) {
    return StructNested.fromObject(JSON.parse(json))
  }

  /**
   * Create struct from object value
   * @param {!StructNested} other Object value
   * @returns {!StructNested} Created struct
   */
  static fromObject (other) {
    return new StructNested().copy(other)
  }
}

exports.StructNested = StructNested

/**
 * Fast Binary Encoding StructNested field model class
 */
class FieldModelStructNested extends fbe.FieldModel {
  /**
   * Initialize field model with the given buffer and offset
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Buffer
   * @param {!number} offset Offset
   * @constructor
   */
  constructor (buffer, offset) {
    super(buffer, offset)
    this._parent = new FieldModelStructOptional(buffer, 4 + 4)
    this._f1000 = new FieldModelEnumSimple(buffer, this._parent.FBEOffset + this._parent.FBEBody - 4 - 4)
    this._f1001 = new fbe.FieldModelOptional(new FieldModelEnumSimple(buffer, this._f1000.FBEOffset + this._f1000.FBESize), buffer, this._f1000.FBEOffset + this._f1000.FBESize)
    this._f1002 = new FieldModelEnumTyped(buffer, this._f1001.FBEOffset + this._f1001.FBESize)
    this._f1003 = new fbe.FieldModelOptional(new FieldModelEnumTyped(buffer, this._f1002.FBEOffset + this._f1002.FBESize), buffer, this._f1002.FBEOffset + this._f1002.FBESize)
    this._f1004 = new FieldModelFlagsSimple(buffer, this._f1003.FBEOffset + this._f1003.FBESize)
    this._f1005 = new fbe.FieldModelOptional(new FieldModelFlagsSimple(buffer, this._f1004.FBEOffset + this._f1004.FBESize), buffer, this._f1004.FBEOffset + this._f1004.FBESize)
    this._f1006 = new FieldModelFlagsTyped(buffer, this._f1005.FBEOffset + this._f1005.FBESize)
    this._f1007 = new fbe.FieldModelOptional(new FieldModelFlagsTyped(buffer, this._f1006.FBEOffset + this._f1006.FBESize), buffer, this._f1006.FBEOffset + this._f1006.FBESize)
    this._f1008 = new FieldModelStructSimple(buffer, this._f1007.FBEOffset + this._f1007.FBESize)
    this._f1009 = new fbe.FieldModelOptional(new FieldModelStructSimple(buffer, this._f1008.FBEOffset + this._f1008.FBESize), buffer, this._f1008.FBEOffset + this._f1008.FBESize)
    this._f1010 = new FieldModelStructOptional(buffer, this._f1009.FBEOffset + this._f1009.FBESize)
    this._f1011 = new fbe.FieldModelOptional(new FieldModelStructOptional(buffer, this._f1010.FBEOffset + this._f1010.FBESize), buffer, this._f1010.FBEOffset + this._f1010.FBESize)
  }

  /**
   * Get the StructOptional field model
   * @this {!FieldModelStructNested}
   * @returns {!FieldModelStructOptional} StructOptional field model
   */
  get parent () {
    return this._parent
  }

  /**
   * Get the f1000 field model
   * @this {!FieldModelStructNested}
   * @returns {!FieldModelEnumSimple} f1000 field model
   */
  get f1000 () {
    return this._f1000
  }

  /**
   * Get the f1001 field model
   * @this {!FieldModelStructNested}
   * @returns {!fbe.FieldModelOptional} f1001 field model
   */
  get f1001 () {
    return this._f1001
  }

  /**
   * Get the f1002 field model
   * @this {!FieldModelStructNested}
   * @returns {!FieldModelEnumTyped} f1002 field model
   */
  get f1002 () {
    return this._f1002
  }

  /**
   * Get the f1003 field model
   * @this {!FieldModelStructNested}
   * @returns {!fbe.FieldModelOptional} f1003 field model
   */
  get f1003 () {
    return this._f1003
  }

  /**
   * Get the f1004 field model
   * @this {!FieldModelStructNested}
   * @returns {!FieldModelFlagsSimple} f1004 field model
   */
  get f1004 () {
    return this._f1004
  }

  /**
   * Get the f1005 field model
   * @this {!FieldModelStructNested}
   * @returns {!fbe.FieldModelOptional} f1005 field model
   */
  get f1005 () {
    return this._f1005
  }

  /**
   * Get the f1006 field model
   * @this {!FieldModelStructNested}
   * @returns {!FieldModelFlagsTyped} f1006 field model
   */
  get f1006 () {
    return this._f1006
  }

  /**
   * Get the f1007 field model
   * @this {!FieldModelStructNested}
   * @returns {!fbe.FieldModelOptional} f1007 field model
   */
  get f1007 () {
    return this._f1007
  }

  /**
   * Get the f1008 field model
   * @this {!FieldModelStructNested}
   * @returns {!FieldModelStructSimple} f1008 field model
   */
  get f1008 () {
    return this._f1008
  }

  /**
   * Get the f1009 field model
   * @this {!FieldModelStructNested}
   * @returns {!fbe.FieldModelOptional} f1009 field model
   */
  get f1009 () {
    return this._f1009
  }

  /**
   * Get the f1010 field model
   * @this {!FieldModelStructNested}
   * @returns {!FieldModelStructOptional} f1010 field model
   */
  get f1010 () {
    return this._f1010
  }

  /**
   * Get the f1011 field model
   * @this {!FieldModelStructNested}
   * @returns {!fbe.FieldModelOptional} f1011 field model
   */
  get f1011 () {
    return this._f1011
  }

  /**
   * Get the field size
   * @this {!FieldModelStructNested}
   * @returns {!number} Field size
   */
  get FBESize () {
    return 4
  }

  /**
   * Get the field body size
   * @this {!FieldModelStructNested}
   * @returns {!number} Field body size
   */
  get FBEBody () {
    return 4 + 4 + this.parent.FBEBody - 4 - 4 + this.f1000.FBESize + this.f1001.FBESize + this.f1002.FBESize + this.f1003.FBESize + this.f1004.FBESize + this.f1005.FBESize + this.f1006.FBESize + this.f1007.FBESize + this.f1008.FBESize + this.f1009.FBESize + this.f1010.FBESize + this.f1011.FBESize
  }

  /**
   * Get the field extra size
   * @this {!FieldModelStructNested}
   * @returns {!number} Field extra size
   */
  get FBEExtra () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4) > this._buffer.size)) {
      return 0
    }

    this._buffer.shift(fbeStructOffset)

    let fbeResult = this.FBEBody + this.parent.FBEExtra + this.f1000.FBEExtra + this.f1001.FBEExtra + this.f1002.FBEExtra + this.f1003.FBEExtra + this.f1004.FBEExtra + this.f1005.FBEExtra + this.f1006.FBEExtra + this.f1007.FBEExtra + this.f1008.FBEExtra + this.f1009.FBEExtra + this.f1010.FBEExtra + this.f1011.FBEExtra

    this._buffer.unshift(fbeStructOffset)

    return fbeResult
  }

  /**
   * Get the field type
   * @this {!FieldModelStructNested}
   * @returns {!number} Field type
   */
  get FBEType () {
    return FieldModelStructNested.FBEType
  }

  /**
   * Get the field type (static)
   * @this {!FieldModelStructNested}
   * @returns {!number} Field type
   */
  static get FBEType () {
    return 112
  }

  /**
   * Check if the struct value is valid
   * @this {!FieldModelStructNested}
   * @param {!boolean} fbeVerifyType Verify model type flag, defaults is true
   * @returns {!boolean} Field model valid state
   */
  verify (fbeVerifyType = true) {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return true
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4 + 4) > this._buffer.size)) {
      return false
    }

    let fbeStructSize = this.readUInt32(fbeStructOffset)
    if (fbeStructSize < 4 + 4) {
      return false
    }

    let fbeStructType = this.readUInt32(fbeStructOffset + 4)
    if (fbeVerifyType && (fbeStructType !== this.FBEType)) {
      return false
    }

    this._buffer.shift(fbeStructOffset)
    let fbeResult = this.verifyFields(fbeStructSize)
    this._buffer.unshift(fbeStructOffset)
    return fbeResult
  }

  /**
   * Check if the struct fields are valid
   * @this {!FieldModelStructNested}
   * @param {!number} fbeStructSize FBE struct size
   * @returns {!boolean} Field model valid state
   */
  verifyFields (fbeStructSize) {
    let fbeCurrentSize = 4 + 4

    if ((fbeCurrentSize + this.parent.FBEBody - 4 - 4) > fbeStructSize) {
      return true
    }
    if (!this.parent.verifyFields(fbeStructSize)) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.parent.FBEBody - 4 - 4

    if ((fbeCurrentSize + this.f1000.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f1000.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1000.FBESize

    if ((fbeCurrentSize + this.f1001.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f1001.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1001.FBESize

    if ((fbeCurrentSize + this.f1002.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f1002.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1002.FBESize

    if ((fbeCurrentSize + this.f1003.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f1003.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1003.FBESize

    if ((fbeCurrentSize + this.f1004.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f1004.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1004.FBESize

    if ((fbeCurrentSize + this.f1005.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f1005.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1005.FBESize

    if ((fbeCurrentSize + this.f1006.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f1006.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1006.FBESize

    if ((fbeCurrentSize + this.f1007.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f1007.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1007.FBESize

    if ((fbeCurrentSize + this.f1008.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f1008.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1008.FBESize

    if ((fbeCurrentSize + this.f1009.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f1009.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1009.FBESize

    if ((fbeCurrentSize + this.f1010.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f1010.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1010.FBESize

    if ((fbeCurrentSize + this.f1011.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f1011.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1011.FBESize

    return true
  }

  /**
   * Get the struct value (begin phase)
   * @this {!FieldModelStructNested}
   * @returns {!number} Field model begin offset
   */
  getBegin () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    console.assert((fbeStructOffset > 0) && ((this._buffer.offset + fbeStructOffset + 4 + 4) <= this._buffer.size), 'Model is broken!')
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4 + 4) > this._buffer.size)) {
      return 0
    }

    let fbeStructSize = this.readUInt32(fbeStructOffset)
    console.assert((fbeStructSize >= 4 + 4), 'Model is broken!')
    if (fbeStructSize < 4 + 4) {
      return 0
    }

    this._buffer.shift(fbeStructOffset)
    return fbeStructOffset
  }

  /**
   * Get the struct value (end phase)
   * @this {!FieldModelStructNested}
   * @param {!number} fbeBegin Field model begin offset
   */
  getEnd (fbeBegin) {
    this._buffer.unshift(fbeBegin)
  }

  /**
   * Get the struct value
   * @this {!FieldModelStructNested}
   * @param {!StructNested} fbeValue Default value, defaults is new StructNested()
   * @returns {!StructNested} StructNested value
   */
  get (fbeValue = new StructNested()) {
    let fbeBegin = this.getBegin()
    if (fbeBegin === 0) {
      return fbeValue
    }

    let fbeStructSize = this.readUInt32(0)
    this.getFields(fbeValue, fbeStructSize)
    this.getEnd(fbeBegin)
    return fbeValue
  }

  /**
   * Get the struct fields values
   * @this {!FieldModelStructNested}
   * @param {!StructNested} fbeValue StructNested value
   * @param {!number} fbeStructSize Struct size
   */
  getFields (fbeValue, fbeStructSize) {
    let fbeCurrentSize = 4 + 4

    if ((fbeCurrentSize + this.parent.FBEBody - 4 - 4) <= fbeStructSize) {
      this.parent.getFields(fbeValue, fbeStructSize)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.parent.FBEBody - 4 - 4

    if ((fbeCurrentSize + this.f1000.FBESize) <= fbeStructSize) {
      fbeValue.f1000 = this.f1000.get()
    } else {
      fbeValue.f1000 = new EnumSimple()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1000.FBESize

    if ((fbeCurrentSize + this.f1001.FBESize) <= fbeStructSize) {
      fbeValue.f1001 = this.f1001.get()
    } else {
      fbeValue.f1001 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1001.FBESize

    if ((fbeCurrentSize + this.f1002.FBESize) <= fbeStructSize) {
      fbeValue.f1002 = this.f1002.get(new EnumTyped(EnumTyped.ENUM_VALUE_2))
    } else {
      fbeValue.f1002 = new EnumTyped(EnumTyped.ENUM_VALUE_2)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1002.FBESize

    if ((fbeCurrentSize + this.f1003.FBESize) <= fbeStructSize) {
      fbeValue.f1003 = this.f1003.get(undefined)
    } else {
      fbeValue.f1003 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1003.FBESize

    if ((fbeCurrentSize + this.f1004.FBESize) <= fbeStructSize) {
      fbeValue.f1004 = this.f1004.get()
    } else {
      fbeValue.f1004 = new FlagsSimple()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1004.FBESize

    if ((fbeCurrentSize + this.f1005.FBESize) <= fbeStructSize) {
      fbeValue.f1005 = this.f1005.get()
    } else {
      fbeValue.f1005 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1005.FBESize

    if ((fbeCurrentSize + this.f1006.FBESize) <= fbeStructSize) {
      fbeValue.f1006 = this.f1006.get(new FlagsTyped(FlagsTyped.FLAG_VALUE_2 | FlagsTyped.FLAG_VALUE_4 | FlagsTyped.FLAG_VALUE_6))
    } else {
      fbeValue.f1006 = new FlagsTyped(FlagsTyped.FLAG_VALUE_2 | FlagsTyped.FLAG_VALUE_4 | FlagsTyped.FLAG_VALUE_6)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1006.FBESize

    if ((fbeCurrentSize + this.f1007.FBESize) <= fbeStructSize) {
      fbeValue.f1007 = this.f1007.get(undefined)
    } else {
      fbeValue.f1007 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1007.FBESize

    if ((fbeCurrentSize + this.f1008.FBESize) <= fbeStructSize) {
      fbeValue.f1008 = this.f1008.get()
    } else {
      fbeValue.f1008 = new StructSimple()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1008.FBESize

    if ((fbeCurrentSize + this.f1009.FBESize) <= fbeStructSize) {
      fbeValue.f1009 = this.f1009.get()
    } else {
      fbeValue.f1009 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1009.FBESize

    if ((fbeCurrentSize + this.f1010.FBESize) <= fbeStructSize) {
      fbeValue.f1010 = this.f1010.get()
    } else {
      fbeValue.f1010 = new StructOptional()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1010.FBESize

    if ((fbeCurrentSize + this.f1011.FBESize) <= fbeStructSize) {
      fbeValue.f1011 = this.f1011.get(undefined)
    } else {
      fbeValue.f1011 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1011.FBESize
  }

  /**
   * Set the struct value (begin phase)
   * @this {!FieldModelStructNested}
   * @returns {!number} Field model begin offset
   */
  setBegin () {
    console.assert(((this._buffer.offset + this.FBEOffset + this.FBESize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructSize = this.FBEBody
    let fbeStructOffset = this._buffer.allocate(fbeStructSize) - this._buffer.offset
    console.assert((fbeStructOffset > 0) && ((this._buffer.offset + fbeStructOffset + fbeStructSize) <= this._buffer.size), 'Model is broken!')
    if ((fbeStructOffset <= 0) || ((this._buffer.offset + fbeStructOffset + fbeStructSize) > this._buffer.size)) {
      return 0
    }

    this.writeUInt32(this.FBEOffset, fbeStructOffset)
    this.writeUInt32(fbeStructOffset, fbeStructSize)
    this.writeUInt32(fbeStructOffset + 4, this.FBEType)

    this._buffer.shift(fbeStructOffset)
    return fbeStructOffset
  }

  /**
   * Set the struct value (end phase)
   * @this {!FieldModelStructNested}
   * @param {!number} fbeBegin Field model begin offset
   */
  setEnd (fbeBegin) {
    this._buffer.unshift(fbeBegin)
  }

  /**
   * Set the struct value
   * @this {!FieldModelStructNested}
   * @param {!StructNested} fbeValue StructNested value
   */
  set (fbeValue) {
    let fbeBegin = this.setBegin()
    if (fbeBegin === 0) {
      return
    }

    this.setFields(fbeValue)
    this.setEnd(fbeBegin)
  }

  /**
   * Set the struct fields values
   * @this {!FieldModelStructNested}
   * @param {StructNested} fbeValue StructNested value
   */
  setFields (fbeValue) {
    this.parent.setFields(fbeValue)
    this.f1000.set(fbeValue.f1000)
    this.f1001.set(fbeValue.f1001)
    this.f1002.set(fbeValue.f1002)
    this.f1003.set(fbeValue.f1003)
    this.f1004.set(fbeValue.f1004)
    this.f1005.set(fbeValue.f1005)
    this.f1006.set(fbeValue.f1006)
    this.f1007.set(fbeValue.f1007)
    this.f1008.set(fbeValue.f1008)
    this.f1009.set(fbeValue.f1009)
    this.f1010.set(fbeValue.f1010)
    this.f1011.set(fbeValue.f1011)
  }
}

exports.FieldModelStructNested = FieldModelStructNested

/**
 * Fast Binary Encoding StructNested model class
 */
class StructNestedModel extends fbe.Model {
  /**
   * Initialize model with the given buffer
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Read/Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer)
    this._model = new FieldModelStructNested(this.buffer, 4)
  }

  /**
   * Get the StructNested model
   * @this {!StructNestedModel}
   * @returns {!FieldModelStructNested} model StructNested model
   */
  get model () {
    return this._model
  }

  /**
   * Get the model size
   * @this {!StructNestedModel}
   * @returns {!number} Model size
   */
  get FBESize () {
    return this.model.FBESize + this.model.FBEExtra
  }

  /**
   * Get the model type
   * @this {!StructNestedModel}
   * @returns {!number} Model type
   */
  get FBEType () {
    return StructNestedModel.FBEType
  }

  /**
   * Get the model type (static)
   * @this {!StructNestedModel}
   * @returns {!number} Model type
   */
  static get FBEType () {
    return FieldModelStructNested.FBEType
  }

  /**
   * Check if the struct value is valid
   * @this {!StructNestedModel}
   * @returns {!boolean} Model valid state
   */
  verify () {
    if ((this.buffer.offset + this.model.FBEOffset - 4) > this.buffer.size) {
      return false
    }

    let fbeFullSize = this.readUInt32(this.model.FBEOffset - 4)
    if (fbeFullSize < this.model.FBESize) {
      return false
    }

    return this.model.verify()
  }

  /**
   * Create a new model (begin phase)
   * @this {!StructNestedModel}
   * @returns {!number} Model begin offset
   */
  createBegin () {
    return this.buffer.allocate(4 + this.model.FBESize)
  }

  /**
   * Create a new model (end phase)
   * @this {!StructNestedModel}
   * @param {!number} fbeBegin Model begin offset
   */
  createEnd (fbeBegin) {
    let fbeEnd = this.buffer.size
    let fbeFullSize = fbeEnd - fbeBegin
    this.writeUInt32(this.model.FBEOffset - 4, fbeFullSize)
    return fbeFullSize
  }

  /**
   * Serialize the struct value
   * @this {!StructNestedModel}
   * @param {!StructNested} value StructNested value
   * @return {!number} Model begin offset
   */
  serialize (value) {
    let fbeBegin = this.createBegin()
    this.model.set(value)
    return this.createEnd(fbeBegin)
  }

  /**
   * Deserialize the struct value
   * @this {!StructNestedModel}
   * @param {!StructNested} value StructNested value, defaults is new StructNested()
   * @return {!object} Deserialized StructNested value and its size
   */
  deserialize (value = new StructNested()) {
    if ((this.buffer.offset + this.model.FBEOffset - 4) > this.buffer.size) {
      return { value: new StructNested(), size: 0 }
    }

    let fbeFullSize = this.readUInt32(this.model.FBEOffset - 4)
    console.assert((fbeFullSize >= this.model.FBESize), 'Model is broken!')
    if (fbeFullSize < this.model.FBESize) {
      return { value: new StructNested(), size: 0 }
    }

    this.model.get(value)
    return { value: value, size: fbeFullSize }
  }

  /**
   * Move to the next struct value
   * @this {!StructNestedModel}
   * @param {!number} prev Previous StructNested model size
   */
  next (prev) {
    this.model.FBEShift(prev)
  }
}

exports.StructNestedModel = StructNestedModel

/**
 * Fast Binary Encoding StructNested final model class
 */
class FinalModelStructNested extends fbe.FinalModel {
  /**
   * Initialize final model with the given buffer and offset
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Buffer
   * @param {!number} offset Offset
   * @constructor
   */
  constructor (buffer, offset) {
    super(buffer, offset)
    this._parent = new FinalModelStructOptional(buffer, 0)
    this._f1000 = new FinalModelEnumSimple(buffer, 0)
    this._f1001 = new fbe.FinalModelOptional(new FinalModelEnumSimple(buffer, 0), buffer, 0)
    this._f1002 = new FinalModelEnumTyped(buffer, 0)
    this._f1003 = new fbe.FinalModelOptional(new FinalModelEnumTyped(buffer, 0), buffer, 0)
    this._f1004 = new FinalModelFlagsSimple(buffer, 0)
    this._f1005 = new fbe.FinalModelOptional(new FinalModelFlagsSimple(buffer, 0), buffer, 0)
    this._f1006 = new FinalModelFlagsTyped(buffer, 0)
    this._f1007 = new fbe.FinalModelOptional(new FinalModelFlagsTyped(buffer, 0), buffer, 0)
    this._f1008 = new FinalModelStructSimple(buffer, 0)
    this._f1009 = new fbe.FinalModelOptional(new FinalModelStructSimple(buffer, 0), buffer, 0)
    this._f1010 = new FinalModelStructOptional(buffer, 0)
    this._f1011 = new fbe.FinalModelOptional(new FinalModelStructOptional(buffer, 0), buffer, 0)
  }

  /**
   * Get the StructOptional final model
   * @this {!FinalModelStructNested}
   * @returns {!FinalModelStructOptional} StructOptional field model
   */
  get parent () {
    return this._parent
  }

  /**
   * Get the f1000 final model
   * @this {!FinalModelStructNested}
   * @returns {!FinalModelEnumSimple} f1000 final model
   */
  get f1000 () {
    return this._f1000
  }

  /**
   * Get the f1001 final model
   * @this {!FinalModelStructNested}
   * @returns {!fbe.FinalModelOptional} f1001 final model
   */
  get f1001 () {
    return this._f1001
  }

  /**
   * Get the f1002 final model
   * @this {!FinalModelStructNested}
   * @returns {!FinalModelEnumTyped} f1002 final model
   */
  get f1002 () {
    return this._f1002
  }

  /**
   * Get the f1003 final model
   * @this {!FinalModelStructNested}
   * @returns {!fbe.FinalModelOptional} f1003 final model
   */
  get f1003 () {
    return this._f1003
  }

  /**
   * Get the f1004 final model
   * @this {!FinalModelStructNested}
   * @returns {!FinalModelFlagsSimple} f1004 final model
   */
  get f1004 () {
    return this._f1004
  }

  /**
   * Get the f1005 final model
   * @this {!FinalModelStructNested}
   * @returns {!fbe.FinalModelOptional} f1005 final model
   */
  get f1005 () {
    return this._f1005
  }

  /**
   * Get the f1006 final model
   * @this {!FinalModelStructNested}
   * @returns {!FinalModelFlagsTyped} f1006 final model
   */
  get f1006 () {
    return this._f1006
  }

  /**
   * Get the f1007 final model
   * @this {!FinalModelStructNested}
   * @returns {!fbe.FinalModelOptional} f1007 final model
   */
  get f1007 () {
    return this._f1007
  }

  /**
   * Get the f1008 final model
   * @this {!FinalModelStructNested}
   * @returns {!FinalModelStructSimple} f1008 final model
   */
  get f1008 () {
    return this._f1008
  }

  /**
   * Get the f1009 final model
   * @this {!FinalModelStructNested}
   * @returns {!fbe.FinalModelOptional} f1009 final model
   */
  get f1009 () {
    return this._f1009
  }

  /**
   * Get the f1010 final model
   * @this {!FinalModelStructNested}
   * @returns {!FinalModelStructOptional} f1010 final model
   */
  get f1010 () {
    return this._f1010
  }

  /**
   * Get the f1011 final model
   * @this {!FinalModelStructNested}
   * @returns {!fbe.FinalModelOptional} f1011 final model
   */
  get f1011 () {
    return this._f1011
  }

  /**
   * Get the allocation size
   * @this {!FinalModelStructNested}
   * @param {!StructNested} fbeValue StructNested value
   * @returns {!number} Allocation size
   */
  FBEAllocationSize (fbeValue) {
    return 0 + this.parent.FBEAllocationSize(fbeValue) + this.f1000.FBEAllocationSize(fbeValue.f1000) + this.f1001.FBEAllocationSize(fbeValue.f1001) + this.f1002.FBEAllocationSize(fbeValue.f1002) + this.f1003.FBEAllocationSize(fbeValue.f1003) + this.f1004.FBEAllocationSize(fbeValue.f1004) + this.f1005.FBEAllocationSize(fbeValue.f1005) + this.f1006.FBEAllocationSize(fbeValue.f1006) + this.f1007.FBEAllocationSize(fbeValue.f1007) + this.f1008.FBEAllocationSize(fbeValue.f1008) + this.f1009.FBEAllocationSize(fbeValue.f1009) + this.f1010.FBEAllocationSize(fbeValue.f1010) + this.f1011.FBEAllocationSize(fbeValue.f1011)
  }

  /**
   * Get the field type
   * @this {!FinalModelStructNested}
   * @returns {!number} Field type
   */
  get FBEType () {
    return FinalModelStructNested.FBEType
  }

  /**
   * Get the field type (static)
   * @this {!FinalModelStructNested}
   * @returns {!number} Field type
   */
  static get FBEType () {
    return 112
  }

  /**
   * Check if the struct value is valid
   * @this {!FinalModelStructNested}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    this._buffer.shift(this.FBEOffset)
    let fbeResult = this.verifyFields()
    this._buffer.unshift(this.FBEOffset)
    return fbeResult
  }

  /**
   * Check if the struct fields are valid
   * @this {!FinalModelStructNested}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verifyFields () {
    let fbeCurrentOffset = 0
    let fbeFieldSize

    this.parent.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.parent.verifyFields()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f1000.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1000.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f1001.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1001.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f1002.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1002.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f1003.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1003.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f1004.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1004.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f1005.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1005.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f1006.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1006.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f1007.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1007.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f1008.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1008.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f1009.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1009.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f1010.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1010.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f1011.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1011.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    return fbeCurrentOffset
  }

  /**
   * Get the struct value
   * @this {!FinalModelStructNested}
   * @param {!StructNested} fbeValue StructNested value, defaults is new StructNested()
   * @returns {!object} Result struct value and its size
   */
  get (fbeValue = new StructNested()) {
    this._buffer.shift(this.FBEOffset)
    let fbeSize = this.getFields(fbeValue)
    this._buffer.unshift(this.FBEOffset)
    return { value: fbeValue, size: fbeSize }
  }

  /**
   * Get the struct fields values
   * @this {!FinalModelStructNested}
   * @param {!StructNested} fbeValue StructNested value
   * @returns {!number} Struct size
   */
  getFields (fbeValue) {
    let fbeCurrentOffset = 0
    let fbeCurrentSize = 0
    let fbeResult

    this.parent.FBEOffset = fbeCurrentOffset
    fbeResult = this.parent.getFields(fbeValue)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult
    fbeCurrentSize += fbeResult

    this.f1000.FBEOffset = fbeCurrentOffset
    fbeResult = this.f1000.get()
    fbeValue.f1000 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f1001.FBEOffset = fbeCurrentOffset
    fbeResult = this.f1001.get()
    fbeValue.f1001 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f1002.FBEOffset = fbeCurrentOffset
    fbeResult = this.f1002.get()
    fbeValue.f1002 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f1003.FBEOffset = fbeCurrentOffset
    fbeResult = this.f1003.get()
    fbeValue.f1003 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f1004.FBEOffset = fbeCurrentOffset
    fbeResult = this.f1004.get()
    fbeValue.f1004 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f1005.FBEOffset = fbeCurrentOffset
    fbeResult = this.f1005.get()
    fbeValue.f1005 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f1006.FBEOffset = fbeCurrentOffset
    fbeResult = this.f1006.get()
    fbeValue.f1006 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f1007.FBEOffset = fbeCurrentOffset
    fbeResult = this.f1007.get()
    fbeValue.f1007 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f1008.FBEOffset = fbeCurrentOffset
    fbeResult = this.f1008.get()
    fbeValue.f1008 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f1009.FBEOffset = fbeCurrentOffset
    fbeResult = this.f1009.get()
    fbeValue.f1009 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f1010.FBEOffset = fbeCurrentOffset
    fbeResult = this.f1010.get()
    fbeValue.f1010 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f1011.FBEOffset = fbeCurrentOffset
    fbeResult = this.f1011.get()
    fbeValue.f1011 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    return fbeCurrentSize
  }

  /**
   * Set the struct value
   * @this {!FinalModelStructNested}
   * @param {!StructNested} fbeValue StructNested value
   * @returns {!number} Final model size
   */
  set (fbeValue) {
    this._buffer.shift(this.FBEOffset)
    let fbeSize = this.setFields(fbeValue)
    this._buffer.unshift(this.FBEOffset)
    return fbeSize
  }

  /**
   * Set the struct fields values
   * @this {!FinalModelStructNested}
   * @param {StructNested} fbeValue StructNested value
   * @returns {!number} Final model size
   */
  setFields (fbeValue) {
    let fbeCurrentOffset = 0
    let fbeCurrentSize = 0
    let fbeFieldSize

    this.parent.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.parent.setFields(fbeValue)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f1000.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1000.set(fbeValue.f1000)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f1001.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1001.set(fbeValue.f1001)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f1002.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1002.set(fbeValue.f1002)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f1003.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1003.set(fbeValue.f1003)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f1004.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1004.set(fbeValue.f1004)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f1005.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1005.set(fbeValue.f1005)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f1006.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1006.set(fbeValue.f1006)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f1007.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1007.set(fbeValue.f1007)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f1008.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1008.set(fbeValue.f1008)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f1009.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1009.set(fbeValue.f1009)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f1010.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1010.set(fbeValue.f1010)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f1011.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1011.set(fbeValue.f1011)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    return fbeCurrentSize
  }
}

exports.FinalModelStructNested = FinalModelStructNested

/**
 * Fast Binary Encoding StructNested final model class
 */
class StructNestedFinalModel extends fbe.Model {
  /**
   * Initialize final model with the given buffer
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Read/Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer)
    this._model = new FinalModelStructNested(this.buffer, 8)
  }

  /**
   * Get the model type
   * @this {!StructNestedFinalModel}
   * @returns {!number} Model type
   */
  get FBEType () {
    return StructNestedFinalModel.FBEType
  }

  /**
   * Get the model type (static)
   * @this {!StructNestedFinalModel}
   * @returns {!number} Model type
   */
  static get FBEType () {
    return FinalModelStructNested.FBEType
  }

  /**
   * Check if the struct value is valid
   * @this {!StructNestedFinalModel}
   * @returns {!boolean} Model valid state
   */
  verify () {
    if ((this.buffer.offset + this._model.FBEOffset) > this.buffer.size) {
      return false
    }

    let fbeStructSize = this.readUInt32(this._model.FBEOffset - 8)
    let fbeStructType = this.readUInt32(this._model.FBEOffset - 4)
    if ((fbeStructSize <= 0) || (fbeStructType !== this.FBEType)) {
      return false
    }

    return ((8 + this._model.verify()) === fbeStructSize)
  }

  /**
   * Serialize the struct value
   * @this {!StructNestedFinalModel}
   * @param {!StructNested} value StructNested value
   * @return {!number} Struct size
   */
  serialize (value) {
    let fbeInitialSize = this.buffer.size

    let fbeStructType = this.FBEType
    let fbeStructSize = 8 + this._model.FBEAllocationSize(value)
    let fbeStructOffset = this.buffer.allocate(fbeStructSize) - this.buffer.offset
    console.assert(((this.buffer.offset + fbeStructOffset + fbeStructSize) <= this.buffer.size), 'Model is broken!')
    if ((this.buffer.offset + fbeStructOffset + fbeStructSize) > this.buffer.size) {
      return 0
    }

    fbeStructSize = 8 + this._model.set(value)
    this.buffer.resize(fbeInitialSize + fbeStructSize)

    this.writeUInt32(this._model.FBEOffset - 8, fbeStructSize)
    this.writeUInt32(this._model.FBEOffset - 4, fbeStructType)

    return fbeStructSize
  }

  /**
   * Deserialize the struct value
   * @this {!StructNestedFinalModel}
   * @param {!StructNested} value StructNested value, defaults is new StructNested()
   * @return {!object} Deserialized StructNested value and its size
   */
  deserialize (value = new StructNested()) {
    console.assert(((this.buffer.offset + this._model.FBEOffset) <= this.buffer.size), 'Model is broken!')
    if ((this.buffer.offset + this._model.FBEOffset) > this.buffer.size) {
      return { value: new StructNested(), size: 0 }
    }

    let fbeStructSize = this.readUInt32(this._model.FBEOffset - 8)
    let fbeStructType = this.readUInt32(this._model.FBEOffset - 4)
    console.assert(((fbeStructSize > 0) && (fbeStructType === this.FBEType)), 'Model is broken!')
    if ((fbeStructSize <= 0) || (fbeStructType !== this.FBEType)) {
      return { value: new StructNested(), size: 8 }
    }

    let fbeResult = this._model.get(value)
    return { value: fbeResult.value, size: (8 + fbeResult.size) }
  }

  /**
   * Move to the next struct value
   * @this {!StructNestedFinalModel}
   * @param {!number} prev Previous StructNested model size
   */
  next (prev) {
    this._model.FBEShift(prev)
  }
}

exports.StructNestedFinalModel = StructNestedFinalModel

/**
 * StructBytes struct
 */
class StructBytes {
  /**
   * Initialize struct
   * @param {!Uint8Array=} f1
   * @param {Uint8Array=} f2
   * @param {Uint8Array=} f3
   * @constructor
   */
  constructor (f1 = new Uint8Array(0), f2 = undefined, f3 = undefined) {
    this.f1 = f1
    this.f2 = f2
    this.f3 = f3
  }

  /**
   * Copy struct
   * @this {!StructBytes}
   * @param {!StructBytes} other Other struct
   * @returns {!StructBytes} This struct
   */
  copy (other) {
    if (other.f1 != null) {
      if (typeof other.f1 === 'string') {
        // noinspection JSUnresolvedFunction
        this.f1 = Uint8Array.from(Buffer.from(other.f1, 'base64'))
      } else {
        this.f1 = Uint8Array.from(other.f1)
      }
    } else {
      this.f1 = undefined
    }
    if (other.f2 != null) {
      if (typeof other.f2 === 'string') {
        // noinspection JSUnresolvedFunction
        this.f2 = Uint8Array.from(Buffer.from(other.f2, 'base64'))
      } else {
        this.f2 = Uint8Array.from(other.f2)
      }
    } else {
      this.f2 = undefined
    }
    if (other.f3 != null) {
      if (typeof other.f3 === 'string') {
        // noinspection JSUnresolvedFunction
        this.f3 = Uint8Array.from(Buffer.from(other.f3, 'base64'))
      } else {
        this.f3 = Uint8Array.from(other.f3)
      }
    } else {
      this.f3 = undefined
    }
    return this
  }

  /**
   * Clone struct
   * @this {!StructBytes}
   * @returns {!StructBytes} Cloned struct
   */
  clone () {
    // Serialize the struct to the FBE stream
    let writer = new StructBytesModel(new fbe.WriteBuffer())
    writer.serialize(this)

    // Deserialize the struct from the FBE stream
    let reader = new StructBytesModel(new fbe.ReadBuffer())
    reader.attachBuffer(writer.buffer)
    return reader.deserialize().value
  }

  /**
   * Is this struct equal to other one?
   * @this {!StructBytes}
   * @param {!StructBytes} other Other struct
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof StructBytes)) {
      throw new TypeError('Instance of StructBytes is required!')
    }
    return true
  }

  /**
   * Convert struct to string
   * @this {!StructBytes}
   * @returns {!string} Struct value string
   */
  toString () {
    let result = ''
    result += 'StructBytes('
    result += 'f1='
    if (this.f1 != null) {
      result += 'bytes['
      result += this.f1.length
      result += ']'
    } else {
      result += 'null'
    }
    result += ',f2='
    if (this.f2 != null) {
      result += 'bytes['
      result += this.f2.length
      result += ']'
    } else {
      result += 'null'
    }
    result += ',f3='
    if (this.f3 != null) {
      result += 'bytes['
      result += this.f3.length
      result += ']'
    } else {
      result += 'null'
    }
    result += ')'
    return result
  }

  /**
   * Inspect struct
   * @this {!StructBytes}
   * @returns {!string} Struct value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert struct to JSON
   * @this {!StructBytes}
   * @returns {!object} Struct value for JSON
   */
  toJSON () {
    return {
      f1: ((this.f1 != null) ? Buffer.from(this.f1).toString('base64') : null),
      f2: ((this.f2 != null) ? Buffer.from(this.f2).toString('base64') : null),
      f3: ((this.f3 != null) ? Buffer.from(this.f3).toString('base64') : null)
    }
  }

  /**
   * Convert JSON to struct
   * @param {!string} json JSON string
   * @returns {!object} Struct value for JSON
   */
  static fromJSON (json) {
    return StructBytes.fromObject(JSON.parse(json))
  }

  /**
   * Create struct from object value
   * @param {!StructBytes} other Object value
   * @returns {!StructBytes} Created struct
   */
  static fromObject (other) {
    return new StructBytes().copy(other)
  }
}

exports.StructBytes = StructBytes

/**
 * Fast Binary Encoding StructBytes field model class
 */
class FieldModelStructBytes extends fbe.FieldModel {
  /**
   * Initialize field model with the given buffer and offset
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Buffer
   * @param {!number} offset Offset
   * @constructor
   */
  constructor (buffer, offset) {
    super(buffer, offset)
    this._f1 = new fbe.FieldModelBytes(buffer, 4 + 4)
    this._f2 = new fbe.FieldModelOptional(new fbe.FieldModelBytes(buffer, this._f1.FBEOffset + this._f1.FBESize), buffer, this._f1.FBEOffset + this._f1.FBESize)
    this._f3 = new fbe.FieldModelOptional(new fbe.FieldModelBytes(buffer, this._f2.FBEOffset + this._f2.FBESize), buffer, this._f2.FBEOffset + this._f2.FBESize)
  }

  /**
   * Get the f1 field model
   * @this {!FieldModelStructBytes}
   * @returns {!fbe.FieldModelBytes} f1 field model
   */
  get f1 () {
    return this._f1
  }

  /**
   * Get the f2 field model
   * @this {!FieldModelStructBytes}
   * @returns {!fbe.FieldModelOptional} f2 field model
   */
  get f2 () {
    return this._f2
  }

  /**
   * Get the f3 field model
   * @this {!FieldModelStructBytes}
   * @returns {!fbe.FieldModelOptional} f3 field model
   */
  get f3 () {
    return this._f3
  }

  /**
   * Get the field size
   * @this {!FieldModelStructBytes}
   * @returns {!number} Field size
   */
  get FBESize () {
    return 4
  }

  /**
   * Get the field body size
   * @this {!FieldModelStructBytes}
   * @returns {!number} Field body size
   */
  get FBEBody () {
    return 4 + 4 + this.f1.FBESize + this.f2.FBESize + this.f3.FBESize
  }

  /**
   * Get the field extra size
   * @this {!FieldModelStructBytes}
   * @returns {!number} Field extra size
   */
  get FBEExtra () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4) > this._buffer.size)) {
      return 0
    }

    this._buffer.shift(fbeStructOffset)

    let fbeResult = this.FBEBody + this.f1.FBEExtra + this.f2.FBEExtra + this.f3.FBEExtra

    this._buffer.unshift(fbeStructOffset)

    return fbeResult
  }

  /**
   * Get the field type
   * @this {!FieldModelStructBytes}
   * @returns {!number} Field type
   */
  get FBEType () {
    return FieldModelStructBytes.FBEType
  }

  /**
   * Get the field type (static)
   * @this {!FieldModelStructBytes}
   * @returns {!number} Field type
   */
  static get FBEType () {
    return 120
  }

  /**
   * Check if the struct value is valid
   * @this {!FieldModelStructBytes}
   * @param {!boolean} fbeVerifyType Verify model type flag, defaults is true
   * @returns {!boolean} Field model valid state
   */
  verify (fbeVerifyType = true) {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return true
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4 + 4) > this._buffer.size)) {
      return false
    }

    let fbeStructSize = this.readUInt32(fbeStructOffset)
    if (fbeStructSize < 4 + 4) {
      return false
    }

    let fbeStructType = this.readUInt32(fbeStructOffset + 4)
    if (fbeVerifyType && (fbeStructType !== this.FBEType)) {
      return false
    }

    this._buffer.shift(fbeStructOffset)
    let fbeResult = this.verifyFields(fbeStructSize)
    this._buffer.unshift(fbeStructOffset)
    return fbeResult
  }

  /**
   * Check if the struct fields are valid
   * @this {!FieldModelStructBytes}
   * @param {!number} fbeStructSize FBE struct size
   * @returns {!boolean} Field model valid state
   */
  verifyFields (fbeStructSize) {
    let fbeCurrentSize = 4 + 4

    if ((fbeCurrentSize + this.f1.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f1.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1.FBESize

    if ((fbeCurrentSize + this.f2.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f2.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f2.FBESize

    if ((fbeCurrentSize + this.f3.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f3.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f3.FBESize

    return true
  }

  /**
   * Get the struct value (begin phase)
   * @this {!FieldModelStructBytes}
   * @returns {!number} Field model begin offset
   */
  getBegin () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    console.assert((fbeStructOffset > 0) && ((this._buffer.offset + fbeStructOffset + 4 + 4) <= this._buffer.size), 'Model is broken!')
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4 + 4) > this._buffer.size)) {
      return 0
    }

    let fbeStructSize = this.readUInt32(fbeStructOffset)
    console.assert((fbeStructSize >= 4 + 4), 'Model is broken!')
    if (fbeStructSize < 4 + 4) {
      return 0
    }

    this._buffer.shift(fbeStructOffset)
    return fbeStructOffset
  }

  /**
   * Get the struct value (end phase)
   * @this {!FieldModelStructBytes}
   * @param {!number} fbeBegin Field model begin offset
   */
  getEnd (fbeBegin) {
    this._buffer.unshift(fbeBegin)
  }

  /**
   * Get the struct value
   * @this {!FieldModelStructBytes}
   * @param {!StructBytes} fbeValue Default value, defaults is new StructBytes()
   * @returns {!StructBytes} StructBytes value
   */
  get (fbeValue = new StructBytes()) {
    let fbeBegin = this.getBegin()
    if (fbeBegin === 0) {
      return fbeValue
    }

    let fbeStructSize = this.readUInt32(0)
    this.getFields(fbeValue, fbeStructSize)
    this.getEnd(fbeBegin)
    return fbeValue
  }

  /**
   * Get the struct fields values
   * @this {!FieldModelStructBytes}
   * @param {!StructBytes} fbeValue StructBytes value
   * @param {!number} fbeStructSize Struct size
   */
  getFields (fbeValue, fbeStructSize) {
    let fbeCurrentSize = 4 + 4

    if ((fbeCurrentSize + this.f1.FBESize) <= fbeStructSize) {
      fbeValue.f1 = this.f1.get()
    } else {
      fbeValue.f1 = new Uint8Array(0)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1.FBESize

    if ((fbeCurrentSize + this.f2.FBESize) <= fbeStructSize) {
      fbeValue.f2 = this.f2.get()
    } else {
      fbeValue.f2 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f2.FBESize

    if ((fbeCurrentSize + this.f3.FBESize) <= fbeStructSize) {
      fbeValue.f3 = this.f3.get(undefined)
    } else {
      fbeValue.f3 = undefined
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f3.FBESize
  }

  /**
   * Set the struct value (begin phase)
   * @this {!FieldModelStructBytes}
   * @returns {!number} Field model begin offset
   */
  setBegin () {
    console.assert(((this._buffer.offset + this.FBEOffset + this.FBESize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructSize = this.FBEBody
    let fbeStructOffset = this._buffer.allocate(fbeStructSize) - this._buffer.offset
    console.assert((fbeStructOffset > 0) && ((this._buffer.offset + fbeStructOffset + fbeStructSize) <= this._buffer.size), 'Model is broken!')
    if ((fbeStructOffset <= 0) || ((this._buffer.offset + fbeStructOffset + fbeStructSize) > this._buffer.size)) {
      return 0
    }

    this.writeUInt32(this.FBEOffset, fbeStructOffset)
    this.writeUInt32(fbeStructOffset, fbeStructSize)
    this.writeUInt32(fbeStructOffset + 4, this.FBEType)

    this._buffer.shift(fbeStructOffset)
    return fbeStructOffset
  }

  /**
   * Set the struct value (end phase)
   * @this {!FieldModelStructBytes}
   * @param {!number} fbeBegin Field model begin offset
   */
  setEnd (fbeBegin) {
    this._buffer.unshift(fbeBegin)
  }

  /**
   * Set the struct value
   * @this {!FieldModelStructBytes}
   * @param {!StructBytes} fbeValue StructBytes value
   */
  set (fbeValue) {
    let fbeBegin = this.setBegin()
    if (fbeBegin === 0) {
      return
    }

    this.setFields(fbeValue)
    this.setEnd(fbeBegin)
  }

  /**
   * Set the struct fields values
   * @this {!FieldModelStructBytes}
   * @param {StructBytes} fbeValue StructBytes value
   */
  setFields (fbeValue) {
    this.f1.set(fbeValue.f1)
    this.f2.set(fbeValue.f2)
    this.f3.set(fbeValue.f3)
  }
}

exports.FieldModelStructBytes = FieldModelStructBytes

/**
 * Fast Binary Encoding StructBytes model class
 */
class StructBytesModel extends fbe.Model {
  /**
   * Initialize model with the given buffer
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Read/Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer)
    this._model = new FieldModelStructBytes(this.buffer, 4)
  }

  /**
   * Get the StructBytes model
   * @this {!StructBytesModel}
   * @returns {!FieldModelStructBytes} model StructBytes model
   */
  get model () {
    return this._model
  }

  /**
   * Get the model size
   * @this {!StructBytesModel}
   * @returns {!number} Model size
   */
  get FBESize () {
    return this.model.FBESize + this.model.FBEExtra
  }

  /**
   * Get the model type
   * @this {!StructBytesModel}
   * @returns {!number} Model type
   */
  get FBEType () {
    return StructBytesModel.FBEType
  }

  /**
   * Get the model type (static)
   * @this {!StructBytesModel}
   * @returns {!number} Model type
   */
  static get FBEType () {
    return FieldModelStructBytes.FBEType
  }

  /**
   * Check if the struct value is valid
   * @this {!StructBytesModel}
   * @returns {!boolean} Model valid state
   */
  verify () {
    if ((this.buffer.offset + this.model.FBEOffset - 4) > this.buffer.size) {
      return false
    }

    let fbeFullSize = this.readUInt32(this.model.FBEOffset - 4)
    if (fbeFullSize < this.model.FBESize) {
      return false
    }

    return this.model.verify()
  }

  /**
   * Create a new model (begin phase)
   * @this {!StructBytesModel}
   * @returns {!number} Model begin offset
   */
  createBegin () {
    return this.buffer.allocate(4 + this.model.FBESize)
  }

  /**
   * Create a new model (end phase)
   * @this {!StructBytesModel}
   * @param {!number} fbeBegin Model begin offset
   */
  createEnd (fbeBegin) {
    let fbeEnd = this.buffer.size
    let fbeFullSize = fbeEnd - fbeBegin
    this.writeUInt32(this.model.FBEOffset - 4, fbeFullSize)
    return fbeFullSize
  }

  /**
   * Serialize the struct value
   * @this {!StructBytesModel}
   * @param {!StructBytes} value StructBytes value
   * @return {!number} Model begin offset
   */
  serialize (value) {
    let fbeBegin = this.createBegin()
    this.model.set(value)
    return this.createEnd(fbeBegin)
  }

  /**
   * Deserialize the struct value
   * @this {!StructBytesModel}
   * @param {!StructBytes} value StructBytes value, defaults is new StructBytes()
   * @return {!object} Deserialized StructBytes value and its size
   */
  deserialize (value = new StructBytes()) {
    if ((this.buffer.offset + this.model.FBEOffset - 4) > this.buffer.size) {
      return { value: new StructBytes(), size: 0 }
    }

    let fbeFullSize = this.readUInt32(this.model.FBEOffset - 4)
    console.assert((fbeFullSize >= this.model.FBESize), 'Model is broken!')
    if (fbeFullSize < this.model.FBESize) {
      return { value: new StructBytes(), size: 0 }
    }

    this.model.get(value)
    return { value: value, size: fbeFullSize }
  }

  /**
   * Move to the next struct value
   * @this {!StructBytesModel}
   * @param {!number} prev Previous StructBytes model size
   */
  next (prev) {
    this.model.FBEShift(prev)
  }
}

exports.StructBytesModel = StructBytesModel

/**
 * Fast Binary Encoding StructBytes final model class
 */
class FinalModelStructBytes extends fbe.FinalModel {
  /**
   * Initialize final model with the given buffer and offset
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Buffer
   * @param {!number} offset Offset
   * @constructor
   */
  constructor (buffer, offset) {
    super(buffer, offset)
    this._f1 = new fbe.FinalModelBytes(buffer, 0)
    this._f2 = new fbe.FinalModelOptional(new fbe.FinalModelBytes(buffer, 0), buffer, 0)
    this._f3 = new fbe.FinalModelOptional(new fbe.FinalModelBytes(buffer, 0), buffer, 0)
  }

  /**
   * Get the f1 final model
   * @this {!FinalModelStructBytes}
   * @returns {!fbe.FinalModelBytes} f1 final model
   */
  get f1 () {
    return this._f1
  }

  /**
   * Get the f2 final model
   * @this {!FinalModelStructBytes}
   * @returns {!fbe.FinalModelOptional} f2 final model
   */
  get f2 () {
    return this._f2
  }

  /**
   * Get the f3 final model
   * @this {!FinalModelStructBytes}
   * @returns {!fbe.FinalModelOptional} f3 final model
   */
  get f3 () {
    return this._f3
  }

  /**
   * Get the allocation size
   * @this {!FinalModelStructBytes}
   * @param {!StructBytes} fbeValue StructBytes value
   * @returns {!number} Allocation size
   */
  FBEAllocationSize (fbeValue) {
    return 0 + this.f1.FBEAllocationSize(fbeValue.f1) + this.f2.FBEAllocationSize(fbeValue.f2) + this.f3.FBEAllocationSize(fbeValue.f3)
  }

  /**
   * Get the field type
   * @this {!FinalModelStructBytes}
   * @returns {!number} Field type
   */
  get FBEType () {
    return FinalModelStructBytes.FBEType
  }

  /**
   * Get the field type (static)
   * @this {!FinalModelStructBytes}
   * @returns {!number} Field type
   */
  static get FBEType () {
    return 120
  }

  /**
   * Check if the struct value is valid
   * @this {!FinalModelStructBytes}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    this._buffer.shift(this.FBEOffset)
    let fbeResult = this.verifyFields()
    this._buffer.unshift(this.FBEOffset)
    return fbeResult
  }

  /**
   * Check if the struct fields are valid
   * @this {!FinalModelStructBytes}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verifyFields () {
    let fbeCurrentOffset = 0
    let fbeFieldSize

    this.f1.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f2.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f2.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f3.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f3.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    return fbeCurrentOffset
  }

  /**
   * Get the struct value
   * @this {!FinalModelStructBytes}
   * @param {!StructBytes} fbeValue StructBytes value, defaults is new StructBytes()
   * @returns {!object} Result struct value and its size
   */
  get (fbeValue = new StructBytes()) {
    this._buffer.shift(this.FBEOffset)
    let fbeSize = this.getFields(fbeValue)
    this._buffer.unshift(this.FBEOffset)
    return { value: fbeValue, size: fbeSize }
  }

  /**
   * Get the struct fields values
   * @this {!FinalModelStructBytes}
   * @param {!StructBytes} fbeValue StructBytes value
   * @returns {!number} Struct size
   */
  getFields (fbeValue) {
    let fbeCurrentOffset = 0
    let fbeCurrentSize = 0
    let fbeResult

    this.f1.FBEOffset = fbeCurrentOffset
    fbeResult = this.f1.get()
    fbeValue.f1 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f2.FBEOffset = fbeCurrentOffset
    fbeResult = this.f2.get()
    fbeValue.f2 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f3.FBEOffset = fbeCurrentOffset
    fbeResult = this.f3.get()
    fbeValue.f3 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    return fbeCurrentSize
  }

  /**
   * Set the struct value
   * @this {!FinalModelStructBytes}
   * @param {!StructBytes} fbeValue StructBytes value
   * @returns {!number} Final model size
   */
  set (fbeValue) {
    this._buffer.shift(this.FBEOffset)
    let fbeSize = this.setFields(fbeValue)
    this._buffer.unshift(this.FBEOffset)
    return fbeSize
  }

  /**
   * Set the struct fields values
   * @this {!FinalModelStructBytes}
   * @param {StructBytes} fbeValue StructBytes value
   * @returns {!number} Final model size
   */
  setFields (fbeValue) {
    let fbeCurrentOffset = 0
    let fbeCurrentSize = 0
    let fbeFieldSize

    this.f1.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1.set(fbeValue.f1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f2.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f2.set(fbeValue.f2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f3.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f3.set(fbeValue.f3)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    return fbeCurrentSize
  }
}

exports.FinalModelStructBytes = FinalModelStructBytes

/**
 * Fast Binary Encoding StructBytes final model class
 */
class StructBytesFinalModel extends fbe.Model {
  /**
   * Initialize final model with the given buffer
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Read/Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer)
    this._model = new FinalModelStructBytes(this.buffer, 8)
  }

  /**
   * Get the model type
   * @this {!StructBytesFinalModel}
   * @returns {!number} Model type
   */
  get FBEType () {
    return StructBytesFinalModel.FBEType
  }

  /**
   * Get the model type (static)
   * @this {!StructBytesFinalModel}
   * @returns {!number} Model type
   */
  static get FBEType () {
    return FinalModelStructBytes.FBEType
  }

  /**
   * Check if the struct value is valid
   * @this {!StructBytesFinalModel}
   * @returns {!boolean} Model valid state
   */
  verify () {
    if ((this.buffer.offset + this._model.FBEOffset) > this.buffer.size) {
      return false
    }

    let fbeStructSize = this.readUInt32(this._model.FBEOffset - 8)
    let fbeStructType = this.readUInt32(this._model.FBEOffset - 4)
    if ((fbeStructSize <= 0) || (fbeStructType !== this.FBEType)) {
      return false
    }

    return ((8 + this._model.verify()) === fbeStructSize)
  }

  /**
   * Serialize the struct value
   * @this {!StructBytesFinalModel}
   * @param {!StructBytes} value StructBytes value
   * @return {!number} Struct size
   */
  serialize (value) {
    let fbeInitialSize = this.buffer.size

    let fbeStructType = this.FBEType
    let fbeStructSize = 8 + this._model.FBEAllocationSize(value)
    let fbeStructOffset = this.buffer.allocate(fbeStructSize) - this.buffer.offset
    console.assert(((this.buffer.offset + fbeStructOffset + fbeStructSize) <= this.buffer.size), 'Model is broken!')
    if ((this.buffer.offset + fbeStructOffset + fbeStructSize) > this.buffer.size) {
      return 0
    }

    fbeStructSize = 8 + this._model.set(value)
    this.buffer.resize(fbeInitialSize + fbeStructSize)

    this.writeUInt32(this._model.FBEOffset - 8, fbeStructSize)
    this.writeUInt32(this._model.FBEOffset - 4, fbeStructType)

    return fbeStructSize
  }

  /**
   * Deserialize the struct value
   * @this {!StructBytesFinalModel}
   * @param {!StructBytes} value StructBytes value, defaults is new StructBytes()
   * @return {!object} Deserialized StructBytes value and its size
   */
  deserialize (value = new StructBytes()) {
    console.assert(((this.buffer.offset + this._model.FBEOffset) <= this.buffer.size), 'Model is broken!')
    if ((this.buffer.offset + this._model.FBEOffset) > this.buffer.size) {
      return { value: new StructBytes(), size: 0 }
    }

    let fbeStructSize = this.readUInt32(this._model.FBEOffset - 8)
    let fbeStructType = this.readUInt32(this._model.FBEOffset - 4)
    console.assert(((fbeStructSize > 0) && (fbeStructType === this.FBEType)), 'Model is broken!')
    if ((fbeStructSize <= 0) || (fbeStructType !== this.FBEType)) {
      return { value: new StructBytes(), size: 8 }
    }

    let fbeResult = this._model.get(value)
    return { value: fbeResult.value, size: (8 + fbeResult.size) }
  }

  /**
   * Move to the next struct value
   * @this {!StructBytesFinalModel}
   * @param {!number} prev Previous StructBytes model size
   */
  next (prev) {
    this._model.FBEShift(prev)
  }
}

exports.StructBytesFinalModel = StructBytesFinalModel

/**
 * StructArray struct
 */
class StructArray {
  /**
   * Initialize struct
   * @param {!Array=} f1
   * @param {Array=} f2
   * @param {!Array=} f3
   * @param {Array=} f4
   * @param {!Array=} f5
   * @param {Array=} f6
   * @param {!Array=} f7
   * @param {Array=} f8
   * @param {!Array=} f9
   * @param {Array=} f10
   * @constructor
   */
  constructor (f1 = [], f2 = [], f3 = [], f4 = [], f5 = [], f6 = [], f7 = [], f8 = [], f9 = [], f10 = []) {
    this.f1 = f1
    this.f2 = f2
    this.f3 = f3
    this.f4 = f4
    this.f5 = f5
    this.f6 = f6
    this.f7 = f7
    this.f8 = f8
    this.f9 = f9
    this.f10 = f10
  }

  /**
   * Copy struct
   * @this {!StructArray}
   * @param {!StructArray} other Other struct
   * @returns {!StructArray} This struct
   */
  copy (other) {
    if (other.f1 != null) {
      this.f1 = []
      for (let item of other.f1) {
        if (item != null) {
          let tempItem
          tempItem = item
          this.f1.push(tempItem)
        } else {
          this.f1.push(undefined)
        }
      }
    } else {
      this.f1 = undefined
    }
    if (other.f2 != null) {
      this.f2 = []
      for (let item of other.f2) {
        if (item != null) {
          let tempItem
          tempItem = item
          this.f2.push(tempItem)
        } else {
          this.f2.push(undefined)
        }
      }
    } else {
      this.f2 = undefined
    }
    if (other.f3 != null) {
      this.f3 = []
      for (let item of other.f3) {
        if (item != null) {
          let tempItem
          if (typeof item === 'string') {
            // noinspection JSUnresolvedFunction
            tempItem = Uint8Array.from(Buffer.from(item, 'base64'))
          } else {
            tempItem = Uint8Array.from(item)
          }
          this.f3.push(tempItem)
        } else {
          this.f3.push(undefined)
        }
      }
    } else {
      this.f3 = undefined
    }
    if (other.f4 != null) {
      this.f4 = []
      for (let item of other.f4) {
        if (item != null) {
          let tempItem
          if (typeof item === 'string') {
            // noinspection JSUnresolvedFunction
            tempItem = Uint8Array.from(Buffer.from(item, 'base64'))
          } else {
            tempItem = Uint8Array.from(item)
          }
          this.f4.push(tempItem)
        } else {
          this.f4.push(undefined)
        }
      }
    } else {
      this.f4 = undefined
    }
    if (other.f5 != null) {
      this.f5 = []
      for (let item of other.f5) {
        if (item != null) {
          let tempItem
          tempItem = EnumSimple.fromObject(item)
          this.f5.push(tempItem)
        } else {
          this.f5.push(undefined)
        }
      }
    } else {
      this.f5 = undefined
    }
    if (other.f6 != null) {
      this.f6 = []
      for (let item of other.f6) {
        if (item != null) {
          let tempItem
          tempItem = EnumSimple.fromObject(item)
          this.f6.push(tempItem)
        } else {
          this.f6.push(undefined)
        }
      }
    } else {
      this.f6 = undefined
    }
    if (other.f7 != null) {
      this.f7 = []
      for (let item of other.f7) {
        if (item != null) {
          let tempItem
          tempItem = FlagsSimple.fromObject(item)
          this.f7.push(tempItem)
        } else {
          this.f7.push(undefined)
        }
      }
    } else {
      this.f7 = undefined
    }
    if (other.f8 != null) {
      this.f8 = []
      for (let item of other.f8) {
        if (item != null) {
          let tempItem
          tempItem = FlagsSimple.fromObject(item)
          this.f8.push(tempItem)
        } else {
          this.f8.push(undefined)
        }
      }
    } else {
      this.f8 = undefined
    }
    if (other.f9 != null) {
      this.f9 = []
      for (let item of other.f9) {
        if (item != null) {
          let tempItem
          tempItem = StructSimple.fromObject(item)
          this.f9.push(tempItem)
        } else {
          this.f9.push(undefined)
        }
      }
    } else {
      this.f9 = undefined
    }
    if (other.f10 != null) {
      this.f10 = []
      for (let item of other.f10) {
        if (item != null) {
          let tempItem
          tempItem = StructSimple.fromObject(item)
          this.f10.push(tempItem)
        } else {
          this.f10.push(undefined)
        }
      }
    } else {
      this.f10 = undefined
    }
    return this
  }

  /**
   * Clone struct
   * @this {!StructArray}
   * @returns {!StructArray} Cloned struct
   */
  clone () {
    // Serialize the struct to the FBE stream
    let writer = new StructArrayModel(new fbe.WriteBuffer())
    writer.serialize(this)

    // Deserialize the struct from the FBE stream
    let reader = new StructArrayModel(new fbe.ReadBuffer())
    reader.attachBuffer(writer.buffer)
    return reader.deserialize().value
  }

  /**
   * Is this struct equal to other one?
   * @this {!StructArray}
   * @param {!StructArray} other Other struct
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof StructArray)) {
      throw new TypeError('Instance of StructArray is required!')
    }
    return true
  }

  /**
   * Convert struct to string
   * @this {!StructArray}
   * @returns {!string} Struct value string
   */
  toString () {
    let result = ''
    result += 'StructArray('
    result += 'f1='
    if (this.f1 != null) {
      let first = true
      result += '['
      result += this.f1.length
      result += ']['
      for (let item of this.f1) {
        result += first ? '' : ','
        result += item.toString()
        first = false
      }
      result += ']'
    }
    result += ',f2='
    if (this.f2 != null) {
      let first = true
      result += '['
      result += this.f2.length
      result += ']['
      for (let item of this.f2) {
        if (item != null) {
          result += first ? '' : ','
          result += item.toString()
        } else {
          result += 'null'
        }
        first = false
      }
      result += ']'
    }
    result += ',f3='
    if (this.f3 != null) {
      let first = true
      result += '['
      result += this.f3.length
      result += ']['
      for (let item of this.f3) {
        if (item != null) {
          result += first ? '' : ','
          result += 'bytes['
          result += item.length
          result += ']'
        } else {
          result += 'null'
        }
        first = false
      }
      result += ']'
    }
    result += ',f4='
    if (this.f4 != null) {
      let first = true
      result += '['
      result += this.f4.length
      result += ']['
      for (let item of this.f4) {
        if (item != null) {
          result += first ? '' : ','
          result += 'bytes['
          result += item.length
          result += ']'
        } else {
          result += 'null'
        }
        first = false
      }
      result += ']'
    }
    result += ',f5='
    if (this.f5 != null) {
      let first = true
      result += '['
      result += this.f5.length
      result += ']['
      for (let item of this.f5) {
        result += first ? '' : ','
        result += item.toString()
        first = false
      }
      result += ']'
    }
    result += ',f6='
    if (this.f6 != null) {
      let first = true
      result += '['
      result += this.f6.length
      result += ']['
      for (let item of this.f6) {
        if (item != null) {
          result += first ? '' : ','
          result += item.toString()
        } else {
          result += 'null'
        }
        first = false
      }
      result += ']'
    }
    result += ',f7='
    if (this.f7 != null) {
      let first = true
      result += '['
      result += this.f7.length
      result += ']['
      for (let item of this.f7) {
        result += first ? '' : ','
        result += item.toString()
        first = false
      }
      result += ']'
    }
    result += ',f8='
    if (this.f8 != null) {
      let first = true
      result += '['
      result += this.f8.length
      result += ']['
      for (let item of this.f8) {
        if (item != null) {
          result += first ? '' : ','
          result += item.toString()
        } else {
          result += 'null'
        }
        first = false
      }
      result += ']'
    }
    result += ',f9='
    if (this.f9 != null) {
      let first = true
      result += '['
      result += this.f9.length
      result += ']['
      for (let item of this.f9) {
        result += first ? '' : ','
        result += item.toString()
        first = false
      }
      result += ']'
    }
    result += ',f10='
    if (this.f10 != null) {
      let first = true
      result += '['
      result += this.f10.length
      result += ']['
      for (let item of this.f10) {
        if (item != null) {
          result += first ? '' : ','
          result += item.toString()
        } else {
          result += 'null'
        }
        first = false
      }
      result += ']'
    }
    result += ')'
    return result
  }

  /**
   * Inspect struct
   * @this {!StructArray}
   * @returns {!string} Struct value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert struct to JSON
   * @this {!StructArray}
   * @returns {!object} Struct value for JSON
   */
  toJSON () {
    return {
      f1: ((this.f1 != null) ? Array.from(this.f1, item => ((item != null) ? item : null)) : null),
      f2: ((this.f2 != null) ? Array.from(this.f2, item => ((item != null) ? item : null)) : null),
      f3: ((this.f3 != null) ? Array.from(this.f3, item => ((item != null) ? Buffer.from(item).toString('base64') : null)) : null),
      f4: ((this.f4 != null) ? Array.from(this.f4, item => ((item != null) ? Buffer.from(item).toString('base64') : null)) : null),
      f5: ((this.f5 != null) ? Array.from(this.f5, item => ((item != null) ? item : null)) : null),
      f6: ((this.f6 != null) ? Array.from(this.f6, item => ((item != null) ? item : null)) : null),
      f7: ((this.f7 != null) ? Array.from(this.f7, item => ((item != null) ? item : null)) : null),
      f8: ((this.f8 != null) ? Array.from(this.f8, item => ((item != null) ? item : null)) : null),
      f9: ((this.f9 != null) ? Array.from(this.f9, item => ((item != null) ? item : null)) : null),
      f10: ((this.f10 != null) ? Array.from(this.f10, item => ((item != null) ? item : null)) : null)
    }
  }

  /**
   * Convert JSON to struct
   * @param {!string} json JSON string
   * @returns {!object} Struct value for JSON
   */
  static fromJSON (json) {
    return StructArray.fromObject(JSON.parse(json))
  }

  /**
   * Create struct from object value
   * @param {!StructArray} other Object value
   * @returns {!StructArray} Created struct
   */
  static fromObject (other) {
    return new StructArray().copy(other)
  }
}

exports.StructArray = StructArray

/**
 * Fast Binary Encoding StructArray field model class
 */
class FieldModelStructArray extends fbe.FieldModel {
  /**
   * Initialize field model with the given buffer and offset
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Buffer
   * @param {!number} offset Offset
   * @constructor
   */
  constructor (buffer, offset) {
    super(buffer, offset)
    this._f1 = new fbe.FieldModelArray(new fbe.FieldModelByte(buffer, 4 + 4), buffer, 4 + 4, 2)
    this._f2 = new fbe.FieldModelArray(new fbe.FieldModelOptional(new fbe.FieldModelByte(buffer, this._f1.FBEOffset + this._f1.FBESize), buffer, this._f1.FBEOffset + this._f1.FBESize), buffer, this._f1.FBEOffset + this._f1.FBESize, 2)
    this._f3 = new fbe.FieldModelArray(new fbe.FieldModelBytes(buffer, this._f2.FBEOffset + this._f2.FBESize), buffer, this._f2.FBEOffset + this._f2.FBESize, 2)
    this._f4 = new fbe.FieldModelArray(new fbe.FieldModelOptional(new fbe.FieldModelBytes(buffer, this._f3.FBEOffset + this._f3.FBESize), buffer, this._f3.FBEOffset + this._f3.FBESize), buffer, this._f3.FBEOffset + this._f3.FBESize, 2)
    this._f5 = new fbe.FieldModelArray(new FieldModelEnumSimple(buffer, this._f4.FBEOffset + this._f4.FBESize), buffer, this._f4.FBEOffset + this._f4.FBESize, 2)
    this._f6 = new fbe.FieldModelArray(new fbe.FieldModelOptional(new FieldModelEnumSimple(buffer, this._f5.FBEOffset + this._f5.FBESize), buffer, this._f5.FBEOffset + this._f5.FBESize), buffer, this._f5.FBEOffset + this._f5.FBESize, 2)
    this._f7 = new fbe.FieldModelArray(new FieldModelFlagsSimple(buffer, this._f6.FBEOffset + this._f6.FBESize), buffer, this._f6.FBEOffset + this._f6.FBESize, 2)
    this._f8 = new fbe.FieldModelArray(new fbe.FieldModelOptional(new FieldModelFlagsSimple(buffer, this._f7.FBEOffset + this._f7.FBESize), buffer, this._f7.FBEOffset + this._f7.FBESize), buffer, this._f7.FBEOffset + this._f7.FBESize, 2)
    this._f9 = new fbe.FieldModelArray(new FieldModelStructSimple(buffer, this._f8.FBEOffset + this._f8.FBESize), buffer, this._f8.FBEOffset + this._f8.FBESize, 2)
    this._f10 = new fbe.FieldModelArray(new fbe.FieldModelOptional(new FieldModelStructSimple(buffer, this._f9.FBEOffset + this._f9.FBESize), buffer, this._f9.FBEOffset + this._f9.FBESize), buffer, this._f9.FBEOffset + this._f9.FBESize, 2)
  }

  /**
   * Get the f1 field model
   * @this {!FieldModelStructArray}
   * @returns {!fbe.FieldModelArray} f1 field model
   */
  get f1 () {
    return this._f1
  }

  /**
   * Get the f2 field model
   * @this {!FieldModelStructArray}
   * @returns {!fbe.FieldModelArray} f2 field model
   */
  get f2 () {
    return this._f2
  }

  /**
   * Get the f3 field model
   * @this {!FieldModelStructArray}
   * @returns {!fbe.FieldModelArray} f3 field model
   */
  get f3 () {
    return this._f3
  }

  /**
   * Get the f4 field model
   * @this {!FieldModelStructArray}
   * @returns {!fbe.FieldModelArray} f4 field model
   */
  get f4 () {
    return this._f4
  }

  /**
   * Get the f5 field model
   * @this {!FieldModelStructArray}
   * @returns {!fbe.FieldModelArray} f5 field model
   */
  get f5 () {
    return this._f5
  }

  /**
   * Get the f6 field model
   * @this {!FieldModelStructArray}
   * @returns {!fbe.FieldModelArray} f6 field model
   */
  get f6 () {
    return this._f6
  }

  /**
   * Get the f7 field model
   * @this {!FieldModelStructArray}
   * @returns {!fbe.FieldModelArray} f7 field model
   */
  get f7 () {
    return this._f7
  }

  /**
   * Get the f8 field model
   * @this {!FieldModelStructArray}
   * @returns {!fbe.FieldModelArray} f8 field model
   */
  get f8 () {
    return this._f8
  }

  /**
   * Get the f9 field model
   * @this {!FieldModelStructArray}
   * @returns {!fbe.FieldModelArray} f9 field model
   */
  get f9 () {
    return this._f9
  }

  /**
   * Get the f10 field model
   * @this {!FieldModelStructArray}
   * @returns {!fbe.FieldModelArray} f10 field model
   */
  get f10 () {
    return this._f10
  }

  /**
   * Get the field size
   * @this {!FieldModelStructArray}
   * @returns {!number} Field size
   */
  get FBESize () {
    return 4
  }

  /**
   * Get the field body size
   * @this {!FieldModelStructArray}
   * @returns {!number} Field body size
   */
  get FBEBody () {
    return 4 + 4 + this.f1.FBESize + this.f2.FBESize + this.f3.FBESize + this.f4.FBESize + this.f5.FBESize + this.f6.FBESize + this.f7.FBESize + this.f8.FBESize + this.f9.FBESize + this.f10.FBESize
  }

  /**
   * Get the field extra size
   * @this {!FieldModelStructArray}
   * @returns {!number} Field extra size
   */
  get FBEExtra () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4) > this._buffer.size)) {
      return 0
    }

    this._buffer.shift(fbeStructOffset)

    let fbeResult = this.FBEBody + this.f1.FBEExtra + this.f2.FBEExtra + this.f3.FBEExtra + this.f4.FBEExtra + this.f5.FBEExtra + this.f6.FBEExtra + this.f7.FBEExtra + this.f8.FBEExtra + this.f9.FBEExtra + this.f10.FBEExtra

    this._buffer.unshift(fbeStructOffset)

    return fbeResult
  }

  /**
   * Get the field type
   * @this {!FieldModelStructArray}
   * @returns {!number} Field type
   */
  get FBEType () {
    return FieldModelStructArray.FBEType
  }

  /**
   * Get the field type (static)
   * @this {!FieldModelStructArray}
   * @returns {!number} Field type
   */
  static get FBEType () {
    return 125
  }

  /**
   * Check if the struct value is valid
   * @this {!FieldModelStructArray}
   * @param {!boolean} fbeVerifyType Verify model type flag, defaults is true
   * @returns {!boolean} Field model valid state
   */
  verify (fbeVerifyType = true) {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return true
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4 + 4) > this._buffer.size)) {
      return false
    }

    let fbeStructSize = this.readUInt32(fbeStructOffset)
    if (fbeStructSize < 4 + 4) {
      return false
    }

    let fbeStructType = this.readUInt32(fbeStructOffset + 4)
    if (fbeVerifyType && (fbeStructType !== this.FBEType)) {
      return false
    }

    this._buffer.shift(fbeStructOffset)
    let fbeResult = this.verifyFields(fbeStructSize)
    this._buffer.unshift(fbeStructOffset)
    return fbeResult
  }

  /**
   * Check if the struct fields are valid
   * @this {!FieldModelStructArray}
   * @param {!number} fbeStructSize FBE struct size
   * @returns {!boolean} Field model valid state
   */
  verifyFields (fbeStructSize) {
    let fbeCurrentSize = 4 + 4

    if ((fbeCurrentSize + this.f1.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f1.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1.FBESize

    if ((fbeCurrentSize + this.f2.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f2.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f2.FBESize

    if ((fbeCurrentSize + this.f3.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f3.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f3.FBESize

    if ((fbeCurrentSize + this.f4.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f4.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f4.FBESize

    if ((fbeCurrentSize + this.f5.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f5.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f5.FBESize

    if ((fbeCurrentSize + this.f6.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f6.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f6.FBESize

    if ((fbeCurrentSize + this.f7.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f7.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f7.FBESize

    if ((fbeCurrentSize + this.f8.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f8.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f8.FBESize

    if ((fbeCurrentSize + this.f9.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f9.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f9.FBESize

    if ((fbeCurrentSize + this.f10.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f10.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f10.FBESize

    return true
  }

  /**
   * Get the struct value (begin phase)
   * @this {!FieldModelStructArray}
   * @returns {!number} Field model begin offset
   */
  getBegin () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    console.assert((fbeStructOffset > 0) && ((this._buffer.offset + fbeStructOffset + 4 + 4) <= this._buffer.size), 'Model is broken!')
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4 + 4) > this._buffer.size)) {
      return 0
    }

    let fbeStructSize = this.readUInt32(fbeStructOffset)
    console.assert((fbeStructSize >= 4 + 4), 'Model is broken!')
    if (fbeStructSize < 4 + 4) {
      return 0
    }

    this._buffer.shift(fbeStructOffset)
    return fbeStructOffset
  }

  /**
   * Get the struct value (end phase)
   * @this {!FieldModelStructArray}
   * @param {!number} fbeBegin Field model begin offset
   */
  getEnd (fbeBegin) {
    this._buffer.unshift(fbeBegin)
  }

  /**
   * Get the struct value
   * @this {!FieldModelStructArray}
   * @param {!StructArray} fbeValue Default value, defaults is new StructArray()
   * @returns {!StructArray} StructArray value
   */
  get (fbeValue = new StructArray()) {
    let fbeBegin = this.getBegin()
    if (fbeBegin === 0) {
      return fbeValue
    }

    let fbeStructSize = this.readUInt32(0)
    this.getFields(fbeValue, fbeStructSize)
    this.getEnd(fbeBegin)
    return fbeValue
  }

  /**
   * Get the struct fields values
   * @this {!FieldModelStructArray}
   * @param {!StructArray} fbeValue StructArray value
   * @param {!number} fbeStructSize Struct size
   */
  getFields (fbeValue, fbeStructSize) {
    let fbeCurrentSize = 4 + 4

    if ((fbeCurrentSize + this.f1.FBESize) <= fbeStructSize) {
      this.f1.get(fbeValue.f1)
    } else {
      fbeValue.f1.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1.FBESize

    if ((fbeCurrentSize + this.f2.FBESize) <= fbeStructSize) {
      this.f2.get(fbeValue.f2)
    } else {
      fbeValue.f2.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f2.FBESize

    if ((fbeCurrentSize + this.f3.FBESize) <= fbeStructSize) {
      this.f3.get(fbeValue.f3)
    } else {
      fbeValue.f3.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f3.FBESize

    if ((fbeCurrentSize + this.f4.FBESize) <= fbeStructSize) {
      this.f4.get(fbeValue.f4)
    } else {
      fbeValue.f4.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f4.FBESize

    if ((fbeCurrentSize + this.f5.FBESize) <= fbeStructSize) {
      this.f5.get(fbeValue.f5)
    } else {
      fbeValue.f5.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f5.FBESize

    if ((fbeCurrentSize + this.f6.FBESize) <= fbeStructSize) {
      this.f6.get(fbeValue.f6)
    } else {
      fbeValue.f6.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f6.FBESize

    if ((fbeCurrentSize + this.f7.FBESize) <= fbeStructSize) {
      this.f7.get(fbeValue.f7)
    } else {
      fbeValue.f7.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f7.FBESize

    if ((fbeCurrentSize + this.f8.FBESize) <= fbeStructSize) {
      this.f8.get(fbeValue.f8)
    } else {
      fbeValue.f8.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f8.FBESize

    if ((fbeCurrentSize + this.f9.FBESize) <= fbeStructSize) {
      this.f9.get(fbeValue.f9)
    } else {
      fbeValue.f9.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f9.FBESize

    if ((fbeCurrentSize + this.f10.FBESize) <= fbeStructSize) {
      this.f10.get(fbeValue.f10)
    } else {
      fbeValue.f10.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f10.FBESize
  }

  /**
   * Set the struct value (begin phase)
   * @this {!FieldModelStructArray}
   * @returns {!number} Field model begin offset
   */
  setBegin () {
    console.assert(((this._buffer.offset + this.FBEOffset + this.FBESize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructSize = this.FBEBody
    let fbeStructOffset = this._buffer.allocate(fbeStructSize) - this._buffer.offset
    console.assert((fbeStructOffset > 0) && ((this._buffer.offset + fbeStructOffset + fbeStructSize) <= this._buffer.size), 'Model is broken!')
    if ((fbeStructOffset <= 0) || ((this._buffer.offset + fbeStructOffset + fbeStructSize) > this._buffer.size)) {
      return 0
    }

    this.writeUInt32(this.FBEOffset, fbeStructOffset)
    this.writeUInt32(fbeStructOffset, fbeStructSize)
    this.writeUInt32(fbeStructOffset + 4, this.FBEType)

    this._buffer.shift(fbeStructOffset)
    return fbeStructOffset
  }

  /**
   * Set the struct value (end phase)
   * @this {!FieldModelStructArray}
   * @param {!number} fbeBegin Field model begin offset
   */
  setEnd (fbeBegin) {
    this._buffer.unshift(fbeBegin)
  }

  /**
   * Set the struct value
   * @this {!FieldModelStructArray}
   * @param {!StructArray} fbeValue StructArray value
   */
  set (fbeValue) {
    let fbeBegin = this.setBegin()
    if (fbeBegin === 0) {
      return
    }

    this.setFields(fbeValue)
    this.setEnd(fbeBegin)
  }

  /**
   * Set the struct fields values
   * @this {!FieldModelStructArray}
   * @param {StructArray} fbeValue StructArray value
   */
  setFields (fbeValue) {
    this.f1.set(fbeValue.f1)
    this.f2.set(fbeValue.f2)
    this.f3.set(fbeValue.f3)
    this.f4.set(fbeValue.f4)
    this.f5.set(fbeValue.f5)
    this.f6.set(fbeValue.f6)
    this.f7.set(fbeValue.f7)
    this.f8.set(fbeValue.f8)
    this.f9.set(fbeValue.f9)
    this.f10.set(fbeValue.f10)
  }
}

exports.FieldModelStructArray = FieldModelStructArray

/**
 * Fast Binary Encoding StructArray model class
 */
class StructArrayModel extends fbe.Model {
  /**
   * Initialize model with the given buffer
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Read/Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer)
    this._model = new FieldModelStructArray(this.buffer, 4)
  }

  /**
   * Get the StructArray model
   * @this {!StructArrayModel}
   * @returns {!FieldModelStructArray} model StructArray model
   */
  get model () {
    return this._model
  }

  /**
   * Get the model size
   * @this {!StructArrayModel}
   * @returns {!number} Model size
   */
  get FBESize () {
    return this.model.FBESize + this.model.FBEExtra
  }

  /**
   * Get the model type
   * @this {!StructArrayModel}
   * @returns {!number} Model type
   */
  get FBEType () {
    return StructArrayModel.FBEType
  }

  /**
   * Get the model type (static)
   * @this {!StructArrayModel}
   * @returns {!number} Model type
   */
  static get FBEType () {
    return FieldModelStructArray.FBEType
  }

  /**
   * Check if the struct value is valid
   * @this {!StructArrayModel}
   * @returns {!boolean} Model valid state
   */
  verify () {
    if ((this.buffer.offset + this.model.FBEOffset - 4) > this.buffer.size) {
      return false
    }

    let fbeFullSize = this.readUInt32(this.model.FBEOffset - 4)
    if (fbeFullSize < this.model.FBESize) {
      return false
    }

    return this.model.verify()
  }

  /**
   * Create a new model (begin phase)
   * @this {!StructArrayModel}
   * @returns {!number} Model begin offset
   */
  createBegin () {
    return this.buffer.allocate(4 + this.model.FBESize)
  }

  /**
   * Create a new model (end phase)
   * @this {!StructArrayModel}
   * @param {!number} fbeBegin Model begin offset
   */
  createEnd (fbeBegin) {
    let fbeEnd = this.buffer.size
    let fbeFullSize = fbeEnd - fbeBegin
    this.writeUInt32(this.model.FBEOffset - 4, fbeFullSize)
    return fbeFullSize
  }

  /**
   * Serialize the struct value
   * @this {!StructArrayModel}
   * @param {!StructArray} value StructArray value
   * @return {!number} Model begin offset
   */
  serialize (value) {
    let fbeBegin = this.createBegin()
    this.model.set(value)
    return this.createEnd(fbeBegin)
  }

  /**
   * Deserialize the struct value
   * @this {!StructArrayModel}
   * @param {!StructArray} value StructArray value, defaults is new StructArray()
   * @return {!object} Deserialized StructArray value and its size
   */
  deserialize (value = new StructArray()) {
    if ((this.buffer.offset + this.model.FBEOffset - 4) > this.buffer.size) {
      return { value: new StructArray(), size: 0 }
    }

    let fbeFullSize = this.readUInt32(this.model.FBEOffset - 4)
    console.assert((fbeFullSize >= this.model.FBESize), 'Model is broken!')
    if (fbeFullSize < this.model.FBESize) {
      return { value: new StructArray(), size: 0 }
    }

    this.model.get(value)
    return { value: value, size: fbeFullSize }
  }

  /**
   * Move to the next struct value
   * @this {!StructArrayModel}
   * @param {!number} prev Previous StructArray model size
   */
  next (prev) {
    this.model.FBEShift(prev)
  }
}

exports.StructArrayModel = StructArrayModel

/**
 * Fast Binary Encoding StructArray final model class
 */
class FinalModelStructArray extends fbe.FinalModel {
  /**
   * Initialize final model with the given buffer and offset
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Buffer
   * @param {!number} offset Offset
   * @constructor
   */
  constructor (buffer, offset) {
    super(buffer, offset)
    this._f1 = new fbe.FinalModelArray(new fbe.FinalModelByte(buffer, 0), buffer, 0, 2)
    this._f2 = new fbe.FinalModelArray(new fbe.FinalModelOptional(new fbe.FinalModelByte(buffer, 0), buffer, 0), buffer, 0, 2)
    this._f3 = new fbe.FinalModelArray(new fbe.FinalModelBytes(buffer, 0), buffer, 0, 2)
    this._f4 = new fbe.FinalModelArray(new fbe.FinalModelOptional(new fbe.FinalModelBytes(buffer, 0), buffer, 0), buffer, 0, 2)
    this._f5 = new fbe.FinalModelArray(new FinalModelEnumSimple(buffer, 0), buffer, 0, 2)
    this._f6 = new fbe.FinalModelArray(new fbe.FinalModelOptional(new FinalModelEnumSimple(buffer, 0), buffer, 0), buffer, 0, 2)
    this._f7 = new fbe.FinalModelArray(new FinalModelFlagsSimple(buffer, 0), buffer, 0, 2)
    this._f8 = new fbe.FinalModelArray(new fbe.FinalModelOptional(new FinalModelFlagsSimple(buffer, 0), buffer, 0), buffer, 0, 2)
    this._f9 = new fbe.FinalModelArray(new FinalModelStructSimple(buffer, 0), buffer, 0, 2)
    this._f10 = new fbe.FinalModelArray(new fbe.FinalModelOptional(new FinalModelStructSimple(buffer, 0), buffer, 0), buffer, 0, 2)
  }

  /**
   * Get the f1 final model
   * @this {!FinalModelStructArray}
   * @returns {!fbe.FinalModelArray} f1 final model
   */
  get f1 () {
    return this._f1
  }

  /**
   * Get the f2 final model
   * @this {!FinalModelStructArray}
   * @returns {!fbe.FinalModelArray} f2 final model
   */
  get f2 () {
    return this._f2
  }

  /**
   * Get the f3 final model
   * @this {!FinalModelStructArray}
   * @returns {!fbe.FinalModelArray} f3 final model
   */
  get f3 () {
    return this._f3
  }

  /**
   * Get the f4 final model
   * @this {!FinalModelStructArray}
   * @returns {!fbe.FinalModelArray} f4 final model
   */
  get f4 () {
    return this._f4
  }

  /**
   * Get the f5 final model
   * @this {!FinalModelStructArray}
   * @returns {!fbe.FinalModelArray} f5 final model
   */
  get f5 () {
    return this._f5
  }

  /**
   * Get the f6 final model
   * @this {!FinalModelStructArray}
   * @returns {!fbe.FinalModelArray} f6 final model
   */
  get f6 () {
    return this._f6
  }

  /**
   * Get the f7 final model
   * @this {!FinalModelStructArray}
   * @returns {!fbe.FinalModelArray} f7 final model
   */
  get f7 () {
    return this._f7
  }

  /**
   * Get the f8 final model
   * @this {!FinalModelStructArray}
   * @returns {!fbe.FinalModelArray} f8 final model
   */
  get f8 () {
    return this._f8
  }

  /**
   * Get the f9 final model
   * @this {!FinalModelStructArray}
   * @returns {!fbe.FinalModelArray} f9 final model
   */
  get f9 () {
    return this._f9
  }

  /**
   * Get the f10 final model
   * @this {!FinalModelStructArray}
   * @returns {!fbe.FinalModelArray} f10 final model
   */
  get f10 () {
    return this._f10
  }

  /**
   * Get the allocation size
   * @this {!FinalModelStructArray}
   * @param {!StructArray} fbeValue StructArray value
   * @returns {!number} Allocation size
   */
  FBEAllocationSize (fbeValue) {
    return 0 + this.f1.FBEAllocationSize(fbeValue.f1) + this.f2.FBEAllocationSize(fbeValue.f2) + this.f3.FBEAllocationSize(fbeValue.f3) + this.f4.FBEAllocationSize(fbeValue.f4) + this.f5.FBEAllocationSize(fbeValue.f5) + this.f6.FBEAllocationSize(fbeValue.f6) + this.f7.FBEAllocationSize(fbeValue.f7) + this.f8.FBEAllocationSize(fbeValue.f8) + this.f9.FBEAllocationSize(fbeValue.f9) + this.f10.FBEAllocationSize(fbeValue.f10)
  }

  /**
   * Get the field type
   * @this {!FinalModelStructArray}
   * @returns {!number} Field type
   */
  get FBEType () {
    return FinalModelStructArray.FBEType
  }

  /**
   * Get the field type (static)
   * @this {!FinalModelStructArray}
   * @returns {!number} Field type
   */
  static get FBEType () {
    return 125
  }

  /**
   * Check if the struct value is valid
   * @this {!FinalModelStructArray}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    this._buffer.shift(this.FBEOffset)
    let fbeResult = this.verifyFields()
    this._buffer.unshift(this.FBEOffset)
    return fbeResult
  }

  /**
   * Check if the struct fields are valid
   * @this {!FinalModelStructArray}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verifyFields () {
    let fbeCurrentOffset = 0
    let fbeFieldSize

    this.f1.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f2.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f2.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f3.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f3.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f4.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f4.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f5.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f5.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f6.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f6.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f7.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f7.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f8.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f8.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f9.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f9.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f10.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f10.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    return fbeCurrentOffset
  }

  /**
   * Get the struct value
   * @this {!FinalModelStructArray}
   * @param {!StructArray} fbeValue StructArray value, defaults is new StructArray()
   * @returns {!object} Result struct value and its size
   */
  get (fbeValue = new StructArray()) {
    this._buffer.shift(this.FBEOffset)
    let fbeSize = this.getFields(fbeValue)
    this._buffer.unshift(this.FBEOffset)
    return { value: fbeValue, size: fbeSize }
  }

  /**
   * Get the struct fields values
   * @this {!FinalModelStructArray}
   * @param {!StructArray} fbeValue StructArray value
   * @returns {!number} Struct size
   */
  getFields (fbeValue) {
    let fbeCurrentOffset = 0
    let fbeCurrentSize = 0
    let fbeResult

    this.f1.FBEOffset = fbeCurrentOffset
    fbeResult = this.f1.get(fbeValue.f1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f2.FBEOffset = fbeCurrentOffset
    fbeResult = this.f2.get(fbeValue.f2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f3.FBEOffset = fbeCurrentOffset
    fbeResult = this.f3.get(fbeValue.f3)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f4.FBEOffset = fbeCurrentOffset
    fbeResult = this.f4.get(fbeValue.f4)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f5.FBEOffset = fbeCurrentOffset
    fbeResult = this.f5.get(fbeValue.f5)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f6.FBEOffset = fbeCurrentOffset
    fbeResult = this.f6.get(fbeValue.f6)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f7.FBEOffset = fbeCurrentOffset
    fbeResult = this.f7.get(fbeValue.f7)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f8.FBEOffset = fbeCurrentOffset
    fbeResult = this.f8.get(fbeValue.f8)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f9.FBEOffset = fbeCurrentOffset
    fbeResult = this.f9.get(fbeValue.f9)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f10.FBEOffset = fbeCurrentOffset
    fbeResult = this.f10.get(fbeValue.f10)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    return fbeCurrentSize
  }

  /**
   * Set the struct value
   * @this {!FinalModelStructArray}
   * @param {!StructArray} fbeValue StructArray value
   * @returns {!number} Final model size
   */
  set (fbeValue) {
    this._buffer.shift(this.FBEOffset)
    let fbeSize = this.setFields(fbeValue)
    this._buffer.unshift(this.FBEOffset)
    return fbeSize
  }

  /**
   * Set the struct fields values
   * @this {!FinalModelStructArray}
   * @param {StructArray} fbeValue StructArray value
   * @returns {!number} Final model size
   */
  setFields (fbeValue) {
    let fbeCurrentOffset = 0
    let fbeCurrentSize = 0
    let fbeFieldSize

    this.f1.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1.set(fbeValue.f1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f2.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f2.set(fbeValue.f2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f3.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f3.set(fbeValue.f3)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f4.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f4.set(fbeValue.f4)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f5.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f5.set(fbeValue.f5)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f6.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f6.set(fbeValue.f6)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f7.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f7.set(fbeValue.f7)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f8.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f8.set(fbeValue.f8)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f9.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f9.set(fbeValue.f9)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f10.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f10.set(fbeValue.f10)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    return fbeCurrentSize
  }
}

exports.FinalModelStructArray = FinalModelStructArray

/**
 * Fast Binary Encoding StructArray final model class
 */
class StructArrayFinalModel extends fbe.Model {
  /**
   * Initialize final model with the given buffer
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Read/Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer)
    this._model = new FinalModelStructArray(this.buffer, 8)
  }

  /**
   * Get the model type
   * @this {!StructArrayFinalModel}
   * @returns {!number} Model type
   */
  get FBEType () {
    return StructArrayFinalModel.FBEType
  }

  /**
   * Get the model type (static)
   * @this {!StructArrayFinalModel}
   * @returns {!number} Model type
   */
  static get FBEType () {
    return FinalModelStructArray.FBEType
  }

  /**
   * Check if the struct value is valid
   * @this {!StructArrayFinalModel}
   * @returns {!boolean} Model valid state
   */
  verify () {
    if ((this.buffer.offset + this._model.FBEOffset) > this.buffer.size) {
      return false
    }

    let fbeStructSize = this.readUInt32(this._model.FBEOffset - 8)
    let fbeStructType = this.readUInt32(this._model.FBEOffset - 4)
    if ((fbeStructSize <= 0) || (fbeStructType !== this.FBEType)) {
      return false
    }

    return ((8 + this._model.verify()) === fbeStructSize)
  }

  /**
   * Serialize the struct value
   * @this {!StructArrayFinalModel}
   * @param {!StructArray} value StructArray value
   * @return {!number} Struct size
   */
  serialize (value) {
    let fbeInitialSize = this.buffer.size

    let fbeStructType = this.FBEType
    let fbeStructSize = 8 + this._model.FBEAllocationSize(value)
    let fbeStructOffset = this.buffer.allocate(fbeStructSize) - this.buffer.offset
    console.assert(((this.buffer.offset + fbeStructOffset + fbeStructSize) <= this.buffer.size), 'Model is broken!')
    if ((this.buffer.offset + fbeStructOffset + fbeStructSize) > this.buffer.size) {
      return 0
    }

    fbeStructSize = 8 + this._model.set(value)
    this.buffer.resize(fbeInitialSize + fbeStructSize)

    this.writeUInt32(this._model.FBEOffset - 8, fbeStructSize)
    this.writeUInt32(this._model.FBEOffset - 4, fbeStructType)

    return fbeStructSize
  }

  /**
   * Deserialize the struct value
   * @this {!StructArrayFinalModel}
   * @param {!StructArray} value StructArray value, defaults is new StructArray()
   * @return {!object} Deserialized StructArray value and its size
   */
  deserialize (value = new StructArray()) {
    console.assert(((this.buffer.offset + this._model.FBEOffset) <= this.buffer.size), 'Model is broken!')
    if ((this.buffer.offset + this._model.FBEOffset) > this.buffer.size) {
      return { value: new StructArray(), size: 0 }
    }

    let fbeStructSize = this.readUInt32(this._model.FBEOffset - 8)
    let fbeStructType = this.readUInt32(this._model.FBEOffset - 4)
    console.assert(((fbeStructSize > 0) && (fbeStructType === this.FBEType)), 'Model is broken!')
    if ((fbeStructSize <= 0) || (fbeStructType !== this.FBEType)) {
      return { value: new StructArray(), size: 8 }
    }

    let fbeResult = this._model.get(value)
    return { value: fbeResult.value, size: (8 + fbeResult.size) }
  }

  /**
   * Move to the next struct value
   * @this {!StructArrayFinalModel}
   * @param {!number} prev Previous StructArray model size
   */
  next (prev) {
    this._model.FBEShift(prev)
  }
}

exports.StructArrayFinalModel = StructArrayFinalModel

/**
 * StructVector struct
 */
class StructVector {
  /**
   * Initialize struct
   * @param {!Array=} f1
   * @param {Array=} f2
   * @param {!Array=} f3
   * @param {Array=} f4
   * @param {!Array=} f5
   * @param {Array=} f6
   * @param {!Array=} f7
   * @param {Array=} f8
   * @param {!Array=} f9
   * @param {Array=} f10
   * @constructor
   */
  constructor (f1 = [], f2 = [], f3 = [], f4 = [], f5 = [], f6 = [], f7 = [], f8 = [], f9 = [], f10 = []) {
    this.f1 = f1
    this.f2 = f2
    this.f3 = f3
    this.f4 = f4
    this.f5 = f5
    this.f6 = f6
    this.f7 = f7
    this.f8 = f8
    this.f9 = f9
    this.f10 = f10
  }

  /**
   * Copy struct
   * @this {!StructVector}
   * @param {!StructVector} other Other struct
   * @returns {!StructVector} This struct
   */
  copy (other) {
    if (other.f1 != null) {
      this.f1 = []
      for (let item of other.f1) {
        if (item != null) {
          let tempItem
          tempItem = item
          this.f1.push(tempItem)
        } else {
          this.f1.push(undefined)
        }
      }
    } else {
      this.f1 = undefined
    }
    if (other.f2 != null) {
      this.f2 = []
      for (let item of other.f2) {
        if (item != null) {
          let tempItem
          tempItem = item
          this.f2.push(tempItem)
        } else {
          this.f2.push(undefined)
        }
      }
    } else {
      this.f2 = undefined
    }
    if (other.f3 != null) {
      this.f3 = []
      for (let item of other.f3) {
        if (item != null) {
          let tempItem
          if (typeof item === 'string') {
            // noinspection JSUnresolvedFunction
            tempItem = Uint8Array.from(Buffer.from(item, 'base64'))
          } else {
            tempItem = Uint8Array.from(item)
          }
          this.f3.push(tempItem)
        } else {
          this.f3.push(undefined)
        }
      }
    } else {
      this.f3 = undefined
    }
    if (other.f4 != null) {
      this.f4 = []
      for (let item of other.f4) {
        if (item != null) {
          let tempItem
          if (typeof item === 'string') {
            // noinspection JSUnresolvedFunction
            tempItem = Uint8Array.from(Buffer.from(item, 'base64'))
          } else {
            tempItem = Uint8Array.from(item)
          }
          this.f4.push(tempItem)
        } else {
          this.f4.push(undefined)
        }
      }
    } else {
      this.f4 = undefined
    }
    if (other.f5 != null) {
      this.f5 = []
      for (let item of other.f5) {
        if (item != null) {
          let tempItem
          tempItem = EnumSimple.fromObject(item)
          this.f5.push(tempItem)
        } else {
          this.f5.push(undefined)
        }
      }
    } else {
      this.f5 = undefined
    }
    if (other.f6 != null) {
      this.f6 = []
      for (let item of other.f6) {
        if (item != null) {
          let tempItem
          tempItem = EnumSimple.fromObject(item)
          this.f6.push(tempItem)
        } else {
          this.f6.push(undefined)
        }
      }
    } else {
      this.f6 = undefined
    }
    if (other.f7 != null) {
      this.f7 = []
      for (let item of other.f7) {
        if (item != null) {
          let tempItem
          tempItem = FlagsSimple.fromObject(item)
          this.f7.push(tempItem)
        } else {
          this.f7.push(undefined)
        }
      }
    } else {
      this.f7 = undefined
    }
    if (other.f8 != null) {
      this.f8 = []
      for (let item of other.f8) {
        if (item != null) {
          let tempItem
          tempItem = FlagsSimple.fromObject(item)
          this.f8.push(tempItem)
        } else {
          this.f8.push(undefined)
        }
      }
    } else {
      this.f8 = undefined
    }
    if (other.f9 != null) {
      this.f9 = []
      for (let item of other.f9) {
        if (item != null) {
          let tempItem
          tempItem = StructSimple.fromObject(item)
          this.f9.push(tempItem)
        } else {
          this.f9.push(undefined)
        }
      }
    } else {
      this.f9 = undefined
    }
    if (other.f10 != null) {
      this.f10 = []
      for (let item of other.f10) {
        if (item != null) {
          let tempItem
          tempItem = StructSimple.fromObject(item)
          this.f10.push(tempItem)
        } else {
          this.f10.push(undefined)
        }
      }
    } else {
      this.f10 = undefined
    }
    return this
  }

  /**
   * Clone struct
   * @this {!StructVector}
   * @returns {!StructVector} Cloned struct
   */
  clone () {
    // Serialize the struct to the FBE stream
    let writer = new StructVectorModel(new fbe.WriteBuffer())
    writer.serialize(this)

    // Deserialize the struct from the FBE stream
    let reader = new StructVectorModel(new fbe.ReadBuffer())
    reader.attachBuffer(writer.buffer)
    return reader.deserialize().value
  }

  /**
   * Is this struct equal to other one?
   * @this {!StructVector}
   * @param {!StructVector} other Other struct
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof StructVector)) {
      throw new TypeError('Instance of StructVector is required!')
    }
    return true
  }

  /**
   * Convert struct to string
   * @this {!StructVector}
   * @returns {!string} Struct value string
   */
  toString () {
    let result = ''
    result += 'StructVector('
    result += 'f1='
    if (this.f1 != null) {
      let first = true
      result += '['
      result += this.f1.length
      result += ']['
      for (let item of this.f1) {
        result += first ? '' : ','
        result += item.toString()
        first = false
      }
      result += ']'
    }
    result += ',f2='
    if (this.f2 != null) {
      let first = true
      result += '['
      result += this.f2.length
      result += ']['
      for (let item of this.f2) {
        if (item != null) {
          result += first ? '' : ','
          result += item.toString()
        } else {
          result += 'null'
        }
        first = false
      }
      result += ']'
    }
    result += ',f3='
    if (this.f3 != null) {
      let first = true
      result += '['
      result += this.f3.length
      result += ']['
      for (let item of this.f3) {
        if (item != null) {
          result += first ? '' : ','
          result += 'bytes['
          result += item.length
          result += ']'
        } else {
          result += 'null'
        }
        first = false
      }
      result += ']'
    }
    result += ',f4='
    if (this.f4 != null) {
      let first = true
      result += '['
      result += this.f4.length
      result += ']['
      for (let item of this.f4) {
        if (item != null) {
          result += first ? '' : ','
          result += 'bytes['
          result += item.length
          result += ']'
        } else {
          result += 'null'
        }
        first = false
      }
      result += ']'
    }
    result += ',f5='
    if (this.f5 != null) {
      let first = true
      result += '['
      result += this.f5.length
      result += ']['
      for (let item of this.f5) {
        result += first ? '' : ','
        result += item.toString()
        first = false
      }
      result += ']'
    }
    result += ',f6='
    if (this.f6 != null) {
      let first = true
      result += '['
      result += this.f6.length
      result += ']['
      for (let item of this.f6) {
        if (item != null) {
          result += first ? '' : ','
          result += item.toString()
        } else {
          result += 'null'
        }
        first = false
      }
      result += ']'
    }
    result += ',f7='
    if (this.f7 != null) {
      let first = true
      result += '['
      result += this.f7.length
      result += ']['
      for (let item of this.f7) {
        result += first ? '' : ','
        result += item.toString()
        first = false
      }
      result += ']'
    }
    result += ',f8='
    if (this.f8 != null) {
      let first = true
      result += '['
      result += this.f8.length
      result += ']['
      for (let item of this.f8) {
        if (item != null) {
          result += first ? '' : ','
          result += item.toString()
        } else {
          result += 'null'
        }
        first = false
      }
      result += ']'
    }
    result += ',f9='
    if (this.f9 != null) {
      let first = true
      result += '['
      result += this.f9.length
      result += ']['
      for (let item of this.f9) {
        result += first ? '' : ','
        result += item.toString()
        first = false
      }
      result += ']'
    }
    result += ',f10='
    if (this.f10 != null) {
      let first = true
      result += '['
      result += this.f10.length
      result += ']['
      for (let item of this.f10) {
        if (item != null) {
          result += first ? '' : ','
          result += item.toString()
        } else {
          result += 'null'
        }
        first = false
      }
      result += ']'
    }
    result += ')'
    return result
  }

  /**
   * Inspect struct
   * @this {!StructVector}
   * @returns {!string} Struct value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert struct to JSON
   * @this {!StructVector}
   * @returns {!object} Struct value for JSON
   */
  toJSON () {
    return {
      f1: ((this.f1 != null) ? Array.from(this.f1, item => ((item != null) ? item : null)) : null),
      f2: ((this.f2 != null) ? Array.from(this.f2, item => ((item != null) ? item : null)) : null),
      f3: ((this.f3 != null) ? Array.from(this.f3, item => ((item != null) ? Buffer.from(item).toString('base64') : null)) : null),
      f4: ((this.f4 != null) ? Array.from(this.f4, item => ((item != null) ? Buffer.from(item).toString('base64') : null)) : null),
      f5: ((this.f5 != null) ? Array.from(this.f5, item => ((item != null) ? item : null)) : null),
      f6: ((this.f6 != null) ? Array.from(this.f6, item => ((item != null) ? item : null)) : null),
      f7: ((this.f7 != null) ? Array.from(this.f7, item => ((item != null) ? item : null)) : null),
      f8: ((this.f8 != null) ? Array.from(this.f8, item => ((item != null) ? item : null)) : null),
      f9: ((this.f9 != null) ? Array.from(this.f9, item => ((item != null) ? item : null)) : null),
      f10: ((this.f10 != null) ? Array.from(this.f10, item => ((item != null) ? item : null)) : null)
    }
  }

  /**
   * Convert JSON to struct
   * @param {!string} json JSON string
   * @returns {!object} Struct value for JSON
   */
  static fromJSON (json) {
    return StructVector.fromObject(JSON.parse(json))
  }

  /**
   * Create struct from object value
   * @param {!StructVector} other Object value
   * @returns {!StructVector} Created struct
   */
  static fromObject (other) {
    return new StructVector().copy(other)
  }
}

exports.StructVector = StructVector

/**
 * Fast Binary Encoding StructVector field model class
 */
class FieldModelStructVector extends fbe.FieldModel {
  /**
   * Initialize field model with the given buffer and offset
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Buffer
   * @param {!number} offset Offset
   * @constructor
   */
  constructor (buffer, offset) {
    super(buffer, offset)
    this._f1 = new fbe.FieldModelVector(new fbe.FieldModelByte(buffer, 4 + 4), buffer, 4 + 4)
    this._f2 = new fbe.FieldModelVector(new fbe.FieldModelOptional(new fbe.FieldModelByte(buffer, this._f1.FBEOffset + this._f1.FBESize), buffer, this._f1.FBEOffset + this._f1.FBESize), buffer, this._f1.FBEOffset + this._f1.FBESize)
    this._f3 = new fbe.FieldModelVector(new fbe.FieldModelBytes(buffer, this._f2.FBEOffset + this._f2.FBESize), buffer, this._f2.FBEOffset + this._f2.FBESize)
    this._f4 = new fbe.FieldModelVector(new fbe.FieldModelOptional(new fbe.FieldModelBytes(buffer, this._f3.FBEOffset + this._f3.FBESize), buffer, this._f3.FBEOffset + this._f3.FBESize), buffer, this._f3.FBEOffset + this._f3.FBESize)
    this._f5 = new fbe.FieldModelVector(new FieldModelEnumSimple(buffer, this._f4.FBEOffset + this._f4.FBESize), buffer, this._f4.FBEOffset + this._f4.FBESize)
    this._f6 = new fbe.FieldModelVector(new fbe.FieldModelOptional(new FieldModelEnumSimple(buffer, this._f5.FBEOffset + this._f5.FBESize), buffer, this._f5.FBEOffset + this._f5.FBESize), buffer, this._f5.FBEOffset + this._f5.FBESize)
    this._f7 = new fbe.FieldModelVector(new FieldModelFlagsSimple(buffer, this._f6.FBEOffset + this._f6.FBESize), buffer, this._f6.FBEOffset + this._f6.FBESize)
    this._f8 = new fbe.FieldModelVector(new fbe.FieldModelOptional(new FieldModelFlagsSimple(buffer, this._f7.FBEOffset + this._f7.FBESize), buffer, this._f7.FBEOffset + this._f7.FBESize), buffer, this._f7.FBEOffset + this._f7.FBESize)
    this._f9 = new fbe.FieldModelVector(new FieldModelStructSimple(buffer, this._f8.FBEOffset + this._f8.FBESize), buffer, this._f8.FBEOffset + this._f8.FBESize)
    this._f10 = new fbe.FieldModelVector(new fbe.FieldModelOptional(new FieldModelStructSimple(buffer, this._f9.FBEOffset + this._f9.FBESize), buffer, this._f9.FBEOffset + this._f9.FBESize), buffer, this._f9.FBEOffset + this._f9.FBESize)
  }

  /**
   * Get the f1 field model
   * @this {!FieldModelStructVector}
   * @returns {!fbe.FieldModelVector} f1 field model
   */
  get f1 () {
    return this._f1
  }

  /**
   * Get the f2 field model
   * @this {!FieldModelStructVector}
   * @returns {!fbe.FieldModelVector} f2 field model
   */
  get f2 () {
    return this._f2
  }

  /**
   * Get the f3 field model
   * @this {!FieldModelStructVector}
   * @returns {!fbe.FieldModelVector} f3 field model
   */
  get f3 () {
    return this._f3
  }

  /**
   * Get the f4 field model
   * @this {!FieldModelStructVector}
   * @returns {!fbe.FieldModelVector} f4 field model
   */
  get f4 () {
    return this._f4
  }

  /**
   * Get the f5 field model
   * @this {!FieldModelStructVector}
   * @returns {!fbe.FieldModelVector} f5 field model
   */
  get f5 () {
    return this._f5
  }

  /**
   * Get the f6 field model
   * @this {!FieldModelStructVector}
   * @returns {!fbe.FieldModelVector} f6 field model
   */
  get f6 () {
    return this._f6
  }

  /**
   * Get the f7 field model
   * @this {!FieldModelStructVector}
   * @returns {!fbe.FieldModelVector} f7 field model
   */
  get f7 () {
    return this._f7
  }

  /**
   * Get the f8 field model
   * @this {!FieldModelStructVector}
   * @returns {!fbe.FieldModelVector} f8 field model
   */
  get f8 () {
    return this._f8
  }

  /**
   * Get the f9 field model
   * @this {!FieldModelStructVector}
   * @returns {!fbe.FieldModelVector} f9 field model
   */
  get f9 () {
    return this._f9
  }

  /**
   * Get the f10 field model
   * @this {!FieldModelStructVector}
   * @returns {!fbe.FieldModelVector} f10 field model
   */
  get f10 () {
    return this._f10
  }

  /**
   * Get the field size
   * @this {!FieldModelStructVector}
   * @returns {!number} Field size
   */
  get FBESize () {
    return 4
  }

  /**
   * Get the field body size
   * @this {!FieldModelStructVector}
   * @returns {!number} Field body size
   */
  get FBEBody () {
    return 4 + 4 + this.f1.FBESize + this.f2.FBESize + this.f3.FBESize + this.f4.FBESize + this.f5.FBESize + this.f6.FBESize + this.f7.FBESize + this.f8.FBESize + this.f9.FBESize + this.f10.FBESize
  }

  /**
   * Get the field extra size
   * @this {!FieldModelStructVector}
   * @returns {!number} Field extra size
   */
  get FBEExtra () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4) > this._buffer.size)) {
      return 0
    }

    this._buffer.shift(fbeStructOffset)

    let fbeResult = this.FBEBody + this.f1.FBEExtra + this.f2.FBEExtra + this.f3.FBEExtra + this.f4.FBEExtra + this.f5.FBEExtra + this.f6.FBEExtra + this.f7.FBEExtra + this.f8.FBEExtra + this.f9.FBEExtra + this.f10.FBEExtra

    this._buffer.unshift(fbeStructOffset)

    return fbeResult
  }

  /**
   * Get the field type
   * @this {!FieldModelStructVector}
   * @returns {!number} Field type
   */
  get FBEType () {
    return FieldModelStructVector.FBEType
  }

  /**
   * Get the field type (static)
   * @this {!FieldModelStructVector}
   * @returns {!number} Field type
   */
  static get FBEType () {
    return 130
  }

  /**
   * Check if the struct value is valid
   * @this {!FieldModelStructVector}
   * @param {!boolean} fbeVerifyType Verify model type flag, defaults is true
   * @returns {!boolean} Field model valid state
   */
  verify (fbeVerifyType = true) {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return true
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4 + 4) > this._buffer.size)) {
      return false
    }

    let fbeStructSize = this.readUInt32(fbeStructOffset)
    if (fbeStructSize < 4 + 4) {
      return false
    }

    let fbeStructType = this.readUInt32(fbeStructOffset + 4)
    if (fbeVerifyType && (fbeStructType !== this.FBEType)) {
      return false
    }

    this._buffer.shift(fbeStructOffset)
    let fbeResult = this.verifyFields(fbeStructSize)
    this._buffer.unshift(fbeStructOffset)
    return fbeResult
  }

  /**
   * Check if the struct fields are valid
   * @this {!FieldModelStructVector}
   * @param {!number} fbeStructSize FBE struct size
   * @returns {!boolean} Field model valid state
   */
  verifyFields (fbeStructSize) {
    let fbeCurrentSize = 4 + 4

    if ((fbeCurrentSize + this.f1.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f1.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1.FBESize

    if ((fbeCurrentSize + this.f2.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f2.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f2.FBESize

    if ((fbeCurrentSize + this.f3.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f3.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f3.FBESize

    if ((fbeCurrentSize + this.f4.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f4.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f4.FBESize

    if ((fbeCurrentSize + this.f5.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f5.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f5.FBESize

    if ((fbeCurrentSize + this.f6.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f6.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f6.FBESize

    if ((fbeCurrentSize + this.f7.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f7.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f7.FBESize

    if ((fbeCurrentSize + this.f8.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f8.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f8.FBESize

    if ((fbeCurrentSize + this.f9.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f9.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f9.FBESize

    if ((fbeCurrentSize + this.f10.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f10.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f10.FBESize

    return true
  }

  /**
   * Get the struct value (begin phase)
   * @this {!FieldModelStructVector}
   * @returns {!number} Field model begin offset
   */
  getBegin () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    console.assert((fbeStructOffset > 0) && ((this._buffer.offset + fbeStructOffset + 4 + 4) <= this._buffer.size), 'Model is broken!')
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4 + 4) > this._buffer.size)) {
      return 0
    }

    let fbeStructSize = this.readUInt32(fbeStructOffset)
    console.assert((fbeStructSize >= 4 + 4), 'Model is broken!')
    if (fbeStructSize < 4 + 4) {
      return 0
    }

    this._buffer.shift(fbeStructOffset)
    return fbeStructOffset
  }

  /**
   * Get the struct value (end phase)
   * @this {!FieldModelStructVector}
   * @param {!number} fbeBegin Field model begin offset
   */
  getEnd (fbeBegin) {
    this._buffer.unshift(fbeBegin)
  }

  /**
   * Get the struct value
   * @this {!FieldModelStructVector}
   * @param {!StructVector} fbeValue Default value, defaults is new StructVector()
   * @returns {!StructVector} StructVector value
   */
  get (fbeValue = new StructVector()) {
    let fbeBegin = this.getBegin()
    if (fbeBegin === 0) {
      return fbeValue
    }

    let fbeStructSize = this.readUInt32(0)
    this.getFields(fbeValue, fbeStructSize)
    this.getEnd(fbeBegin)
    return fbeValue
  }

  /**
   * Get the struct fields values
   * @this {!FieldModelStructVector}
   * @param {!StructVector} fbeValue StructVector value
   * @param {!number} fbeStructSize Struct size
   */
  getFields (fbeValue, fbeStructSize) {
    let fbeCurrentSize = 4 + 4

    if ((fbeCurrentSize + this.f1.FBESize) <= fbeStructSize) {
      this.f1.get(fbeValue.f1)
    } else {
      fbeValue.f1.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1.FBESize

    if ((fbeCurrentSize + this.f2.FBESize) <= fbeStructSize) {
      this.f2.get(fbeValue.f2)
    } else {
      fbeValue.f2.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f2.FBESize

    if ((fbeCurrentSize + this.f3.FBESize) <= fbeStructSize) {
      this.f3.get(fbeValue.f3)
    } else {
      fbeValue.f3.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f3.FBESize

    if ((fbeCurrentSize + this.f4.FBESize) <= fbeStructSize) {
      this.f4.get(fbeValue.f4)
    } else {
      fbeValue.f4.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f4.FBESize

    if ((fbeCurrentSize + this.f5.FBESize) <= fbeStructSize) {
      this.f5.get(fbeValue.f5)
    } else {
      fbeValue.f5.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f5.FBESize

    if ((fbeCurrentSize + this.f6.FBESize) <= fbeStructSize) {
      this.f6.get(fbeValue.f6)
    } else {
      fbeValue.f6.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f6.FBESize

    if ((fbeCurrentSize + this.f7.FBESize) <= fbeStructSize) {
      this.f7.get(fbeValue.f7)
    } else {
      fbeValue.f7.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f7.FBESize

    if ((fbeCurrentSize + this.f8.FBESize) <= fbeStructSize) {
      this.f8.get(fbeValue.f8)
    } else {
      fbeValue.f8.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f8.FBESize

    if ((fbeCurrentSize + this.f9.FBESize) <= fbeStructSize) {
      this.f9.get(fbeValue.f9)
    } else {
      fbeValue.f9.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f9.FBESize

    if ((fbeCurrentSize + this.f10.FBESize) <= fbeStructSize) {
      this.f10.get(fbeValue.f10)
    } else {
      fbeValue.f10.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f10.FBESize
  }

  /**
   * Set the struct value (begin phase)
   * @this {!FieldModelStructVector}
   * @returns {!number} Field model begin offset
   */
  setBegin () {
    console.assert(((this._buffer.offset + this.FBEOffset + this.FBESize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructSize = this.FBEBody
    let fbeStructOffset = this._buffer.allocate(fbeStructSize) - this._buffer.offset
    console.assert((fbeStructOffset > 0) && ((this._buffer.offset + fbeStructOffset + fbeStructSize) <= this._buffer.size), 'Model is broken!')
    if ((fbeStructOffset <= 0) || ((this._buffer.offset + fbeStructOffset + fbeStructSize) > this._buffer.size)) {
      return 0
    }

    this.writeUInt32(this.FBEOffset, fbeStructOffset)
    this.writeUInt32(fbeStructOffset, fbeStructSize)
    this.writeUInt32(fbeStructOffset + 4, this.FBEType)

    this._buffer.shift(fbeStructOffset)
    return fbeStructOffset
  }

  /**
   * Set the struct value (end phase)
   * @this {!FieldModelStructVector}
   * @param {!number} fbeBegin Field model begin offset
   */
  setEnd (fbeBegin) {
    this._buffer.unshift(fbeBegin)
  }

  /**
   * Set the struct value
   * @this {!FieldModelStructVector}
   * @param {!StructVector} fbeValue StructVector value
   */
  set (fbeValue) {
    let fbeBegin = this.setBegin()
    if (fbeBegin === 0) {
      return
    }

    this.setFields(fbeValue)
    this.setEnd(fbeBegin)
  }

  /**
   * Set the struct fields values
   * @this {!FieldModelStructVector}
   * @param {StructVector} fbeValue StructVector value
   */
  setFields (fbeValue) {
    this.f1.set(fbeValue.f1)
    this.f2.set(fbeValue.f2)
    this.f3.set(fbeValue.f3)
    this.f4.set(fbeValue.f4)
    this.f5.set(fbeValue.f5)
    this.f6.set(fbeValue.f6)
    this.f7.set(fbeValue.f7)
    this.f8.set(fbeValue.f8)
    this.f9.set(fbeValue.f9)
    this.f10.set(fbeValue.f10)
  }
}

exports.FieldModelStructVector = FieldModelStructVector

/**
 * Fast Binary Encoding StructVector model class
 */
class StructVectorModel extends fbe.Model {
  /**
   * Initialize model with the given buffer
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Read/Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer)
    this._model = new FieldModelStructVector(this.buffer, 4)
  }

  /**
   * Get the StructVector model
   * @this {!StructVectorModel}
   * @returns {!FieldModelStructVector} model StructVector model
   */
  get model () {
    return this._model
  }

  /**
   * Get the model size
   * @this {!StructVectorModel}
   * @returns {!number} Model size
   */
  get FBESize () {
    return this.model.FBESize + this.model.FBEExtra
  }

  /**
   * Get the model type
   * @this {!StructVectorModel}
   * @returns {!number} Model type
   */
  get FBEType () {
    return StructVectorModel.FBEType
  }

  /**
   * Get the model type (static)
   * @this {!StructVectorModel}
   * @returns {!number} Model type
   */
  static get FBEType () {
    return FieldModelStructVector.FBEType
  }

  /**
   * Check if the struct value is valid
   * @this {!StructVectorModel}
   * @returns {!boolean} Model valid state
   */
  verify () {
    if ((this.buffer.offset + this.model.FBEOffset - 4) > this.buffer.size) {
      return false
    }

    let fbeFullSize = this.readUInt32(this.model.FBEOffset - 4)
    if (fbeFullSize < this.model.FBESize) {
      return false
    }

    return this.model.verify()
  }

  /**
   * Create a new model (begin phase)
   * @this {!StructVectorModel}
   * @returns {!number} Model begin offset
   */
  createBegin () {
    return this.buffer.allocate(4 + this.model.FBESize)
  }

  /**
   * Create a new model (end phase)
   * @this {!StructVectorModel}
   * @param {!number} fbeBegin Model begin offset
   */
  createEnd (fbeBegin) {
    let fbeEnd = this.buffer.size
    let fbeFullSize = fbeEnd - fbeBegin
    this.writeUInt32(this.model.FBEOffset - 4, fbeFullSize)
    return fbeFullSize
  }

  /**
   * Serialize the struct value
   * @this {!StructVectorModel}
   * @param {!StructVector} value StructVector value
   * @return {!number} Model begin offset
   */
  serialize (value) {
    let fbeBegin = this.createBegin()
    this.model.set(value)
    return this.createEnd(fbeBegin)
  }

  /**
   * Deserialize the struct value
   * @this {!StructVectorModel}
   * @param {!StructVector} value StructVector value, defaults is new StructVector()
   * @return {!object} Deserialized StructVector value and its size
   */
  deserialize (value = new StructVector()) {
    if ((this.buffer.offset + this.model.FBEOffset - 4) > this.buffer.size) {
      return { value: new StructVector(), size: 0 }
    }

    let fbeFullSize = this.readUInt32(this.model.FBEOffset - 4)
    console.assert((fbeFullSize >= this.model.FBESize), 'Model is broken!')
    if (fbeFullSize < this.model.FBESize) {
      return { value: new StructVector(), size: 0 }
    }

    this.model.get(value)
    return { value: value, size: fbeFullSize }
  }

  /**
   * Move to the next struct value
   * @this {!StructVectorModel}
   * @param {!number} prev Previous StructVector model size
   */
  next (prev) {
    this.model.FBEShift(prev)
  }
}

exports.StructVectorModel = StructVectorModel

/**
 * Fast Binary Encoding StructVector final model class
 */
class FinalModelStructVector extends fbe.FinalModel {
  /**
   * Initialize final model with the given buffer and offset
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Buffer
   * @param {!number} offset Offset
   * @constructor
   */
  constructor (buffer, offset) {
    super(buffer, offset)
    this._f1 = new fbe.FinalModelVector(new fbe.FinalModelByte(buffer, 0), buffer, 0)
    this._f2 = new fbe.FinalModelVector(new fbe.FinalModelOptional(new fbe.FinalModelByte(buffer, 0), buffer, 0), buffer, 0)
    this._f3 = new fbe.FinalModelVector(new fbe.FinalModelBytes(buffer, 0), buffer, 0)
    this._f4 = new fbe.FinalModelVector(new fbe.FinalModelOptional(new fbe.FinalModelBytes(buffer, 0), buffer, 0), buffer, 0)
    this._f5 = new fbe.FinalModelVector(new FinalModelEnumSimple(buffer, 0), buffer, 0)
    this._f6 = new fbe.FinalModelVector(new fbe.FinalModelOptional(new FinalModelEnumSimple(buffer, 0), buffer, 0), buffer, 0)
    this._f7 = new fbe.FinalModelVector(new FinalModelFlagsSimple(buffer, 0), buffer, 0)
    this._f8 = new fbe.FinalModelVector(new fbe.FinalModelOptional(new FinalModelFlagsSimple(buffer, 0), buffer, 0), buffer, 0)
    this._f9 = new fbe.FinalModelVector(new FinalModelStructSimple(buffer, 0), buffer, 0)
    this._f10 = new fbe.FinalModelVector(new fbe.FinalModelOptional(new FinalModelStructSimple(buffer, 0), buffer, 0), buffer, 0)
  }

  /**
   * Get the f1 final model
   * @this {!FinalModelStructVector}
   * @returns {!fbe.FinalModelVector} f1 final model
   */
  get f1 () {
    return this._f1
  }

  /**
   * Get the f2 final model
   * @this {!FinalModelStructVector}
   * @returns {!fbe.FinalModelVector} f2 final model
   */
  get f2 () {
    return this._f2
  }

  /**
   * Get the f3 final model
   * @this {!FinalModelStructVector}
   * @returns {!fbe.FinalModelVector} f3 final model
   */
  get f3 () {
    return this._f3
  }

  /**
   * Get the f4 final model
   * @this {!FinalModelStructVector}
   * @returns {!fbe.FinalModelVector} f4 final model
   */
  get f4 () {
    return this._f4
  }

  /**
   * Get the f5 final model
   * @this {!FinalModelStructVector}
   * @returns {!fbe.FinalModelVector} f5 final model
   */
  get f5 () {
    return this._f5
  }

  /**
   * Get the f6 final model
   * @this {!FinalModelStructVector}
   * @returns {!fbe.FinalModelVector} f6 final model
   */
  get f6 () {
    return this._f6
  }

  /**
   * Get the f7 final model
   * @this {!FinalModelStructVector}
   * @returns {!fbe.FinalModelVector} f7 final model
   */
  get f7 () {
    return this._f7
  }

  /**
   * Get the f8 final model
   * @this {!FinalModelStructVector}
   * @returns {!fbe.FinalModelVector} f8 final model
   */
  get f8 () {
    return this._f8
  }

  /**
   * Get the f9 final model
   * @this {!FinalModelStructVector}
   * @returns {!fbe.FinalModelVector} f9 final model
   */
  get f9 () {
    return this._f9
  }

  /**
   * Get the f10 final model
   * @this {!FinalModelStructVector}
   * @returns {!fbe.FinalModelVector} f10 final model
   */
  get f10 () {
    return this._f10
  }

  /**
   * Get the allocation size
   * @this {!FinalModelStructVector}
   * @param {!StructVector} fbeValue StructVector value
   * @returns {!number} Allocation size
   */
  FBEAllocationSize (fbeValue) {
    return 0 + this.f1.FBEAllocationSize(fbeValue.f1) + this.f2.FBEAllocationSize(fbeValue.f2) + this.f3.FBEAllocationSize(fbeValue.f3) + this.f4.FBEAllocationSize(fbeValue.f4) + this.f5.FBEAllocationSize(fbeValue.f5) + this.f6.FBEAllocationSize(fbeValue.f6) + this.f7.FBEAllocationSize(fbeValue.f7) + this.f8.FBEAllocationSize(fbeValue.f8) + this.f9.FBEAllocationSize(fbeValue.f9) + this.f10.FBEAllocationSize(fbeValue.f10)
  }

  /**
   * Get the field type
   * @this {!FinalModelStructVector}
   * @returns {!number} Field type
   */
  get FBEType () {
    return FinalModelStructVector.FBEType
  }

  /**
   * Get the field type (static)
   * @this {!FinalModelStructVector}
   * @returns {!number} Field type
   */
  static get FBEType () {
    return 130
  }

  /**
   * Check if the struct value is valid
   * @this {!FinalModelStructVector}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    this._buffer.shift(this.FBEOffset)
    let fbeResult = this.verifyFields()
    this._buffer.unshift(this.FBEOffset)
    return fbeResult
  }

  /**
   * Check if the struct fields are valid
   * @this {!FinalModelStructVector}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verifyFields () {
    let fbeCurrentOffset = 0
    let fbeFieldSize

    this.f1.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f2.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f2.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f3.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f3.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f4.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f4.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f5.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f5.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f6.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f6.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f7.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f7.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f8.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f8.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f9.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f9.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f10.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f10.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    return fbeCurrentOffset
  }

  /**
   * Get the struct value
   * @this {!FinalModelStructVector}
   * @param {!StructVector} fbeValue StructVector value, defaults is new StructVector()
   * @returns {!object} Result struct value and its size
   */
  get (fbeValue = new StructVector()) {
    this._buffer.shift(this.FBEOffset)
    let fbeSize = this.getFields(fbeValue)
    this._buffer.unshift(this.FBEOffset)
    return { value: fbeValue, size: fbeSize }
  }

  /**
   * Get the struct fields values
   * @this {!FinalModelStructVector}
   * @param {!StructVector} fbeValue StructVector value
   * @returns {!number} Struct size
   */
  getFields (fbeValue) {
    let fbeCurrentOffset = 0
    let fbeCurrentSize = 0
    let fbeResult

    this.f1.FBEOffset = fbeCurrentOffset
    fbeResult = this.f1.get(fbeValue.f1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f2.FBEOffset = fbeCurrentOffset
    fbeResult = this.f2.get(fbeValue.f2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f3.FBEOffset = fbeCurrentOffset
    fbeResult = this.f3.get(fbeValue.f3)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f4.FBEOffset = fbeCurrentOffset
    fbeResult = this.f4.get(fbeValue.f4)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f5.FBEOffset = fbeCurrentOffset
    fbeResult = this.f5.get(fbeValue.f5)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f6.FBEOffset = fbeCurrentOffset
    fbeResult = this.f6.get(fbeValue.f6)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f7.FBEOffset = fbeCurrentOffset
    fbeResult = this.f7.get(fbeValue.f7)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f8.FBEOffset = fbeCurrentOffset
    fbeResult = this.f8.get(fbeValue.f8)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f9.FBEOffset = fbeCurrentOffset
    fbeResult = this.f9.get(fbeValue.f9)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f10.FBEOffset = fbeCurrentOffset
    fbeResult = this.f10.get(fbeValue.f10)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    return fbeCurrentSize
  }

  /**
   * Set the struct value
   * @this {!FinalModelStructVector}
   * @param {!StructVector} fbeValue StructVector value
   * @returns {!number} Final model size
   */
  set (fbeValue) {
    this._buffer.shift(this.FBEOffset)
    let fbeSize = this.setFields(fbeValue)
    this._buffer.unshift(this.FBEOffset)
    return fbeSize
  }

  /**
   * Set the struct fields values
   * @this {!FinalModelStructVector}
   * @param {StructVector} fbeValue StructVector value
   * @returns {!number} Final model size
   */
  setFields (fbeValue) {
    let fbeCurrentOffset = 0
    let fbeCurrentSize = 0
    let fbeFieldSize

    this.f1.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1.set(fbeValue.f1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f2.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f2.set(fbeValue.f2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f3.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f3.set(fbeValue.f3)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f4.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f4.set(fbeValue.f4)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f5.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f5.set(fbeValue.f5)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f6.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f6.set(fbeValue.f6)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f7.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f7.set(fbeValue.f7)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f8.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f8.set(fbeValue.f8)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f9.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f9.set(fbeValue.f9)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f10.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f10.set(fbeValue.f10)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    return fbeCurrentSize
  }
}

exports.FinalModelStructVector = FinalModelStructVector

/**
 * Fast Binary Encoding StructVector final model class
 */
class StructVectorFinalModel extends fbe.Model {
  /**
   * Initialize final model with the given buffer
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Read/Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer)
    this._model = new FinalModelStructVector(this.buffer, 8)
  }

  /**
   * Get the model type
   * @this {!StructVectorFinalModel}
   * @returns {!number} Model type
   */
  get FBEType () {
    return StructVectorFinalModel.FBEType
  }

  /**
   * Get the model type (static)
   * @this {!StructVectorFinalModel}
   * @returns {!number} Model type
   */
  static get FBEType () {
    return FinalModelStructVector.FBEType
  }

  /**
   * Check if the struct value is valid
   * @this {!StructVectorFinalModel}
   * @returns {!boolean} Model valid state
   */
  verify () {
    if ((this.buffer.offset + this._model.FBEOffset) > this.buffer.size) {
      return false
    }

    let fbeStructSize = this.readUInt32(this._model.FBEOffset - 8)
    let fbeStructType = this.readUInt32(this._model.FBEOffset - 4)
    if ((fbeStructSize <= 0) || (fbeStructType !== this.FBEType)) {
      return false
    }

    return ((8 + this._model.verify()) === fbeStructSize)
  }

  /**
   * Serialize the struct value
   * @this {!StructVectorFinalModel}
   * @param {!StructVector} value StructVector value
   * @return {!number} Struct size
   */
  serialize (value) {
    let fbeInitialSize = this.buffer.size

    let fbeStructType = this.FBEType
    let fbeStructSize = 8 + this._model.FBEAllocationSize(value)
    let fbeStructOffset = this.buffer.allocate(fbeStructSize) - this.buffer.offset
    console.assert(((this.buffer.offset + fbeStructOffset + fbeStructSize) <= this.buffer.size), 'Model is broken!')
    if ((this.buffer.offset + fbeStructOffset + fbeStructSize) > this.buffer.size) {
      return 0
    }

    fbeStructSize = 8 + this._model.set(value)
    this.buffer.resize(fbeInitialSize + fbeStructSize)

    this.writeUInt32(this._model.FBEOffset - 8, fbeStructSize)
    this.writeUInt32(this._model.FBEOffset - 4, fbeStructType)

    return fbeStructSize
  }

  /**
   * Deserialize the struct value
   * @this {!StructVectorFinalModel}
   * @param {!StructVector} value StructVector value, defaults is new StructVector()
   * @return {!object} Deserialized StructVector value and its size
   */
  deserialize (value = new StructVector()) {
    console.assert(((this.buffer.offset + this._model.FBEOffset) <= this.buffer.size), 'Model is broken!')
    if ((this.buffer.offset + this._model.FBEOffset) > this.buffer.size) {
      return { value: new StructVector(), size: 0 }
    }

    let fbeStructSize = this.readUInt32(this._model.FBEOffset - 8)
    let fbeStructType = this.readUInt32(this._model.FBEOffset - 4)
    console.assert(((fbeStructSize > 0) && (fbeStructType === this.FBEType)), 'Model is broken!')
    if ((fbeStructSize <= 0) || (fbeStructType !== this.FBEType)) {
      return { value: new StructVector(), size: 8 }
    }

    let fbeResult = this._model.get(value)
    return { value: fbeResult.value, size: (8 + fbeResult.size) }
  }

  /**
   * Move to the next struct value
   * @this {!StructVectorFinalModel}
   * @param {!number} prev Previous StructVector model size
   */
  next (prev) {
    this._model.FBEShift(prev)
  }
}

exports.StructVectorFinalModel = StructVectorFinalModel

/**
 * StructList struct
 */
class StructList {
  /**
   * Initialize struct
   * @param {!Array=} f1
   * @param {Array=} f2
   * @param {!Array=} f3
   * @param {Array=} f4
   * @param {!Array=} f5
   * @param {Array=} f6
   * @param {!Array=} f7
   * @param {Array=} f8
   * @param {!Array=} f9
   * @param {Array=} f10
   * @constructor
   */
  constructor (f1 = [], f2 = [], f3 = [], f4 = [], f5 = [], f6 = [], f7 = [], f8 = [], f9 = [], f10 = []) {
    this.f1 = f1
    this.f2 = f2
    this.f3 = f3
    this.f4 = f4
    this.f5 = f5
    this.f6 = f6
    this.f7 = f7
    this.f8 = f8
    this.f9 = f9
    this.f10 = f10
  }

  /**
   * Copy struct
   * @this {!StructList}
   * @param {!StructList} other Other struct
   * @returns {!StructList} This struct
   */
  copy (other) {
    if (other.f1 != null) {
      this.f1 = []
      for (let item of other.f1) {
        if (item != null) {
          let tempItem
          tempItem = item
          this.f1.push(tempItem)
        } else {
          this.f1.push(undefined)
        }
      }
    } else {
      this.f1 = undefined
    }
    if (other.f2 != null) {
      this.f2 = []
      for (let item of other.f2) {
        if (item != null) {
          let tempItem
          tempItem = item
          this.f2.push(tempItem)
        } else {
          this.f2.push(undefined)
        }
      }
    } else {
      this.f2 = undefined
    }
    if (other.f3 != null) {
      this.f3 = []
      for (let item of other.f3) {
        if (item != null) {
          let tempItem
          if (typeof item === 'string') {
            // noinspection JSUnresolvedFunction
            tempItem = Uint8Array.from(Buffer.from(item, 'base64'))
          } else {
            tempItem = Uint8Array.from(item)
          }
          this.f3.push(tempItem)
        } else {
          this.f3.push(undefined)
        }
      }
    } else {
      this.f3 = undefined
    }
    if (other.f4 != null) {
      this.f4 = []
      for (let item of other.f4) {
        if (item != null) {
          let tempItem
          if (typeof item === 'string') {
            // noinspection JSUnresolvedFunction
            tempItem = Uint8Array.from(Buffer.from(item, 'base64'))
          } else {
            tempItem = Uint8Array.from(item)
          }
          this.f4.push(tempItem)
        } else {
          this.f4.push(undefined)
        }
      }
    } else {
      this.f4 = undefined
    }
    if (other.f5 != null) {
      this.f5 = []
      for (let item of other.f5) {
        if (item != null) {
          let tempItem
          tempItem = EnumSimple.fromObject(item)
          this.f5.push(tempItem)
        } else {
          this.f5.push(undefined)
        }
      }
    } else {
      this.f5 = undefined
    }
    if (other.f6 != null) {
      this.f6 = []
      for (let item of other.f6) {
        if (item != null) {
          let tempItem
          tempItem = EnumSimple.fromObject(item)
          this.f6.push(tempItem)
        } else {
          this.f6.push(undefined)
        }
      }
    } else {
      this.f6 = undefined
    }
    if (other.f7 != null) {
      this.f7 = []
      for (let item of other.f7) {
        if (item != null) {
          let tempItem
          tempItem = FlagsSimple.fromObject(item)
          this.f7.push(tempItem)
        } else {
          this.f7.push(undefined)
        }
      }
    } else {
      this.f7 = undefined
    }
    if (other.f8 != null) {
      this.f8 = []
      for (let item of other.f8) {
        if (item != null) {
          let tempItem
          tempItem = FlagsSimple.fromObject(item)
          this.f8.push(tempItem)
        } else {
          this.f8.push(undefined)
        }
      }
    } else {
      this.f8 = undefined
    }
    if (other.f9 != null) {
      this.f9 = []
      for (let item of other.f9) {
        if (item != null) {
          let tempItem
          tempItem = StructSimple.fromObject(item)
          this.f9.push(tempItem)
        } else {
          this.f9.push(undefined)
        }
      }
    } else {
      this.f9 = undefined
    }
    if (other.f10 != null) {
      this.f10 = []
      for (let item of other.f10) {
        if (item != null) {
          let tempItem
          tempItem = StructSimple.fromObject(item)
          this.f10.push(tempItem)
        } else {
          this.f10.push(undefined)
        }
      }
    } else {
      this.f10 = undefined
    }
    return this
  }

  /**
   * Clone struct
   * @this {!StructList}
   * @returns {!StructList} Cloned struct
   */
  clone () {
    // Serialize the struct to the FBE stream
    let writer = new StructListModel(new fbe.WriteBuffer())
    writer.serialize(this)

    // Deserialize the struct from the FBE stream
    let reader = new StructListModel(new fbe.ReadBuffer())
    reader.attachBuffer(writer.buffer)
    return reader.deserialize().value
  }

  /**
   * Is this struct equal to other one?
   * @this {!StructList}
   * @param {!StructList} other Other struct
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof StructList)) {
      throw new TypeError('Instance of StructList is required!')
    }
    return true
  }

  /**
   * Convert struct to string
   * @this {!StructList}
   * @returns {!string} Struct value string
   */
  toString () {
    let result = ''
    result += 'StructList('
    result += 'f1='
    if (this.f1 != null) {
      let first = true
      result += '['
      result += this.f1.length
      result += ']<'
      for (let item of this.f1) {
        result += first ? '' : ','
        result += item.toString()
        first = false
      }
      result += '>'
    }
    result += ',f2='
    if (this.f2 != null) {
      let first = true
      result += '['
      result += this.f2.length
      result += ']<'
      for (let item of this.f2) {
        if (item != null) {
          result += first ? '' : ','
          result += item.toString()
        } else {
          result += 'null'
        }
        first = false
      }
      result += '>'
    }
    result += ',f3='
    if (this.f3 != null) {
      let first = true
      result += '['
      result += this.f3.length
      result += ']<'
      for (let item of this.f3) {
        if (item != null) {
          result += first ? '' : ','
          result += 'bytes['
          result += item.length
          result += ']'
        } else {
          result += 'null'
        }
        first = false
      }
      result += '>'
    }
    result += ',f4='
    if (this.f4 != null) {
      let first = true
      result += '['
      result += this.f4.length
      result += ']<'
      for (let item of this.f4) {
        if (item != null) {
          result += first ? '' : ','
          result += 'bytes['
          result += item.length
          result += ']'
        } else {
          result += 'null'
        }
        first = false
      }
      result += '>'
    }
    result += ',f5='
    if (this.f5 != null) {
      let first = true
      result += '['
      result += this.f5.length
      result += ']<'
      for (let item of this.f5) {
        result += first ? '' : ','
        result += item.toString()
        first = false
      }
      result += '>'
    }
    result += ',f6='
    if (this.f6 != null) {
      let first = true
      result += '['
      result += this.f6.length
      result += ']<'
      for (let item of this.f6) {
        if (item != null) {
          result += first ? '' : ','
          result += item.toString()
        } else {
          result += 'null'
        }
        first = false
      }
      result += '>'
    }
    result += ',f7='
    if (this.f7 != null) {
      let first = true
      result += '['
      result += this.f7.length
      result += ']<'
      for (let item of this.f7) {
        result += first ? '' : ','
        result += item.toString()
        first = false
      }
      result += '>'
    }
    result += ',f8='
    if (this.f8 != null) {
      let first = true
      result += '['
      result += this.f8.length
      result += ']<'
      for (let item of this.f8) {
        if (item != null) {
          result += first ? '' : ','
          result += item.toString()
        } else {
          result += 'null'
        }
        first = false
      }
      result += '>'
    }
    result += ',f9='
    if (this.f9 != null) {
      let first = true
      result += '['
      result += this.f9.length
      result += ']<'
      for (let item of this.f9) {
        result += first ? '' : ','
        result += item.toString()
        first = false
      }
      result += '>'
    }
    result += ',f10='
    if (this.f10 != null) {
      let first = true
      result += '['
      result += this.f10.length
      result += ']<'
      for (let item of this.f10) {
        if (item != null) {
          result += first ? '' : ','
          result += item.toString()
        } else {
          result += 'null'
        }
        first = false
      }
      result += '>'
    }
    result += ')'
    return result
  }

  /**
   * Inspect struct
   * @this {!StructList}
   * @returns {!string} Struct value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert struct to JSON
   * @this {!StructList}
   * @returns {!object} Struct value for JSON
   */
  toJSON () {
    return {
      f1: ((this.f1 != null) ? Array.from(this.f1, item => ((item != null) ? item : null)) : null),
      f2: ((this.f2 != null) ? Array.from(this.f2, item => ((item != null) ? item : null)) : null),
      f3: ((this.f3 != null) ? Array.from(this.f3, item => ((item != null) ? Buffer.from(item).toString('base64') : null)) : null),
      f4: ((this.f4 != null) ? Array.from(this.f4, item => ((item != null) ? Buffer.from(item).toString('base64') : null)) : null),
      f5: ((this.f5 != null) ? Array.from(this.f5, item => ((item != null) ? item : null)) : null),
      f6: ((this.f6 != null) ? Array.from(this.f6, item => ((item != null) ? item : null)) : null),
      f7: ((this.f7 != null) ? Array.from(this.f7, item => ((item != null) ? item : null)) : null),
      f8: ((this.f8 != null) ? Array.from(this.f8, item => ((item != null) ? item : null)) : null),
      f9: ((this.f9 != null) ? Array.from(this.f9, item => ((item != null) ? item : null)) : null),
      f10: ((this.f10 != null) ? Array.from(this.f10, item => ((item != null) ? item : null)) : null)
    }
  }

  /**
   * Convert JSON to struct
   * @param {!string} json JSON string
   * @returns {!object} Struct value for JSON
   */
  static fromJSON (json) {
    return StructList.fromObject(JSON.parse(json))
  }

  /**
   * Create struct from object value
   * @param {!StructList} other Object value
   * @returns {!StructList} Created struct
   */
  static fromObject (other) {
    return new StructList().copy(other)
  }
}

exports.StructList = StructList

/**
 * Fast Binary Encoding StructList field model class
 */
class FieldModelStructList extends fbe.FieldModel {
  /**
   * Initialize field model with the given buffer and offset
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Buffer
   * @param {!number} offset Offset
   * @constructor
   */
  constructor (buffer, offset) {
    super(buffer, offset)
    this._f1 = new fbe.FieldModelVector(new fbe.FieldModelByte(buffer, 4 + 4), buffer, 4 + 4)
    this._f2 = new fbe.FieldModelVector(new fbe.FieldModelOptional(new fbe.FieldModelByte(buffer, this._f1.FBEOffset + this._f1.FBESize), buffer, this._f1.FBEOffset + this._f1.FBESize), buffer, this._f1.FBEOffset + this._f1.FBESize)
    this._f3 = new fbe.FieldModelVector(new fbe.FieldModelBytes(buffer, this._f2.FBEOffset + this._f2.FBESize), buffer, this._f2.FBEOffset + this._f2.FBESize)
    this._f4 = new fbe.FieldModelVector(new fbe.FieldModelOptional(new fbe.FieldModelBytes(buffer, this._f3.FBEOffset + this._f3.FBESize), buffer, this._f3.FBEOffset + this._f3.FBESize), buffer, this._f3.FBEOffset + this._f3.FBESize)
    this._f5 = new fbe.FieldModelVector(new FieldModelEnumSimple(buffer, this._f4.FBEOffset + this._f4.FBESize), buffer, this._f4.FBEOffset + this._f4.FBESize)
    this._f6 = new fbe.FieldModelVector(new fbe.FieldModelOptional(new FieldModelEnumSimple(buffer, this._f5.FBEOffset + this._f5.FBESize), buffer, this._f5.FBEOffset + this._f5.FBESize), buffer, this._f5.FBEOffset + this._f5.FBESize)
    this._f7 = new fbe.FieldModelVector(new FieldModelFlagsSimple(buffer, this._f6.FBEOffset + this._f6.FBESize), buffer, this._f6.FBEOffset + this._f6.FBESize)
    this._f8 = new fbe.FieldModelVector(new fbe.FieldModelOptional(new FieldModelFlagsSimple(buffer, this._f7.FBEOffset + this._f7.FBESize), buffer, this._f7.FBEOffset + this._f7.FBESize), buffer, this._f7.FBEOffset + this._f7.FBESize)
    this._f9 = new fbe.FieldModelVector(new FieldModelStructSimple(buffer, this._f8.FBEOffset + this._f8.FBESize), buffer, this._f8.FBEOffset + this._f8.FBESize)
    this._f10 = new fbe.FieldModelVector(new fbe.FieldModelOptional(new FieldModelStructSimple(buffer, this._f9.FBEOffset + this._f9.FBESize), buffer, this._f9.FBEOffset + this._f9.FBESize), buffer, this._f9.FBEOffset + this._f9.FBESize)
  }

  /**
   * Get the f1 field model
   * @this {!FieldModelStructList}
   * @returns {!fbe.FieldModelVector} f1 field model
   */
  get f1 () {
    return this._f1
  }

  /**
   * Get the f2 field model
   * @this {!FieldModelStructList}
   * @returns {!fbe.FieldModelVector} f2 field model
   */
  get f2 () {
    return this._f2
  }

  /**
   * Get the f3 field model
   * @this {!FieldModelStructList}
   * @returns {!fbe.FieldModelVector} f3 field model
   */
  get f3 () {
    return this._f3
  }

  /**
   * Get the f4 field model
   * @this {!FieldModelStructList}
   * @returns {!fbe.FieldModelVector} f4 field model
   */
  get f4 () {
    return this._f4
  }

  /**
   * Get the f5 field model
   * @this {!FieldModelStructList}
   * @returns {!fbe.FieldModelVector} f5 field model
   */
  get f5 () {
    return this._f5
  }

  /**
   * Get the f6 field model
   * @this {!FieldModelStructList}
   * @returns {!fbe.FieldModelVector} f6 field model
   */
  get f6 () {
    return this._f6
  }

  /**
   * Get the f7 field model
   * @this {!FieldModelStructList}
   * @returns {!fbe.FieldModelVector} f7 field model
   */
  get f7 () {
    return this._f7
  }

  /**
   * Get the f8 field model
   * @this {!FieldModelStructList}
   * @returns {!fbe.FieldModelVector} f8 field model
   */
  get f8 () {
    return this._f8
  }

  /**
   * Get the f9 field model
   * @this {!FieldModelStructList}
   * @returns {!fbe.FieldModelVector} f9 field model
   */
  get f9 () {
    return this._f9
  }

  /**
   * Get the f10 field model
   * @this {!FieldModelStructList}
   * @returns {!fbe.FieldModelVector} f10 field model
   */
  get f10 () {
    return this._f10
  }

  /**
   * Get the field size
   * @this {!FieldModelStructList}
   * @returns {!number} Field size
   */
  get FBESize () {
    return 4
  }

  /**
   * Get the field body size
   * @this {!FieldModelStructList}
   * @returns {!number} Field body size
   */
  get FBEBody () {
    return 4 + 4 + this.f1.FBESize + this.f2.FBESize + this.f3.FBESize + this.f4.FBESize + this.f5.FBESize + this.f6.FBESize + this.f7.FBESize + this.f8.FBESize + this.f9.FBESize + this.f10.FBESize
  }

  /**
   * Get the field extra size
   * @this {!FieldModelStructList}
   * @returns {!number} Field extra size
   */
  get FBEExtra () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4) > this._buffer.size)) {
      return 0
    }

    this._buffer.shift(fbeStructOffset)

    let fbeResult = this.FBEBody + this.f1.FBEExtra + this.f2.FBEExtra + this.f3.FBEExtra + this.f4.FBEExtra + this.f5.FBEExtra + this.f6.FBEExtra + this.f7.FBEExtra + this.f8.FBEExtra + this.f9.FBEExtra + this.f10.FBEExtra

    this._buffer.unshift(fbeStructOffset)

    return fbeResult
  }

  /**
   * Get the field type
   * @this {!FieldModelStructList}
   * @returns {!number} Field type
   */
  get FBEType () {
    return FieldModelStructList.FBEType
  }

  /**
   * Get the field type (static)
   * @this {!FieldModelStructList}
   * @returns {!number} Field type
   */
  static get FBEType () {
    return 131
  }

  /**
   * Check if the struct value is valid
   * @this {!FieldModelStructList}
   * @param {!boolean} fbeVerifyType Verify model type flag, defaults is true
   * @returns {!boolean} Field model valid state
   */
  verify (fbeVerifyType = true) {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return true
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4 + 4) > this._buffer.size)) {
      return false
    }

    let fbeStructSize = this.readUInt32(fbeStructOffset)
    if (fbeStructSize < 4 + 4) {
      return false
    }

    let fbeStructType = this.readUInt32(fbeStructOffset + 4)
    if (fbeVerifyType && (fbeStructType !== this.FBEType)) {
      return false
    }

    this._buffer.shift(fbeStructOffset)
    let fbeResult = this.verifyFields(fbeStructSize)
    this._buffer.unshift(fbeStructOffset)
    return fbeResult
  }

  /**
   * Check if the struct fields are valid
   * @this {!FieldModelStructList}
   * @param {!number} fbeStructSize FBE struct size
   * @returns {!boolean} Field model valid state
   */
  verifyFields (fbeStructSize) {
    let fbeCurrentSize = 4 + 4

    if ((fbeCurrentSize + this.f1.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f1.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1.FBESize

    if ((fbeCurrentSize + this.f2.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f2.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f2.FBESize

    if ((fbeCurrentSize + this.f3.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f3.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f3.FBESize

    if ((fbeCurrentSize + this.f4.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f4.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f4.FBESize

    if ((fbeCurrentSize + this.f5.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f5.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f5.FBESize

    if ((fbeCurrentSize + this.f6.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f6.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f6.FBESize

    if ((fbeCurrentSize + this.f7.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f7.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f7.FBESize

    if ((fbeCurrentSize + this.f8.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f8.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f8.FBESize

    if ((fbeCurrentSize + this.f9.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f9.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f9.FBESize

    if ((fbeCurrentSize + this.f10.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f10.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f10.FBESize

    return true
  }

  /**
   * Get the struct value (begin phase)
   * @this {!FieldModelStructList}
   * @returns {!number} Field model begin offset
   */
  getBegin () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    console.assert((fbeStructOffset > 0) && ((this._buffer.offset + fbeStructOffset + 4 + 4) <= this._buffer.size), 'Model is broken!')
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4 + 4) > this._buffer.size)) {
      return 0
    }

    let fbeStructSize = this.readUInt32(fbeStructOffset)
    console.assert((fbeStructSize >= 4 + 4), 'Model is broken!')
    if (fbeStructSize < 4 + 4) {
      return 0
    }

    this._buffer.shift(fbeStructOffset)
    return fbeStructOffset
  }

  /**
   * Get the struct value (end phase)
   * @this {!FieldModelStructList}
   * @param {!number} fbeBegin Field model begin offset
   */
  getEnd (fbeBegin) {
    this._buffer.unshift(fbeBegin)
  }

  /**
   * Get the struct value
   * @this {!FieldModelStructList}
   * @param {!StructList} fbeValue Default value, defaults is new StructList()
   * @returns {!StructList} StructList value
   */
  get (fbeValue = new StructList()) {
    let fbeBegin = this.getBegin()
    if (fbeBegin === 0) {
      return fbeValue
    }

    let fbeStructSize = this.readUInt32(0)
    this.getFields(fbeValue, fbeStructSize)
    this.getEnd(fbeBegin)
    return fbeValue
  }

  /**
   * Get the struct fields values
   * @this {!FieldModelStructList}
   * @param {!StructList} fbeValue StructList value
   * @param {!number} fbeStructSize Struct size
   */
  getFields (fbeValue, fbeStructSize) {
    let fbeCurrentSize = 4 + 4

    if ((fbeCurrentSize + this.f1.FBESize) <= fbeStructSize) {
      this.f1.get(fbeValue.f1)
    } else {
      fbeValue.f1.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1.FBESize

    if ((fbeCurrentSize + this.f2.FBESize) <= fbeStructSize) {
      this.f2.get(fbeValue.f2)
    } else {
      fbeValue.f2.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f2.FBESize

    if ((fbeCurrentSize + this.f3.FBESize) <= fbeStructSize) {
      this.f3.get(fbeValue.f3)
    } else {
      fbeValue.f3.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f3.FBESize

    if ((fbeCurrentSize + this.f4.FBESize) <= fbeStructSize) {
      this.f4.get(fbeValue.f4)
    } else {
      fbeValue.f4.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f4.FBESize

    if ((fbeCurrentSize + this.f5.FBESize) <= fbeStructSize) {
      this.f5.get(fbeValue.f5)
    } else {
      fbeValue.f5.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f5.FBESize

    if ((fbeCurrentSize + this.f6.FBESize) <= fbeStructSize) {
      this.f6.get(fbeValue.f6)
    } else {
      fbeValue.f6.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f6.FBESize

    if ((fbeCurrentSize + this.f7.FBESize) <= fbeStructSize) {
      this.f7.get(fbeValue.f7)
    } else {
      fbeValue.f7.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f7.FBESize

    if ((fbeCurrentSize + this.f8.FBESize) <= fbeStructSize) {
      this.f8.get(fbeValue.f8)
    } else {
      fbeValue.f8.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f8.FBESize

    if ((fbeCurrentSize + this.f9.FBESize) <= fbeStructSize) {
      this.f9.get(fbeValue.f9)
    } else {
      fbeValue.f9.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f9.FBESize

    if ((fbeCurrentSize + this.f10.FBESize) <= fbeStructSize) {
      this.f10.get(fbeValue.f10)
    } else {
      fbeValue.f10.length = 0
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f10.FBESize
  }

  /**
   * Set the struct value (begin phase)
   * @this {!FieldModelStructList}
   * @returns {!number} Field model begin offset
   */
  setBegin () {
    console.assert(((this._buffer.offset + this.FBEOffset + this.FBESize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructSize = this.FBEBody
    let fbeStructOffset = this._buffer.allocate(fbeStructSize) - this._buffer.offset
    console.assert((fbeStructOffset > 0) && ((this._buffer.offset + fbeStructOffset + fbeStructSize) <= this._buffer.size), 'Model is broken!')
    if ((fbeStructOffset <= 0) || ((this._buffer.offset + fbeStructOffset + fbeStructSize) > this._buffer.size)) {
      return 0
    }

    this.writeUInt32(this.FBEOffset, fbeStructOffset)
    this.writeUInt32(fbeStructOffset, fbeStructSize)
    this.writeUInt32(fbeStructOffset + 4, this.FBEType)

    this._buffer.shift(fbeStructOffset)
    return fbeStructOffset
  }

  /**
   * Set the struct value (end phase)
   * @this {!FieldModelStructList}
   * @param {!number} fbeBegin Field model begin offset
   */
  setEnd (fbeBegin) {
    this._buffer.unshift(fbeBegin)
  }

  /**
   * Set the struct value
   * @this {!FieldModelStructList}
   * @param {!StructList} fbeValue StructList value
   */
  set (fbeValue) {
    let fbeBegin = this.setBegin()
    if (fbeBegin === 0) {
      return
    }

    this.setFields(fbeValue)
    this.setEnd(fbeBegin)
  }

  /**
   * Set the struct fields values
   * @this {!FieldModelStructList}
   * @param {StructList} fbeValue StructList value
   */
  setFields (fbeValue) {
    this.f1.set(fbeValue.f1)
    this.f2.set(fbeValue.f2)
    this.f3.set(fbeValue.f3)
    this.f4.set(fbeValue.f4)
    this.f5.set(fbeValue.f5)
    this.f6.set(fbeValue.f6)
    this.f7.set(fbeValue.f7)
    this.f8.set(fbeValue.f8)
    this.f9.set(fbeValue.f9)
    this.f10.set(fbeValue.f10)
  }
}

exports.FieldModelStructList = FieldModelStructList

/**
 * Fast Binary Encoding StructList model class
 */
class StructListModel extends fbe.Model {
  /**
   * Initialize model with the given buffer
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Read/Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer)
    this._model = new FieldModelStructList(this.buffer, 4)
  }

  /**
   * Get the StructList model
   * @this {!StructListModel}
   * @returns {!FieldModelStructList} model StructList model
   */
  get model () {
    return this._model
  }

  /**
   * Get the model size
   * @this {!StructListModel}
   * @returns {!number} Model size
   */
  get FBESize () {
    return this.model.FBESize + this.model.FBEExtra
  }

  /**
   * Get the model type
   * @this {!StructListModel}
   * @returns {!number} Model type
   */
  get FBEType () {
    return StructListModel.FBEType
  }

  /**
   * Get the model type (static)
   * @this {!StructListModel}
   * @returns {!number} Model type
   */
  static get FBEType () {
    return FieldModelStructList.FBEType
  }

  /**
   * Check if the struct value is valid
   * @this {!StructListModel}
   * @returns {!boolean} Model valid state
   */
  verify () {
    if ((this.buffer.offset + this.model.FBEOffset - 4) > this.buffer.size) {
      return false
    }

    let fbeFullSize = this.readUInt32(this.model.FBEOffset - 4)
    if (fbeFullSize < this.model.FBESize) {
      return false
    }

    return this.model.verify()
  }

  /**
   * Create a new model (begin phase)
   * @this {!StructListModel}
   * @returns {!number} Model begin offset
   */
  createBegin () {
    return this.buffer.allocate(4 + this.model.FBESize)
  }

  /**
   * Create a new model (end phase)
   * @this {!StructListModel}
   * @param {!number} fbeBegin Model begin offset
   */
  createEnd (fbeBegin) {
    let fbeEnd = this.buffer.size
    let fbeFullSize = fbeEnd - fbeBegin
    this.writeUInt32(this.model.FBEOffset - 4, fbeFullSize)
    return fbeFullSize
  }

  /**
   * Serialize the struct value
   * @this {!StructListModel}
   * @param {!StructList} value StructList value
   * @return {!number} Model begin offset
   */
  serialize (value) {
    let fbeBegin = this.createBegin()
    this.model.set(value)
    return this.createEnd(fbeBegin)
  }

  /**
   * Deserialize the struct value
   * @this {!StructListModel}
   * @param {!StructList} value StructList value, defaults is new StructList()
   * @return {!object} Deserialized StructList value and its size
   */
  deserialize (value = new StructList()) {
    if ((this.buffer.offset + this.model.FBEOffset - 4) > this.buffer.size) {
      return { value: new StructList(), size: 0 }
    }

    let fbeFullSize = this.readUInt32(this.model.FBEOffset - 4)
    console.assert((fbeFullSize >= this.model.FBESize), 'Model is broken!')
    if (fbeFullSize < this.model.FBESize) {
      return { value: new StructList(), size: 0 }
    }

    this.model.get(value)
    return { value: value, size: fbeFullSize }
  }

  /**
   * Move to the next struct value
   * @this {!StructListModel}
   * @param {!number} prev Previous StructList model size
   */
  next (prev) {
    this.model.FBEShift(prev)
  }
}

exports.StructListModel = StructListModel

/**
 * Fast Binary Encoding StructList final model class
 */
class FinalModelStructList extends fbe.FinalModel {
  /**
   * Initialize final model with the given buffer and offset
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Buffer
   * @param {!number} offset Offset
   * @constructor
   */
  constructor (buffer, offset) {
    super(buffer, offset)
    this._f1 = new fbe.FinalModelVector(new fbe.FinalModelByte(buffer, 0), buffer, 0)
    this._f2 = new fbe.FinalModelVector(new fbe.FinalModelOptional(new fbe.FinalModelByte(buffer, 0), buffer, 0), buffer, 0)
    this._f3 = new fbe.FinalModelVector(new fbe.FinalModelBytes(buffer, 0), buffer, 0)
    this._f4 = new fbe.FinalModelVector(new fbe.FinalModelOptional(new fbe.FinalModelBytes(buffer, 0), buffer, 0), buffer, 0)
    this._f5 = new fbe.FinalModelVector(new FinalModelEnumSimple(buffer, 0), buffer, 0)
    this._f6 = new fbe.FinalModelVector(new fbe.FinalModelOptional(new FinalModelEnumSimple(buffer, 0), buffer, 0), buffer, 0)
    this._f7 = new fbe.FinalModelVector(new FinalModelFlagsSimple(buffer, 0), buffer, 0)
    this._f8 = new fbe.FinalModelVector(new fbe.FinalModelOptional(new FinalModelFlagsSimple(buffer, 0), buffer, 0), buffer, 0)
    this._f9 = new fbe.FinalModelVector(new FinalModelStructSimple(buffer, 0), buffer, 0)
    this._f10 = new fbe.FinalModelVector(new fbe.FinalModelOptional(new FinalModelStructSimple(buffer, 0), buffer, 0), buffer, 0)
  }

  /**
   * Get the f1 final model
   * @this {!FinalModelStructList}
   * @returns {!fbe.FinalModelVector} f1 final model
   */
  get f1 () {
    return this._f1
  }

  /**
   * Get the f2 final model
   * @this {!FinalModelStructList}
   * @returns {!fbe.FinalModelVector} f2 final model
   */
  get f2 () {
    return this._f2
  }

  /**
   * Get the f3 final model
   * @this {!FinalModelStructList}
   * @returns {!fbe.FinalModelVector} f3 final model
   */
  get f3 () {
    return this._f3
  }

  /**
   * Get the f4 final model
   * @this {!FinalModelStructList}
   * @returns {!fbe.FinalModelVector} f4 final model
   */
  get f4 () {
    return this._f4
  }

  /**
   * Get the f5 final model
   * @this {!FinalModelStructList}
   * @returns {!fbe.FinalModelVector} f5 final model
   */
  get f5 () {
    return this._f5
  }

  /**
   * Get the f6 final model
   * @this {!FinalModelStructList}
   * @returns {!fbe.FinalModelVector} f6 final model
   */
  get f6 () {
    return this._f6
  }

  /**
   * Get the f7 final model
   * @this {!FinalModelStructList}
   * @returns {!fbe.FinalModelVector} f7 final model
   */
  get f7 () {
    return this._f7
  }

  /**
   * Get the f8 final model
   * @this {!FinalModelStructList}
   * @returns {!fbe.FinalModelVector} f8 final model
   */
  get f8 () {
    return this._f8
  }

  /**
   * Get the f9 final model
   * @this {!FinalModelStructList}
   * @returns {!fbe.FinalModelVector} f9 final model
   */
  get f9 () {
    return this._f9
  }

  /**
   * Get the f10 final model
   * @this {!FinalModelStructList}
   * @returns {!fbe.FinalModelVector} f10 final model
   */
  get f10 () {
    return this._f10
  }

  /**
   * Get the allocation size
   * @this {!FinalModelStructList}
   * @param {!StructList} fbeValue StructList value
   * @returns {!number} Allocation size
   */
  FBEAllocationSize (fbeValue) {
    return 0 + this.f1.FBEAllocationSize(fbeValue.f1) + this.f2.FBEAllocationSize(fbeValue.f2) + this.f3.FBEAllocationSize(fbeValue.f3) + this.f4.FBEAllocationSize(fbeValue.f4) + this.f5.FBEAllocationSize(fbeValue.f5) + this.f6.FBEAllocationSize(fbeValue.f6) + this.f7.FBEAllocationSize(fbeValue.f7) + this.f8.FBEAllocationSize(fbeValue.f8) + this.f9.FBEAllocationSize(fbeValue.f9) + this.f10.FBEAllocationSize(fbeValue.f10)
  }

  /**
   * Get the field type
   * @this {!FinalModelStructList}
   * @returns {!number} Field type
   */
  get FBEType () {
    return FinalModelStructList.FBEType
  }

  /**
   * Get the field type (static)
   * @this {!FinalModelStructList}
   * @returns {!number} Field type
   */
  static get FBEType () {
    return 131
  }

  /**
   * Check if the struct value is valid
   * @this {!FinalModelStructList}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    this._buffer.shift(this.FBEOffset)
    let fbeResult = this.verifyFields()
    this._buffer.unshift(this.FBEOffset)
    return fbeResult
  }

  /**
   * Check if the struct fields are valid
   * @this {!FinalModelStructList}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verifyFields () {
    let fbeCurrentOffset = 0
    let fbeFieldSize

    this.f1.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f2.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f2.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f3.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f3.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f4.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f4.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f5.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f5.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f6.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f6.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f7.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f7.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f8.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f8.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f9.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f9.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f10.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f10.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    return fbeCurrentOffset
  }

  /**
   * Get the struct value
   * @this {!FinalModelStructList}
   * @param {!StructList} fbeValue StructList value, defaults is new StructList()
   * @returns {!object} Result struct value and its size
   */
  get (fbeValue = new StructList()) {
    this._buffer.shift(this.FBEOffset)
    let fbeSize = this.getFields(fbeValue)
    this._buffer.unshift(this.FBEOffset)
    return { value: fbeValue, size: fbeSize }
  }

  /**
   * Get the struct fields values
   * @this {!FinalModelStructList}
   * @param {!StructList} fbeValue StructList value
   * @returns {!number} Struct size
   */
  getFields (fbeValue) {
    let fbeCurrentOffset = 0
    let fbeCurrentSize = 0
    let fbeResult

    this.f1.FBEOffset = fbeCurrentOffset
    fbeResult = this.f1.get(fbeValue.f1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f2.FBEOffset = fbeCurrentOffset
    fbeResult = this.f2.get(fbeValue.f2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f3.FBEOffset = fbeCurrentOffset
    fbeResult = this.f3.get(fbeValue.f3)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f4.FBEOffset = fbeCurrentOffset
    fbeResult = this.f4.get(fbeValue.f4)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f5.FBEOffset = fbeCurrentOffset
    fbeResult = this.f5.get(fbeValue.f5)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f6.FBEOffset = fbeCurrentOffset
    fbeResult = this.f6.get(fbeValue.f6)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f7.FBEOffset = fbeCurrentOffset
    fbeResult = this.f7.get(fbeValue.f7)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f8.FBEOffset = fbeCurrentOffset
    fbeResult = this.f8.get(fbeValue.f8)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f9.FBEOffset = fbeCurrentOffset
    fbeResult = this.f9.get(fbeValue.f9)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f10.FBEOffset = fbeCurrentOffset
    fbeResult = this.f10.get(fbeValue.f10)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    return fbeCurrentSize
  }

  /**
   * Set the struct value
   * @this {!FinalModelStructList}
   * @param {!StructList} fbeValue StructList value
   * @returns {!number} Final model size
   */
  set (fbeValue) {
    this._buffer.shift(this.FBEOffset)
    let fbeSize = this.setFields(fbeValue)
    this._buffer.unshift(this.FBEOffset)
    return fbeSize
  }

  /**
   * Set the struct fields values
   * @this {!FinalModelStructList}
   * @param {StructList} fbeValue StructList value
   * @returns {!number} Final model size
   */
  setFields (fbeValue) {
    let fbeCurrentOffset = 0
    let fbeCurrentSize = 0
    let fbeFieldSize

    this.f1.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1.set(fbeValue.f1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f2.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f2.set(fbeValue.f2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f3.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f3.set(fbeValue.f3)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f4.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f4.set(fbeValue.f4)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f5.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f5.set(fbeValue.f5)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f6.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f6.set(fbeValue.f6)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f7.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f7.set(fbeValue.f7)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f8.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f8.set(fbeValue.f8)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f9.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f9.set(fbeValue.f9)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f10.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f10.set(fbeValue.f10)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    return fbeCurrentSize
  }
}

exports.FinalModelStructList = FinalModelStructList

/**
 * Fast Binary Encoding StructList final model class
 */
class StructListFinalModel extends fbe.Model {
  /**
   * Initialize final model with the given buffer
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Read/Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer)
    this._model = new FinalModelStructList(this.buffer, 8)
  }

  /**
   * Get the model type
   * @this {!StructListFinalModel}
   * @returns {!number} Model type
   */
  get FBEType () {
    return StructListFinalModel.FBEType
  }

  /**
   * Get the model type (static)
   * @this {!StructListFinalModel}
   * @returns {!number} Model type
   */
  static get FBEType () {
    return FinalModelStructList.FBEType
  }

  /**
   * Check if the struct value is valid
   * @this {!StructListFinalModel}
   * @returns {!boolean} Model valid state
   */
  verify () {
    if ((this.buffer.offset + this._model.FBEOffset) > this.buffer.size) {
      return false
    }

    let fbeStructSize = this.readUInt32(this._model.FBEOffset - 8)
    let fbeStructType = this.readUInt32(this._model.FBEOffset - 4)
    if ((fbeStructSize <= 0) || (fbeStructType !== this.FBEType)) {
      return false
    }

    return ((8 + this._model.verify()) === fbeStructSize)
  }

  /**
   * Serialize the struct value
   * @this {!StructListFinalModel}
   * @param {!StructList} value StructList value
   * @return {!number} Struct size
   */
  serialize (value) {
    let fbeInitialSize = this.buffer.size

    let fbeStructType = this.FBEType
    let fbeStructSize = 8 + this._model.FBEAllocationSize(value)
    let fbeStructOffset = this.buffer.allocate(fbeStructSize) - this.buffer.offset
    console.assert(((this.buffer.offset + fbeStructOffset + fbeStructSize) <= this.buffer.size), 'Model is broken!')
    if ((this.buffer.offset + fbeStructOffset + fbeStructSize) > this.buffer.size) {
      return 0
    }

    fbeStructSize = 8 + this._model.set(value)
    this.buffer.resize(fbeInitialSize + fbeStructSize)

    this.writeUInt32(this._model.FBEOffset - 8, fbeStructSize)
    this.writeUInt32(this._model.FBEOffset - 4, fbeStructType)

    return fbeStructSize
  }

  /**
   * Deserialize the struct value
   * @this {!StructListFinalModel}
   * @param {!StructList} value StructList value, defaults is new StructList()
   * @return {!object} Deserialized StructList value and its size
   */
  deserialize (value = new StructList()) {
    console.assert(((this.buffer.offset + this._model.FBEOffset) <= this.buffer.size), 'Model is broken!')
    if ((this.buffer.offset + this._model.FBEOffset) > this.buffer.size) {
      return { value: new StructList(), size: 0 }
    }

    let fbeStructSize = this.readUInt32(this._model.FBEOffset - 8)
    let fbeStructType = this.readUInt32(this._model.FBEOffset - 4)
    console.assert(((fbeStructSize > 0) && (fbeStructType === this.FBEType)), 'Model is broken!')
    if ((fbeStructSize <= 0) || (fbeStructType !== this.FBEType)) {
      return { value: new StructList(), size: 8 }
    }

    let fbeResult = this._model.get(value)
    return { value: fbeResult.value, size: (8 + fbeResult.size) }
  }

  /**
   * Move to the next struct value
   * @this {!StructListFinalModel}
   * @param {!number} prev Previous StructList model size
   */
  next (prev) {
    this._model.FBEShift(prev)
  }
}

exports.StructListFinalModel = StructListFinalModel

/**
 * StructSet struct
 */
class StructSet {
  /**
   * Initialize struct
   * @param {!Set=} f1
   * @param {!Set=} f2
   * @param {!Set=} f3
   * @param {!Set=} f4
   * @constructor
   */
  constructor (f1 = new Set(), f2 = new Set(), f3 = new Set(), f4 = new Set()) {
    this.f1 = f1
    this.f2 = f2
    this.f3 = f3
    this.f4 = f4
  }

  /**
   * Copy struct
   * @this {!StructSet}
   * @param {!StructSet} other Other struct
   * @returns {!StructSet} This struct
   */
  copy (other) {
    if (other.f1 != null) {
      this.f1 = new Set()
      for (let item of other.f1) {
        if (item != null) {
          let tempItem
          tempItem = item
          this.f1.add(tempItem)
        } else {
          this.f1.add(undefined)
        }
      }
    } else {
      this.f1 = undefined
    }
    if (other.f2 != null) {
      this.f2 = new Set()
      for (let item of other.f2) {
        if (item != null) {
          let tempItem
          tempItem = EnumSimple.fromObject(item)
          this.f2.add(tempItem)
        } else {
          this.f2.add(undefined)
        }
      }
    } else {
      this.f2 = undefined
    }
    if (other.f3 != null) {
      this.f3 = new Set()
      for (let item of other.f3) {
        if (item != null) {
          let tempItem
          tempItem = FlagsSimple.fromObject(item)
          this.f3.add(tempItem)
        } else {
          this.f3.add(undefined)
        }
      }
    } else {
      this.f3 = undefined
    }
    if (other.f4 != null) {
      this.f4 = new Set()
      for (let item of other.f4) {
        if (item != null) {
          let tempItem
          tempItem = StructSimple.fromObject(item)
          this.f4.add(tempItem)
        } else {
          this.f4.add(undefined)
        }
      }
    } else {
      this.f4 = undefined
    }
    return this
  }

  /**
   * Clone struct
   * @this {!StructSet}
   * @returns {!StructSet} Cloned struct
   */
  clone () {
    // Serialize the struct to the FBE stream
    let writer = new StructSetModel(new fbe.WriteBuffer())
    writer.serialize(this)

    // Deserialize the struct from the FBE stream
    let reader = new StructSetModel(new fbe.ReadBuffer())
    reader.attachBuffer(writer.buffer)
    return reader.deserialize().value
  }

  /**
   * Is this struct equal to other one?
   * @this {!StructSet}
   * @param {!StructSet} other Other struct
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof StructSet)) {
      throw new TypeError('Instance of StructSet is required!')
    }
    return true
  }

  /**
   * Convert struct to string
   * @this {!StructSet}
   * @returns {!string} Struct value string
   */
  toString () {
    let result = ''
    result += 'StructSet('
    result += 'f1='
    if (this.f1 != null) {
      let first = true
      result += '['
      result += this.f1.size
      result += ']{'
      for (let item of this.f1) {
        result += first ? '' : ','
        result += item.toString()
        first = false
      }
      result += '}'
    }
    result += ',f2='
    if (this.f2 != null) {
      let first = true
      result += '['
      result += this.f2.size
      result += ']{'
      for (let item of this.f2) {
        result += first ? '' : ','
        result += item.toString()
        first = false
      }
      result += '}'
    }
    result += ',f3='
    if (this.f3 != null) {
      let first = true
      result += '['
      result += this.f3.size
      result += ']{'
      for (let item of this.f3) {
        result += first ? '' : ','
        result += item.toString()
        first = false
      }
      result += '}'
    }
    result += ',f4='
    if (this.f4 != null) {
      let first = true
      result += '['
      result += this.f4.size
      result += ']{'
      for (let item of this.f4) {
        result += first ? '' : ','
        result += item.toString()
        first = false
      }
      result += '}'
    }
    result += ')'
    return result
  }

  /**
   * Inspect struct
   * @this {!StructSet}
   * @returns {!string} Struct value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert struct to JSON
   * @this {!StructSet}
   * @returns {!object} Struct value for JSON
   */
  toJSON () {
    return {
      f1: ((this.f1 != null) ? Array.from(this.f1, item => ((item != null) ? item : null)) : null),
      f2: ((this.f2 != null) ? Array.from(this.f2, item => ((item != null) ? item : null)) : null),
      f3: ((this.f3 != null) ? Array.from(this.f3, item => ((item != null) ? item : null)) : null),
      f4: ((this.f4 != null) ? Array.from(this.f4, item => ((item != null) ? item : null)) : null)
    }
  }

  /**
   * Convert JSON to struct
   * @param {!string} json JSON string
   * @returns {!object} Struct value for JSON
   */
  static fromJSON (json) {
    return StructSet.fromObject(JSON.parse(json))
  }

  /**
   * Create struct from object value
   * @param {!StructSet} other Object value
   * @returns {!StructSet} Created struct
   */
  static fromObject (other) {
    return new StructSet().copy(other)
  }
}

exports.StructSet = StructSet

/**
 * Fast Binary Encoding StructSet field model class
 */
class FieldModelStructSet extends fbe.FieldModel {
  /**
   * Initialize field model with the given buffer and offset
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Buffer
   * @param {!number} offset Offset
   * @constructor
   */
  constructor (buffer, offset) {
    super(buffer, offset)
    this._f1 = new fbe.FieldModelSet(new fbe.FieldModelByte(buffer, 4 + 4), buffer, 4 + 4)
    this._f2 = new fbe.FieldModelSet(new FieldModelEnumSimple(buffer, this._f1.FBEOffset + this._f1.FBESize), buffer, this._f1.FBEOffset + this._f1.FBESize)
    this._f3 = new fbe.FieldModelSet(new FieldModelFlagsSimple(buffer, this._f2.FBEOffset + this._f2.FBESize), buffer, this._f2.FBEOffset + this._f2.FBESize)
    this._f4 = new fbe.FieldModelSet(new FieldModelStructSimple(buffer, this._f3.FBEOffset + this._f3.FBESize), buffer, this._f3.FBEOffset + this._f3.FBESize)
  }

  /**
   * Get the f1 field model
   * @this {!FieldModelStructSet}
   * @returns {!fbe.FieldModelSet} f1 field model
   */
  get f1 () {
    return this._f1
  }

  /**
   * Get the f2 field model
   * @this {!FieldModelStructSet}
   * @returns {!fbe.FieldModelSet} f2 field model
   */
  get f2 () {
    return this._f2
  }

  /**
   * Get the f3 field model
   * @this {!FieldModelStructSet}
   * @returns {!fbe.FieldModelSet} f3 field model
   */
  get f3 () {
    return this._f3
  }

  /**
   * Get the f4 field model
   * @this {!FieldModelStructSet}
   * @returns {!fbe.FieldModelSet} f4 field model
   */
  get f4 () {
    return this._f4
  }

  /**
   * Get the field size
   * @this {!FieldModelStructSet}
   * @returns {!number} Field size
   */
  get FBESize () {
    return 4
  }

  /**
   * Get the field body size
   * @this {!FieldModelStructSet}
   * @returns {!number} Field body size
   */
  get FBEBody () {
    return 4 + 4 + this.f1.FBESize + this.f2.FBESize + this.f3.FBESize + this.f4.FBESize
  }

  /**
   * Get the field extra size
   * @this {!FieldModelStructSet}
   * @returns {!number} Field extra size
   */
  get FBEExtra () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4) > this._buffer.size)) {
      return 0
    }

    this._buffer.shift(fbeStructOffset)

    let fbeResult = this.FBEBody + this.f1.FBEExtra + this.f2.FBEExtra + this.f3.FBEExtra + this.f4.FBEExtra

    this._buffer.unshift(fbeStructOffset)

    return fbeResult
  }

  /**
   * Get the field type
   * @this {!FieldModelStructSet}
   * @returns {!number} Field type
   */
  get FBEType () {
    return FieldModelStructSet.FBEType
  }

  /**
   * Get the field type (static)
   * @this {!FieldModelStructSet}
   * @returns {!number} Field type
   */
  static get FBEType () {
    return 132
  }

  /**
   * Check if the struct value is valid
   * @this {!FieldModelStructSet}
   * @param {!boolean} fbeVerifyType Verify model type flag, defaults is true
   * @returns {!boolean} Field model valid state
   */
  verify (fbeVerifyType = true) {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return true
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4 + 4) > this._buffer.size)) {
      return false
    }

    let fbeStructSize = this.readUInt32(fbeStructOffset)
    if (fbeStructSize < 4 + 4) {
      return false
    }

    let fbeStructType = this.readUInt32(fbeStructOffset + 4)
    if (fbeVerifyType && (fbeStructType !== this.FBEType)) {
      return false
    }

    this._buffer.shift(fbeStructOffset)
    let fbeResult = this.verifyFields(fbeStructSize)
    this._buffer.unshift(fbeStructOffset)
    return fbeResult
  }

  /**
   * Check if the struct fields are valid
   * @this {!FieldModelStructSet}
   * @param {!number} fbeStructSize FBE struct size
   * @returns {!boolean} Field model valid state
   */
  verifyFields (fbeStructSize) {
    let fbeCurrentSize = 4 + 4

    if ((fbeCurrentSize + this.f1.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f1.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1.FBESize

    if ((fbeCurrentSize + this.f2.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f2.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f2.FBESize

    if ((fbeCurrentSize + this.f3.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f3.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f3.FBESize

    if ((fbeCurrentSize + this.f4.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f4.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f4.FBESize

    return true
  }

  /**
   * Get the struct value (begin phase)
   * @this {!FieldModelStructSet}
   * @returns {!number} Field model begin offset
   */
  getBegin () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    console.assert((fbeStructOffset > 0) && ((this._buffer.offset + fbeStructOffset + 4 + 4) <= this._buffer.size), 'Model is broken!')
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4 + 4) > this._buffer.size)) {
      return 0
    }

    let fbeStructSize = this.readUInt32(fbeStructOffset)
    console.assert((fbeStructSize >= 4 + 4), 'Model is broken!')
    if (fbeStructSize < 4 + 4) {
      return 0
    }

    this._buffer.shift(fbeStructOffset)
    return fbeStructOffset
  }

  /**
   * Get the struct value (end phase)
   * @this {!FieldModelStructSet}
   * @param {!number} fbeBegin Field model begin offset
   */
  getEnd (fbeBegin) {
    this._buffer.unshift(fbeBegin)
  }

  /**
   * Get the struct value
   * @this {!FieldModelStructSet}
   * @param {!StructSet} fbeValue Default value, defaults is new StructSet()
   * @returns {!StructSet} StructSet value
   */
  get (fbeValue = new StructSet()) {
    let fbeBegin = this.getBegin()
    if (fbeBegin === 0) {
      return fbeValue
    }

    let fbeStructSize = this.readUInt32(0)
    this.getFields(fbeValue, fbeStructSize)
    this.getEnd(fbeBegin)
    return fbeValue
  }

  /**
   * Get the struct fields values
   * @this {!FieldModelStructSet}
   * @param {!StructSet} fbeValue StructSet value
   * @param {!number} fbeStructSize Struct size
   */
  getFields (fbeValue, fbeStructSize) {
    let fbeCurrentSize = 4 + 4

    if ((fbeCurrentSize + this.f1.FBESize) <= fbeStructSize) {
      this.f1.get(fbeValue.f1)
    } else {
      fbeValue.f1.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1.FBESize

    if ((fbeCurrentSize + this.f2.FBESize) <= fbeStructSize) {
      this.f2.get(fbeValue.f2)
    } else {
      fbeValue.f2.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f2.FBESize

    if ((fbeCurrentSize + this.f3.FBESize) <= fbeStructSize) {
      this.f3.get(fbeValue.f3)
    } else {
      fbeValue.f3.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f3.FBESize

    if ((fbeCurrentSize + this.f4.FBESize) <= fbeStructSize) {
      this.f4.get(fbeValue.f4)
    } else {
      fbeValue.f4.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f4.FBESize
  }

  /**
   * Set the struct value (begin phase)
   * @this {!FieldModelStructSet}
   * @returns {!number} Field model begin offset
   */
  setBegin () {
    console.assert(((this._buffer.offset + this.FBEOffset + this.FBESize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructSize = this.FBEBody
    let fbeStructOffset = this._buffer.allocate(fbeStructSize) - this._buffer.offset
    console.assert((fbeStructOffset > 0) && ((this._buffer.offset + fbeStructOffset + fbeStructSize) <= this._buffer.size), 'Model is broken!')
    if ((fbeStructOffset <= 0) || ((this._buffer.offset + fbeStructOffset + fbeStructSize) > this._buffer.size)) {
      return 0
    }

    this.writeUInt32(this.FBEOffset, fbeStructOffset)
    this.writeUInt32(fbeStructOffset, fbeStructSize)
    this.writeUInt32(fbeStructOffset + 4, this.FBEType)

    this._buffer.shift(fbeStructOffset)
    return fbeStructOffset
  }

  /**
   * Set the struct value (end phase)
   * @this {!FieldModelStructSet}
   * @param {!number} fbeBegin Field model begin offset
   */
  setEnd (fbeBegin) {
    this._buffer.unshift(fbeBegin)
  }

  /**
   * Set the struct value
   * @this {!FieldModelStructSet}
   * @param {!StructSet} fbeValue StructSet value
   */
  set (fbeValue) {
    let fbeBegin = this.setBegin()
    if (fbeBegin === 0) {
      return
    }

    this.setFields(fbeValue)
    this.setEnd(fbeBegin)
  }

  /**
   * Set the struct fields values
   * @this {!FieldModelStructSet}
   * @param {StructSet} fbeValue StructSet value
   */
  setFields (fbeValue) {
    this.f1.set(fbeValue.f1)
    this.f2.set(fbeValue.f2)
    this.f3.set(fbeValue.f3)
    this.f4.set(fbeValue.f4)
  }
}

exports.FieldModelStructSet = FieldModelStructSet

/**
 * Fast Binary Encoding StructSet model class
 */
class StructSetModel extends fbe.Model {
  /**
   * Initialize model with the given buffer
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Read/Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer)
    this._model = new FieldModelStructSet(this.buffer, 4)
  }

  /**
   * Get the StructSet model
   * @this {!StructSetModel}
   * @returns {!FieldModelStructSet} model StructSet model
   */
  get model () {
    return this._model
  }

  /**
   * Get the model size
   * @this {!StructSetModel}
   * @returns {!number} Model size
   */
  get FBESize () {
    return this.model.FBESize + this.model.FBEExtra
  }

  /**
   * Get the model type
   * @this {!StructSetModel}
   * @returns {!number} Model type
   */
  get FBEType () {
    return StructSetModel.FBEType
  }

  /**
   * Get the model type (static)
   * @this {!StructSetModel}
   * @returns {!number} Model type
   */
  static get FBEType () {
    return FieldModelStructSet.FBEType
  }

  /**
   * Check if the struct value is valid
   * @this {!StructSetModel}
   * @returns {!boolean} Model valid state
   */
  verify () {
    if ((this.buffer.offset + this.model.FBEOffset - 4) > this.buffer.size) {
      return false
    }

    let fbeFullSize = this.readUInt32(this.model.FBEOffset - 4)
    if (fbeFullSize < this.model.FBESize) {
      return false
    }

    return this.model.verify()
  }

  /**
   * Create a new model (begin phase)
   * @this {!StructSetModel}
   * @returns {!number} Model begin offset
   */
  createBegin () {
    return this.buffer.allocate(4 + this.model.FBESize)
  }

  /**
   * Create a new model (end phase)
   * @this {!StructSetModel}
   * @param {!number} fbeBegin Model begin offset
   */
  createEnd (fbeBegin) {
    let fbeEnd = this.buffer.size
    let fbeFullSize = fbeEnd - fbeBegin
    this.writeUInt32(this.model.FBEOffset - 4, fbeFullSize)
    return fbeFullSize
  }

  /**
   * Serialize the struct value
   * @this {!StructSetModel}
   * @param {!StructSet} value StructSet value
   * @return {!number} Model begin offset
   */
  serialize (value) {
    let fbeBegin = this.createBegin()
    this.model.set(value)
    return this.createEnd(fbeBegin)
  }

  /**
   * Deserialize the struct value
   * @this {!StructSetModel}
   * @param {!StructSet} value StructSet value, defaults is new StructSet()
   * @return {!object} Deserialized StructSet value and its size
   */
  deserialize (value = new StructSet()) {
    if ((this.buffer.offset + this.model.FBEOffset - 4) > this.buffer.size) {
      return { value: new StructSet(), size: 0 }
    }

    let fbeFullSize = this.readUInt32(this.model.FBEOffset - 4)
    console.assert((fbeFullSize >= this.model.FBESize), 'Model is broken!')
    if (fbeFullSize < this.model.FBESize) {
      return { value: new StructSet(), size: 0 }
    }

    this.model.get(value)
    return { value: value, size: fbeFullSize }
  }

  /**
   * Move to the next struct value
   * @this {!StructSetModel}
   * @param {!number} prev Previous StructSet model size
   */
  next (prev) {
    this.model.FBEShift(prev)
  }
}

exports.StructSetModel = StructSetModel

/**
 * Fast Binary Encoding StructSet final model class
 */
class FinalModelStructSet extends fbe.FinalModel {
  /**
   * Initialize final model with the given buffer and offset
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Buffer
   * @param {!number} offset Offset
   * @constructor
   */
  constructor (buffer, offset) {
    super(buffer, offset)
    this._f1 = new fbe.FinalModelSet(new fbe.FinalModelByte(buffer, 0), buffer, 0)
    this._f2 = new fbe.FinalModelSet(new FinalModelEnumSimple(buffer, 0), buffer, 0)
    this._f3 = new fbe.FinalModelSet(new FinalModelFlagsSimple(buffer, 0), buffer, 0)
    this._f4 = new fbe.FinalModelSet(new FinalModelStructSimple(buffer, 0), buffer, 0)
  }

  /**
   * Get the f1 final model
   * @this {!FinalModelStructSet}
   * @returns {!fbe.FinalModelSet} f1 final model
   */
  get f1 () {
    return this._f1
  }

  /**
   * Get the f2 final model
   * @this {!FinalModelStructSet}
   * @returns {!fbe.FinalModelSet} f2 final model
   */
  get f2 () {
    return this._f2
  }

  /**
   * Get the f3 final model
   * @this {!FinalModelStructSet}
   * @returns {!fbe.FinalModelSet} f3 final model
   */
  get f3 () {
    return this._f3
  }

  /**
   * Get the f4 final model
   * @this {!FinalModelStructSet}
   * @returns {!fbe.FinalModelSet} f4 final model
   */
  get f4 () {
    return this._f4
  }

  /**
   * Get the allocation size
   * @this {!FinalModelStructSet}
   * @param {!StructSet} fbeValue StructSet value
   * @returns {!number} Allocation size
   */
  FBEAllocationSize (fbeValue) {
    return 0 + this.f1.FBEAllocationSize(fbeValue.f1) + this.f2.FBEAllocationSize(fbeValue.f2) + this.f3.FBEAllocationSize(fbeValue.f3) + this.f4.FBEAllocationSize(fbeValue.f4)
  }

  /**
   * Get the field type
   * @this {!FinalModelStructSet}
   * @returns {!number} Field type
   */
  get FBEType () {
    return FinalModelStructSet.FBEType
  }

  /**
   * Get the field type (static)
   * @this {!FinalModelStructSet}
   * @returns {!number} Field type
   */
  static get FBEType () {
    return 132
  }

  /**
   * Check if the struct value is valid
   * @this {!FinalModelStructSet}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    this._buffer.shift(this.FBEOffset)
    let fbeResult = this.verifyFields()
    this._buffer.unshift(this.FBEOffset)
    return fbeResult
  }

  /**
   * Check if the struct fields are valid
   * @this {!FinalModelStructSet}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verifyFields () {
    let fbeCurrentOffset = 0
    let fbeFieldSize

    this.f1.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f2.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f2.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f3.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f3.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f4.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f4.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    return fbeCurrentOffset
  }

  /**
   * Get the struct value
   * @this {!FinalModelStructSet}
   * @param {!StructSet} fbeValue StructSet value, defaults is new StructSet()
   * @returns {!object} Result struct value and its size
   */
  get (fbeValue = new StructSet()) {
    this._buffer.shift(this.FBEOffset)
    let fbeSize = this.getFields(fbeValue)
    this._buffer.unshift(this.FBEOffset)
    return { value: fbeValue, size: fbeSize }
  }

  /**
   * Get the struct fields values
   * @this {!FinalModelStructSet}
   * @param {!StructSet} fbeValue StructSet value
   * @returns {!number} Struct size
   */
  getFields (fbeValue) {
    let fbeCurrentOffset = 0
    let fbeCurrentSize = 0
    let fbeResult

    this.f1.FBEOffset = fbeCurrentOffset
    fbeResult = this.f1.get(fbeValue.f1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f2.FBEOffset = fbeCurrentOffset
    fbeResult = this.f2.get(fbeValue.f2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f3.FBEOffset = fbeCurrentOffset
    fbeResult = this.f3.get(fbeValue.f3)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f4.FBEOffset = fbeCurrentOffset
    fbeResult = this.f4.get(fbeValue.f4)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    return fbeCurrentSize
  }

  /**
   * Set the struct value
   * @this {!FinalModelStructSet}
   * @param {!StructSet} fbeValue StructSet value
   * @returns {!number} Final model size
   */
  set (fbeValue) {
    this._buffer.shift(this.FBEOffset)
    let fbeSize = this.setFields(fbeValue)
    this._buffer.unshift(this.FBEOffset)
    return fbeSize
  }

  /**
   * Set the struct fields values
   * @this {!FinalModelStructSet}
   * @param {StructSet} fbeValue StructSet value
   * @returns {!number} Final model size
   */
  setFields (fbeValue) {
    let fbeCurrentOffset = 0
    let fbeCurrentSize = 0
    let fbeFieldSize

    this.f1.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1.set(fbeValue.f1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f2.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f2.set(fbeValue.f2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f3.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f3.set(fbeValue.f3)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f4.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f4.set(fbeValue.f4)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    return fbeCurrentSize
  }
}

exports.FinalModelStructSet = FinalModelStructSet

/**
 * Fast Binary Encoding StructSet final model class
 */
class StructSetFinalModel extends fbe.Model {
  /**
   * Initialize final model with the given buffer
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Read/Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer)
    this._model = new FinalModelStructSet(this.buffer, 8)
  }

  /**
   * Get the model type
   * @this {!StructSetFinalModel}
   * @returns {!number} Model type
   */
  get FBEType () {
    return StructSetFinalModel.FBEType
  }

  /**
   * Get the model type (static)
   * @this {!StructSetFinalModel}
   * @returns {!number} Model type
   */
  static get FBEType () {
    return FinalModelStructSet.FBEType
  }

  /**
   * Check if the struct value is valid
   * @this {!StructSetFinalModel}
   * @returns {!boolean} Model valid state
   */
  verify () {
    if ((this.buffer.offset + this._model.FBEOffset) > this.buffer.size) {
      return false
    }

    let fbeStructSize = this.readUInt32(this._model.FBEOffset - 8)
    let fbeStructType = this.readUInt32(this._model.FBEOffset - 4)
    if ((fbeStructSize <= 0) || (fbeStructType !== this.FBEType)) {
      return false
    }

    return ((8 + this._model.verify()) === fbeStructSize)
  }

  /**
   * Serialize the struct value
   * @this {!StructSetFinalModel}
   * @param {!StructSet} value StructSet value
   * @return {!number} Struct size
   */
  serialize (value) {
    let fbeInitialSize = this.buffer.size

    let fbeStructType = this.FBEType
    let fbeStructSize = 8 + this._model.FBEAllocationSize(value)
    let fbeStructOffset = this.buffer.allocate(fbeStructSize) - this.buffer.offset
    console.assert(((this.buffer.offset + fbeStructOffset + fbeStructSize) <= this.buffer.size), 'Model is broken!')
    if ((this.buffer.offset + fbeStructOffset + fbeStructSize) > this.buffer.size) {
      return 0
    }

    fbeStructSize = 8 + this._model.set(value)
    this.buffer.resize(fbeInitialSize + fbeStructSize)

    this.writeUInt32(this._model.FBEOffset - 8, fbeStructSize)
    this.writeUInt32(this._model.FBEOffset - 4, fbeStructType)

    return fbeStructSize
  }

  /**
   * Deserialize the struct value
   * @this {!StructSetFinalModel}
   * @param {!StructSet} value StructSet value, defaults is new StructSet()
   * @return {!object} Deserialized StructSet value and its size
   */
  deserialize (value = new StructSet()) {
    console.assert(((this.buffer.offset + this._model.FBEOffset) <= this.buffer.size), 'Model is broken!')
    if ((this.buffer.offset + this._model.FBEOffset) > this.buffer.size) {
      return { value: new StructSet(), size: 0 }
    }

    let fbeStructSize = this.readUInt32(this._model.FBEOffset - 8)
    let fbeStructType = this.readUInt32(this._model.FBEOffset - 4)
    console.assert(((fbeStructSize > 0) && (fbeStructType === this.FBEType)), 'Model is broken!')
    if ((fbeStructSize <= 0) || (fbeStructType !== this.FBEType)) {
      return { value: new StructSet(), size: 8 }
    }

    let fbeResult = this._model.get(value)
    return { value: fbeResult.value, size: (8 + fbeResult.size) }
  }

  /**
   * Move to the next struct value
   * @this {!StructSetFinalModel}
   * @param {!number} prev Previous StructSet model size
   */
  next (prev) {
    this._model.FBEShift(prev)
  }
}

exports.StructSetFinalModel = StructSetFinalModel

/**
 * StructMap struct
 */
class StructMap {
  /**
   * Initialize struct
   * @param {!Map=} f1
   * @param {Map=} f2
   * @param {!Map=} f3
   * @param {Map=} f4
   * @param {!Map=} f5
   * @param {Map=} f6
   * @param {!Map=} f7
   * @param {Map=} f8
   * @param {!Map=} f9
   * @param {Map=} f10
   * @constructor
   */
  constructor (f1 = new Map(), f2 = new Map(), f3 = new Map(), f4 = new Map(), f5 = new Map(), f6 = new Map(), f7 = new Map(), f8 = new Map(), f9 = new Map(), f10 = new Map()) {
    this.f1 = f1
    this.f2 = f2
    this.f3 = f3
    this.f4 = f4
    this.f5 = f5
    this.f6 = f6
    this.f7 = f7
    this.f8 = f8
    this.f9 = f9
    this.f10 = f10
  }

  /**
   * Copy struct
   * @this {!StructMap}
   * @param {!StructMap} other Other struct
   * @returns {!StructMap} This struct
   */
  copy (other) {
    if (other.f1 != null) {
      this.f1 = new Map()
      Object.keys(other.f1).forEach(key => {
        if (key != null) {
          let tempKey
          tempKey = key
          if (other.f1[key] != null) {
            let tempValue
            tempValue = other.f1[key]
            this.f1.set(tempKey, tempValue)
          } else {
            this.f1.set(tempKey, undefined)
          }
        }
      })
    } else {
      this.f1 = undefined
    }
    if (other.f2 != null) {
      this.f2 = new Map()
      Object.keys(other.f2).forEach(key => {
        if (key != null) {
          let tempKey
          tempKey = key
          if (other.f2[key] != null) {
            let tempValue
            tempValue = other.f2[key]
            this.f2.set(tempKey, tempValue)
          } else {
            this.f2.set(tempKey, undefined)
          }
        }
      })
    } else {
      this.f2 = undefined
    }
    if (other.f3 != null) {
      this.f3 = new Map()
      Object.keys(other.f3).forEach(key => {
        if (key != null) {
          let tempKey
          tempKey = key
          if (other.f3[key] != null) {
            let tempValue
            if (typeof other.f3[key] === 'string') {
              // noinspection JSUnresolvedFunction
              tempValue = Uint8Array.from(Buffer.from(other.f3[key], 'base64'))
            } else {
              tempValue = Uint8Array.from(other.f3[key])
            }
            this.f3.set(tempKey, tempValue)
          } else {
            this.f3.set(tempKey, undefined)
          }
        }
      })
    } else {
      this.f3 = undefined
    }
    if (other.f4 != null) {
      this.f4 = new Map()
      Object.keys(other.f4).forEach(key => {
        if (key != null) {
          let tempKey
          tempKey = key
          if (other.f4[key] != null) {
            let tempValue
            if (typeof other.f4[key] === 'string') {
              // noinspection JSUnresolvedFunction
              tempValue = Uint8Array.from(Buffer.from(other.f4[key], 'base64'))
            } else {
              tempValue = Uint8Array.from(other.f4[key])
            }
            this.f4.set(tempKey, tempValue)
          } else {
            this.f4.set(tempKey, undefined)
          }
        }
      })
    } else {
      this.f4 = undefined
    }
    if (other.f5 != null) {
      this.f5 = new Map()
      Object.keys(other.f5).forEach(key => {
        if (key != null) {
          let tempKey
          tempKey = key
          if (other.f5[key] != null) {
            let tempValue
            tempValue = EnumSimple.fromObject(other.f5[key])
            this.f5.set(tempKey, tempValue)
          } else {
            this.f5.set(tempKey, undefined)
          }
        }
      })
    } else {
      this.f5 = undefined
    }
    if (other.f6 != null) {
      this.f6 = new Map()
      Object.keys(other.f6).forEach(key => {
        if (key != null) {
          let tempKey
          tempKey = key
          if (other.f6[key] != null) {
            let tempValue
            tempValue = EnumSimple.fromObject(other.f6[key])
            this.f6.set(tempKey, tempValue)
          } else {
            this.f6.set(tempKey, undefined)
          }
        }
      })
    } else {
      this.f6 = undefined
    }
    if (other.f7 != null) {
      this.f7 = new Map()
      Object.keys(other.f7).forEach(key => {
        if (key != null) {
          let tempKey
          tempKey = key
          if (other.f7[key] != null) {
            let tempValue
            tempValue = FlagsSimple.fromObject(other.f7[key])
            this.f7.set(tempKey, tempValue)
          } else {
            this.f7.set(tempKey, undefined)
          }
        }
      })
    } else {
      this.f7 = undefined
    }
    if (other.f8 != null) {
      this.f8 = new Map()
      Object.keys(other.f8).forEach(key => {
        if (key != null) {
          let tempKey
          tempKey = key
          if (other.f8[key] != null) {
            let tempValue
            tempValue = FlagsSimple.fromObject(other.f8[key])
            this.f8.set(tempKey, tempValue)
          } else {
            this.f8.set(tempKey, undefined)
          }
        }
      })
    } else {
      this.f8 = undefined
    }
    if (other.f9 != null) {
      this.f9 = new Map()
      Object.keys(other.f9).forEach(key => {
        if (key != null) {
          let tempKey
          tempKey = key
          if (other.f9[key] != null) {
            let tempValue
            tempValue = StructSimple.fromObject(other.f9[key])
            this.f9.set(tempKey, tempValue)
          } else {
            this.f9.set(tempKey, undefined)
          }
        }
      })
    } else {
      this.f9 = undefined
    }
    if (other.f10 != null) {
      this.f10 = new Map()
      Object.keys(other.f10).forEach(key => {
        if (key != null) {
          let tempKey
          tempKey = key
          if (other.f10[key] != null) {
            let tempValue
            tempValue = StructSimple.fromObject(other.f10[key])
            this.f10.set(tempKey, tempValue)
          } else {
            this.f10.set(tempKey, undefined)
          }
        }
      })
    } else {
      this.f10 = undefined
    }
    return this
  }

  /**
   * Clone struct
   * @this {!StructMap}
   * @returns {!StructMap} Cloned struct
   */
  clone () {
    // Serialize the struct to the FBE stream
    let writer = new StructMapModel(new fbe.WriteBuffer())
    writer.serialize(this)

    // Deserialize the struct from the FBE stream
    let reader = new StructMapModel(new fbe.ReadBuffer())
    reader.attachBuffer(writer.buffer)
    return reader.deserialize().value
  }

  /**
   * Is this struct equal to other one?
   * @this {!StructMap}
   * @param {!StructMap} other Other struct
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof StructMap)) {
      throw new TypeError('Instance of StructMap is required!')
    }
    return true
  }

  /**
   * Convert struct to string
   * @this {!StructMap}
   * @returns {!string} Struct value string
   */
  toString () {
    let result = ''
    result += 'StructMap('
    result += 'f1='
    if (this.f1 != null) {
      let first = true
      result += '['
      result += this.f1.size
      result += ']<{'
      for (let [key, value] of this.f1) {
        result += first ? '' : ','
        result += key.toString()
        result += '->'
        result += first ? '' : ','
        result += value.toString()
        first = false
      }
      result += '}>'
    }
    result += ',f2='
    if (this.f2 != null) {
      let first = true
      result += '['
      result += this.f2.size
      result += ']<{'
      for (let [key, value] of this.f2) {
        result += first ? '' : ','
        result += key.toString()
        result += '->'
        if (value != null) {
          result += first ? '' : ','
          result += value.toString()
        } else {
          result += 'null'
        }
        first = false
      }
      result += '}>'
    }
    result += ',f3='
    if (this.f3 != null) {
      let first = true
      result += '['
      result += this.f3.size
      result += ']<{'
      for (let [key, value] of this.f3) {
        result += first ? '' : ','
        result += key.toString()
        result += '->'
        if (value != null) {
          result += first ? '' : ','
          result += 'bytes['
          result += value.length
          result += ']'
        } else {
          result += 'null'
        }
        first = false
      }
      result += '}>'
    }
    result += ',f4='
    if (this.f4 != null) {
      let first = true
      result += '['
      result += this.f4.size
      result += ']<{'
      for (let [key, value] of this.f4) {
        result += first ? '' : ','
        result += key.toString()
        result += '->'
        if (value != null) {
          result += first ? '' : ','
          result += 'bytes['
          result += value.length
          result += ']'
        } else {
          result += 'null'
        }
        first = false
      }
      result += '}>'
    }
    result += ',f5='
    if (this.f5 != null) {
      let first = true
      result += '['
      result += this.f5.size
      result += ']<{'
      for (let [key, value] of this.f5) {
        result += first ? '' : ','
        result += key.toString()
        result += '->'
        result += first ? '' : ','
        result += value.toString()
        first = false
      }
      result += '}>'
    }
    result += ',f6='
    if (this.f6 != null) {
      let first = true
      result += '['
      result += this.f6.size
      result += ']<{'
      for (let [key, value] of this.f6) {
        result += first ? '' : ','
        result += key.toString()
        result += '->'
        if (value != null) {
          result += first ? '' : ','
          result += value.toString()
        } else {
          result += 'null'
        }
        first = false
      }
      result += '}>'
    }
    result += ',f7='
    if (this.f7 != null) {
      let first = true
      result += '['
      result += this.f7.size
      result += ']<{'
      for (let [key, value] of this.f7) {
        result += first ? '' : ','
        result += key.toString()
        result += '->'
        result += first ? '' : ','
        result += value.toString()
        first = false
      }
      result += '}>'
    }
    result += ',f8='
    if (this.f8 != null) {
      let first = true
      result += '['
      result += this.f8.size
      result += ']<{'
      for (let [key, value] of this.f8) {
        result += first ? '' : ','
        result += key.toString()
        result += '->'
        if (value != null) {
          result += first ? '' : ','
          result += value.toString()
        } else {
          result += 'null'
        }
        first = false
      }
      result += '}>'
    }
    result += ',f9='
    if (this.f9 != null) {
      let first = true
      result += '['
      result += this.f9.size
      result += ']<{'
      for (let [key, value] of this.f9) {
        result += first ? '' : ','
        result += key.toString()
        result += '->'
        result += first ? '' : ','
        result += value.toString()
        first = false
      }
      result += '}>'
    }
    result += ',f10='
    if (this.f10 != null) {
      let first = true
      result += '['
      result += this.f10.size
      result += ']<{'
      for (let [key, value] of this.f10) {
        result += first ? '' : ','
        result += key.toString()
        result += '->'
        if (value != null) {
          result += first ? '' : ','
          result += value.toString()
        } else {
          result += 'null'
        }
        first = false
      }
      result += '}>'
    }
    result += ')'
    return result
  }

  /**
   * Inspect struct
   * @this {!StructMap}
   * @returns {!string} Struct value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert struct to JSON
   * @this {!StructMap}
   * @returns {!object} Struct value for JSON
   */
  toJSON () {
    return {
      f1: ((this.f1 != null) ? fbe.MapToObject(new Map(Array.from(this.f1, item => [((item[0] != null) ? item[0] : null), ((item[1] != null) ? item[1] : null)]))) : null),
      f2: ((this.f2 != null) ? fbe.MapToObject(new Map(Array.from(this.f2, item => [((item[0] != null) ? item[0] : null), ((item[1] != null) ? item[1] : null)]))) : null),
      f3: ((this.f3 != null) ? fbe.MapToObject(new Map(Array.from(this.f3, item => [((item[0] != null) ? item[0] : null), ((item[1] != null) ? Buffer.from(item[1]).toString('base64') : null)]))) : null),
      f4: ((this.f4 != null) ? fbe.MapToObject(new Map(Array.from(this.f4, item => [((item[0] != null) ? item[0] : null), ((item[1] != null) ? Buffer.from(item[1]).toString('base64') : null)]))) : null),
      f5: ((this.f5 != null) ? fbe.MapToObject(new Map(Array.from(this.f5, item => [((item[0] != null) ? item[0] : null), ((item[1] != null) ? item[1] : null)]))) : null),
      f6: ((this.f6 != null) ? fbe.MapToObject(new Map(Array.from(this.f6, item => [((item[0] != null) ? item[0] : null), ((item[1] != null) ? item[1] : null)]))) : null),
      f7: ((this.f7 != null) ? fbe.MapToObject(new Map(Array.from(this.f7, item => [((item[0] != null) ? item[0] : null), ((item[1] != null) ? item[1] : null)]))) : null),
      f8: ((this.f8 != null) ? fbe.MapToObject(new Map(Array.from(this.f8, item => [((item[0] != null) ? item[0] : null), ((item[1] != null) ? item[1] : null)]))) : null),
      f9: ((this.f9 != null) ? fbe.MapToObject(new Map(Array.from(this.f9, item => [((item[0] != null) ? item[0] : null), ((item[1] != null) ? item[1] : null)]))) : null),
      f10: ((this.f10 != null) ? fbe.MapToObject(new Map(Array.from(this.f10, item => [((item[0] != null) ? item[0] : null), ((item[1] != null) ? item[1] : null)]))) : null)
    }
  }

  /**
   * Convert JSON to struct
   * @param {!string} json JSON string
   * @returns {!object} Struct value for JSON
   */
  static fromJSON (json) {
    return StructMap.fromObject(JSON.parse(json))
  }

  /**
   * Create struct from object value
   * @param {!StructMap} other Object value
   * @returns {!StructMap} Created struct
   */
  static fromObject (other) {
    return new StructMap().copy(other)
  }
}

exports.StructMap = StructMap

/**
 * Fast Binary Encoding StructMap field model class
 */
class FieldModelStructMap extends fbe.FieldModel {
  /**
   * Initialize field model with the given buffer and offset
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Buffer
   * @param {!number} offset Offset
   * @constructor
   */
  constructor (buffer, offset) {
    super(buffer, offset)
    this._f1 = new fbe.FieldModelMap(new fbe.FieldModelInt32(buffer, 4 + 4), new fbe.FieldModelByte(buffer, 4 + 4), buffer, 4 + 4)
    this._f2 = new fbe.FieldModelMap(new fbe.FieldModelInt32(buffer, this._f1.FBEOffset + this._f1.FBESize), new fbe.FieldModelOptional(new fbe.FieldModelByte(buffer, this._f1.FBEOffset + this._f1.FBESize), buffer, this._f1.FBEOffset + this._f1.FBESize), buffer, this._f1.FBEOffset + this._f1.FBESize)
    this._f3 = new fbe.FieldModelMap(new fbe.FieldModelInt32(buffer, this._f2.FBEOffset + this._f2.FBESize), new fbe.FieldModelBytes(buffer, this._f2.FBEOffset + this._f2.FBESize), buffer, this._f2.FBEOffset + this._f2.FBESize)
    this._f4 = new fbe.FieldModelMap(new fbe.FieldModelInt32(buffer, this._f3.FBEOffset + this._f3.FBESize), new fbe.FieldModelOptional(new fbe.FieldModelBytes(buffer, this._f3.FBEOffset + this._f3.FBESize), buffer, this._f3.FBEOffset + this._f3.FBESize), buffer, this._f3.FBEOffset + this._f3.FBESize)
    this._f5 = new fbe.FieldModelMap(new fbe.FieldModelInt32(buffer, this._f4.FBEOffset + this._f4.FBESize), new FieldModelEnumSimple(buffer, this._f4.FBEOffset + this._f4.FBESize), buffer, this._f4.FBEOffset + this._f4.FBESize)
    this._f6 = new fbe.FieldModelMap(new fbe.FieldModelInt32(buffer, this._f5.FBEOffset + this._f5.FBESize), new fbe.FieldModelOptional(new FieldModelEnumSimple(buffer, this._f5.FBEOffset + this._f5.FBESize), buffer, this._f5.FBEOffset + this._f5.FBESize), buffer, this._f5.FBEOffset + this._f5.FBESize)
    this._f7 = new fbe.FieldModelMap(new fbe.FieldModelInt32(buffer, this._f6.FBEOffset + this._f6.FBESize), new FieldModelFlagsSimple(buffer, this._f6.FBEOffset + this._f6.FBESize), buffer, this._f6.FBEOffset + this._f6.FBESize)
    this._f8 = new fbe.FieldModelMap(new fbe.FieldModelInt32(buffer, this._f7.FBEOffset + this._f7.FBESize), new fbe.FieldModelOptional(new FieldModelFlagsSimple(buffer, this._f7.FBEOffset + this._f7.FBESize), buffer, this._f7.FBEOffset + this._f7.FBESize), buffer, this._f7.FBEOffset + this._f7.FBESize)
    this._f9 = new fbe.FieldModelMap(new fbe.FieldModelInt32(buffer, this._f8.FBEOffset + this._f8.FBESize), new FieldModelStructSimple(buffer, this._f8.FBEOffset + this._f8.FBESize), buffer, this._f8.FBEOffset + this._f8.FBESize)
    this._f10 = new fbe.FieldModelMap(new fbe.FieldModelInt32(buffer, this._f9.FBEOffset + this._f9.FBESize), new fbe.FieldModelOptional(new FieldModelStructSimple(buffer, this._f9.FBEOffset + this._f9.FBESize), buffer, this._f9.FBEOffset + this._f9.FBESize), buffer, this._f9.FBEOffset + this._f9.FBESize)
  }

  /**
   * Get the f1 field model
   * @this {!FieldModelStructMap}
   * @returns {!fbe.FieldModelMap} f1 field model
   */
  get f1 () {
    return this._f1
  }

  /**
   * Get the f2 field model
   * @this {!FieldModelStructMap}
   * @returns {!fbe.FieldModelMap} f2 field model
   */
  get f2 () {
    return this._f2
  }

  /**
   * Get the f3 field model
   * @this {!FieldModelStructMap}
   * @returns {!fbe.FieldModelMap} f3 field model
   */
  get f3 () {
    return this._f3
  }

  /**
   * Get the f4 field model
   * @this {!FieldModelStructMap}
   * @returns {!fbe.FieldModelMap} f4 field model
   */
  get f4 () {
    return this._f4
  }

  /**
   * Get the f5 field model
   * @this {!FieldModelStructMap}
   * @returns {!fbe.FieldModelMap} f5 field model
   */
  get f5 () {
    return this._f5
  }

  /**
   * Get the f6 field model
   * @this {!FieldModelStructMap}
   * @returns {!fbe.FieldModelMap} f6 field model
   */
  get f6 () {
    return this._f6
  }

  /**
   * Get the f7 field model
   * @this {!FieldModelStructMap}
   * @returns {!fbe.FieldModelMap} f7 field model
   */
  get f7 () {
    return this._f7
  }

  /**
   * Get the f8 field model
   * @this {!FieldModelStructMap}
   * @returns {!fbe.FieldModelMap} f8 field model
   */
  get f8 () {
    return this._f8
  }

  /**
   * Get the f9 field model
   * @this {!FieldModelStructMap}
   * @returns {!fbe.FieldModelMap} f9 field model
   */
  get f9 () {
    return this._f9
  }

  /**
   * Get the f10 field model
   * @this {!FieldModelStructMap}
   * @returns {!fbe.FieldModelMap} f10 field model
   */
  get f10 () {
    return this._f10
  }

  /**
   * Get the field size
   * @this {!FieldModelStructMap}
   * @returns {!number} Field size
   */
  get FBESize () {
    return 4
  }

  /**
   * Get the field body size
   * @this {!FieldModelStructMap}
   * @returns {!number} Field body size
   */
  get FBEBody () {
    return 4 + 4 + this.f1.FBESize + this.f2.FBESize + this.f3.FBESize + this.f4.FBESize + this.f5.FBESize + this.f6.FBESize + this.f7.FBESize + this.f8.FBESize + this.f9.FBESize + this.f10.FBESize
  }

  /**
   * Get the field extra size
   * @this {!FieldModelStructMap}
   * @returns {!number} Field extra size
   */
  get FBEExtra () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4) > this._buffer.size)) {
      return 0
    }

    this._buffer.shift(fbeStructOffset)

    let fbeResult = this.FBEBody + this.f1.FBEExtra + this.f2.FBEExtra + this.f3.FBEExtra + this.f4.FBEExtra + this.f5.FBEExtra + this.f6.FBEExtra + this.f7.FBEExtra + this.f8.FBEExtra + this.f9.FBEExtra + this.f10.FBEExtra

    this._buffer.unshift(fbeStructOffset)

    return fbeResult
  }

  /**
   * Get the field type
   * @this {!FieldModelStructMap}
   * @returns {!number} Field type
   */
  get FBEType () {
    return FieldModelStructMap.FBEType
  }

  /**
   * Get the field type (static)
   * @this {!FieldModelStructMap}
   * @returns {!number} Field type
   */
  static get FBEType () {
    return 140
  }

  /**
   * Check if the struct value is valid
   * @this {!FieldModelStructMap}
   * @param {!boolean} fbeVerifyType Verify model type flag, defaults is true
   * @returns {!boolean} Field model valid state
   */
  verify (fbeVerifyType = true) {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return true
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4 + 4) > this._buffer.size)) {
      return false
    }

    let fbeStructSize = this.readUInt32(fbeStructOffset)
    if (fbeStructSize < 4 + 4) {
      return false
    }

    let fbeStructType = this.readUInt32(fbeStructOffset + 4)
    if (fbeVerifyType && (fbeStructType !== this.FBEType)) {
      return false
    }

    this._buffer.shift(fbeStructOffset)
    let fbeResult = this.verifyFields(fbeStructSize)
    this._buffer.unshift(fbeStructOffset)
    return fbeResult
  }

  /**
   * Check if the struct fields are valid
   * @this {!FieldModelStructMap}
   * @param {!number} fbeStructSize FBE struct size
   * @returns {!boolean} Field model valid state
   */
  verifyFields (fbeStructSize) {
    let fbeCurrentSize = 4 + 4

    if ((fbeCurrentSize + this.f1.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f1.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1.FBESize

    if ((fbeCurrentSize + this.f2.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f2.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f2.FBESize

    if ((fbeCurrentSize + this.f3.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f3.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f3.FBESize

    if ((fbeCurrentSize + this.f4.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f4.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f4.FBESize

    if ((fbeCurrentSize + this.f5.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f5.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f5.FBESize

    if ((fbeCurrentSize + this.f6.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f6.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f6.FBESize

    if ((fbeCurrentSize + this.f7.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f7.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f7.FBESize

    if ((fbeCurrentSize + this.f8.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f8.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f8.FBESize

    if ((fbeCurrentSize + this.f9.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f9.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f9.FBESize

    if ((fbeCurrentSize + this.f10.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f10.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f10.FBESize

    return true
  }

  /**
   * Get the struct value (begin phase)
   * @this {!FieldModelStructMap}
   * @returns {!number} Field model begin offset
   */
  getBegin () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    console.assert((fbeStructOffset > 0) && ((this._buffer.offset + fbeStructOffset + 4 + 4) <= this._buffer.size), 'Model is broken!')
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4 + 4) > this._buffer.size)) {
      return 0
    }

    let fbeStructSize = this.readUInt32(fbeStructOffset)
    console.assert((fbeStructSize >= 4 + 4), 'Model is broken!')
    if (fbeStructSize < 4 + 4) {
      return 0
    }

    this._buffer.shift(fbeStructOffset)
    return fbeStructOffset
  }

  /**
   * Get the struct value (end phase)
   * @this {!FieldModelStructMap}
   * @param {!number} fbeBegin Field model begin offset
   */
  getEnd (fbeBegin) {
    this._buffer.unshift(fbeBegin)
  }

  /**
   * Get the struct value
   * @this {!FieldModelStructMap}
   * @param {!StructMap} fbeValue Default value, defaults is new StructMap()
   * @returns {!StructMap} StructMap value
   */
  get (fbeValue = new StructMap()) {
    let fbeBegin = this.getBegin()
    if (fbeBegin === 0) {
      return fbeValue
    }

    let fbeStructSize = this.readUInt32(0)
    this.getFields(fbeValue, fbeStructSize)
    this.getEnd(fbeBegin)
    return fbeValue
  }

  /**
   * Get the struct fields values
   * @this {!FieldModelStructMap}
   * @param {!StructMap} fbeValue StructMap value
   * @param {!number} fbeStructSize Struct size
   */
  getFields (fbeValue, fbeStructSize) {
    let fbeCurrentSize = 4 + 4

    if ((fbeCurrentSize + this.f1.FBESize) <= fbeStructSize) {
      this.f1.get(fbeValue.f1)
    } else {
      fbeValue.f1.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1.FBESize

    if ((fbeCurrentSize + this.f2.FBESize) <= fbeStructSize) {
      this.f2.get(fbeValue.f2)
    } else {
      fbeValue.f2.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f2.FBESize

    if ((fbeCurrentSize + this.f3.FBESize) <= fbeStructSize) {
      this.f3.get(fbeValue.f3)
    } else {
      fbeValue.f3.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f3.FBESize

    if ((fbeCurrentSize + this.f4.FBESize) <= fbeStructSize) {
      this.f4.get(fbeValue.f4)
    } else {
      fbeValue.f4.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f4.FBESize

    if ((fbeCurrentSize + this.f5.FBESize) <= fbeStructSize) {
      this.f5.get(fbeValue.f5)
    } else {
      fbeValue.f5.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f5.FBESize

    if ((fbeCurrentSize + this.f6.FBESize) <= fbeStructSize) {
      this.f6.get(fbeValue.f6)
    } else {
      fbeValue.f6.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f6.FBESize

    if ((fbeCurrentSize + this.f7.FBESize) <= fbeStructSize) {
      this.f7.get(fbeValue.f7)
    } else {
      fbeValue.f7.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f7.FBESize

    if ((fbeCurrentSize + this.f8.FBESize) <= fbeStructSize) {
      this.f8.get(fbeValue.f8)
    } else {
      fbeValue.f8.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f8.FBESize

    if ((fbeCurrentSize + this.f9.FBESize) <= fbeStructSize) {
      this.f9.get(fbeValue.f9)
    } else {
      fbeValue.f9.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f9.FBESize

    if ((fbeCurrentSize + this.f10.FBESize) <= fbeStructSize) {
      this.f10.get(fbeValue.f10)
    } else {
      fbeValue.f10.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f10.FBESize
  }

  /**
   * Set the struct value (begin phase)
   * @this {!FieldModelStructMap}
   * @returns {!number} Field model begin offset
   */
  setBegin () {
    console.assert(((this._buffer.offset + this.FBEOffset + this.FBESize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructSize = this.FBEBody
    let fbeStructOffset = this._buffer.allocate(fbeStructSize) - this._buffer.offset
    console.assert((fbeStructOffset > 0) && ((this._buffer.offset + fbeStructOffset + fbeStructSize) <= this._buffer.size), 'Model is broken!')
    if ((fbeStructOffset <= 0) || ((this._buffer.offset + fbeStructOffset + fbeStructSize) > this._buffer.size)) {
      return 0
    }

    this.writeUInt32(this.FBEOffset, fbeStructOffset)
    this.writeUInt32(fbeStructOffset, fbeStructSize)
    this.writeUInt32(fbeStructOffset + 4, this.FBEType)

    this._buffer.shift(fbeStructOffset)
    return fbeStructOffset
  }

  /**
   * Set the struct value (end phase)
   * @this {!FieldModelStructMap}
   * @param {!number} fbeBegin Field model begin offset
   */
  setEnd (fbeBegin) {
    this._buffer.unshift(fbeBegin)
  }

  /**
   * Set the struct value
   * @this {!FieldModelStructMap}
   * @param {!StructMap} fbeValue StructMap value
   */
  set (fbeValue) {
    let fbeBegin = this.setBegin()
    if (fbeBegin === 0) {
      return
    }

    this.setFields(fbeValue)
    this.setEnd(fbeBegin)
  }

  /**
   * Set the struct fields values
   * @this {!FieldModelStructMap}
   * @param {StructMap} fbeValue StructMap value
   */
  setFields (fbeValue) {
    this.f1.set(fbeValue.f1)
    this.f2.set(fbeValue.f2)
    this.f3.set(fbeValue.f3)
    this.f4.set(fbeValue.f4)
    this.f5.set(fbeValue.f5)
    this.f6.set(fbeValue.f6)
    this.f7.set(fbeValue.f7)
    this.f8.set(fbeValue.f8)
    this.f9.set(fbeValue.f9)
    this.f10.set(fbeValue.f10)
  }
}

exports.FieldModelStructMap = FieldModelStructMap

/**
 * Fast Binary Encoding StructMap model class
 */
class StructMapModel extends fbe.Model {
  /**
   * Initialize model with the given buffer
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Read/Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer)
    this._model = new FieldModelStructMap(this.buffer, 4)
  }

  /**
   * Get the StructMap model
   * @this {!StructMapModel}
   * @returns {!FieldModelStructMap} model StructMap model
   */
  get model () {
    return this._model
  }

  /**
   * Get the model size
   * @this {!StructMapModel}
   * @returns {!number} Model size
   */
  get FBESize () {
    return this.model.FBESize + this.model.FBEExtra
  }

  /**
   * Get the model type
   * @this {!StructMapModel}
   * @returns {!number} Model type
   */
  get FBEType () {
    return StructMapModel.FBEType
  }

  /**
   * Get the model type (static)
   * @this {!StructMapModel}
   * @returns {!number} Model type
   */
  static get FBEType () {
    return FieldModelStructMap.FBEType
  }

  /**
   * Check if the struct value is valid
   * @this {!StructMapModel}
   * @returns {!boolean} Model valid state
   */
  verify () {
    if ((this.buffer.offset + this.model.FBEOffset - 4) > this.buffer.size) {
      return false
    }

    let fbeFullSize = this.readUInt32(this.model.FBEOffset - 4)
    if (fbeFullSize < this.model.FBESize) {
      return false
    }

    return this.model.verify()
  }

  /**
   * Create a new model (begin phase)
   * @this {!StructMapModel}
   * @returns {!number} Model begin offset
   */
  createBegin () {
    return this.buffer.allocate(4 + this.model.FBESize)
  }

  /**
   * Create a new model (end phase)
   * @this {!StructMapModel}
   * @param {!number} fbeBegin Model begin offset
   */
  createEnd (fbeBegin) {
    let fbeEnd = this.buffer.size
    let fbeFullSize = fbeEnd - fbeBegin
    this.writeUInt32(this.model.FBEOffset - 4, fbeFullSize)
    return fbeFullSize
  }

  /**
   * Serialize the struct value
   * @this {!StructMapModel}
   * @param {!StructMap} value StructMap value
   * @return {!number} Model begin offset
   */
  serialize (value) {
    let fbeBegin = this.createBegin()
    this.model.set(value)
    return this.createEnd(fbeBegin)
  }

  /**
   * Deserialize the struct value
   * @this {!StructMapModel}
   * @param {!StructMap} value StructMap value, defaults is new StructMap()
   * @return {!object} Deserialized StructMap value and its size
   */
  deserialize (value = new StructMap()) {
    if ((this.buffer.offset + this.model.FBEOffset - 4) > this.buffer.size) {
      return { value: new StructMap(), size: 0 }
    }

    let fbeFullSize = this.readUInt32(this.model.FBEOffset - 4)
    console.assert((fbeFullSize >= this.model.FBESize), 'Model is broken!')
    if (fbeFullSize < this.model.FBESize) {
      return { value: new StructMap(), size: 0 }
    }

    this.model.get(value)
    return { value: value, size: fbeFullSize }
  }

  /**
   * Move to the next struct value
   * @this {!StructMapModel}
   * @param {!number} prev Previous StructMap model size
   */
  next (prev) {
    this.model.FBEShift(prev)
  }
}

exports.StructMapModel = StructMapModel

/**
 * Fast Binary Encoding StructMap final model class
 */
class FinalModelStructMap extends fbe.FinalModel {
  /**
   * Initialize final model with the given buffer and offset
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Buffer
   * @param {!number} offset Offset
   * @constructor
   */
  constructor (buffer, offset) {
    super(buffer, offset)
    this._f1 = new fbe.FinalModelMap(new fbe.FinalModelInt32(buffer, 0), new fbe.FinalModelByte(buffer, 0), buffer, 0)
    this._f2 = new fbe.FinalModelMap(new fbe.FinalModelInt32(buffer, 0), new fbe.FinalModelOptional(new fbe.FinalModelByte(buffer, 0), buffer, 0), buffer, 0)
    this._f3 = new fbe.FinalModelMap(new fbe.FinalModelInt32(buffer, 0), new fbe.FinalModelBytes(buffer, 0), buffer, 0)
    this._f4 = new fbe.FinalModelMap(new fbe.FinalModelInt32(buffer, 0), new fbe.FinalModelOptional(new fbe.FinalModelBytes(buffer, 0), buffer, 0), buffer, 0)
    this._f5 = new fbe.FinalModelMap(new fbe.FinalModelInt32(buffer, 0), new FinalModelEnumSimple(buffer, 0), buffer, 0)
    this._f6 = new fbe.FinalModelMap(new fbe.FinalModelInt32(buffer, 0), new fbe.FinalModelOptional(new FinalModelEnumSimple(buffer, 0), buffer, 0), buffer, 0)
    this._f7 = new fbe.FinalModelMap(new fbe.FinalModelInt32(buffer, 0), new FinalModelFlagsSimple(buffer, 0), buffer, 0)
    this._f8 = new fbe.FinalModelMap(new fbe.FinalModelInt32(buffer, 0), new fbe.FinalModelOptional(new FinalModelFlagsSimple(buffer, 0), buffer, 0), buffer, 0)
    this._f9 = new fbe.FinalModelMap(new fbe.FinalModelInt32(buffer, 0), new FinalModelStructSimple(buffer, 0), buffer, 0)
    this._f10 = new fbe.FinalModelMap(new fbe.FinalModelInt32(buffer, 0), new fbe.FinalModelOptional(new FinalModelStructSimple(buffer, 0), buffer, 0), buffer, 0)
  }

  /**
   * Get the f1 final model
   * @this {!FinalModelStructMap}
   * @returns {!fbe.FinalModelMap} f1 final model
   */
  get f1 () {
    return this._f1
  }

  /**
   * Get the f2 final model
   * @this {!FinalModelStructMap}
   * @returns {!fbe.FinalModelMap} f2 final model
   */
  get f2 () {
    return this._f2
  }

  /**
   * Get the f3 final model
   * @this {!FinalModelStructMap}
   * @returns {!fbe.FinalModelMap} f3 final model
   */
  get f3 () {
    return this._f3
  }

  /**
   * Get the f4 final model
   * @this {!FinalModelStructMap}
   * @returns {!fbe.FinalModelMap} f4 final model
   */
  get f4 () {
    return this._f4
  }

  /**
   * Get the f5 final model
   * @this {!FinalModelStructMap}
   * @returns {!fbe.FinalModelMap} f5 final model
   */
  get f5 () {
    return this._f5
  }

  /**
   * Get the f6 final model
   * @this {!FinalModelStructMap}
   * @returns {!fbe.FinalModelMap} f6 final model
   */
  get f6 () {
    return this._f6
  }

  /**
   * Get the f7 final model
   * @this {!FinalModelStructMap}
   * @returns {!fbe.FinalModelMap} f7 final model
   */
  get f7 () {
    return this._f7
  }

  /**
   * Get the f8 final model
   * @this {!FinalModelStructMap}
   * @returns {!fbe.FinalModelMap} f8 final model
   */
  get f8 () {
    return this._f8
  }

  /**
   * Get the f9 final model
   * @this {!FinalModelStructMap}
   * @returns {!fbe.FinalModelMap} f9 final model
   */
  get f9 () {
    return this._f9
  }

  /**
   * Get the f10 final model
   * @this {!FinalModelStructMap}
   * @returns {!fbe.FinalModelMap} f10 final model
   */
  get f10 () {
    return this._f10
  }

  /**
   * Get the allocation size
   * @this {!FinalModelStructMap}
   * @param {!StructMap} fbeValue StructMap value
   * @returns {!number} Allocation size
   */
  FBEAllocationSize (fbeValue) {
    return 0 + this.f1.FBEAllocationSize(fbeValue.f1) + this.f2.FBEAllocationSize(fbeValue.f2) + this.f3.FBEAllocationSize(fbeValue.f3) + this.f4.FBEAllocationSize(fbeValue.f4) + this.f5.FBEAllocationSize(fbeValue.f5) + this.f6.FBEAllocationSize(fbeValue.f6) + this.f7.FBEAllocationSize(fbeValue.f7) + this.f8.FBEAllocationSize(fbeValue.f8) + this.f9.FBEAllocationSize(fbeValue.f9) + this.f10.FBEAllocationSize(fbeValue.f10)
  }

  /**
   * Get the field type
   * @this {!FinalModelStructMap}
   * @returns {!number} Field type
   */
  get FBEType () {
    return FinalModelStructMap.FBEType
  }

  /**
   * Get the field type (static)
   * @this {!FinalModelStructMap}
   * @returns {!number} Field type
   */
  static get FBEType () {
    return 140
  }

  /**
   * Check if the struct value is valid
   * @this {!FinalModelStructMap}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    this._buffer.shift(this.FBEOffset)
    let fbeResult = this.verifyFields()
    this._buffer.unshift(this.FBEOffset)
    return fbeResult
  }

  /**
   * Check if the struct fields are valid
   * @this {!FinalModelStructMap}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verifyFields () {
    let fbeCurrentOffset = 0
    let fbeFieldSize

    this.f1.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f2.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f2.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f3.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f3.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f4.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f4.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f5.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f5.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f6.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f6.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f7.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f7.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f8.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f8.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f9.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f9.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f10.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f10.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    return fbeCurrentOffset
  }

  /**
   * Get the struct value
   * @this {!FinalModelStructMap}
   * @param {!StructMap} fbeValue StructMap value, defaults is new StructMap()
   * @returns {!object} Result struct value and its size
   */
  get (fbeValue = new StructMap()) {
    this._buffer.shift(this.FBEOffset)
    let fbeSize = this.getFields(fbeValue)
    this._buffer.unshift(this.FBEOffset)
    return { value: fbeValue, size: fbeSize }
  }

  /**
   * Get the struct fields values
   * @this {!FinalModelStructMap}
   * @param {!StructMap} fbeValue StructMap value
   * @returns {!number} Struct size
   */
  getFields (fbeValue) {
    let fbeCurrentOffset = 0
    let fbeCurrentSize = 0
    let fbeResult

    this.f1.FBEOffset = fbeCurrentOffset
    fbeResult = this.f1.get(fbeValue.f1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f2.FBEOffset = fbeCurrentOffset
    fbeResult = this.f2.get(fbeValue.f2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f3.FBEOffset = fbeCurrentOffset
    fbeResult = this.f3.get(fbeValue.f3)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f4.FBEOffset = fbeCurrentOffset
    fbeResult = this.f4.get(fbeValue.f4)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f5.FBEOffset = fbeCurrentOffset
    fbeResult = this.f5.get(fbeValue.f5)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f6.FBEOffset = fbeCurrentOffset
    fbeResult = this.f6.get(fbeValue.f6)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f7.FBEOffset = fbeCurrentOffset
    fbeResult = this.f7.get(fbeValue.f7)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f8.FBEOffset = fbeCurrentOffset
    fbeResult = this.f8.get(fbeValue.f8)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f9.FBEOffset = fbeCurrentOffset
    fbeResult = this.f9.get(fbeValue.f9)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f10.FBEOffset = fbeCurrentOffset
    fbeResult = this.f10.get(fbeValue.f10)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    return fbeCurrentSize
  }

  /**
   * Set the struct value
   * @this {!FinalModelStructMap}
   * @param {!StructMap} fbeValue StructMap value
   * @returns {!number} Final model size
   */
  set (fbeValue) {
    this._buffer.shift(this.FBEOffset)
    let fbeSize = this.setFields(fbeValue)
    this._buffer.unshift(this.FBEOffset)
    return fbeSize
  }

  /**
   * Set the struct fields values
   * @this {!FinalModelStructMap}
   * @param {StructMap} fbeValue StructMap value
   * @returns {!number} Final model size
   */
  setFields (fbeValue) {
    let fbeCurrentOffset = 0
    let fbeCurrentSize = 0
    let fbeFieldSize

    this.f1.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1.set(fbeValue.f1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f2.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f2.set(fbeValue.f2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f3.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f3.set(fbeValue.f3)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f4.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f4.set(fbeValue.f4)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f5.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f5.set(fbeValue.f5)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f6.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f6.set(fbeValue.f6)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f7.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f7.set(fbeValue.f7)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f8.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f8.set(fbeValue.f8)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f9.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f9.set(fbeValue.f9)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f10.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f10.set(fbeValue.f10)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    return fbeCurrentSize
  }
}

exports.FinalModelStructMap = FinalModelStructMap

/**
 * Fast Binary Encoding StructMap final model class
 */
class StructMapFinalModel extends fbe.Model {
  /**
   * Initialize final model with the given buffer
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Read/Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer)
    this._model = new FinalModelStructMap(this.buffer, 8)
  }

  /**
   * Get the model type
   * @this {!StructMapFinalModel}
   * @returns {!number} Model type
   */
  get FBEType () {
    return StructMapFinalModel.FBEType
  }

  /**
   * Get the model type (static)
   * @this {!StructMapFinalModel}
   * @returns {!number} Model type
   */
  static get FBEType () {
    return FinalModelStructMap.FBEType
  }

  /**
   * Check if the struct value is valid
   * @this {!StructMapFinalModel}
   * @returns {!boolean} Model valid state
   */
  verify () {
    if ((this.buffer.offset + this._model.FBEOffset) > this.buffer.size) {
      return false
    }

    let fbeStructSize = this.readUInt32(this._model.FBEOffset - 8)
    let fbeStructType = this.readUInt32(this._model.FBEOffset - 4)
    if ((fbeStructSize <= 0) || (fbeStructType !== this.FBEType)) {
      return false
    }

    return ((8 + this._model.verify()) === fbeStructSize)
  }

  /**
   * Serialize the struct value
   * @this {!StructMapFinalModel}
   * @param {!StructMap} value StructMap value
   * @return {!number} Struct size
   */
  serialize (value) {
    let fbeInitialSize = this.buffer.size

    let fbeStructType = this.FBEType
    let fbeStructSize = 8 + this._model.FBEAllocationSize(value)
    let fbeStructOffset = this.buffer.allocate(fbeStructSize) - this.buffer.offset
    console.assert(((this.buffer.offset + fbeStructOffset + fbeStructSize) <= this.buffer.size), 'Model is broken!')
    if ((this.buffer.offset + fbeStructOffset + fbeStructSize) > this.buffer.size) {
      return 0
    }

    fbeStructSize = 8 + this._model.set(value)
    this.buffer.resize(fbeInitialSize + fbeStructSize)

    this.writeUInt32(this._model.FBEOffset - 8, fbeStructSize)
    this.writeUInt32(this._model.FBEOffset - 4, fbeStructType)

    return fbeStructSize
  }

  /**
   * Deserialize the struct value
   * @this {!StructMapFinalModel}
   * @param {!StructMap} value StructMap value, defaults is new StructMap()
   * @return {!object} Deserialized StructMap value and its size
   */
  deserialize (value = new StructMap()) {
    console.assert(((this.buffer.offset + this._model.FBEOffset) <= this.buffer.size), 'Model is broken!')
    if ((this.buffer.offset + this._model.FBEOffset) > this.buffer.size) {
      return { value: new StructMap(), size: 0 }
    }

    let fbeStructSize = this.readUInt32(this._model.FBEOffset - 8)
    let fbeStructType = this.readUInt32(this._model.FBEOffset - 4)
    console.assert(((fbeStructSize > 0) && (fbeStructType === this.FBEType)), 'Model is broken!')
    if ((fbeStructSize <= 0) || (fbeStructType !== this.FBEType)) {
      return { value: new StructMap(), size: 8 }
    }

    let fbeResult = this._model.get(value)
    return { value: fbeResult.value, size: (8 + fbeResult.size) }
  }

  /**
   * Move to the next struct value
   * @this {!StructMapFinalModel}
   * @param {!number} prev Previous StructMap model size
   */
  next (prev) {
    this._model.FBEShift(prev)
  }
}

exports.StructMapFinalModel = StructMapFinalModel

/**
 * StructHash struct
 */
class StructHash {
  /**
   * Initialize struct
   * @param {!Map=} f1
   * @param {Map=} f2
   * @param {!Map=} f3
   * @param {Map=} f4
   * @param {!Map=} f5
   * @param {Map=} f6
   * @param {!Map=} f7
   * @param {Map=} f8
   * @param {!Map=} f9
   * @param {Map=} f10
   * @constructor
   */
  constructor (f1 = new Map(), f2 = new Map(), f3 = new Map(), f4 = new Map(), f5 = new Map(), f6 = new Map(), f7 = new Map(), f8 = new Map(), f9 = new Map(), f10 = new Map()) {
    this.f1 = f1
    this.f2 = f2
    this.f3 = f3
    this.f4 = f4
    this.f5 = f5
    this.f6 = f6
    this.f7 = f7
    this.f8 = f8
    this.f9 = f9
    this.f10 = f10
  }

  /**
   * Copy struct
   * @this {!StructHash}
   * @param {!StructHash} other Other struct
   * @returns {!StructHash} This struct
   */
  copy (other) {
    if (other.f1 != null) {
      this.f1 = new Map()
      Object.keys(other.f1).forEach(key => {
        if (key != null) {
          let tempKey
          tempKey = key
          if (other.f1[key] != null) {
            let tempValue
            tempValue = other.f1[key]
            this.f1.set(tempKey, tempValue)
          } else {
            this.f1.set(tempKey, undefined)
          }
        }
      })
    } else {
      this.f1 = undefined
    }
    if (other.f2 != null) {
      this.f2 = new Map()
      Object.keys(other.f2).forEach(key => {
        if (key != null) {
          let tempKey
          tempKey = key
          if (other.f2[key] != null) {
            let tempValue
            tempValue = other.f2[key]
            this.f2.set(tempKey, tempValue)
          } else {
            this.f2.set(tempKey, undefined)
          }
        }
      })
    } else {
      this.f2 = undefined
    }
    if (other.f3 != null) {
      this.f3 = new Map()
      Object.keys(other.f3).forEach(key => {
        if (key != null) {
          let tempKey
          tempKey = key
          if (other.f3[key] != null) {
            let tempValue
            if (typeof other.f3[key] === 'string') {
              // noinspection JSUnresolvedFunction
              tempValue = Uint8Array.from(Buffer.from(other.f3[key], 'base64'))
            } else {
              tempValue = Uint8Array.from(other.f3[key])
            }
            this.f3.set(tempKey, tempValue)
          } else {
            this.f3.set(tempKey, undefined)
          }
        }
      })
    } else {
      this.f3 = undefined
    }
    if (other.f4 != null) {
      this.f4 = new Map()
      Object.keys(other.f4).forEach(key => {
        if (key != null) {
          let tempKey
          tempKey = key
          if (other.f4[key] != null) {
            let tempValue
            if (typeof other.f4[key] === 'string') {
              // noinspection JSUnresolvedFunction
              tempValue = Uint8Array.from(Buffer.from(other.f4[key], 'base64'))
            } else {
              tempValue = Uint8Array.from(other.f4[key])
            }
            this.f4.set(tempKey, tempValue)
          } else {
            this.f4.set(tempKey, undefined)
          }
        }
      })
    } else {
      this.f4 = undefined
    }
    if (other.f5 != null) {
      this.f5 = new Map()
      Object.keys(other.f5).forEach(key => {
        if (key != null) {
          let tempKey
          tempKey = key
          if (other.f5[key] != null) {
            let tempValue
            tempValue = EnumSimple.fromObject(other.f5[key])
            this.f5.set(tempKey, tempValue)
          } else {
            this.f5.set(tempKey, undefined)
          }
        }
      })
    } else {
      this.f5 = undefined
    }
    if (other.f6 != null) {
      this.f6 = new Map()
      Object.keys(other.f6).forEach(key => {
        if (key != null) {
          let tempKey
          tempKey = key
          if (other.f6[key] != null) {
            let tempValue
            tempValue = EnumSimple.fromObject(other.f6[key])
            this.f6.set(tempKey, tempValue)
          } else {
            this.f6.set(tempKey, undefined)
          }
        }
      })
    } else {
      this.f6 = undefined
    }
    if (other.f7 != null) {
      this.f7 = new Map()
      Object.keys(other.f7).forEach(key => {
        if (key != null) {
          let tempKey
          tempKey = key
          if (other.f7[key] != null) {
            let tempValue
            tempValue = FlagsSimple.fromObject(other.f7[key])
            this.f7.set(tempKey, tempValue)
          } else {
            this.f7.set(tempKey, undefined)
          }
        }
      })
    } else {
      this.f7 = undefined
    }
    if (other.f8 != null) {
      this.f8 = new Map()
      Object.keys(other.f8).forEach(key => {
        if (key != null) {
          let tempKey
          tempKey = key
          if (other.f8[key] != null) {
            let tempValue
            tempValue = FlagsSimple.fromObject(other.f8[key])
            this.f8.set(tempKey, tempValue)
          } else {
            this.f8.set(tempKey, undefined)
          }
        }
      })
    } else {
      this.f8 = undefined
    }
    if (other.f9 != null) {
      this.f9 = new Map()
      Object.keys(other.f9).forEach(key => {
        if (key != null) {
          let tempKey
          tempKey = key
          if (other.f9[key] != null) {
            let tempValue
            tempValue = StructSimple.fromObject(other.f9[key])
            this.f9.set(tempKey, tempValue)
          } else {
            this.f9.set(tempKey, undefined)
          }
        }
      })
    } else {
      this.f9 = undefined
    }
    if (other.f10 != null) {
      this.f10 = new Map()
      Object.keys(other.f10).forEach(key => {
        if (key != null) {
          let tempKey
          tempKey = key
          if (other.f10[key] != null) {
            let tempValue
            tempValue = StructSimple.fromObject(other.f10[key])
            this.f10.set(tempKey, tempValue)
          } else {
            this.f10.set(tempKey, undefined)
          }
        }
      })
    } else {
      this.f10 = undefined
    }
    return this
  }

  /**
   * Clone struct
   * @this {!StructHash}
   * @returns {!StructHash} Cloned struct
   */
  clone () {
    // Serialize the struct to the FBE stream
    let writer = new StructHashModel(new fbe.WriteBuffer())
    writer.serialize(this)

    // Deserialize the struct from the FBE stream
    let reader = new StructHashModel(new fbe.ReadBuffer())
    reader.attachBuffer(writer.buffer)
    return reader.deserialize().value
  }

  /**
   * Is this struct equal to other one?
   * @this {!StructHash}
   * @param {!StructHash} other Other struct
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof StructHash)) {
      throw new TypeError('Instance of StructHash is required!')
    }
    return true
  }

  /**
   * Convert struct to string
   * @this {!StructHash}
   * @returns {!string} Struct value string
   */
  toString () {
    let result = ''
    result += 'StructHash('
    result += 'f1='
    if (this.f1 != null) {
      let first = true
      result += '['
      result += this.f1.size
      result += '][{'
      for (let [key, value] of this.f1) {
        if (key != null) {
          result += first ? '' : ','
          result += '"'
          result += key.toString()
          result += '"'
        } else {
          result += 'null'
        }
        result += '->'
        result += first ? '' : ','
        result += value.toString()
        first = false
      }
      result += '}]'
    }
    result += ',f2='
    if (this.f2 != null) {
      let first = true
      result += '['
      result += this.f2.size
      result += '][{'
      for (let [key, value] of this.f2) {
        if (key != null) {
          result += first ? '' : ','
          result += '"'
          result += key.toString()
          result += '"'
        } else {
          result += 'null'
        }
        result += '->'
        if (value != null) {
          result += first ? '' : ','
          result += value.toString()
        } else {
          result += 'null'
        }
        first = false
      }
      result += '}]'
    }
    result += ',f3='
    if (this.f3 != null) {
      let first = true
      result += '['
      result += this.f3.size
      result += '][{'
      for (let [key, value] of this.f3) {
        if (key != null) {
          result += first ? '' : ','
          result += '"'
          result += key.toString()
          result += '"'
        } else {
          result += 'null'
        }
        result += '->'
        if (value != null) {
          result += first ? '' : ','
          result += 'bytes['
          result += value.length
          result += ']'
        } else {
          result += 'null'
        }
        first = false
      }
      result += '}]'
    }
    result += ',f4='
    if (this.f4 != null) {
      let first = true
      result += '['
      result += this.f4.size
      result += '][{'
      for (let [key, value] of this.f4) {
        if (key != null) {
          result += first ? '' : ','
          result += '"'
          result += key.toString()
          result += '"'
        } else {
          result += 'null'
        }
        result += '->'
        if (value != null) {
          result += first ? '' : ','
          result += 'bytes['
          result += value.length
          result += ']'
        } else {
          result += 'null'
        }
        first = false
      }
      result += '}]'
    }
    result += ',f5='
    if (this.f5 != null) {
      let first = true
      result += '['
      result += this.f5.size
      result += '][{'
      for (let [key, value] of this.f5) {
        if (key != null) {
          result += first ? '' : ','
          result += '"'
          result += key.toString()
          result += '"'
        } else {
          result += 'null'
        }
        result += '->'
        result += first ? '' : ','
        result += value.toString()
        first = false
      }
      result += '}]'
    }
    result += ',f6='
    if (this.f6 != null) {
      let first = true
      result += '['
      result += this.f6.size
      result += '][{'
      for (let [key, value] of this.f6) {
        if (key != null) {
          result += first ? '' : ','
          result += '"'
          result += key.toString()
          result += '"'
        } else {
          result += 'null'
        }
        result += '->'
        if (value != null) {
          result += first ? '' : ','
          result += value.toString()
        } else {
          result += 'null'
        }
        first = false
      }
      result += '}]'
    }
    result += ',f7='
    if (this.f7 != null) {
      let first = true
      result += '['
      result += this.f7.size
      result += '][{'
      for (let [key, value] of this.f7) {
        if (key != null) {
          result += first ? '' : ','
          result += '"'
          result += key.toString()
          result += '"'
        } else {
          result += 'null'
        }
        result += '->'
        result += first ? '' : ','
        result += value.toString()
        first = false
      }
      result += '}]'
    }
    result += ',f8='
    if (this.f8 != null) {
      let first = true
      result += '['
      result += this.f8.size
      result += '][{'
      for (let [key, value] of this.f8) {
        if (key != null) {
          result += first ? '' : ','
          result += '"'
          result += key.toString()
          result += '"'
        } else {
          result += 'null'
        }
        result += '->'
        if (value != null) {
          result += first ? '' : ','
          result += value.toString()
        } else {
          result += 'null'
        }
        first = false
      }
      result += '}]'
    }
    result += ',f9='
    if (this.f9 != null) {
      let first = true
      result += '['
      result += this.f9.size
      result += '][{'
      for (let [key, value] of this.f9) {
        if (key != null) {
          result += first ? '' : ','
          result += '"'
          result += key.toString()
          result += '"'
        } else {
          result += 'null'
        }
        result += '->'
        result += first ? '' : ','
        result += value.toString()
        first = false
      }
      result += '}]'
    }
    result += ',f10='
    if (this.f10 != null) {
      let first = true
      result += '['
      result += this.f10.size
      result += '][{'
      for (let [key, value] of this.f10) {
        if (key != null) {
          result += first ? '' : ','
          result += '"'
          result += key.toString()
          result += '"'
        } else {
          result += 'null'
        }
        result += '->'
        if (value != null) {
          result += first ? '' : ','
          result += value.toString()
        } else {
          result += 'null'
        }
        first = false
      }
      result += '}]'
    }
    result += ')'
    return result
  }

  /**
   * Inspect struct
   * @this {!StructHash}
   * @returns {!string} Struct value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert struct to JSON
   * @this {!StructHash}
   * @returns {!object} Struct value for JSON
   */
  toJSON () {
    return {
      f1: ((this.f1 != null) ? fbe.MapToObject(new Map(Array.from(this.f1, item => [((item[0] != null) ? item[0] : null), ((item[1] != null) ? item[1] : null)]))) : null),
      f2: ((this.f2 != null) ? fbe.MapToObject(new Map(Array.from(this.f2, item => [((item[0] != null) ? item[0] : null), ((item[1] != null) ? item[1] : null)]))) : null),
      f3: ((this.f3 != null) ? fbe.MapToObject(new Map(Array.from(this.f3, item => [((item[0] != null) ? item[0] : null), ((item[1] != null) ? Buffer.from(item[1]).toString('base64') : null)]))) : null),
      f4: ((this.f4 != null) ? fbe.MapToObject(new Map(Array.from(this.f4, item => [((item[0] != null) ? item[0] : null), ((item[1] != null) ? Buffer.from(item[1]).toString('base64') : null)]))) : null),
      f5: ((this.f5 != null) ? fbe.MapToObject(new Map(Array.from(this.f5, item => [((item[0] != null) ? item[0] : null), ((item[1] != null) ? item[1] : null)]))) : null),
      f6: ((this.f6 != null) ? fbe.MapToObject(new Map(Array.from(this.f6, item => [((item[0] != null) ? item[0] : null), ((item[1] != null) ? item[1] : null)]))) : null),
      f7: ((this.f7 != null) ? fbe.MapToObject(new Map(Array.from(this.f7, item => [((item[0] != null) ? item[0] : null), ((item[1] != null) ? item[1] : null)]))) : null),
      f8: ((this.f8 != null) ? fbe.MapToObject(new Map(Array.from(this.f8, item => [((item[0] != null) ? item[0] : null), ((item[1] != null) ? item[1] : null)]))) : null),
      f9: ((this.f9 != null) ? fbe.MapToObject(new Map(Array.from(this.f9, item => [((item[0] != null) ? item[0] : null), ((item[1] != null) ? item[1] : null)]))) : null),
      f10: ((this.f10 != null) ? fbe.MapToObject(new Map(Array.from(this.f10, item => [((item[0] != null) ? item[0] : null), ((item[1] != null) ? item[1] : null)]))) : null)
    }
  }

  /**
   * Convert JSON to struct
   * @param {!string} json JSON string
   * @returns {!object} Struct value for JSON
   */
  static fromJSON (json) {
    return StructHash.fromObject(JSON.parse(json))
  }

  /**
   * Create struct from object value
   * @param {!StructHash} other Object value
   * @returns {!StructHash} Created struct
   */
  static fromObject (other) {
    return new StructHash().copy(other)
  }
}

exports.StructHash = StructHash

/**
 * Fast Binary Encoding StructHash field model class
 */
class FieldModelStructHash extends fbe.FieldModel {
  /**
   * Initialize field model with the given buffer and offset
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Buffer
   * @param {!number} offset Offset
   * @constructor
   */
  constructor (buffer, offset) {
    super(buffer, offset)
    this._f1 = new fbe.FieldModelMap(new fbe.FieldModelString(buffer, 4 + 4), new fbe.FieldModelByte(buffer, 4 + 4), buffer, 4 + 4)
    this._f2 = new fbe.FieldModelMap(new fbe.FieldModelString(buffer, this._f1.FBEOffset + this._f1.FBESize), new fbe.FieldModelOptional(new fbe.FieldModelByte(buffer, this._f1.FBEOffset + this._f1.FBESize), buffer, this._f1.FBEOffset + this._f1.FBESize), buffer, this._f1.FBEOffset + this._f1.FBESize)
    this._f3 = new fbe.FieldModelMap(new fbe.FieldModelString(buffer, this._f2.FBEOffset + this._f2.FBESize), new fbe.FieldModelBytes(buffer, this._f2.FBEOffset + this._f2.FBESize), buffer, this._f2.FBEOffset + this._f2.FBESize)
    this._f4 = new fbe.FieldModelMap(new fbe.FieldModelString(buffer, this._f3.FBEOffset + this._f3.FBESize), new fbe.FieldModelOptional(new fbe.FieldModelBytes(buffer, this._f3.FBEOffset + this._f3.FBESize), buffer, this._f3.FBEOffset + this._f3.FBESize), buffer, this._f3.FBEOffset + this._f3.FBESize)
    this._f5 = new fbe.FieldModelMap(new fbe.FieldModelString(buffer, this._f4.FBEOffset + this._f4.FBESize), new FieldModelEnumSimple(buffer, this._f4.FBEOffset + this._f4.FBESize), buffer, this._f4.FBEOffset + this._f4.FBESize)
    this._f6 = new fbe.FieldModelMap(new fbe.FieldModelString(buffer, this._f5.FBEOffset + this._f5.FBESize), new fbe.FieldModelOptional(new FieldModelEnumSimple(buffer, this._f5.FBEOffset + this._f5.FBESize), buffer, this._f5.FBEOffset + this._f5.FBESize), buffer, this._f5.FBEOffset + this._f5.FBESize)
    this._f7 = new fbe.FieldModelMap(new fbe.FieldModelString(buffer, this._f6.FBEOffset + this._f6.FBESize), new FieldModelFlagsSimple(buffer, this._f6.FBEOffset + this._f6.FBESize), buffer, this._f6.FBEOffset + this._f6.FBESize)
    this._f8 = new fbe.FieldModelMap(new fbe.FieldModelString(buffer, this._f7.FBEOffset + this._f7.FBESize), new fbe.FieldModelOptional(new FieldModelFlagsSimple(buffer, this._f7.FBEOffset + this._f7.FBESize), buffer, this._f7.FBEOffset + this._f7.FBESize), buffer, this._f7.FBEOffset + this._f7.FBESize)
    this._f9 = new fbe.FieldModelMap(new fbe.FieldModelString(buffer, this._f8.FBEOffset + this._f8.FBESize), new FieldModelStructSimple(buffer, this._f8.FBEOffset + this._f8.FBESize), buffer, this._f8.FBEOffset + this._f8.FBESize)
    this._f10 = new fbe.FieldModelMap(new fbe.FieldModelString(buffer, this._f9.FBEOffset + this._f9.FBESize), new fbe.FieldModelOptional(new FieldModelStructSimple(buffer, this._f9.FBEOffset + this._f9.FBESize), buffer, this._f9.FBEOffset + this._f9.FBESize), buffer, this._f9.FBEOffset + this._f9.FBESize)
  }

  /**
   * Get the f1 field model
   * @this {!FieldModelStructHash}
   * @returns {!fbe.FieldModelMap} f1 field model
   */
  get f1 () {
    return this._f1
  }

  /**
   * Get the f2 field model
   * @this {!FieldModelStructHash}
   * @returns {!fbe.FieldModelMap} f2 field model
   */
  get f2 () {
    return this._f2
  }

  /**
   * Get the f3 field model
   * @this {!FieldModelStructHash}
   * @returns {!fbe.FieldModelMap} f3 field model
   */
  get f3 () {
    return this._f3
  }

  /**
   * Get the f4 field model
   * @this {!FieldModelStructHash}
   * @returns {!fbe.FieldModelMap} f4 field model
   */
  get f4 () {
    return this._f4
  }

  /**
   * Get the f5 field model
   * @this {!FieldModelStructHash}
   * @returns {!fbe.FieldModelMap} f5 field model
   */
  get f5 () {
    return this._f5
  }

  /**
   * Get the f6 field model
   * @this {!FieldModelStructHash}
   * @returns {!fbe.FieldModelMap} f6 field model
   */
  get f6 () {
    return this._f6
  }

  /**
   * Get the f7 field model
   * @this {!FieldModelStructHash}
   * @returns {!fbe.FieldModelMap} f7 field model
   */
  get f7 () {
    return this._f7
  }

  /**
   * Get the f8 field model
   * @this {!FieldModelStructHash}
   * @returns {!fbe.FieldModelMap} f8 field model
   */
  get f8 () {
    return this._f8
  }

  /**
   * Get the f9 field model
   * @this {!FieldModelStructHash}
   * @returns {!fbe.FieldModelMap} f9 field model
   */
  get f9 () {
    return this._f9
  }

  /**
   * Get the f10 field model
   * @this {!FieldModelStructHash}
   * @returns {!fbe.FieldModelMap} f10 field model
   */
  get f10 () {
    return this._f10
  }

  /**
   * Get the field size
   * @this {!FieldModelStructHash}
   * @returns {!number} Field size
   */
  get FBESize () {
    return 4
  }

  /**
   * Get the field body size
   * @this {!FieldModelStructHash}
   * @returns {!number} Field body size
   */
  get FBEBody () {
    return 4 + 4 + this.f1.FBESize + this.f2.FBESize + this.f3.FBESize + this.f4.FBESize + this.f5.FBESize + this.f6.FBESize + this.f7.FBESize + this.f8.FBESize + this.f9.FBESize + this.f10.FBESize
  }

  /**
   * Get the field extra size
   * @this {!FieldModelStructHash}
   * @returns {!number} Field extra size
   */
  get FBEExtra () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4) > this._buffer.size)) {
      return 0
    }

    this._buffer.shift(fbeStructOffset)

    let fbeResult = this.FBEBody + this.f1.FBEExtra + this.f2.FBEExtra + this.f3.FBEExtra + this.f4.FBEExtra + this.f5.FBEExtra + this.f6.FBEExtra + this.f7.FBEExtra + this.f8.FBEExtra + this.f9.FBEExtra + this.f10.FBEExtra

    this._buffer.unshift(fbeStructOffset)

    return fbeResult
  }

  /**
   * Get the field type
   * @this {!FieldModelStructHash}
   * @returns {!number} Field type
   */
  get FBEType () {
    return FieldModelStructHash.FBEType
  }

  /**
   * Get the field type (static)
   * @this {!FieldModelStructHash}
   * @returns {!number} Field type
   */
  static get FBEType () {
    return 141
  }

  /**
   * Check if the struct value is valid
   * @this {!FieldModelStructHash}
   * @param {!boolean} fbeVerifyType Verify model type flag, defaults is true
   * @returns {!boolean} Field model valid state
   */
  verify (fbeVerifyType = true) {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return true
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4 + 4) > this._buffer.size)) {
      return false
    }

    let fbeStructSize = this.readUInt32(fbeStructOffset)
    if (fbeStructSize < 4 + 4) {
      return false
    }

    let fbeStructType = this.readUInt32(fbeStructOffset + 4)
    if (fbeVerifyType && (fbeStructType !== this.FBEType)) {
      return false
    }

    this._buffer.shift(fbeStructOffset)
    let fbeResult = this.verifyFields(fbeStructSize)
    this._buffer.unshift(fbeStructOffset)
    return fbeResult
  }

  /**
   * Check if the struct fields are valid
   * @this {!FieldModelStructHash}
   * @param {!number} fbeStructSize FBE struct size
   * @returns {!boolean} Field model valid state
   */
  verifyFields (fbeStructSize) {
    let fbeCurrentSize = 4 + 4

    if ((fbeCurrentSize + this.f1.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f1.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1.FBESize

    if ((fbeCurrentSize + this.f2.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f2.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f2.FBESize

    if ((fbeCurrentSize + this.f3.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f3.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f3.FBESize

    if ((fbeCurrentSize + this.f4.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f4.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f4.FBESize

    if ((fbeCurrentSize + this.f5.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f5.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f5.FBESize

    if ((fbeCurrentSize + this.f6.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f6.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f6.FBESize

    if ((fbeCurrentSize + this.f7.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f7.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f7.FBESize

    if ((fbeCurrentSize + this.f8.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f8.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f8.FBESize

    if ((fbeCurrentSize + this.f9.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f9.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f9.FBESize

    if ((fbeCurrentSize + this.f10.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f10.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f10.FBESize

    return true
  }

  /**
   * Get the struct value (begin phase)
   * @this {!FieldModelStructHash}
   * @returns {!number} Field model begin offset
   */
  getBegin () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    console.assert((fbeStructOffset > 0) && ((this._buffer.offset + fbeStructOffset + 4 + 4) <= this._buffer.size), 'Model is broken!')
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4 + 4) > this._buffer.size)) {
      return 0
    }

    let fbeStructSize = this.readUInt32(fbeStructOffset)
    console.assert((fbeStructSize >= 4 + 4), 'Model is broken!')
    if (fbeStructSize < 4 + 4) {
      return 0
    }

    this._buffer.shift(fbeStructOffset)
    return fbeStructOffset
  }

  /**
   * Get the struct value (end phase)
   * @this {!FieldModelStructHash}
   * @param {!number} fbeBegin Field model begin offset
   */
  getEnd (fbeBegin) {
    this._buffer.unshift(fbeBegin)
  }

  /**
   * Get the struct value
   * @this {!FieldModelStructHash}
   * @param {!StructHash} fbeValue Default value, defaults is new StructHash()
   * @returns {!StructHash} StructHash value
   */
  get (fbeValue = new StructHash()) {
    let fbeBegin = this.getBegin()
    if (fbeBegin === 0) {
      return fbeValue
    }

    let fbeStructSize = this.readUInt32(0)
    this.getFields(fbeValue, fbeStructSize)
    this.getEnd(fbeBegin)
    return fbeValue
  }

  /**
   * Get the struct fields values
   * @this {!FieldModelStructHash}
   * @param {!StructHash} fbeValue StructHash value
   * @param {!number} fbeStructSize Struct size
   */
  getFields (fbeValue, fbeStructSize) {
    let fbeCurrentSize = 4 + 4

    if ((fbeCurrentSize + this.f1.FBESize) <= fbeStructSize) {
      this.f1.get(fbeValue.f1)
    } else {
      fbeValue.f1.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1.FBESize

    if ((fbeCurrentSize + this.f2.FBESize) <= fbeStructSize) {
      this.f2.get(fbeValue.f2)
    } else {
      fbeValue.f2.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f2.FBESize

    if ((fbeCurrentSize + this.f3.FBESize) <= fbeStructSize) {
      this.f3.get(fbeValue.f3)
    } else {
      fbeValue.f3.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f3.FBESize

    if ((fbeCurrentSize + this.f4.FBESize) <= fbeStructSize) {
      this.f4.get(fbeValue.f4)
    } else {
      fbeValue.f4.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f4.FBESize

    if ((fbeCurrentSize + this.f5.FBESize) <= fbeStructSize) {
      this.f5.get(fbeValue.f5)
    } else {
      fbeValue.f5.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f5.FBESize

    if ((fbeCurrentSize + this.f6.FBESize) <= fbeStructSize) {
      this.f6.get(fbeValue.f6)
    } else {
      fbeValue.f6.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f6.FBESize

    if ((fbeCurrentSize + this.f7.FBESize) <= fbeStructSize) {
      this.f7.get(fbeValue.f7)
    } else {
      fbeValue.f7.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f7.FBESize

    if ((fbeCurrentSize + this.f8.FBESize) <= fbeStructSize) {
      this.f8.get(fbeValue.f8)
    } else {
      fbeValue.f8.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f8.FBESize

    if ((fbeCurrentSize + this.f9.FBESize) <= fbeStructSize) {
      this.f9.get(fbeValue.f9)
    } else {
      fbeValue.f9.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f9.FBESize

    if ((fbeCurrentSize + this.f10.FBESize) <= fbeStructSize) {
      this.f10.get(fbeValue.f10)
    } else {
      fbeValue.f10.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f10.FBESize
  }

  /**
   * Set the struct value (begin phase)
   * @this {!FieldModelStructHash}
   * @returns {!number} Field model begin offset
   */
  setBegin () {
    console.assert(((this._buffer.offset + this.FBEOffset + this.FBESize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructSize = this.FBEBody
    let fbeStructOffset = this._buffer.allocate(fbeStructSize) - this._buffer.offset
    console.assert((fbeStructOffset > 0) && ((this._buffer.offset + fbeStructOffset + fbeStructSize) <= this._buffer.size), 'Model is broken!')
    if ((fbeStructOffset <= 0) || ((this._buffer.offset + fbeStructOffset + fbeStructSize) > this._buffer.size)) {
      return 0
    }

    this.writeUInt32(this.FBEOffset, fbeStructOffset)
    this.writeUInt32(fbeStructOffset, fbeStructSize)
    this.writeUInt32(fbeStructOffset + 4, this.FBEType)

    this._buffer.shift(fbeStructOffset)
    return fbeStructOffset
  }

  /**
   * Set the struct value (end phase)
   * @this {!FieldModelStructHash}
   * @param {!number} fbeBegin Field model begin offset
   */
  setEnd (fbeBegin) {
    this._buffer.unshift(fbeBegin)
  }

  /**
   * Set the struct value
   * @this {!FieldModelStructHash}
   * @param {!StructHash} fbeValue StructHash value
   */
  set (fbeValue) {
    let fbeBegin = this.setBegin()
    if (fbeBegin === 0) {
      return
    }

    this.setFields(fbeValue)
    this.setEnd(fbeBegin)
  }

  /**
   * Set the struct fields values
   * @this {!FieldModelStructHash}
   * @param {StructHash} fbeValue StructHash value
   */
  setFields (fbeValue) {
    this.f1.set(fbeValue.f1)
    this.f2.set(fbeValue.f2)
    this.f3.set(fbeValue.f3)
    this.f4.set(fbeValue.f4)
    this.f5.set(fbeValue.f5)
    this.f6.set(fbeValue.f6)
    this.f7.set(fbeValue.f7)
    this.f8.set(fbeValue.f8)
    this.f9.set(fbeValue.f9)
    this.f10.set(fbeValue.f10)
  }
}

exports.FieldModelStructHash = FieldModelStructHash

/**
 * Fast Binary Encoding StructHash model class
 */
class StructHashModel extends fbe.Model {
  /**
   * Initialize model with the given buffer
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Read/Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer)
    this._model = new FieldModelStructHash(this.buffer, 4)
  }

  /**
   * Get the StructHash model
   * @this {!StructHashModel}
   * @returns {!FieldModelStructHash} model StructHash model
   */
  get model () {
    return this._model
  }

  /**
   * Get the model size
   * @this {!StructHashModel}
   * @returns {!number} Model size
   */
  get FBESize () {
    return this.model.FBESize + this.model.FBEExtra
  }

  /**
   * Get the model type
   * @this {!StructHashModel}
   * @returns {!number} Model type
   */
  get FBEType () {
    return StructHashModel.FBEType
  }

  /**
   * Get the model type (static)
   * @this {!StructHashModel}
   * @returns {!number} Model type
   */
  static get FBEType () {
    return FieldModelStructHash.FBEType
  }

  /**
   * Check if the struct value is valid
   * @this {!StructHashModel}
   * @returns {!boolean} Model valid state
   */
  verify () {
    if ((this.buffer.offset + this.model.FBEOffset - 4) > this.buffer.size) {
      return false
    }

    let fbeFullSize = this.readUInt32(this.model.FBEOffset - 4)
    if (fbeFullSize < this.model.FBESize) {
      return false
    }

    return this.model.verify()
  }

  /**
   * Create a new model (begin phase)
   * @this {!StructHashModel}
   * @returns {!number} Model begin offset
   */
  createBegin () {
    return this.buffer.allocate(4 + this.model.FBESize)
  }

  /**
   * Create a new model (end phase)
   * @this {!StructHashModel}
   * @param {!number} fbeBegin Model begin offset
   */
  createEnd (fbeBegin) {
    let fbeEnd = this.buffer.size
    let fbeFullSize = fbeEnd - fbeBegin
    this.writeUInt32(this.model.FBEOffset - 4, fbeFullSize)
    return fbeFullSize
  }

  /**
   * Serialize the struct value
   * @this {!StructHashModel}
   * @param {!StructHash} value StructHash value
   * @return {!number} Model begin offset
   */
  serialize (value) {
    let fbeBegin = this.createBegin()
    this.model.set(value)
    return this.createEnd(fbeBegin)
  }

  /**
   * Deserialize the struct value
   * @this {!StructHashModel}
   * @param {!StructHash} value StructHash value, defaults is new StructHash()
   * @return {!object} Deserialized StructHash value and its size
   */
  deserialize (value = new StructHash()) {
    if ((this.buffer.offset + this.model.FBEOffset - 4) > this.buffer.size) {
      return { value: new StructHash(), size: 0 }
    }

    let fbeFullSize = this.readUInt32(this.model.FBEOffset - 4)
    console.assert((fbeFullSize >= this.model.FBESize), 'Model is broken!')
    if (fbeFullSize < this.model.FBESize) {
      return { value: new StructHash(), size: 0 }
    }

    this.model.get(value)
    return { value: value, size: fbeFullSize }
  }

  /**
   * Move to the next struct value
   * @this {!StructHashModel}
   * @param {!number} prev Previous StructHash model size
   */
  next (prev) {
    this.model.FBEShift(prev)
  }
}

exports.StructHashModel = StructHashModel

/**
 * Fast Binary Encoding StructHash final model class
 */
class FinalModelStructHash extends fbe.FinalModel {
  /**
   * Initialize final model with the given buffer and offset
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Buffer
   * @param {!number} offset Offset
   * @constructor
   */
  constructor (buffer, offset) {
    super(buffer, offset)
    this._f1 = new fbe.FinalModelMap(new fbe.FinalModelString(buffer, 0), new fbe.FinalModelByte(buffer, 0), buffer, 0)
    this._f2 = new fbe.FinalModelMap(new fbe.FinalModelString(buffer, 0), new fbe.FinalModelOptional(new fbe.FinalModelByte(buffer, 0), buffer, 0), buffer, 0)
    this._f3 = new fbe.FinalModelMap(new fbe.FinalModelString(buffer, 0), new fbe.FinalModelBytes(buffer, 0), buffer, 0)
    this._f4 = new fbe.FinalModelMap(new fbe.FinalModelString(buffer, 0), new fbe.FinalModelOptional(new fbe.FinalModelBytes(buffer, 0), buffer, 0), buffer, 0)
    this._f5 = new fbe.FinalModelMap(new fbe.FinalModelString(buffer, 0), new FinalModelEnumSimple(buffer, 0), buffer, 0)
    this._f6 = new fbe.FinalModelMap(new fbe.FinalModelString(buffer, 0), new fbe.FinalModelOptional(new FinalModelEnumSimple(buffer, 0), buffer, 0), buffer, 0)
    this._f7 = new fbe.FinalModelMap(new fbe.FinalModelString(buffer, 0), new FinalModelFlagsSimple(buffer, 0), buffer, 0)
    this._f8 = new fbe.FinalModelMap(new fbe.FinalModelString(buffer, 0), new fbe.FinalModelOptional(new FinalModelFlagsSimple(buffer, 0), buffer, 0), buffer, 0)
    this._f9 = new fbe.FinalModelMap(new fbe.FinalModelString(buffer, 0), new FinalModelStructSimple(buffer, 0), buffer, 0)
    this._f10 = new fbe.FinalModelMap(new fbe.FinalModelString(buffer, 0), new fbe.FinalModelOptional(new FinalModelStructSimple(buffer, 0), buffer, 0), buffer, 0)
  }

  /**
   * Get the f1 final model
   * @this {!FinalModelStructHash}
   * @returns {!fbe.FinalModelMap} f1 final model
   */
  get f1 () {
    return this._f1
  }

  /**
   * Get the f2 final model
   * @this {!FinalModelStructHash}
   * @returns {!fbe.FinalModelMap} f2 final model
   */
  get f2 () {
    return this._f2
  }

  /**
   * Get the f3 final model
   * @this {!FinalModelStructHash}
   * @returns {!fbe.FinalModelMap} f3 final model
   */
  get f3 () {
    return this._f3
  }

  /**
   * Get the f4 final model
   * @this {!FinalModelStructHash}
   * @returns {!fbe.FinalModelMap} f4 final model
   */
  get f4 () {
    return this._f4
  }

  /**
   * Get the f5 final model
   * @this {!FinalModelStructHash}
   * @returns {!fbe.FinalModelMap} f5 final model
   */
  get f5 () {
    return this._f5
  }

  /**
   * Get the f6 final model
   * @this {!FinalModelStructHash}
   * @returns {!fbe.FinalModelMap} f6 final model
   */
  get f6 () {
    return this._f6
  }

  /**
   * Get the f7 final model
   * @this {!FinalModelStructHash}
   * @returns {!fbe.FinalModelMap} f7 final model
   */
  get f7 () {
    return this._f7
  }

  /**
   * Get the f8 final model
   * @this {!FinalModelStructHash}
   * @returns {!fbe.FinalModelMap} f8 final model
   */
  get f8 () {
    return this._f8
  }

  /**
   * Get the f9 final model
   * @this {!FinalModelStructHash}
   * @returns {!fbe.FinalModelMap} f9 final model
   */
  get f9 () {
    return this._f9
  }

  /**
   * Get the f10 final model
   * @this {!FinalModelStructHash}
   * @returns {!fbe.FinalModelMap} f10 final model
   */
  get f10 () {
    return this._f10
  }

  /**
   * Get the allocation size
   * @this {!FinalModelStructHash}
   * @param {!StructHash} fbeValue StructHash value
   * @returns {!number} Allocation size
   */
  FBEAllocationSize (fbeValue) {
    return 0 + this.f1.FBEAllocationSize(fbeValue.f1) + this.f2.FBEAllocationSize(fbeValue.f2) + this.f3.FBEAllocationSize(fbeValue.f3) + this.f4.FBEAllocationSize(fbeValue.f4) + this.f5.FBEAllocationSize(fbeValue.f5) + this.f6.FBEAllocationSize(fbeValue.f6) + this.f7.FBEAllocationSize(fbeValue.f7) + this.f8.FBEAllocationSize(fbeValue.f8) + this.f9.FBEAllocationSize(fbeValue.f9) + this.f10.FBEAllocationSize(fbeValue.f10)
  }

  /**
   * Get the field type
   * @this {!FinalModelStructHash}
   * @returns {!number} Field type
   */
  get FBEType () {
    return FinalModelStructHash.FBEType
  }

  /**
   * Get the field type (static)
   * @this {!FinalModelStructHash}
   * @returns {!number} Field type
   */
  static get FBEType () {
    return 141
  }

  /**
   * Check if the struct value is valid
   * @this {!FinalModelStructHash}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    this._buffer.shift(this.FBEOffset)
    let fbeResult = this.verifyFields()
    this._buffer.unshift(this.FBEOffset)
    return fbeResult
  }

  /**
   * Check if the struct fields are valid
   * @this {!FinalModelStructHash}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verifyFields () {
    let fbeCurrentOffset = 0
    let fbeFieldSize

    this.f1.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f2.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f2.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f3.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f3.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f4.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f4.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f5.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f5.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f6.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f6.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f7.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f7.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f8.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f8.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f9.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f9.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f10.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f10.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    return fbeCurrentOffset
  }

  /**
   * Get the struct value
   * @this {!FinalModelStructHash}
   * @param {!StructHash} fbeValue StructHash value, defaults is new StructHash()
   * @returns {!object} Result struct value and its size
   */
  get (fbeValue = new StructHash()) {
    this._buffer.shift(this.FBEOffset)
    let fbeSize = this.getFields(fbeValue)
    this._buffer.unshift(this.FBEOffset)
    return { value: fbeValue, size: fbeSize }
  }

  /**
   * Get the struct fields values
   * @this {!FinalModelStructHash}
   * @param {!StructHash} fbeValue StructHash value
   * @returns {!number} Struct size
   */
  getFields (fbeValue) {
    let fbeCurrentOffset = 0
    let fbeCurrentSize = 0
    let fbeResult

    this.f1.FBEOffset = fbeCurrentOffset
    fbeResult = this.f1.get(fbeValue.f1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f2.FBEOffset = fbeCurrentOffset
    fbeResult = this.f2.get(fbeValue.f2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f3.FBEOffset = fbeCurrentOffset
    fbeResult = this.f3.get(fbeValue.f3)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f4.FBEOffset = fbeCurrentOffset
    fbeResult = this.f4.get(fbeValue.f4)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f5.FBEOffset = fbeCurrentOffset
    fbeResult = this.f5.get(fbeValue.f5)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f6.FBEOffset = fbeCurrentOffset
    fbeResult = this.f6.get(fbeValue.f6)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f7.FBEOffset = fbeCurrentOffset
    fbeResult = this.f7.get(fbeValue.f7)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f8.FBEOffset = fbeCurrentOffset
    fbeResult = this.f8.get(fbeValue.f8)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f9.FBEOffset = fbeCurrentOffset
    fbeResult = this.f9.get(fbeValue.f9)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f10.FBEOffset = fbeCurrentOffset
    fbeResult = this.f10.get(fbeValue.f10)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    return fbeCurrentSize
  }

  /**
   * Set the struct value
   * @this {!FinalModelStructHash}
   * @param {!StructHash} fbeValue StructHash value
   * @returns {!number} Final model size
   */
  set (fbeValue) {
    this._buffer.shift(this.FBEOffset)
    let fbeSize = this.setFields(fbeValue)
    this._buffer.unshift(this.FBEOffset)
    return fbeSize
  }

  /**
   * Set the struct fields values
   * @this {!FinalModelStructHash}
   * @param {StructHash} fbeValue StructHash value
   * @returns {!number} Final model size
   */
  setFields (fbeValue) {
    let fbeCurrentOffset = 0
    let fbeCurrentSize = 0
    let fbeFieldSize

    this.f1.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1.set(fbeValue.f1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f2.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f2.set(fbeValue.f2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f3.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f3.set(fbeValue.f3)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f4.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f4.set(fbeValue.f4)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f5.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f5.set(fbeValue.f5)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f6.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f6.set(fbeValue.f6)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f7.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f7.set(fbeValue.f7)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f8.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f8.set(fbeValue.f8)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f9.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f9.set(fbeValue.f9)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f10.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f10.set(fbeValue.f10)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    return fbeCurrentSize
  }
}

exports.FinalModelStructHash = FinalModelStructHash

/**
 * Fast Binary Encoding StructHash final model class
 */
class StructHashFinalModel extends fbe.Model {
  /**
   * Initialize final model with the given buffer
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Read/Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer)
    this._model = new FinalModelStructHash(this.buffer, 8)
  }

  /**
   * Get the model type
   * @this {!StructHashFinalModel}
   * @returns {!number} Model type
   */
  get FBEType () {
    return StructHashFinalModel.FBEType
  }

  /**
   * Get the model type (static)
   * @this {!StructHashFinalModel}
   * @returns {!number} Model type
   */
  static get FBEType () {
    return FinalModelStructHash.FBEType
  }

  /**
   * Check if the struct value is valid
   * @this {!StructHashFinalModel}
   * @returns {!boolean} Model valid state
   */
  verify () {
    if ((this.buffer.offset + this._model.FBEOffset) > this.buffer.size) {
      return false
    }

    let fbeStructSize = this.readUInt32(this._model.FBEOffset - 8)
    let fbeStructType = this.readUInt32(this._model.FBEOffset - 4)
    if ((fbeStructSize <= 0) || (fbeStructType !== this.FBEType)) {
      return false
    }

    return ((8 + this._model.verify()) === fbeStructSize)
  }

  /**
   * Serialize the struct value
   * @this {!StructHashFinalModel}
   * @param {!StructHash} value StructHash value
   * @return {!number} Struct size
   */
  serialize (value) {
    let fbeInitialSize = this.buffer.size

    let fbeStructType = this.FBEType
    let fbeStructSize = 8 + this._model.FBEAllocationSize(value)
    let fbeStructOffset = this.buffer.allocate(fbeStructSize) - this.buffer.offset
    console.assert(((this.buffer.offset + fbeStructOffset + fbeStructSize) <= this.buffer.size), 'Model is broken!')
    if ((this.buffer.offset + fbeStructOffset + fbeStructSize) > this.buffer.size) {
      return 0
    }

    fbeStructSize = 8 + this._model.set(value)
    this.buffer.resize(fbeInitialSize + fbeStructSize)

    this.writeUInt32(this._model.FBEOffset - 8, fbeStructSize)
    this.writeUInt32(this._model.FBEOffset - 4, fbeStructType)

    return fbeStructSize
  }

  /**
   * Deserialize the struct value
   * @this {!StructHashFinalModel}
   * @param {!StructHash} value StructHash value, defaults is new StructHash()
   * @return {!object} Deserialized StructHash value and its size
   */
  deserialize (value = new StructHash()) {
    console.assert(((this.buffer.offset + this._model.FBEOffset) <= this.buffer.size), 'Model is broken!')
    if ((this.buffer.offset + this._model.FBEOffset) > this.buffer.size) {
      return { value: new StructHash(), size: 0 }
    }

    let fbeStructSize = this.readUInt32(this._model.FBEOffset - 8)
    let fbeStructType = this.readUInt32(this._model.FBEOffset - 4)
    console.assert(((fbeStructSize > 0) && (fbeStructType === this.FBEType)), 'Model is broken!')
    if ((fbeStructSize <= 0) || (fbeStructType !== this.FBEType)) {
      return { value: new StructHash(), size: 8 }
    }

    let fbeResult = this._model.get(value)
    return { value: fbeResult.value, size: (8 + fbeResult.size) }
  }

  /**
   * Move to the next struct value
   * @this {!StructHashFinalModel}
   * @param {!number} prev Previous StructHash model size
   */
  next (prev) {
    this._model.FBEShift(prev)
  }
}

exports.StructHashFinalModel = StructHashFinalModel

/**
 * StructHashEx struct
 */
class StructHashEx {
  /**
   * Initialize struct
   * @param {!Map=} f1
   * @param {Map=} f2
   * @constructor
   */
  constructor (f1 = new Map(), f2 = new Map()) {
    this.f1 = f1
    this.f2 = f2
  }

  /**
   * Copy struct
   * @this {!StructHashEx}
   * @param {!StructHashEx} other Other struct
   * @returns {!StructHashEx} This struct
   */
  copy (other) {
    if (other.f1 != null) {
      this.f1 = new Map()
      Object.keys(other.f1).forEach(key => {
        if (key != null) {
          let tempKey
          tempKey = StructSimple.fromObject(key)
          if (other.f1[key] != null) {
            let tempValue
            tempValue = StructNested.fromObject(other.f1[key])
            this.f1.set(tempKey, tempValue)
          } else {
            this.f1.set(tempKey, undefined)
          }
        }
      })
    } else {
      this.f1 = undefined
    }
    if (other.f2 != null) {
      this.f2 = new Map()
      Object.keys(other.f2).forEach(key => {
        if (key != null) {
          let tempKey
          tempKey = StructSimple.fromObject(key)
          if (other.f2[key] != null) {
            let tempValue
            tempValue = StructNested.fromObject(other.f2[key])
            this.f2.set(tempKey, tempValue)
          } else {
            this.f2.set(tempKey, undefined)
          }
        }
      })
    } else {
      this.f2 = undefined
    }
    return this
  }

  /**
   * Clone struct
   * @this {!StructHashEx}
   * @returns {!StructHashEx} Cloned struct
   */
  clone () {
    // Serialize the struct to the FBE stream
    let writer = new StructHashExModel(new fbe.WriteBuffer())
    writer.serialize(this)

    // Deserialize the struct from the FBE stream
    let reader = new StructHashExModel(new fbe.ReadBuffer())
    reader.attachBuffer(writer.buffer)
    return reader.deserialize().value
  }

  /**
   * Is this struct equal to other one?
   * @this {!StructHashEx}
   * @param {!StructHashEx} other Other struct
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof StructHashEx)) {
      throw new TypeError('Instance of StructHashEx is required!')
    }
    return true
  }

  /**
   * Convert struct to string
   * @this {!StructHashEx}
   * @returns {!string} Struct value string
   */
  toString () {
    let result = ''
    result += 'StructHashEx('
    result += 'f1='
    if (this.f1 != null) {
      let first = true
      result += '['
      result += this.f1.size
      result += ']<{'
      for (let [key, value] of this.f1) {
        result += first ? '' : ','
        result += key.toString()
        result += '->'
        result += first ? '' : ','
        result += value.toString()
        first = false
      }
      result += '}>'
    }
    result += ',f2='
    if (this.f2 != null) {
      let first = true
      result += '['
      result += this.f2.size
      result += ']<{'
      for (let [key, value] of this.f2) {
        result += first ? '' : ','
        result += key.toString()
        result += '->'
        if (value != null) {
          result += first ? '' : ','
          result += value.toString()
        } else {
          result += 'null'
        }
        first = false
      }
      result += '}>'
    }
    result += ')'
    return result
  }

  /**
   * Inspect struct
   * @this {!StructHashEx}
   * @returns {!string} Struct value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert struct to JSON
   * @this {!StructHashEx}
   * @returns {!object} Struct value for JSON
   */
  toJSON () {
    return {
      f1: ((this.f1 != null) ? fbe.MapToObject(new Map(Array.from(this.f1, item => [((item[0] != null) ? item[0] : null), ((item[1] != null) ? item[1] : null)]))) : null),
      f2: ((this.f2 != null) ? fbe.MapToObject(new Map(Array.from(this.f2, item => [((item[0] != null) ? item[0] : null), ((item[1] != null) ? item[1] : null)]))) : null)
    }
  }

  /**
   * Convert JSON to struct
   * @param {!string} json JSON string
   * @returns {!object} Struct value for JSON
   */
  static fromJSON (json) {
    return StructHashEx.fromObject(JSON.parse(json))
  }

  /**
   * Create struct from object value
   * @param {!StructHashEx} other Object value
   * @returns {!StructHashEx} Created struct
   */
  static fromObject (other) {
    return new StructHashEx().copy(other)
  }
}

exports.StructHashEx = StructHashEx

/**
 * Fast Binary Encoding StructHashEx field model class
 */
class FieldModelStructHashEx extends fbe.FieldModel {
  /**
   * Initialize field model with the given buffer and offset
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Buffer
   * @param {!number} offset Offset
   * @constructor
   */
  constructor (buffer, offset) {
    super(buffer, offset)
    this._f1 = new fbe.FieldModelMap(new FieldModelStructSimple(buffer, 4 + 4), new FieldModelStructNested(buffer, 4 + 4), buffer, 4 + 4)
    this._f2 = new fbe.FieldModelMap(new FieldModelStructSimple(buffer, this._f1.FBEOffset + this._f1.FBESize), new fbe.FieldModelOptional(new FieldModelStructNested(buffer, this._f1.FBEOffset + this._f1.FBESize), buffer, this._f1.FBEOffset + this._f1.FBESize), buffer, this._f1.FBEOffset + this._f1.FBESize)
  }

  /**
   * Get the f1 field model
   * @this {!FieldModelStructHashEx}
   * @returns {!fbe.FieldModelMap} f1 field model
   */
  get f1 () {
    return this._f1
  }

  /**
   * Get the f2 field model
   * @this {!FieldModelStructHashEx}
   * @returns {!fbe.FieldModelMap} f2 field model
   */
  get f2 () {
    return this._f2
  }

  /**
   * Get the field size
   * @this {!FieldModelStructHashEx}
   * @returns {!number} Field size
   */
  get FBESize () {
    return 4
  }

  /**
   * Get the field body size
   * @this {!FieldModelStructHashEx}
   * @returns {!number} Field body size
   */
  get FBEBody () {
    return 4 + 4 + this.f1.FBESize + this.f2.FBESize
  }

  /**
   * Get the field extra size
   * @this {!FieldModelStructHashEx}
   * @returns {!number} Field extra size
   */
  get FBEExtra () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4) > this._buffer.size)) {
      return 0
    }

    this._buffer.shift(fbeStructOffset)

    let fbeResult = this.FBEBody + this.f1.FBEExtra + this.f2.FBEExtra

    this._buffer.unshift(fbeStructOffset)

    return fbeResult
  }

  /**
   * Get the field type
   * @this {!FieldModelStructHashEx}
   * @returns {!number} Field type
   */
  get FBEType () {
    return FieldModelStructHashEx.FBEType
  }

  /**
   * Get the field type (static)
   * @this {!FieldModelStructHashEx}
   * @returns {!number} Field type
   */
  static get FBEType () {
    return 142
  }

  /**
   * Check if the struct value is valid
   * @this {!FieldModelStructHashEx}
   * @param {!boolean} fbeVerifyType Verify model type flag, defaults is true
   * @returns {!boolean} Field model valid state
   */
  verify (fbeVerifyType = true) {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return true
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4 + 4) > this._buffer.size)) {
      return false
    }

    let fbeStructSize = this.readUInt32(fbeStructOffset)
    if (fbeStructSize < 4 + 4) {
      return false
    }

    let fbeStructType = this.readUInt32(fbeStructOffset + 4)
    if (fbeVerifyType && (fbeStructType !== this.FBEType)) {
      return false
    }

    this._buffer.shift(fbeStructOffset)
    let fbeResult = this.verifyFields(fbeStructSize)
    this._buffer.unshift(fbeStructOffset)
    return fbeResult
  }

  /**
   * Check if the struct fields are valid
   * @this {!FieldModelStructHashEx}
   * @param {!number} fbeStructSize FBE struct size
   * @returns {!boolean} Field model valid state
   */
  verifyFields (fbeStructSize) {
    let fbeCurrentSize = 4 + 4

    if ((fbeCurrentSize + this.f1.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f1.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1.FBESize

    if ((fbeCurrentSize + this.f2.FBESize) > fbeStructSize) {
      return true
    }
    if (!this.f2.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f2.FBESize

    return true
  }

  /**
   * Get the struct value (begin phase)
   * @this {!FieldModelStructHashEx}
   * @returns {!number} Field model begin offset
   */
  getBegin () {
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructOffset = this.readUInt32(this.FBEOffset)
    console.assert((fbeStructOffset > 0) && ((this._buffer.offset + fbeStructOffset + 4 + 4) <= this._buffer.size), 'Model is broken!')
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4 + 4) > this._buffer.size)) {
      return 0
    }

    let fbeStructSize = this.readUInt32(fbeStructOffset)
    console.assert((fbeStructSize >= 4 + 4), 'Model is broken!')
    if (fbeStructSize < 4 + 4) {
      return 0
    }

    this._buffer.shift(fbeStructOffset)
    return fbeStructOffset
  }

  /**
   * Get the struct value (end phase)
   * @this {!FieldModelStructHashEx}
   * @param {!number} fbeBegin Field model begin offset
   */
  getEnd (fbeBegin) {
    this._buffer.unshift(fbeBegin)
  }

  /**
   * Get the struct value
   * @this {!FieldModelStructHashEx}
   * @param {!StructHashEx} fbeValue Default value, defaults is new StructHashEx()
   * @returns {!StructHashEx} StructHashEx value
   */
  get (fbeValue = new StructHashEx()) {
    let fbeBegin = this.getBegin()
    if (fbeBegin === 0) {
      return fbeValue
    }

    let fbeStructSize = this.readUInt32(0)
    this.getFields(fbeValue, fbeStructSize)
    this.getEnd(fbeBegin)
    return fbeValue
  }

  /**
   * Get the struct fields values
   * @this {!FieldModelStructHashEx}
   * @param {!StructHashEx} fbeValue StructHashEx value
   * @param {!number} fbeStructSize Struct size
   */
  getFields (fbeValue, fbeStructSize) {
    let fbeCurrentSize = 4 + 4

    if ((fbeCurrentSize + this.f1.FBESize) <= fbeStructSize) {
      this.f1.get(fbeValue.f1)
    } else {
      fbeValue.f1.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f1.FBESize

    if ((fbeCurrentSize + this.f2.FBESize) <= fbeStructSize) {
      this.f2.get(fbeValue.f2)
    } else {
      fbeValue.f2.clear()
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.f2.FBESize
  }

  /**
   * Set the struct value (begin phase)
   * @this {!FieldModelStructHashEx}
   * @returns {!number} Field model begin offset
   */
  setBegin () {
    console.assert(((this._buffer.offset + this.FBEOffset + this.FBESize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.FBEOffset + this.FBESize) > this._buffer.size) {
      return 0
    }

    let fbeStructSize = this.FBEBody
    let fbeStructOffset = this._buffer.allocate(fbeStructSize) - this._buffer.offset
    console.assert((fbeStructOffset > 0) && ((this._buffer.offset + fbeStructOffset + fbeStructSize) <= this._buffer.size), 'Model is broken!')
    if ((fbeStructOffset <= 0) || ((this._buffer.offset + fbeStructOffset + fbeStructSize) > this._buffer.size)) {
      return 0
    }

    this.writeUInt32(this.FBEOffset, fbeStructOffset)
    this.writeUInt32(fbeStructOffset, fbeStructSize)
    this.writeUInt32(fbeStructOffset + 4, this.FBEType)

    this._buffer.shift(fbeStructOffset)
    return fbeStructOffset
  }

  /**
   * Set the struct value (end phase)
   * @this {!FieldModelStructHashEx}
   * @param {!number} fbeBegin Field model begin offset
   */
  setEnd (fbeBegin) {
    this._buffer.unshift(fbeBegin)
  }

  /**
   * Set the struct value
   * @this {!FieldModelStructHashEx}
   * @param {!StructHashEx} fbeValue StructHashEx value
   */
  set (fbeValue) {
    let fbeBegin = this.setBegin()
    if (fbeBegin === 0) {
      return
    }

    this.setFields(fbeValue)
    this.setEnd(fbeBegin)
  }

  /**
   * Set the struct fields values
   * @this {!FieldModelStructHashEx}
   * @param {StructHashEx} fbeValue StructHashEx value
   */
  setFields (fbeValue) {
    this.f1.set(fbeValue.f1)
    this.f2.set(fbeValue.f2)
  }
}

exports.FieldModelStructHashEx = FieldModelStructHashEx

/**
 * Fast Binary Encoding StructHashEx model class
 */
class StructHashExModel extends fbe.Model {
  /**
   * Initialize model with the given buffer
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Read/Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer)
    this._model = new FieldModelStructHashEx(this.buffer, 4)
  }

  /**
   * Get the StructHashEx model
   * @this {!StructHashExModel}
   * @returns {!FieldModelStructHashEx} model StructHashEx model
   */
  get model () {
    return this._model
  }

  /**
   * Get the model size
   * @this {!StructHashExModel}
   * @returns {!number} Model size
   */
  get FBESize () {
    return this.model.FBESize + this.model.FBEExtra
  }

  /**
   * Get the model type
   * @this {!StructHashExModel}
   * @returns {!number} Model type
   */
  get FBEType () {
    return StructHashExModel.FBEType
  }

  /**
   * Get the model type (static)
   * @this {!StructHashExModel}
   * @returns {!number} Model type
   */
  static get FBEType () {
    return FieldModelStructHashEx.FBEType
  }

  /**
   * Check if the struct value is valid
   * @this {!StructHashExModel}
   * @returns {!boolean} Model valid state
   */
  verify () {
    if ((this.buffer.offset + this.model.FBEOffset - 4) > this.buffer.size) {
      return false
    }

    let fbeFullSize = this.readUInt32(this.model.FBEOffset - 4)
    if (fbeFullSize < this.model.FBESize) {
      return false
    }

    return this.model.verify()
  }

  /**
   * Create a new model (begin phase)
   * @this {!StructHashExModel}
   * @returns {!number} Model begin offset
   */
  createBegin () {
    return this.buffer.allocate(4 + this.model.FBESize)
  }

  /**
   * Create a new model (end phase)
   * @this {!StructHashExModel}
   * @param {!number} fbeBegin Model begin offset
   */
  createEnd (fbeBegin) {
    let fbeEnd = this.buffer.size
    let fbeFullSize = fbeEnd - fbeBegin
    this.writeUInt32(this.model.FBEOffset - 4, fbeFullSize)
    return fbeFullSize
  }

  /**
   * Serialize the struct value
   * @this {!StructHashExModel}
   * @param {!StructHashEx} value StructHashEx value
   * @return {!number} Model begin offset
   */
  serialize (value) {
    let fbeBegin = this.createBegin()
    this.model.set(value)
    return this.createEnd(fbeBegin)
  }

  /**
   * Deserialize the struct value
   * @this {!StructHashExModel}
   * @param {!StructHashEx} value StructHashEx value, defaults is new StructHashEx()
   * @return {!object} Deserialized StructHashEx value and its size
   */
  deserialize (value = new StructHashEx()) {
    if ((this.buffer.offset + this.model.FBEOffset - 4) > this.buffer.size) {
      return { value: new StructHashEx(), size: 0 }
    }

    let fbeFullSize = this.readUInt32(this.model.FBEOffset - 4)
    console.assert((fbeFullSize >= this.model.FBESize), 'Model is broken!')
    if (fbeFullSize < this.model.FBESize) {
      return { value: new StructHashEx(), size: 0 }
    }

    this.model.get(value)
    return { value: value, size: fbeFullSize }
  }

  /**
   * Move to the next struct value
   * @this {!StructHashExModel}
   * @param {!number} prev Previous StructHashEx model size
   */
  next (prev) {
    this.model.FBEShift(prev)
  }
}

exports.StructHashExModel = StructHashExModel

/**
 * Fast Binary Encoding StructHashEx final model class
 */
class FinalModelStructHashEx extends fbe.FinalModel {
  /**
   * Initialize final model with the given buffer and offset
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Buffer
   * @param {!number} offset Offset
   * @constructor
   */
  constructor (buffer, offset) {
    super(buffer, offset)
    this._f1 = new fbe.FinalModelMap(new FinalModelStructSimple(buffer, 0), new FinalModelStructNested(buffer, 0), buffer, 0)
    this._f2 = new fbe.FinalModelMap(new FinalModelStructSimple(buffer, 0), new fbe.FinalModelOptional(new FinalModelStructNested(buffer, 0), buffer, 0), buffer, 0)
  }

  /**
   * Get the f1 final model
   * @this {!FinalModelStructHashEx}
   * @returns {!fbe.FinalModelMap} f1 final model
   */
  get f1 () {
    return this._f1
  }

  /**
   * Get the f2 final model
   * @this {!FinalModelStructHashEx}
   * @returns {!fbe.FinalModelMap} f2 final model
   */
  get f2 () {
    return this._f2
  }

  /**
   * Get the allocation size
   * @this {!FinalModelStructHashEx}
   * @param {!StructHashEx} fbeValue StructHashEx value
   * @returns {!number} Allocation size
   */
  FBEAllocationSize (fbeValue) {
    return 0 + this.f1.FBEAllocationSize(fbeValue.f1) + this.f2.FBEAllocationSize(fbeValue.f2)
  }

  /**
   * Get the field type
   * @this {!FinalModelStructHashEx}
   * @returns {!number} Field type
   */
  get FBEType () {
    return FinalModelStructHashEx.FBEType
  }

  /**
   * Get the field type (static)
   * @this {!FinalModelStructHashEx}
   * @returns {!number} Field type
   */
  static get FBEType () {
    return 142
  }

  /**
   * Check if the struct value is valid
   * @this {!FinalModelStructHashEx}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    this._buffer.shift(this.FBEOffset)
    let fbeResult = this.verifyFields()
    this._buffer.unshift(this.FBEOffset)
    return fbeResult
  }

  /**
   * Check if the struct fields are valid
   * @this {!FinalModelStructHashEx}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verifyFields () {
    let fbeCurrentOffset = 0
    let fbeFieldSize

    this.f1.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.f2.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f2.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    return fbeCurrentOffset
  }

  /**
   * Get the struct value
   * @this {!FinalModelStructHashEx}
   * @param {!StructHashEx} fbeValue StructHashEx value, defaults is new StructHashEx()
   * @returns {!object} Result struct value and its size
   */
  get (fbeValue = new StructHashEx()) {
    this._buffer.shift(this.FBEOffset)
    let fbeSize = this.getFields(fbeValue)
    this._buffer.unshift(this.FBEOffset)
    return { value: fbeValue, size: fbeSize }
  }

  /**
   * Get the struct fields values
   * @this {!FinalModelStructHashEx}
   * @param {!StructHashEx} fbeValue StructHashEx value
   * @returns {!number} Struct size
   */
  getFields (fbeValue) {
    let fbeCurrentOffset = 0
    let fbeCurrentSize = 0
    let fbeResult

    this.f1.FBEOffset = fbeCurrentOffset
    fbeResult = this.f1.get(fbeValue.f1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.f2.FBEOffset = fbeCurrentOffset
    fbeResult = this.f2.get(fbeValue.f2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    return fbeCurrentSize
  }

  /**
   * Set the struct value
   * @this {!FinalModelStructHashEx}
   * @param {!StructHashEx} fbeValue StructHashEx value
   * @returns {!number} Final model size
   */
  set (fbeValue) {
    this._buffer.shift(this.FBEOffset)
    let fbeSize = this.setFields(fbeValue)
    this._buffer.unshift(this.FBEOffset)
    return fbeSize
  }

  /**
   * Set the struct fields values
   * @this {!FinalModelStructHashEx}
   * @param {StructHashEx} fbeValue StructHashEx value
   * @returns {!number} Final model size
   */
  setFields (fbeValue) {
    let fbeCurrentOffset = 0
    let fbeCurrentSize = 0
    let fbeFieldSize

    this.f1.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f1.set(fbeValue.f1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.f2.FBEOffset = fbeCurrentOffset
    fbeFieldSize = this.f2.set(fbeValue.f2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    return fbeCurrentSize
  }
}

exports.FinalModelStructHashEx = FinalModelStructHashEx

/**
 * Fast Binary Encoding StructHashEx final model class
 */
class StructHashExFinalModel extends fbe.Model {
  /**
   * Initialize final model with the given buffer
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Read/Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer)
    this._model = new FinalModelStructHashEx(this.buffer, 8)
  }

  /**
   * Get the model type
   * @this {!StructHashExFinalModel}
   * @returns {!number} Model type
   */
  get FBEType () {
    return StructHashExFinalModel.FBEType
  }

  /**
   * Get the model type (static)
   * @this {!StructHashExFinalModel}
   * @returns {!number} Model type
   */
  static get FBEType () {
    return FinalModelStructHashEx.FBEType
  }

  /**
   * Check if the struct value is valid
   * @this {!StructHashExFinalModel}
   * @returns {!boolean} Model valid state
   */
  verify () {
    if ((this.buffer.offset + this._model.FBEOffset) > this.buffer.size) {
      return false
    }

    let fbeStructSize = this.readUInt32(this._model.FBEOffset - 8)
    let fbeStructType = this.readUInt32(this._model.FBEOffset - 4)
    if ((fbeStructSize <= 0) || (fbeStructType !== this.FBEType)) {
      return false
    }

    return ((8 + this._model.verify()) === fbeStructSize)
  }

  /**
   * Serialize the struct value
   * @this {!StructHashExFinalModel}
   * @param {!StructHashEx} value StructHashEx value
   * @return {!number} Struct size
   */
  serialize (value) {
    let fbeInitialSize = this.buffer.size

    let fbeStructType = this.FBEType
    let fbeStructSize = 8 + this._model.FBEAllocationSize(value)
    let fbeStructOffset = this.buffer.allocate(fbeStructSize) - this.buffer.offset
    console.assert(((this.buffer.offset + fbeStructOffset + fbeStructSize) <= this.buffer.size), 'Model is broken!')
    if ((this.buffer.offset + fbeStructOffset + fbeStructSize) > this.buffer.size) {
      return 0
    }

    fbeStructSize = 8 + this._model.set(value)
    this.buffer.resize(fbeInitialSize + fbeStructSize)

    this.writeUInt32(this._model.FBEOffset - 8, fbeStructSize)
    this.writeUInt32(this._model.FBEOffset - 4, fbeStructType)

    return fbeStructSize
  }

  /**
   * Deserialize the struct value
   * @this {!StructHashExFinalModel}
   * @param {!StructHashEx} value StructHashEx value, defaults is new StructHashEx()
   * @return {!object} Deserialized StructHashEx value and its size
   */
  deserialize (value = new StructHashEx()) {
    console.assert(((this.buffer.offset + this._model.FBEOffset) <= this.buffer.size), 'Model is broken!')
    if ((this.buffer.offset + this._model.FBEOffset) > this.buffer.size) {
      return { value: new StructHashEx(), size: 0 }
    }

    let fbeStructSize = this.readUInt32(this._model.FBEOffset - 8)
    let fbeStructType = this.readUInt32(this._model.FBEOffset - 4)
    console.assert(((fbeStructSize > 0) && (fbeStructType === this.FBEType)), 'Model is broken!')
    if ((fbeStructSize <= 0) || (fbeStructType !== this.FBEType)) {
      return { value: new StructHashEx(), size: 8 }
    }

    let fbeResult = this._model.get(value)
    return { value: fbeResult.value, size: (8 + fbeResult.size) }
  }

  /**
   * Move to the next struct value
   * @this {!StructHashExFinalModel}
   * @param {!number} prev Previous StructHashEx model size
   */
  next (prev) {
    this._model.FBEShift(prev)
  }
}

exports.StructHashExFinalModel = StructHashExFinalModel

/**
 * Fast Binary Encoding test sender class
 */
class Sender extends fbe.Sender {
  /**
   * Initialize test sender with the given buffer
   * @param {!fbe.WriteBuffer} buffer Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer, false, false)
    this._protoSender = new proto.Sender(this.buffer)
    this._structsimpleModel = new StructSimpleModel(this.buffer)
    this._structoptionalModel = new StructOptionalModel(this.buffer)
    this._structnestedModel = new StructNestedModel(this.buffer)
    this._structbytesModel = new StructBytesModel(this.buffer)
    this._structarrayModel = new StructArrayModel(this.buffer)
    this._structvectorModel = new StructVectorModel(this.buffer)
    this._structlistModel = new StructListModel(this.buffer)
    this._structsetModel = new StructSetModel(this.buffer)
    this._structmapModel = new StructMapModel(this.buffer)
    this._structhashModel = new StructHashModel(this.buffer)
    this._structhashexModel = new StructHashExModel(this.buffer)
  }

  // Imported senders

  /**
   * Get imported proto sender
   * @this {!Sender}
   * @returns {!proto.Sender} proto sender
   */
  get protoSender () {
    return this._protoSender
  }

  // Sender models accessors

  /**
   * Get StructSimple model
   * @this {!Sender}
   * @returns {!StructSimpleModel} StructSimple model
   */
  get structsimpleModel () {
    return this._structsimpleModel
  }

  /**
   * Get StructOptional model
   * @this {!Sender}
   * @returns {!StructOptionalModel} StructOptional model
   */
  get structoptionalModel () {
    return this._structoptionalModel
  }

  /**
   * Get StructNested model
   * @this {!Sender}
   * @returns {!StructNestedModel} StructNested model
   */
  get structnestedModel () {
    return this._structnestedModel
  }

  /**
   * Get StructBytes model
   * @this {!Sender}
   * @returns {!StructBytesModel} StructBytes model
   */
  get structbytesModel () {
    return this._structbytesModel
  }

  /**
   * Get StructArray model
   * @this {!Sender}
   * @returns {!StructArrayModel} StructArray model
   */
  get structarrayModel () {
    return this._structarrayModel
  }

  /**
   * Get StructVector model
   * @this {!Sender}
   * @returns {!StructVectorModel} StructVector model
   */
  get structvectorModel () {
    return this._structvectorModel
  }

  /**
   * Get StructList model
   * @this {!Sender}
   * @returns {!StructListModel} StructList model
   */
  get structlistModel () {
    return this._structlistModel
  }

  /**
   * Get StructSet model
   * @this {!Sender}
   * @returns {!StructSetModel} StructSet model
   */
  get structsetModel () {
    return this._structsetModel
  }

  /**
   * Get StructMap model
   * @this {!Sender}
   * @returns {!StructMapModel} StructMap model
   */
  get structmapModel () {
    return this._structmapModel
  }

  /**
   * Get StructHash model
   * @this {!Sender}
   * @returns {!StructHashModel} StructHash model
   */
  get structhashModel () {
    return this._structhashModel
  }

  /**
   * Get StructHashEx model
   * @this {!Sender}
   * @returns {!StructHashExModel} StructHashEx model
   */
  get structhashexModel () {
    return this._structhashexModel
  }

  // Send methods

  /**
   * Send value
   * @this {!Sender}
   * @param {!object} value Value to send
   * @returns {!number} Sent bytes
   */
  send (value) {
    if (value instanceof StructSimple) {
      return this.send_structsimple(value)
    }
    if (value instanceof StructOptional) {
      return this.send_structoptional(value)
    }
    if (value instanceof StructNested) {
      return this.send_structnested(value)
    }
    if (value instanceof StructBytes) {
      return this.send_structbytes(value)
    }
    if (value instanceof StructArray) {
      return this.send_structarray(value)
    }
    if (value instanceof StructVector) {
      return this.send_structvector(value)
    }
    if (value instanceof StructList) {
      return this.send_structlist(value)
    }
    if (value instanceof StructSet) {
      return this.send_structset(value)
    }
    if (value instanceof StructMap) {
      return this.send_structmap(value)
    }
    if (value instanceof StructHash) {
      return this.send_structhash(value)
    }
    if (value instanceof StructHashEx) {
      return this.send_structhashex(value)
    }
    let result = this._protoSender.send(value)
    if (result > 0) {
      return result
    }
    return 0
  }

  /**
   * Send StructSimple value
   * @this {!Sender}
   * @param {!StructSimple} value StructSimple value to send
   * @returns {!number} Sent bytes
   */
  send_structsimple (value) { // eslint-disable-line
    // Serialize the value into the FBE stream
    let serialized = this.structsimpleModel.serialize(value)
    console.assert((serialized > 0), 'test.StructSimple serialization failed!')
    console.assert(this.structsimpleModel.verify(), 'test.StructSimple validation failed!')

    // Log the value
    if (this.logging) {
      this.onSendLog(value.toString())
    }

    // Send the serialized value
    return this.sendSerialized(serialized)
  }

  /**
   * Send StructOptional value
   * @this {!Sender}
   * @param {!StructOptional} value StructOptional value to send
   * @returns {!number} Sent bytes
   */
  send_structoptional (value) { // eslint-disable-line
    // Serialize the value into the FBE stream
    let serialized = this.structoptionalModel.serialize(value)
    console.assert((serialized > 0), 'test.StructOptional serialization failed!')
    console.assert(this.structoptionalModel.verify(), 'test.StructOptional validation failed!')

    // Log the value
    if (this.logging) {
      this.onSendLog(value.toString())
    }

    // Send the serialized value
    return this.sendSerialized(serialized)
  }

  /**
   * Send StructNested value
   * @this {!Sender}
   * @param {!StructNested} value StructNested value to send
   * @returns {!number} Sent bytes
   */
  send_structnested (value) { // eslint-disable-line
    // Serialize the value into the FBE stream
    let serialized = this.structnestedModel.serialize(value)
    console.assert((serialized > 0), 'test.StructNested serialization failed!')
    console.assert(this.structnestedModel.verify(), 'test.StructNested validation failed!')

    // Log the value
    if (this.logging) {
      this.onSendLog(value.toString())
    }

    // Send the serialized value
    return this.sendSerialized(serialized)
  }

  /**
   * Send StructBytes value
   * @this {!Sender}
   * @param {!StructBytes} value StructBytes value to send
   * @returns {!number} Sent bytes
   */
  send_structbytes (value) { // eslint-disable-line
    // Serialize the value into the FBE stream
    let serialized = this.structbytesModel.serialize(value)
    console.assert((serialized > 0), 'test.StructBytes serialization failed!')
    console.assert(this.structbytesModel.verify(), 'test.StructBytes validation failed!')

    // Log the value
    if (this.logging) {
      this.onSendLog(value.toString())
    }

    // Send the serialized value
    return this.sendSerialized(serialized)
  }

  /**
   * Send StructArray value
   * @this {!Sender}
   * @param {!StructArray} value StructArray value to send
   * @returns {!number} Sent bytes
   */
  send_structarray (value) { // eslint-disable-line
    // Serialize the value into the FBE stream
    let serialized = this.structarrayModel.serialize(value)
    console.assert((serialized > 0), 'test.StructArray serialization failed!')
    console.assert(this.structarrayModel.verify(), 'test.StructArray validation failed!')

    // Log the value
    if (this.logging) {
      this.onSendLog(value.toString())
    }

    // Send the serialized value
    return this.sendSerialized(serialized)
  }

  /**
   * Send StructVector value
   * @this {!Sender}
   * @param {!StructVector} value StructVector value to send
   * @returns {!number} Sent bytes
   */
  send_structvector (value) { // eslint-disable-line
    // Serialize the value into the FBE stream
    let serialized = this.structvectorModel.serialize(value)
    console.assert((serialized > 0), 'test.StructVector serialization failed!')
    console.assert(this.structvectorModel.verify(), 'test.StructVector validation failed!')

    // Log the value
    if (this.logging) {
      this.onSendLog(value.toString())
    }

    // Send the serialized value
    return this.sendSerialized(serialized)
  }

  /**
   * Send StructList value
   * @this {!Sender}
   * @param {!StructList} value StructList value to send
   * @returns {!number} Sent bytes
   */
  send_structlist (value) { // eslint-disable-line
    // Serialize the value into the FBE stream
    let serialized = this.structlistModel.serialize(value)
    console.assert((serialized > 0), 'test.StructList serialization failed!')
    console.assert(this.structlistModel.verify(), 'test.StructList validation failed!')

    // Log the value
    if (this.logging) {
      this.onSendLog(value.toString())
    }

    // Send the serialized value
    return this.sendSerialized(serialized)
  }

  /**
   * Send StructSet value
   * @this {!Sender}
   * @param {!StructSet} value StructSet value to send
   * @returns {!number} Sent bytes
   */
  send_structset (value) { // eslint-disable-line
    // Serialize the value into the FBE stream
    let serialized = this.structsetModel.serialize(value)
    console.assert((serialized > 0), 'test.StructSet serialization failed!')
    console.assert(this.structsetModel.verify(), 'test.StructSet validation failed!')

    // Log the value
    if (this.logging) {
      this.onSendLog(value.toString())
    }

    // Send the serialized value
    return this.sendSerialized(serialized)
  }

  /**
   * Send StructMap value
   * @this {!Sender}
   * @param {!StructMap} value StructMap value to send
   * @returns {!number} Sent bytes
   */
  send_structmap (value) { // eslint-disable-line
    // Serialize the value into the FBE stream
    let serialized = this.structmapModel.serialize(value)
    console.assert((serialized > 0), 'test.StructMap serialization failed!')
    console.assert(this.structmapModel.verify(), 'test.StructMap validation failed!')

    // Log the value
    if (this.logging) {
      this.onSendLog(value.toString())
    }

    // Send the serialized value
    return this.sendSerialized(serialized)
  }

  /**
   * Send StructHash value
   * @this {!Sender}
   * @param {!StructHash} value StructHash value to send
   * @returns {!number} Sent bytes
   */
  send_structhash (value) { // eslint-disable-line
    // Serialize the value into the FBE stream
    let serialized = this.structhashModel.serialize(value)
    console.assert((serialized > 0), 'test.StructHash serialization failed!')
    console.assert(this.structhashModel.verify(), 'test.StructHash validation failed!')

    // Log the value
    if (this.logging) {
      this.onSendLog(value.toString())
    }

    // Send the serialized value
    return this.sendSerialized(serialized)
  }

  /**
   * Send StructHashEx value
   * @this {!Sender}
   * @param {!StructHashEx} value StructHashEx value to send
   * @returns {!number} Sent bytes
   */
  send_structhashex (value) { // eslint-disable-line
    // Serialize the value into the FBE stream
    let serialized = this.structhashexModel.serialize(value)
    console.assert((serialized > 0), 'test.StructHashEx serialization failed!')
    console.assert(this.structhashexModel.verify(), 'test.StructHashEx validation failed!')

    // Log the value
    if (this.logging) {
      this.onSendLog(value.toString())
    }

    // Send the serialized value
    return this.sendSerialized(serialized)
  }

  /**
   * Send message handler
   * @this {!Sender}
   * @param {!Uint8Array} buffer Buffer to send
   * @param {!number} offset Buffer offset
   * @param {!number} size Buffer size
   */
  onSend (buffer, offset, size) {
    console.assert(true, 'test.Sender.onSend() not implemented!')
    debugger // eslint-disable-line
    return 0
  }
}

exports.Sender = Sender

/**
 * Fast Binary Encoding test receiver class
 */
class Receiver extends fbe.Receiver {
  /**
   * Initialize test receiver with the given buffer
   * @param {!fbe.WriteBuffer} buffer Write buffer, defaults is new WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer, false, false)
    this._protoReceiver = new proto.Receiver(this.buffer)
    this._structsimpleValue = new StructSimple()
    this._structsimpleModel = new StructSimpleModel()
    this._structoptionalValue = new StructOptional()
    this._structoptionalModel = new StructOptionalModel()
    this._structnestedValue = new StructNested()
    this._structnestedModel = new StructNestedModel()
    this._structbytesValue = new StructBytes()
    this._structbytesModel = new StructBytesModel()
    this._structarrayValue = new StructArray()
    this._structarrayModel = new StructArrayModel()
    this._structvectorValue = new StructVector()
    this._structvectorModel = new StructVectorModel()
    this._structlistValue = new StructList()
    this._structlistModel = new StructListModel()
    this._structsetValue = new StructSet()
    this._structsetModel = new StructSetModel()
    this._structmapValue = new StructMap()
    this._structmapModel = new StructMapModel()
    this._structhashValue = new StructHash()
    this._structhashModel = new StructHashModel()
    this._structhashexValue = new StructHashEx()
    this._structhashexModel = new StructHashExModel()
  }

  // Imported receivers

  /**
   * Get imported proto receiver
   * @this {!Receiver}
   * @returns {Receiver} proto receiver
   */
  get protoReceiver () {
    return this._protoReceiver
  }

  /**
   * Set imported proto receiver
   * @this {!Receiver}
   * @param {Receiver} receiver proto receiver
   */
  set protoReceiver (receiver) {
    this._protoReceiver = receiver
  }

  // Receive handlers

  /**
   * StructSimple receive handler
   * @this {!Receiver}
   * @param {!StructSimple} value StructSimple received value
   */
  onReceive_structsimple (value) {}  // eslint-disable-line

  /**
   * StructOptional receive handler
   * @this {!Receiver}
   * @param {!StructOptional} value StructOptional received value
   */
  onReceive_structoptional (value) {}  // eslint-disable-line

  /**
   * StructNested receive handler
   * @this {!Receiver}
   * @param {!StructNested} value StructNested received value
   */
  onReceive_structnested (value) {}  // eslint-disable-line

  /**
   * StructBytes receive handler
   * @this {!Receiver}
   * @param {!StructBytes} value StructBytes received value
   */
  onReceive_structbytes (value) {}  // eslint-disable-line

  /**
   * StructArray receive handler
   * @this {!Receiver}
   * @param {!StructArray} value StructArray received value
   */
  onReceive_structarray (value) {}  // eslint-disable-line

  /**
   * StructVector receive handler
   * @this {!Receiver}
   * @param {!StructVector} value StructVector received value
   */
  onReceive_structvector (value) {}  // eslint-disable-line

  /**
   * StructList receive handler
   * @this {!Receiver}
   * @param {!StructList} value StructList received value
   */
  onReceive_structlist (value) {}  // eslint-disable-line

  /**
   * StructSet receive handler
   * @this {!Receiver}
   * @param {!StructSet} value StructSet received value
   */
  onReceive_structset (value) {}  // eslint-disable-line

  /**
   * StructMap receive handler
   * @this {!Receiver}
   * @param {!StructMap} value StructMap received value
   */
  onReceive_structmap (value) {}  // eslint-disable-line

  /**
   * StructHash receive handler
   * @this {!Receiver}
   * @param {!StructHash} value StructHash received value
   */
  onReceive_structhash (value) {}  // eslint-disable-line

  /**
   * StructHashEx receive handler
   * @this {!Receiver}
   * @param {!StructHashEx} value StructHashEx received value
   */
  onReceive_structhashex (value) {}  // eslint-disable-line

  /**
   * test receive message handler
   * @this {!Receiver}
   * @param {!number} type Message type
   * @param {!Uint8Array} buffer Buffer to send
   * @param {!number} offset Buffer offset
   * @param {!number} size Buffer size
   * @returns {!boolean} Success flag
   */
  onReceive (type, buffer, offset, size) {
    switch (type) {
      case StructSimpleModel.FBEType: {
        // Deserialize the value from the FBE stream
        this._structsimpleModel.attachBuffer(buffer, offset)
        console.assert(this._structsimpleModel.verify(), 'test.StructSimple validation failed!')
        let deserialized = this._structsimpleModel.deserialize(this._structsimpleValue)
        console.assert((deserialized.size > 0), 'test.StructSimple deserialization failed!')

        // Log the value
        if (this.logging) {
          this.onReceiveLog(this._structsimpleValue.toString())
        }

        // Call receive handler with deserialized value
        this.onReceive_structsimple(this._structsimpleValue)
        return true
      }
      case StructOptionalModel.FBEType: {
        // Deserialize the value from the FBE stream
        this._structoptionalModel.attachBuffer(buffer, offset)
        console.assert(this._structoptionalModel.verify(), 'test.StructOptional validation failed!')
        let deserialized = this._structoptionalModel.deserialize(this._structoptionalValue)
        console.assert((deserialized.size > 0), 'test.StructOptional deserialization failed!')

        // Log the value
        if (this.logging) {
          this.onReceiveLog(this._structoptionalValue.toString())
        }

        // Call receive handler with deserialized value
        this.onReceive_structoptional(this._structoptionalValue)
        return true
      }
      case StructNestedModel.FBEType: {
        // Deserialize the value from the FBE stream
        this._structnestedModel.attachBuffer(buffer, offset)
        console.assert(this._structnestedModel.verify(), 'test.StructNested validation failed!')
        let deserialized = this._structnestedModel.deserialize(this._structnestedValue)
        console.assert((deserialized.size > 0), 'test.StructNested deserialization failed!')

        // Log the value
        if (this.logging) {
          this.onReceiveLog(this._structnestedValue.toString())
        }

        // Call receive handler with deserialized value
        this.onReceive_structnested(this._structnestedValue)
        return true
      }
      case StructBytesModel.FBEType: {
        // Deserialize the value from the FBE stream
        this._structbytesModel.attachBuffer(buffer, offset)
        console.assert(this._structbytesModel.verify(), 'test.StructBytes validation failed!')
        let deserialized = this._structbytesModel.deserialize(this._structbytesValue)
        console.assert((deserialized.size > 0), 'test.StructBytes deserialization failed!')

        // Log the value
        if (this.logging) {
          this.onReceiveLog(this._structbytesValue.toString())
        }

        // Call receive handler with deserialized value
        this.onReceive_structbytes(this._structbytesValue)
        return true
      }
      case StructArrayModel.FBEType: {
        // Deserialize the value from the FBE stream
        this._structarrayModel.attachBuffer(buffer, offset)
        console.assert(this._structarrayModel.verify(), 'test.StructArray validation failed!')
        let deserialized = this._structarrayModel.deserialize(this._structarrayValue)
        console.assert((deserialized.size > 0), 'test.StructArray deserialization failed!')

        // Log the value
        if (this.logging) {
          this.onReceiveLog(this._structarrayValue.toString())
        }

        // Call receive handler with deserialized value
        this.onReceive_structarray(this._structarrayValue)
        return true
      }
      case StructVectorModel.FBEType: {
        // Deserialize the value from the FBE stream
        this._structvectorModel.attachBuffer(buffer, offset)
        console.assert(this._structvectorModel.verify(), 'test.StructVector validation failed!')
        let deserialized = this._structvectorModel.deserialize(this._structvectorValue)
        console.assert((deserialized.size > 0), 'test.StructVector deserialization failed!')

        // Log the value
        if (this.logging) {
          this.onReceiveLog(this._structvectorValue.toString())
        }

        // Call receive handler with deserialized value
        this.onReceive_structvector(this._structvectorValue)
        return true
      }
      case StructListModel.FBEType: {
        // Deserialize the value from the FBE stream
        this._structlistModel.attachBuffer(buffer, offset)
        console.assert(this._structlistModel.verify(), 'test.StructList validation failed!')
        let deserialized = this._structlistModel.deserialize(this._structlistValue)
        console.assert((deserialized.size > 0), 'test.StructList deserialization failed!')

        // Log the value
        if (this.logging) {
          this.onReceiveLog(this._structlistValue.toString())
        }

        // Call receive handler with deserialized value
        this.onReceive_structlist(this._structlistValue)
        return true
      }
      case StructSetModel.FBEType: {
        // Deserialize the value from the FBE stream
        this._structsetModel.attachBuffer(buffer, offset)
        console.assert(this._structsetModel.verify(), 'test.StructSet validation failed!')
        let deserialized = this._structsetModel.deserialize(this._structsetValue)
        console.assert((deserialized.size > 0), 'test.StructSet deserialization failed!')

        // Log the value
        if (this.logging) {
          this.onReceiveLog(this._structsetValue.toString())
        }

        // Call receive handler with deserialized value
        this.onReceive_structset(this._structsetValue)
        return true
      }
      case StructMapModel.FBEType: {
        // Deserialize the value from the FBE stream
        this._structmapModel.attachBuffer(buffer, offset)
        console.assert(this._structmapModel.verify(), 'test.StructMap validation failed!')
        let deserialized = this._structmapModel.deserialize(this._structmapValue)
        console.assert((deserialized.size > 0), 'test.StructMap deserialization failed!')

        // Log the value
        if (this.logging) {
          this.onReceiveLog(this._structmapValue.toString())
        }

        // Call receive handler with deserialized value
        this.onReceive_structmap(this._structmapValue)
        return true
      }
      case StructHashModel.FBEType: {
        // Deserialize the value from the FBE stream
        this._structhashModel.attachBuffer(buffer, offset)
        console.assert(this._structhashModel.verify(), 'test.StructHash validation failed!')
        let deserialized = this._structhashModel.deserialize(this._structhashValue)
        console.assert((deserialized.size > 0), 'test.StructHash deserialization failed!')

        // Log the value
        if (this.logging) {
          this.onReceiveLog(this._structhashValue.toString())
        }

        // Call receive handler with deserialized value
        this.onReceive_structhash(this._structhashValue)
        return true
      }
      case StructHashExModel.FBEType: {
        // Deserialize the value from the FBE stream
        this._structhashexModel.attachBuffer(buffer, offset)
        console.assert(this._structhashexModel.verify(), 'test.StructHashEx validation failed!')
        let deserialized = this._structhashexModel.deserialize(this._structhashexValue)
        console.assert((deserialized.size > 0), 'test.StructHashEx deserialization failed!')

        // Log the value
        if (this.logging) {
          this.onReceiveLog(this._structhashexValue.toString())
        }

        // Call receive handler with deserialized value
        this.onReceive_structhashex(this._structhashexValue)
        return true
      }
    }
    // noinspection RedundantIfStatementJS
    if ((this.protoReceiver != null) && this.protoReceiver.onReceive(type, buffer, offset, size)) {
      return true
    }

    return false
  }
}

exports.Receiver = Receiver

/**
 * Fast Binary Encoding test final sender class
 */
class FinalSender extends fbe.Sender {
  /**
   * Initialize test sender with the given buffer
   * @param {!fbe.WriteBuffer} buffer Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer, false, true)
    this._protoSender = new proto.FinalSender(this.buffer)
    this._structsimpleModel = new StructSimpleFinalModel(this.buffer)
    this._structoptionalModel = new StructOptionalFinalModel(this.buffer)
    this._structnestedModel = new StructNestedFinalModel(this.buffer)
    this._structbytesModel = new StructBytesFinalModel(this.buffer)
    this._structarrayModel = new StructArrayFinalModel(this.buffer)
    this._structvectorModel = new StructVectorFinalModel(this.buffer)
    this._structlistModel = new StructListFinalModel(this.buffer)
    this._structsetModel = new StructSetFinalModel(this.buffer)
    this._structmapModel = new StructMapFinalModel(this.buffer)
    this._structhashModel = new StructHashFinalModel(this.buffer)
    this._structhashexModel = new StructHashExFinalModel(this.buffer)
  }

  // Imported senders

  /**
   * Get imported proto sender
   * @this {!FinalSender}
   * @returns {!proto.FinalSender} proto sender
   */
  get protoSender () {
    return this._protoSender
  }

  // Sender models accessors

  /**
   * Get StructSimple model
   * @this {!FinalSender}
   * @returns {!StructSimpleModel} StructSimple model
   */
  get structsimpleModel () {
    return this._structsimpleModel
  }

  /**
   * Get StructOptional model
   * @this {!FinalSender}
   * @returns {!StructOptionalModel} StructOptional model
   */
  get structoptionalModel () {
    return this._structoptionalModel
  }

  /**
   * Get StructNested model
   * @this {!FinalSender}
   * @returns {!StructNestedModel} StructNested model
   */
  get structnestedModel () {
    return this._structnestedModel
  }

  /**
   * Get StructBytes model
   * @this {!FinalSender}
   * @returns {!StructBytesModel} StructBytes model
   */
  get structbytesModel () {
    return this._structbytesModel
  }

  /**
   * Get StructArray model
   * @this {!FinalSender}
   * @returns {!StructArrayModel} StructArray model
   */
  get structarrayModel () {
    return this._structarrayModel
  }

  /**
   * Get StructVector model
   * @this {!FinalSender}
   * @returns {!StructVectorModel} StructVector model
   */
  get structvectorModel () {
    return this._structvectorModel
  }

  /**
   * Get StructList model
   * @this {!FinalSender}
   * @returns {!StructListModel} StructList model
   */
  get structlistModel () {
    return this._structlistModel
  }

  /**
   * Get StructSet model
   * @this {!FinalSender}
   * @returns {!StructSetModel} StructSet model
   */
  get structsetModel () {
    return this._structsetModel
  }

  /**
   * Get StructMap model
   * @this {!FinalSender}
   * @returns {!StructMapModel} StructMap model
   */
  get structmapModel () {
    return this._structmapModel
  }

  /**
   * Get StructHash model
   * @this {!FinalSender}
   * @returns {!StructHashModel} StructHash model
   */
  get structhashModel () {
    return this._structhashModel
  }

  /**
   * Get StructHashEx model
   * @this {!FinalSender}
   * @returns {!StructHashExModel} StructHashEx model
   */
  get structhashexModel () {
    return this._structhashexModel
  }

  // Send methods

  /**
   * Send value
   * @this {!FinalSender}
   * @param {!object} value Value to send
   * @returns {!number} Sent bytes
   */
  send (value) {
    if (value instanceof StructSimple) {
      return this.send_structsimple(value)
    }
    if (value instanceof StructOptional) {
      return this.send_structoptional(value)
    }
    if (value instanceof StructNested) {
      return this.send_structnested(value)
    }
    if (value instanceof StructBytes) {
      return this.send_structbytes(value)
    }
    if (value instanceof StructArray) {
      return this.send_structarray(value)
    }
    if (value instanceof StructVector) {
      return this.send_structvector(value)
    }
    if (value instanceof StructList) {
      return this.send_structlist(value)
    }
    if (value instanceof StructSet) {
      return this.send_structset(value)
    }
    if (value instanceof StructMap) {
      return this.send_structmap(value)
    }
    if (value instanceof StructHash) {
      return this.send_structhash(value)
    }
    if (value instanceof StructHashEx) {
      return this.send_structhashex(value)
    }
    let result = this._protoSender.send(value)
    if (result > 0) {
      return result
    }
    return 0
  }

  /**
   * Send StructSimple value
   * @this {!FinalSender}
   * @param {!StructSimple} value StructSimple value to send
   * @returns {!number} Sent bytes
   */
  send_structsimple (value) { // eslint-disable-line
    // Serialize the value into the FBE stream
    let serialized = this.structsimpleModel.serialize(value)
    console.assert((serialized > 0), 'test.StructSimple serialization failed!')
    console.assert(this.structsimpleModel.verify(), 'test.StructSimple validation failed!')

    // Log the value
    if (this.logging) {
      this.onSendLog(value.toString())
    }

    // Send the serialized value
    return this.sendSerialized(serialized)
  }

  /**
   * Send StructOptional value
   * @this {!FinalSender}
   * @param {!StructOptional} value StructOptional value to send
   * @returns {!number} Sent bytes
   */
  send_structoptional (value) { // eslint-disable-line
    // Serialize the value into the FBE stream
    let serialized = this.structoptionalModel.serialize(value)
    console.assert((serialized > 0), 'test.StructOptional serialization failed!')
    console.assert(this.structoptionalModel.verify(), 'test.StructOptional validation failed!')

    // Log the value
    if (this.logging) {
      this.onSendLog(value.toString())
    }

    // Send the serialized value
    return this.sendSerialized(serialized)
  }

  /**
   * Send StructNested value
   * @this {!FinalSender}
   * @param {!StructNested} value StructNested value to send
   * @returns {!number} Sent bytes
   */
  send_structnested (value) { // eslint-disable-line
    // Serialize the value into the FBE stream
    let serialized = this.structnestedModel.serialize(value)
    console.assert((serialized > 0), 'test.StructNested serialization failed!')
    console.assert(this.structnestedModel.verify(), 'test.StructNested validation failed!')

    // Log the value
    if (this.logging) {
      this.onSendLog(value.toString())
    }

    // Send the serialized value
    return this.sendSerialized(serialized)
  }

  /**
   * Send StructBytes value
   * @this {!FinalSender}
   * @param {!StructBytes} value StructBytes value to send
   * @returns {!number} Sent bytes
   */
  send_structbytes (value) { // eslint-disable-line
    // Serialize the value into the FBE stream
    let serialized = this.structbytesModel.serialize(value)
    console.assert((serialized > 0), 'test.StructBytes serialization failed!')
    console.assert(this.structbytesModel.verify(), 'test.StructBytes validation failed!')

    // Log the value
    if (this.logging) {
      this.onSendLog(value.toString())
    }

    // Send the serialized value
    return this.sendSerialized(serialized)
  }

  /**
   * Send StructArray value
   * @this {!FinalSender}
   * @param {!StructArray} value StructArray value to send
   * @returns {!number} Sent bytes
   */
  send_structarray (value) { // eslint-disable-line
    // Serialize the value into the FBE stream
    let serialized = this.structarrayModel.serialize(value)
    console.assert((serialized > 0), 'test.StructArray serialization failed!')
    console.assert(this.structarrayModel.verify(), 'test.StructArray validation failed!')

    // Log the value
    if (this.logging) {
      this.onSendLog(value.toString())
    }

    // Send the serialized value
    return this.sendSerialized(serialized)
  }

  /**
   * Send StructVector value
   * @this {!FinalSender}
   * @param {!StructVector} value StructVector value to send
   * @returns {!number} Sent bytes
   */
  send_structvector (value) { // eslint-disable-line
    // Serialize the value into the FBE stream
    let serialized = this.structvectorModel.serialize(value)
    console.assert((serialized > 0), 'test.StructVector serialization failed!')
    console.assert(this.structvectorModel.verify(), 'test.StructVector validation failed!')

    // Log the value
    if (this.logging) {
      this.onSendLog(value.toString())
    }

    // Send the serialized value
    return this.sendSerialized(serialized)
  }

  /**
   * Send StructList value
   * @this {!FinalSender}
   * @param {!StructList} value StructList value to send
   * @returns {!number} Sent bytes
   */
  send_structlist (value) { // eslint-disable-line
    // Serialize the value into the FBE stream
    let serialized = this.structlistModel.serialize(value)
    console.assert((serialized > 0), 'test.StructList serialization failed!')
    console.assert(this.structlistModel.verify(), 'test.StructList validation failed!')

    // Log the value
    if (this.logging) {
      this.onSendLog(value.toString())
    }

    // Send the serialized value
    return this.sendSerialized(serialized)
  }

  /**
   * Send StructSet value
   * @this {!FinalSender}
   * @param {!StructSet} value StructSet value to send
   * @returns {!number} Sent bytes
   */
  send_structset (value) { // eslint-disable-line
    // Serialize the value into the FBE stream
    let serialized = this.structsetModel.serialize(value)
    console.assert((serialized > 0), 'test.StructSet serialization failed!')
    console.assert(this.structsetModel.verify(), 'test.StructSet validation failed!')

    // Log the value
    if (this.logging) {
      this.onSendLog(value.toString())
    }

    // Send the serialized value
    return this.sendSerialized(serialized)
  }

  /**
   * Send StructMap value
   * @this {!FinalSender}
   * @param {!StructMap} value StructMap value to send
   * @returns {!number} Sent bytes
   */
  send_structmap (value) { // eslint-disable-line
    // Serialize the value into the FBE stream
    let serialized = this.structmapModel.serialize(value)
    console.assert((serialized > 0), 'test.StructMap serialization failed!')
    console.assert(this.structmapModel.verify(), 'test.StructMap validation failed!')

    // Log the value
    if (this.logging) {
      this.onSendLog(value.toString())
    }

    // Send the serialized value
    return this.sendSerialized(serialized)
  }

  /**
   * Send StructHash value
   * @this {!FinalSender}
   * @param {!StructHash} value StructHash value to send
   * @returns {!number} Sent bytes
   */
  send_structhash (value) { // eslint-disable-line
    // Serialize the value into the FBE stream
    let serialized = this.structhashModel.serialize(value)
    console.assert((serialized > 0), 'test.StructHash serialization failed!')
    console.assert(this.structhashModel.verify(), 'test.StructHash validation failed!')

    // Log the value
    if (this.logging) {
      this.onSendLog(value.toString())
    }

    // Send the serialized value
    return this.sendSerialized(serialized)
  }

  /**
   * Send StructHashEx value
   * @this {!FinalSender}
   * @param {!StructHashEx} value StructHashEx value to send
   * @returns {!number} Sent bytes
   */
  send_structhashex (value) { // eslint-disable-line
    // Serialize the value into the FBE stream
    let serialized = this.structhashexModel.serialize(value)
    console.assert((serialized > 0), 'test.StructHashEx serialization failed!')
    console.assert(this.structhashexModel.verify(), 'test.StructHashEx validation failed!')

    // Log the value
    if (this.logging) {
      this.onSendLog(value.toString())
    }

    // Send the serialized value
    return this.sendSerialized(serialized)
  }

  /**
   * Send message handler
   * @this {!FinalSender}
   * @param {!Uint8Array} buffer Buffer to send
   * @param {!number} offset Buffer offset
   * @param {!number} size Buffer size
   */
  onSend (buffer, offset, size) {
    console.assert(true, 'test.Sender.onSend() not implemented!')
    debugger // eslint-disable-line
    return 0
  }
}

exports.FinalSender = FinalSender

/**
 * Fast Binary Encoding test final receiver class
 */
class FinalReceiver extends fbe.Receiver {
  /**
   * Initialize test receiver with the given buffer
   * @param {!fbe.WriteBuffer} buffer Write buffer, defaults is new WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer, false, true)
    this._protoReceiver = new proto.FinalReceiver(this.buffer)
    this._structsimpleValue = new StructSimple()
    this._structsimpleModel = new StructSimpleFinalModel()
    this._structoptionalValue = new StructOptional()
    this._structoptionalModel = new StructOptionalFinalModel()
    this._structnestedValue = new StructNested()
    this._structnestedModel = new StructNestedFinalModel()
    this._structbytesValue = new StructBytes()
    this._structbytesModel = new StructBytesFinalModel()
    this._structarrayValue = new StructArray()
    this._structarrayModel = new StructArrayFinalModel()
    this._structvectorValue = new StructVector()
    this._structvectorModel = new StructVectorFinalModel()
    this._structlistValue = new StructList()
    this._structlistModel = new StructListFinalModel()
    this._structsetValue = new StructSet()
    this._structsetModel = new StructSetFinalModel()
    this._structmapValue = new StructMap()
    this._structmapModel = new StructMapFinalModel()
    this._structhashValue = new StructHash()
    this._structhashModel = new StructHashFinalModel()
    this._structhashexValue = new StructHashEx()
    this._structhashexModel = new StructHashExFinalModel()
  }

  // Imported receivers

  /**
   * Get imported proto receiver
   * @this {!FinalReceiver}
   * @returns {FinalReceiver} proto receiver
   */
  get protoReceiver () {
    return this._protoReceiver
  }

  /**
   * Set imported proto receiver
   * @this {!FinalReceiver}
   * @param {FinalReceiver} receiver proto receiver
   */
  set protoReceiver (receiver) {
    this._protoReceiver = receiver
  }

  // Receive handlers

  /**
   * StructSimple receive handler
   * @this {!FinalReceiver}
   * @param {!StructSimple} value StructSimple received value
   */
  onReceive_structsimple (value) {}  // eslint-disable-line

  /**
   * StructOptional receive handler
   * @this {!FinalReceiver}
   * @param {!StructOptional} value StructOptional received value
   */
  onReceive_structoptional (value) {}  // eslint-disable-line

  /**
   * StructNested receive handler
   * @this {!FinalReceiver}
   * @param {!StructNested} value StructNested received value
   */
  onReceive_structnested (value) {}  // eslint-disable-line

  /**
   * StructBytes receive handler
   * @this {!FinalReceiver}
   * @param {!StructBytes} value StructBytes received value
   */
  onReceive_structbytes (value) {}  // eslint-disable-line

  /**
   * StructArray receive handler
   * @this {!FinalReceiver}
   * @param {!StructArray} value StructArray received value
   */
  onReceive_structarray (value) {}  // eslint-disable-line

  /**
   * StructVector receive handler
   * @this {!FinalReceiver}
   * @param {!StructVector} value StructVector received value
   */
  onReceive_structvector (value) {}  // eslint-disable-line

  /**
   * StructList receive handler
   * @this {!FinalReceiver}
   * @param {!StructList} value StructList received value
   */
  onReceive_structlist (value) {}  // eslint-disable-line

  /**
   * StructSet receive handler
   * @this {!FinalReceiver}
   * @param {!StructSet} value StructSet received value
   */
  onReceive_structset (value) {}  // eslint-disable-line

  /**
   * StructMap receive handler
   * @this {!FinalReceiver}
   * @param {!StructMap} value StructMap received value
   */
  onReceive_structmap (value) {}  // eslint-disable-line

  /**
   * StructHash receive handler
   * @this {!FinalReceiver}
   * @param {!StructHash} value StructHash received value
   */
  onReceive_structhash (value) {}  // eslint-disable-line

  /**
   * StructHashEx receive handler
   * @this {!FinalReceiver}
   * @param {!StructHashEx} value StructHashEx received value
   */
  onReceive_structhashex (value) {}  // eslint-disable-line

  /**
   * test receive message handler
   * @this {!FinalReceiver}
   * @param {!number} type Message type
   * @param {!Uint8Array} buffer Buffer to send
   * @param {!number} offset Buffer offset
   * @param {!number} size Buffer size
   * @returns {!boolean} Success flag
   */
  onReceive (type, buffer, offset, size) {
    switch (type) {
      case StructSimpleFinalModel.FBEType: {
        // Deserialize the value from the FBE stream
        this._structsimpleModel.attachBuffer(buffer, offset)
        console.assert(this._structsimpleModel.verify(), 'test.StructSimple validation failed!')
        let deserialized = this._structsimpleModel.deserialize(this._structsimpleValue)
        console.assert((deserialized.size > 0), 'test.StructSimple deserialization failed!')

        // Log the value
        if (this.logging) {
          this.onReceiveLog(this._structsimpleValue.toString())
        }

        // Call receive handler with deserialized value
        this.onReceive_structsimple(this._structsimpleValue)
        return true
      }
      case StructOptionalFinalModel.FBEType: {
        // Deserialize the value from the FBE stream
        this._structoptionalModel.attachBuffer(buffer, offset)
        console.assert(this._structoptionalModel.verify(), 'test.StructOptional validation failed!')
        let deserialized = this._structoptionalModel.deserialize(this._structoptionalValue)
        console.assert((deserialized.size > 0), 'test.StructOptional deserialization failed!')

        // Log the value
        if (this.logging) {
          this.onReceiveLog(this._structoptionalValue.toString())
        }

        // Call receive handler with deserialized value
        this.onReceive_structoptional(this._structoptionalValue)
        return true
      }
      case StructNestedFinalModel.FBEType: {
        // Deserialize the value from the FBE stream
        this._structnestedModel.attachBuffer(buffer, offset)
        console.assert(this._structnestedModel.verify(), 'test.StructNested validation failed!')
        let deserialized = this._structnestedModel.deserialize(this._structnestedValue)
        console.assert((deserialized.size > 0), 'test.StructNested deserialization failed!')

        // Log the value
        if (this.logging) {
          this.onReceiveLog(this._structnestedValue.toString())
        }

        // Call receive handler with deserialized value
        this.onReceive_structnested(this._structnestedValue)
        return true
      }
      case StructBytesFinalModel.FBEType: {
        // Deserialize the value from the FBE stream
        this._structbytesModel.attachBuffer(buffer, offset)
        console.assert(this._structbytesModel.verify(), 'test.StructBytes validation failed!')
        let deserialized = this._structbytesModel.deserialize(this._structbytesValue)
        console.assert((deserialized.size > 0), 'test.StructBytes deserialization failed!')

        // Log the value
        if (this.logging) {
          this.onReceiveLog(this._structbytesValue.toString())
        }

        // Call receive handler with deserialized value
        this.onReceive_structbytes(this._structbytesValue)
        return true
      }
      case StructArrayFinalModel.FBEType: {
        // Deserialize the value from the FBE stream
        this._structarrayModel.attachBuffer(buffer, offset)
        console.assert(this._structarrayModel.verify(), 'test.StructArray validation failed!')
        let deserialized = this._structarrayModel.deserialize(this._structarrayValue)
        console.assert((deserialized.size > 0), 'test.StructArray deserialization failed!')

        // Log the value
        if (this.logging) {
          this.onReceiveLog(this._structarrayValue.toString())
        }

        // Call receive handler with deserialized value
        this.onReceive_structarray(this._structarrayValue)
        return true
      }
      case StructVectorFinalModel.FBEType: {
        // Deserialize the value from the FBE stream
        this._structvectorModel.attachBuffer(buffer, offset)
        console.assert(this._structvectorModel.verify(), 'test.StructVector validation failed!')
        let deserialized = this._structvectorModel.deserialize(this._structvectorValue)
        console.assert((deserialized.size > 0), 'test.StructVector deserialization failed!')

        // Log the value
        if (this.logging) {
          this.onReceiveLog(this._structvectorValue.toString())
        }

        // Call receive handler with deserialized value
        this.onReceive_structvector(this._structvectorValue)
        return true
      }
      case StructListFinalModel.FBEType: {
        // Deserialize the value from the FBE stream
        this._structlistModel.attachBuffer(buffer, offset)
        console.assert(this._structlistModel.verify(), 'test.StructList validation failed!')
        let deserialized = this._structlistModel.deserialize(this._structlistValue)
        console.assert((deserialized.size > 0), 'test.StructList deserialization failed!')

        // Log the value
        if (this.logging) {
          this.onReceiveLog(this._structlistValue.toString())
        }

        // Call receive handler with deserialized value
        this.onReceive_structlist(this._structlistValue)
        return true
      }
      case StructSetFinalModel.FBEType: {
        // Deserialize the value from the FBE stream
        this._structsetModel.attachBuffer(buffer, offset)
        console.assert(this._structsetModel.verify(), 'test.StructSet validation failed!')
        let deserialized = this._structsetModel.deserialize(this._structsetValue)
        console.assert((deserialized.size > 0), 'test.StructSet deserialization failed!')

        // Log the value
        if (this.logging) {
          this.onReceiveLog(this._structsetValue.toString())
        }

        // Call receive handler with deserialized value
        this.onReceive_structset(this._structsetValue)
        return true
      }
      case StructMapFinalModel.FBEType: {
        // Deserialize the value from the FBE stream
        this._structmapModel.attachBuffer(buffer, offset)
        console.assert(this._structmapModel.verify(), 'test.StructMap validation failed!')
        let deserialized = this._structmapModel.deserialize(this._structmapValue)
        console.assert((deserialized.size > 0), 'test.StructMap deserialization failed!')

        // Log the value
        if (this.logging) {
          this.onReceiveLog(this._structmapValue.toString())
        }

        // Call receive handler with deserialized value
        this.onReceive_structmap(this._structmapValue)
        return true
      }
      case StructHashFinalModel.FBEType: {
        // Deserialize the value from the FBE stream
        this._structhashModel.attachBuffer(buffer, offset)
        console.assert(this._structhashModel.verify(), 'test.StructHash validation failed!')
        let deserialized = this._structhashModel.deserialize(this._structhashValue)
        console.assert((deserialized.size > 0), 'test.StructHash deserialization failed!')

        // Log the value
        if (this.logging) {
          this.onReceiveLog(this._structhashValue.toString())
        }

        // Call receive handler with deserialized value
        this.onReceive_structhash(this._structhashValue)
        return true
      }
      case StructHashExFinalModel.FBEType: {
        // Deserialize the value from the FBE stream
        this._structhashexModel.attachBuffer(buffer, offset)
        console.assert(this._structhashexModel.verify(), 'test.StructHashEx validation failed!')
        let deserialized = this._structhashexModel.deserialize(this._structhashexValue)
        console.assert((deserialized.size > 0), 'test.StructHashEx deserialization failed!')

        // Log the value
        if (this.logging) {
          this.onReceiveLog(this._structhashexValue.toString())
        }

        // Call receive handler with deserialized value
        this.onReceive_structhashex(this._structhashexValue)
        return true
      }
    }
    // noinspection RedundantIfStatementJS
    if ((this.protoReceiver != null) && this.protoReceiver.onReceive(type, buffer, offset, size)) {
      return true
    }

    return false
  }
}

exports.FinalReceiver = FinalReceiver
