# Automatically generated by the Fast Binary Encoding compiler, do not modify!
# https://github.com/chronoxor/FastBinaryEncoding
# Source: proto.fbe
# Version: 1.3.0.0

import base64
import decimal
import enum
import functools
import json
import sys
import uuid

import fbe


class OrderSide(enum.IntEnum, metaclass=fbe.DefaultEnumMeta):
    buy = int(0) + 0
    sell = int(0) + 1
    unknown = ~0

    __slots__ = ()

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        if self.value == OrderSide.buy:
            return "buy"
        if self.value == OrderSide.sell:
            return "sell"
        return "<unknown>"

    @classmethod
    def _missing_(cls, value):
        return OrderSide.unknown

    @staticmethod
    def __from_json__(value):
        if value is None:
            return None
        return OrderSide(value)


# Fast Binary Encoding OrderSide field model
class FieldModelOrderSide(fbe.FieldModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the field size
    @property
    def fbe_size(self):
        return 1

    # Get the value
    def get(self, defaults=None):
        if defaults is None:
            defaults = OrderSide()

        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return defaults

        return OrderSide(self.read_byte(self.fbe_offset))

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return

        self.write_byte(self.fbe_offset, value)


# Fast Binary Encoding OrderSide final model
class FinalModelOrderSide(fbe.FinalModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the allocation size
    # noinspection PyUnusedLocal
    def fbe_allocation_size(self, value):
        return self.fbe_size

    # Get the final size
    @property
    def fbe_size(self):
        return 1

    # Check if the value is valid
    def verify(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return sys.maxsize

        return self.fbe_size

    # Get the value
    def get(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return OrderSide(), 0

        return OrderSide(self.read_byte(self.fbe_offset)), self.fbe_size

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        self.write_byte(self.fbe_offset, value)
        return self.fbe_size


class OrderType(enum.IntEnum, metaclass=fbe.DefaultEnumMeta):
    market = int(0) + 0
    limit = int(0) + 1
    stop = int(0) + 2
    unknown = ~0

    __slots__ = ()

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        if self.value == OrderType.market:
            return "market"
        if self.value == OrderType.limit:
            return "limit"
        if self.value == OrderType.stop:
            return "stop"
        return "<unknown>"

    @classmethod
    def _missing_(cls, value):
        return OrderType.unknown

    @staticmethod
    def __from_json__(value):
        if value is None:
            return None
        return OrderType(value)


# Fast Binary Encoding OrderType field model
class FieldModelOrderType(fbe.FieldModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the field size
    @property
    def fbe_size(self):
        return 1

    # Get the value
    def get(self, defaults=None):
        if defaults is None:
            defaults = OrderType()

        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return defaults

        return OrderType(self.read_byte(self.fbe_offset))

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return

        self.write_byte(self.fbe_offset, value)


# Fast Binary Encoding OrderType final model
class FinalModelOrderType(fbe.FinalModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the allocation size
    # noinspection PyUnusedLocal
    def fbe_allocation_size(self, value):
        return self.fbe_size

    # Get the final size
    @property
    def fbe_size(self):
        return 1

    # Check if the value is valid
    def verify(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return sys.maxsize

        return self.fbe_size

    # Get the value
    def get(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return OrderType(), 0

        return OrderType(self.read_byte(self.fbe_offset)), self.fbe_size

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        self.write_byte(self.fbe_offset, value)
        return self.fbe_size


class State(enum.IntFlag, metaclass=fbe.DefaultEnumMeta):
    unknown = int(0x00)
    invalid = int(0x01)
    initialized = int(0x02)
    calculated = int(0x04)
    broken = int(0x08)
    good = initialized | calculated
    bad = unknown | invalid | broken

    __slots__ = ()

    # Is flags set?
    def has_flags(self, flags):
        return ((self.value & flags.value) != 0) and ((self.value & flags.value) == flags.value)

    # Set flags
    def set_flags(self, flags):
        self.value |= flags.value
        return self

    # Remove flags
    def remove_flags(self, flags):
        self.value &= ~flags.value
        return self

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        sb = list()
        first = True
        if (self.value & State.unknown.value) and ((self.value & State.unknown.value) == State.unknown.value):
            if first:
                # noinspection PyUnusedLocal
                first = False
            else:
                sb.append("|")
            sb.append("unknown")
        if (self.value & State.invalid.value) and ((self.value & State.invalid.value) == State.invalid.value):
            if first:
                # noinspection PyUnusedLocal
                first = False
            else:
                sb.append("|")
            sb.append("invalid")
        if (self.value & State.initialized.value) and ((self.value & State.initialized.value) == State.initialized.value):
            if first:
                # noinspection PyUnusedLocal
                first = False
            else:
                sb.append("|")
            sb.append("initialized")
        if (self.value & State.calculated.value) and ((self.value & State.calculated.value) == State.calculated.value):
            if first:
                # noinspection PyUnusedLocal
                first = False
            else:
                sb.append("|")
            sb.append("calculated")
        if (self.value & State.broken.value) and ((self.value & State.broken.value) == State.broken.value):
            if first:
                # noinspection PyUnusedLocal
                first = False
            else:
                sb.append("|")
            sb.append("broken")
        if (self.value & State.good.value) and ((self.value & State.good.value) == State.good.value):
            if first:
                # noinspection PyUnusedLocal
                first = False
            else:
                sb.append("|")
            sb.append("good")
        if (self.value & State.bad.value) and ((self.value & State.bad.value) == State.bad.value):
            if first:
                # noinspection PyUnusedLocal
                first = False
            else:
                sb.append("|")
            sb.append("bad")
        return "".join(sb)

    @staticmethod
    def __from_json__(value):
        if value is None:
            return None
        return State(value)


# Fast Binary Encoding State field model
class FieldModelState(fbe.FieldModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the field size
    @property
    def fbe_size(self):
        return 1

    # Get the value
    def get(self, defaults=None):
        if defaults is None:
            defaults = State()

        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return defaults

        return State(self.read_byte(self.fbe_offset))

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return

        self.write_byte(self.fbe_offset, value)


# Fast Binary Encoding State final model
class FinalModelState(fbe.FinalModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the allocation size
    # noinspection PyUnusedLocal
    def fbe_allocation_size(self, value):
        return self.fbe_size

    # Get the final size
    @property
    def fbe_size(self):
        return 1

    # Check if the value is valid
    def verify(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return sys.maxsize

        return self.fbe_size

    # Get the value
    def get(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return State(), 0

        return State(self.read_byte(self.fbe_offset)), self.fbe_size

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        self.write_byte(self.fbe_offset, value)
        return self.fbe_size


@functools.total_ordering
class Order(object):
    def __init__(self):
        pass

    # Struct shallow copy
    def copy(self, other):
        return self

    # Struct deep clone
    def clone(self):
        # Serialize the struct to the FBE stream
        writer = OrderModel(fbe.WriteBuffer())
        writer.serialize(self)

        # Deserialize the struct from the FBE stream
        reader = OrderModel(fbe.ReadBuffer())
        reader.attach_buffer(writer.buffer)
        return reader.deserialize()[0]

    def __eq__(self, other):
        if not isinstance(self, other.__class__):
            return NotImplemented
        return True

    def __lt__(self, other):
        if not isinstance(self, other.__class__):
            return NotImplemented
        return False

    @property
    def __key__(self):
        return ()

    def __hash__(self):
        return hash(self.__key__)

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        sb = list()
        sb.append("Order(")
        sb.append(")")
        return "".join(sb)

    # Get struct JSON value
    def to_json(self):
        return json.dumps(self.__to_json__(), cls=fbe.JSONEncoder, separators=(',', ':'))

    def __to_json__(self):
        result = dict()
        return result

    # Create struct from JSON value
    @staticmethod
    def from_json(document):
        return Order.__from_json__(json.loads(document))

    @staticmethod
    def __from_json__(fields):
        if fields is None:
            return None
        return Order(
        )


class FieldModelOrder(fbe.FieldModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the field size
    @property
    def fbe_size(self):
        return 4

    # Get the field body size
    @property
    def fbe_body(self):
        fbe_result = 4 + 4 \

        return fbe_result

    # Get the field extra size
    @property
    def fbe_extra(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4) > self._buffer.size):
            return 0

        self._buffer.shift(fbe_struct_offset)

        fbe_result = self.fbe_body \

        self._buffer.unshift(fbe_struct_offset)

        return fbe_result

    # Get the field type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = 1

    # Check if the struct value is valid
    def verify(self, fbe_verify_type=True):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return True

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4 + 4) > self._buffer.size):
            return False

        fbe_struct_size = self.read_uint32(fbe_struct_offset)
        if fbe_struct_size < (4 + 4):
            return False

        fbe_struct_type = self.read_uint32(fbe_struct_offset + 4)
        if fbe_verify_type and (fbe_struct_type != self.fbe_type):
            return False

        self._buffer.shift(fbe_struct_offset)
        fbe_result = self.verify_fields(fbe_struct_size)
        self._buffer.unshift(fbe_struct_offset)
        return fbe_result

    # Check if the struct fields are valid
    def verify_fields(self, fbe_struct_size):
        return True

    # Get the struct value (begin phase)
    def get_begin(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        assert (fbe_struct_offset > 0) and ((self._buffer.offset + fbe_struct_offset + 4 + 4) <= self._buffer.size), "Model is broken!"
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4 + 4) > self._buffer.size):
            return 0

        fbe_struct_size = self.read_uint32(fbe_struct_offset)
        assert (fbe_struct_size >= (4 + 4)), "Model is broken!"
        if fbe_struct_size < (4 + 4):
            return 0

        self._buffer.shift(fbe_struct_offset)
        return fbe_struct_offset

    # Get the struct value (end phase)
    def get_end(self, fbe_begin):
        self._buffer.unshift(fbe_begin)

    # Get the struct value
    def get(self, fbe_value=None):
        if fbe_value is None:
            fbe_value = Order()

        fbe_begin = self.get_begin()
        if fbe_begin == 0:
            return fbe_value

        fbe_struct_size = self.read_uint32(0)
        self.get_fields(fbe_value, fbe_struct_size)
        self.get_end(fbe_begin)
        return fbe_value

    # Get the struct fields values
    def get_fields(self, fbe_value, fbe_struct_size):
        pass

    # Set the struct value (begin phase)
    def set_begin(self):
        assert (self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size, "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_size = self.fbe_body
        fbe_struct_offset = self._buffer.allocate(fbe_struct_size) - self._buffer.offset
        assert (fbe_struct_offset > 0) and ((self._buffer.offset + fbe_struct_offset + fbe_struct_size) <= self._buffer.size), "Model is broken!"
        if (fbe_struct_offset <= 0) or ((self._buffer.offset + fbe_struct_offset + fbe_struct_size) > self._buffer.size):
            return 0

        self.write_uint32(self.fbe_offset, fbe_struct_offset)
        self.write_uint32(fbe_struct_offset, fbe_struct_size)
        self.write_uint32(fbe_struct_offset + 4, self.fbe_type)

        self._buffer.shift(fbe_struct_offset)
        return fbe_struct_offset

    # Set the struct value (end phase)
    def set_end(self, fbe_begin):
        self._buffer.unshift(fbe_begin)

    # Set the struct value
    def set(self, fbe_value):
        fbe_begin = self.set_begin()
        if fbe_begin == 0:
            return

        self.set_fields(fbe_value)
        self.set_end(fbe_begin)

    # Set the struct fields values
    def set_fields(self, fbe_value):
        pass


# Fast Binary Encoding Order model
class OrderModel(fbe.Model):
    __slots__ = "_model",

    def __init__(self, buffer=None):
        super().__init__(buffer)
        self._model = FieldModelOrder(self.buffer, 4)

    @property
    def model(self):
        return self._model

    # Get the model size
    def fbe_size(self):
        return self._model.fbe_size + self._model.fbe_extra

    # Get the model type
    def fbe_type(self):
        return self.TYPE

    TYPE = FieldModelOrder.TYPE

    # Check if the struct value is valid
    def verify(self):
        if (self.buffer.offset + self._model.fbe_offset - 4) > self.buffer.size:
            return False

        fbe_full_size = self.read_uint32(self._model.fbe_offset - 4)
        if fbe_full_size < self._model.fbe_size:
            return False

        return self._model.verify()

    # Create a new model (begin phase)
    def create_begin(self):
        fbe_begin = self.buffer.allocate(4 + self._model.fbe_size)
        return fbe_begin

    # Create a new model (end phase)
    def create_end(self, fbe_begin):
        fbe_end = self.buffer.size
        fbe_full_size = fbe_end - fbe_begin
        self.write_uint32(self._model.fbe_offset - 4, fbe_full_size)
        return fbe_full_size

    # Serialize the struct value
    def serialize(self, value):
        fbe_begin = self.create_begin()
        self._model.set(value)
        fbe_full_size = self.create_end(fbe_begin)
        return fbe_full_size

    # Deserialize the struct value
    def deserialize(self, value=None):
        if value is None:
            value = Order()

        if (self.buffer.offset + self._model.fbe_offset - 4) > self.buffer.size:
            value = Order()
            return value, 0

        fbe_full_size = self.read_uint32(self._model.fbe_offset - 4)
        assert (fbe_full_size >= self._model.fbe_size), "Model is broken!"
        if fbe_full_size < self._model.fbe_size:
            value = Order()
            return value, 0

        self._model.get(value)
        return value, fbe_full_size

    # Move to the next struct value
    def next(self, prev):
        self._model.fbe_shift(prev)


class FinalModelOrder(fbe.FinalModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the allocation size
    def fbe_allocation_size(self, fbe_value):
        fbe_result = 0 \

        return fbe_result

    # Get the final type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = 1

    # Check if the struct value is valid
    def verify(self):
        self._buffer.shift(self.fbe_offset)
        fbe_result = self.verify_fields()
        self._buffer.unshift(self.fbe_offset)
        return fbe_result

    # Check if the struct fields are valid
    def verify_fields(self):
        return 0

    # Get the struct value
    def get(self, fbe_value=None):
        if fbe_value is None:
            fbe_value = Order()

        self._buffer.shift(self.fbe_offset)
        fbe_size = self.get_fields(fbe_value)
        self._buffer.unshift(self.fbe_offset)
        return fbe_value, fbe_size

    # Get the struct fields values
    def get_fields(self, fbe_value):
        return 0

    # Set the struct value
    def set(self, fbe_value):
        self._buffer.shift(self.fbe_offset)
        fbe_size = self.set_fields(fbe_value)
        self._buffer.unshift(self.fbe_offset)
        return fbe_size

    # Set the struct fields values
    def set_fields(self, fbe_value):
        return 0


# Fast Binary Encoding Order final model
class OrderFinalModel(fbe.Model):
    __slots__ = "_model",

    def __init__(self, buffer=None):
        super().__init__(buffer)
        self._model = FinalModelOrder(self.buffer, 8)

    # Get the model type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = FinalModelOrder.TYPE

    # Check if the struct value is valid
    def verify(self):
        if (self.buffer.offset + self._model.fbe_offset) > self.buffer.size:
            return False

        fbe_struct_size = self.read_uint32(self._model.fbe_offset - 8)
        fbe_struct_type = self.read_uint32(self._model.fbe_offset - 4)
        if (fbe_struct_size <= 0) or (fbe_struct_type != self.fbe_type):
            return False

        return (8 + self._model.verify()) == fbe_struct_size

    # Serialize the struct value
    def serialize(self, value):
        fbe_initial_size = self.buffer.size

        fbe_struct_type = self.fbe_type
        fbe_struct_size = 8 + self._model.fbe_allocation_size(value)
        fbe_struct_offset = self.buffer.allocate(fbe_struct_size) - self.buffer.offset
        assert ((self.buffer.offset + fbe_struct_offset + fbe_struct_size) <= self.buffer.size), "Model is broken!"
        if (self.buffer.offset + fbe_struct_offset + fbe_struct_size) > self.buffer.size:
            return 0

        fbe_struct_size = 8 + self._model.set(value)
        self.buffer.resize(fbe_initial_size + fbe_struct_size)

        self.write_uint32(self._model.fbe_offset - 8, fbe_struct_size)
        self.write_uint32(self._model.fbe_offset - 4, fbe_struct_type)

        return fbe_struct_size

    # Deserialize the struct value
    def deserialize(self, value=None):
        if value is None:
            value = Order()

        assert ((self.buffer.offset + self._model.fbe_offset) <= self.buffer.size), "Model is broken!"
        if (self.buffer.offset + self._model.fbe_offset) > self.buffer.size:
            return Order(), 0

        fbe_struct_size = self.read_uint32(self._model.fbe_offset - 8)
        fbe_struct_type = self.read_uint32(self._model.fbe_offset - 4)
        assert ((fbe_struct_size > 0) and (fbe_struct_type == self.fbe_type)), "Model is broken!"
        if (fbe_struct_size <= 0) or (fbe_struct_type != self.fbe_type):
            return Order(), 8

        fbe_result = self._model.get(value)
        return fbe_result[0], (8 + fbe_result[1])

    # Move to the next struct value
    def next(self, prev):
        self._model.fbe_shift(prev)


@functools.total_ordering
class Balance(object):
    def __init__(self):
        pass

    # Struct shallow copy
    def copy(self, other):
        return self

    # Struct deep clone
    def clone(self):
        # Serialize the struct to the FBE stream
        writer = BalanceModel(fbe.WriteBuffer())
        writer.serialize(self)

        # Deserialize the struct from the FBE stream
        reader = BalanceModel(fbe.ReadBuffer())
        reader.attach_buffer(writer.buffer)
        return reader.deserialize()[0]

    def __eq__(self, other):
        if not isinstance(self, other.__class__):
            return NotImplemented
        return True

    def __lt__(self, other):
        if not isinstance(self, other.__class__):
            return NotImplemented
        return False

    @property
    def __key__(self):
        return ()

    def __hash__(self):
        return hash(self.__key__)

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        sb = list()
        sb.append("Balance(")
        sb.append(")")
        return "".join(sb)

    # Get struct JSON value
    def to_json(self):
        return json.dumps(self.__to_json__(), cls=fbe.JSONEncoder, separators=(',', ':'))

    def __to_json__(self):
        result = dict()
        return result

    # Create struct from JSON value
    @staticmethod
    def from_json(document):
        return Balance.__from_json__(json.loads(document))

    @staticmethod
    def __from_json__(fields):
        if fields is None:
            return None
        return Balance(
        )


class FieldModelBalance(fbe.FieldModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the field size
    @property
    def fbe_size(self):
        return 4

    # Get the field body size
    @property
    def fbe_body(self):
        fbe_result = 4 + 4 \

        return fbe_result

    # Get the field extra size
    @property
    def fbe_extra(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4) > self._buffer.size):
            return 0

        self._buffer.shift(fbe_struct_offset)

        fbe_result = self.fbe_body \

        self._buffer.unshift(fbe_struct_offset)

        return fbe_result

    # Get the field type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = 2

    # Check if the struct value is valid
    def verify(self, fbe_verify_type=True):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return True

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4 + 4) > self._buffer.size):
            return False

        fbe_struct_size = self.read_uint32(fbe_struct_offset)
        if fbe_struct_size < (4 + 4):
            return False

        fbe_struct_type = self.read_uint32(fbe_struct_offset + 4)
        if fbe_verify_type and (fbe_struct_type != self.fbe_type):
            return False

        self._buffer.shift(fbe_struct_offset)
        fbe_result = self.verify_fields(fbe_struct_size)
        self._buffer.unshift(fbe_struct_offset)
        return fbe_result

    # Check if the struct fields are valid
    def verify_fields(self, fbe_struct_size):
        return True

    # Get the struct value (begin phase)
    def get_begin(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        assert (fbe_struct_offset > 0) and ((self._buffer.offset + fbe_struct_offset + 4 + 4) <= self._buffer.size), "Model is broken!"
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4 + 4) > self._buffer.size):
            return 0

        fbe_struct_size = self.read_uint32(fbe_struct_offset)
        assert (fbe_struct_size >= (4 + 4)), "Model is broken!"
        if fbe_struct_size < (4 + 4):
            return 0

        self._buffer.shift(fbe_struct_offset)
        return fbe_struct_offset

    # Get the struct value (end phase)
    def get_end(self, fbe_begin):
        self._buffer.unshift(fbe_begin)

    # Get the struct value
    def get(self, fbe_value=None):
        if fbe_value is None:
            fbe_value = Balance()

        fbe_begin = self.get_begin()
        if fbe_begin == 0:
            return fbe_value

        fbe_struct_size = self.read_uint32(0)
        self.get_fields(fbe_value, fbe_struct_size)
        self.get_end(fbe_begin)
        return fbe_value

    # Get the struct fields values
    def get_fields(self, fbe_value, fbe_struct_size):
        pass

    # Set the struct value (begin phase)
    def set_begin(self):
        assert (self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size, "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_size = self.fbe_body
        fbe_struct_offset = self._buffer.allocate(fbe_struct_size) - self._buffer.offset
        assert (fbe_struct_offset > 0) and ((self._buffer.offset + fbe_struct_offset + fbe_struct_size) <= self._buffer.size), "Model is broken!"
        if (fbe_struct_offset <= 0) or ((self._buffer.offset + fbe_struct_offset + fbe_struct_size) > self._buffer.size):
            return 0

        self.write_uint32(self.fbe_offset, fbe_struct_offset)
        self.write_uint32(fbe_struct_offset, fbe_struct_size)
        self.write_uint32(fbe_struct_offset + 4, self.fbe_type)

        self._buffer.shift(fbe_struct_offset)
        return fbe_struct_offset

    # Set the struct value (end phase)
    def set_end(self, fbe_begin):
        self._buffer.unshift(fbe_begin)

    # Set the struct value
    def set(self, fbe_value):
        fbe_begin = self.set_begin()
        if fbe_begin == 0:
            return

        self.set_fields(fbe_value)
        self.set_end(fbe_begin)

    # Set the struct fields values
    def set_fields(self, fbe_value):
        pass


# Fast Binary Encoding Balance model
class BalanceModel(fbe.Model):
    __slots__ = "_model",

    def __init__(self, buffer=None):
        super().__init__(buffer)
        self._model = FieldModelBalance(self.buffer, 4)

    @property
    def model(self):
        return self._model

    # Get the model size
    def fbe_size(self):
        return self._model.fbe_size + self._model.fbe_extra

    # Get the model type
    def fbe_type(self):
        return self.TYPE

    TYPE = FieldModelBalance.TYPE

    # Check if the struct value is valid
    def verify(self):
        if (self.buffer.offset + self._model.fbe_offset - 4) > self.buffer.size:
            return False

        fbe_full_size = self.read_uint32(self._model.fbe_offset - 4)
        if fbe_full_size < self._model.fbe_size:
            return False

        return self._model.verify()

    # Create a new model (begin phase)
    def create_begin(self):
        fbe_begin = self.buffer.allocate(4 + self._model.fbe_size)
        return fbe_begin

    # Create a new model (end phase)
    def create_end(self, fbe_begin):
        fbe_end = self.buffer.size
        fbe_full_size = fbe_end - fbe_begin
        self.write_uint32(self._model.fbe_offset - 4, fbe_full_size)
        return fbe_full_size

    # Serialize the struct value
    def serialize(self, value):
        fbe_begin = self.create_begin()
        self._model.set(value)
        fbe_full_size = self.create_end(fbe_begin)
        return fbe_full_size

    # Deserialize the struct value
    def deserialize(self, value=None):
        if value is None:
            value = Balance()

        if (self.buffer.offset + self._model.fbe_offset - 4) > self.buffer.size:
            value = Balance()
            return value, 0

        fbe_full_size = self.read_uint32(self._model.fbe_offset - 4)
        assert (fbe_full_size >= self._model.fbe_size), "Model is broken!"
        if fbe_full_size < self._model.fbe_size:
            value = Balance()
            return value, 0

        self._model.get(value)
        return value, fbe_full_size

    # Move to the next struct value
    def next(self, prev):
        self._model.fbe_shift(prev)


class FinalModelBalance(fbe.FinalModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the allocation size
    def fbe_allocation_size(self, fbe_value):
        fbe_result = 0 \

        return fbe_result

    # Get the final type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = 2

    # Check if the struct value is valid
    def verify(self):
        self._buffer.shift(self.fbe_offset)
        fbe_result = self.verify_fields()
        self._buffer.unshift(self.fbe_offset)
        return fbe_result

    # Check if the struct fields are valid
    def verify_fields(self):
        return 0

    # Get the struct value
    def get(self, fbe_value=None):
        if fbe_value is None:
            fbe_value = Balance()

        self._buffer.shift(self.fbe_offset)
        fbe_size = self.get_fields(fbe_value)
        self._buffer.unshift(self.fbe_offset)
        return fbe_value, fbe_size

    # Get the struct fields values
    def get_fields(self, fbe_value):
        return 0

    # Set the struct value
    def set(self, fbe_value):
        self._buffer.shift(self.fbe_offset)
        fbe_size = self.set_fields(fbe_value)
        self._buffer.unshift(self.fbe_offset)
        return fbe_size

    # Set the struct fields values
    def set_fields(self, fbe_value):
        return 0


# Fast Binary Encoding Balance final model
class BalanceFinalModel(fbe.Model):
    __slots__ = "_model",

    def __init__(self, buffer=None):
        super().__init__(buffer)
        self._model = FinalModelBalance(self.buffer, 8)

    # Get the model type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = FinalModelBalance.TYPE

    # Check if the struct value is valid
    def verify(self):
        if (self.buffer.offset + self._model.fbe_offset) > self.buffer.size:
            return False

        fbe_struct_size = self.read_uint32(self._model.fbe_offset - 8)
        fbe_struct_type = self.read_uint32(self._model.fbe_offset - 4)
        if (fbe_struct_size <= 0) or (fbe_struct_type != self.fbe_type):
            return False

        return (8 + self._model.verify()) == fbe_struct_size

    # Serialize the struct value
    def serialize(self, value):
        fbe_initial_size = self.buffer.size

        fbe_struct_type = self.fbe_type
        fbe_struct_size = 8 + self._model.fbe_allocation_size(value)
        fbe_struct_offset = self.buffer.allocate(fbe_struct_size) - self.buffer.offset
        assert ((self.buffer.offset + fbe_struct_offset + fbe_struct_size) <= self.buffer.size), "Model is broken!"
        if (self.buffer.offset + fbe_struct_offset + fbe_struct_size) > self.buffer.size:
            return 0

        fbe_struct_size = 8 + self._model.set(value)
        self.buffer.resize(fbe_initial_size + fbe_struct_size)

        self.write_uint32(self._model.fbe_offset - 8, fbe_struct_size)
        self.write_uint32(self._model.fbe_offset - 4, fbe_struct_type)

        return fbe_struct_size

    # Deserialize the struct value
    def deserialize(self, value=None):
        if value is None:
            value = Balance()

        assert ((self.buffer.offset + self._model.fbe_offset) <= self.buffer.size), "Model is broken!"
        if (self.buffer.offset + self._model.fbe_offset) > self.buffer.size:
            return Balance(), 0

        fbe_struct_size = self.read_uint32(self._model.fbe_offset - 8)
        fbe_struct_type = self.read_uint32(self._model.fbe_offset - 4)
        assert ((fbe_struct_size > 0) and (fbe_struct_type == self.fbe_type)), "Model is broken!"
        if (fbe_struct_size <= 0) or (fbe_struct_type != self.fbe_type):
            return Balance(), 8

        fbe_result = self._model.get(value)
        return fbe_result[0], (8 + fbe_result[1])

    # Move to the next struct value
    def next(self, prev):
        self._model.fbe_shift(prev)


@functools.total_ordering
class Account(object):
    def __init__(self):
        pass

    # Struct shallow copy
    def copy(self, other):
        return self

    # Struct deep clone
    def clone(self):
        # Serialize the struct to the FBE stream
        writer = AccountModel(fbe.WriteBuffer())
        writer.serialize(self)

        # Deserialize the struct from the FBE stream
        reader = AccountModel(fbe.ReadBuffer())
        reader.attach_buffer(writer.buffer)
        return reader.deserialize()[0]

    def __eq__(self, other):
        if not isinstance(self, other.__class__):
            return NotImplemented
        return True

    def __lt__(self, other):
        if not isinstance(self, other.__class__):
            return NotImplemented
        return False

    @property
    def __key__(self):
        return ()

    def __hash__(self):
        return hash(self.__key__)

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        sb = list()
        sb.append("Account(")
        sb.append(")")
        return "".join(sb)

    # Get struct JSON value
    def to_json(self):
        return json.dumps(self.__to_json__(), cls=fbe.JSONEncoder, separators=(',', ':'))

    def __to_json__(self):
        result = dict()
        return result

    # Create struct from JSON value
    @staticmethod
    def from_json(document):
        return Account.__from_json__(json.loads(document))

    @staticmethod
    def __from_json__(fields):
        if fields is None:
            return None
        return Account(
        )


class FieldModelAccount(fbe.FieldModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the field size
    @property
    def fbe_size(self):
        return 4

    # Get the field body size
    @property
    def fbe_body(self):
        fbe_result = 4 + 4 \

        return fbe_result

    # Get the field extra size
    @property
    def fbe_extra(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4) > self._buffer.size):
            return 0

        self._buffer.shift(fbe_struct_offset)

        fbe_result = self.fbe_body \

        self._buffer.unshift(fbe_struct_offset)

        return fbe_result

    # Get the field type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = 3

    # Check if the struct value is valid
    def verify(self, fbe_verify_type=True):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return True

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4 + 4) > self._buffer.size):
            return False

        fbe_struct_size = self.read_uint32(fbe_struct_offset)
        if fbe_struct_size < (4 + 4):
            return False

        fbe_struct_type = self.read_uint32(fbe_struct_offset + 4)
        if fbe_verify_type and (fbe_struct_type != self.fbe_type):
            return False

        self._buffer.shift(fbe_struct_offset)
        fbe_result = self.verify_fields(fbe_struct_size)
        self._buffer.unshift(fbe_struct_offset)
        return fbe_result

    # Check if the struct fields are valid
    def verify_fields(self, fbe_struct_size):
        return True

    # Get the struct value (begin phase)
    def get_begin(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        assert (fbe_struct_offset > 0) and ((self._buffer.offset + fbe_struct_offset + 4 + 4) <= self._buffer.size), "Model is broken!"
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4 + 4) > self._buffer.size):
            return 0

        fbe_struct_size = self.read_uint32(fbe_struct_offset)
        assert (fbe_struct_size >= (4 + 4)), "Model is broken!"
        if fbe_struct_size < (4 + 4):
            return 0

        self._buffer.shift(fbe_struct_offset)
        return fbe_struct_offset

    # Get the struct value (end phase)
    def get_end(self, fbe_begin):
        self._buffer.unshift(fbe_begin)

    # Get the struct value
    def get(self, fbe_value=None):
        if fbe_value is None:
            fbe_value = Account()

        fbe_begin = self.get_begin()
        if fbe_begin == 0:
            return fbe_value

        fbe_struct_size = self.read_uint32(0)
        self.get_fields(fbe_value, fbe_struct_size)
        self.get_end(fbe_begin)
        return fbe_value

    # Get the struct fields values
    def get_fields(self, fbe_value, fbe_struct_size):
        pass

    # Set the struct value (begin phase)
    def set_begin(self):
        assert (self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size, "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_size = self.fbe_body
        fbe_struct_offset = self._buffer.allocate(fbe_struct_size) - self._buffer.offset
        assert (fbe_struct_offset > 0) and ((self._buffer.offset + fbe_struct_offset + fbe_struct_size) <= self._buffer.size), "Model is broken!"
        if (fbe_struct_offset <= 0) or ((self._buffer.offset + fbe_struct_offset + fbe_struct_size) > self._buffer.size):
            return 0

        self.write_uint32(self.fbe_offset, fbe_struct_offset)
        self.write_uint32(fbe_struct_offset, fbe_struct_size)
        self.write_uint32(fbe_struct_offset + 4, self.fbe_type)

        self._buffer.shift(fbe_struct_offset)
        return fbe_struct_offset

    # Set the struct value (end phase)
    def set_end(self, fbe_begin):
        self._buffer.unshift(fbe_begin)

    # Set the struct value
    def set(self, fbe_value):
        fbe_begin = self.set_begin()
        if fbe_begin == 0:
            return

        self.set_fields(fbe_value)
        self.set_end(fbe_begin)

    # Set the struct fields values
    def set_fields(self, fbe_value):
        pass


# Fast Binary Encoding Account model
class AccountModel(fbe.Model):
    __slots__ = "_model",

    def __init__(self, buffer=None):
        super().__init__(buffer)
        self._model = FieldModelAccount(self.buffer, 4)

    @property
    def model(self):
        return self._model

    # Get the model size
    def fbe_size(self):
        return self._model.fbe_size + self._model.fbe_extra

    # Get the model type
    def fbe_type(self):
        return self.TYPE

    TYPE = FieldModelAccount.TYPE

    # Check if the struct value is valid
    def verify(self):
        if (self.buffer.offset + self._model.fbe_offset - 4) > self.buffer.size:
            return False

        fbe_full_size = self.read_uint32(self._model.fbe_offset - 4)
        if fbe_full_size < self._model.fbe_size:
            return False

        return self._model.verify()

    # Create a new model (begin phase)
    def create_begin(self):
        fbe_begin = self.buffer.allocate(4 + self._model.fbe_size)
        return fbe_begin

    # Create a new model (end phase)
    def create_end(self, fbe_begin):
        fbe_end = self.buffer.size
        fbe_full_size = fbe_end - fbe_begin
        self.write_uint32(self._model.fbe_offset - 4, fbe_full_size)
        return fbe_full_size

    # Serialize the struct value
    def serialize(self, value):
        fbe_begin = self.create_begin()
        self._model.set(value)
        fbe_full_size = self.create_end(fbe_begin)
        return fbe_full_size

    # Deserialize the struct value
    def deserialize(self, value=None):
        if value is None:
            value = Account()

        if (self.buffer.offset + self._model.fbe_offset - 4) > self.buffer.size:
            value = Account()
            return value, 0

        fbe_full_size = self.read_uint32(self._model.fbe_offset - 4)
        assert (fbe_full_size >= self._model.fbe_size), "Model is broken!"
        if fbe_full_size < self._model.fbe_size:
            value = Account()
            return value, 0

        self._model.get(value)
        return value, fbe_full_size

    # Move to the next struct value
    def next(self, prev):
        self._model.fbe_shift(prev)


class FinalModelAccount(fbe.FinalModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the allocation size
    def fbe_allocation_size(self, fbe_value):
        fbe_result = 0 \

        return fbe_result

    # Get the final type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = 3

    # Check if the struct value is valid
    def verify(self):
        self._buffer.shift(self.fbe_offset)
        fbe_result = self.verify_fields()
        self._buffer.unshift(self.fbe_offset)
        return fbe_result

    # Check if the struct fields are valid
    def verify_fields(self):
        return 0

    # Get the struct value
    def get(self, fbe_value=None):
        if fbe_value is None:
            fbe_value = Account()

        self._buffer.shift(self.fbe_offset)
        fbe_size = self.get_fields(fbe_value)
        self._buffer.unshift(self.fbe_offset)
        return fbe_value, fbe_size

    # Get the struct fields values
    def get_fields(self, fbe_value):
        return 0

    # Set the struct value
    def set(self, fbe_value):
        self._buffer.shift(self.fbe_offset)
        fbe_size = self.set_fields(fbe_value)
        self._buffer.unshift(self.fbe_offset)
        return fbe_size

    # Set the struct fields values
    def set_fields(self, fbe_value):
        return 0


# Fast Binary Encoding Account final model
class AccountFinalModel(fbe.Model):
    __slots__ = "_model",

    def __init__(self, buffer=None):
        super().__init__(buffer)
        self._model = FinalModelAccount(self.buffer, 8)

    # Get the model type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = FinalModelAccount.TYPE

    # Check if the struct value is valid
    def verify(self):
        if (self.buffer.offset + self._model.fbe_offset) > self.buffer.size:
            return False

        fbe_struct_size = self.read_uint32(self._model.fbe_offset - 8)
        fbe_struct_type = self.read_uint32(self._model.fbe_offset - 4)
        if (fbe_struct_size <= 0) or (fbe_struct_type != self.fbe_type):
            return False

        return (8 + self._model.verify()) == fbe_struct_size

    # Serialize the struct value
    def serialize(self, value):
        fbe_initial_size = self.buffer.size

        fbe_struct_type = self.fbe_type
        fbe_struct_size = 8 + self._model.fbe_allocation_size(value)
        fbe_struct_offset = self.buffer.allocate(fbe_struct_size) - self.buffer.offset
        assert ((self.buffer.offset + fbe_struct_offset + fbe_struct_size) <= self.buffer.size), "Model is broken!"
        if (self.buffer.offset + fbe_struct_offset + fbe_struct_size) > self.buffer.size:
            return 0

        fbe_struct_size = 8 + self._model.set(value)
        self.buffer.resize(fbe_initial_size + fbe_struct_size)

        self.write_uint32(self._model.fbe_offset - 8, fbe_struct_size)
        self.write_uint32(self._model.fbe_offset - 4, fbe_struct_type)

        return fbe_struct_size

    # Deserialize the struct value
    def deserialize(self, value=None):
        if value is None:
            value = Account()

        assert ((self.buffer.offset + self._model.fbe_offset) <= self.buffer.size), "Model is broken!"
        if (self.buffer.offset + self._model.fbe_offset) > self.buffer.size:
            return Account(), 0

        fbe_struct_size = self.read_uint32(self._model.fbe_offset - 8)
        fbe_struct_type = self.read_uint32(self._model.fbe_offset - 4)
        assert ((fbe_struct_size > 0) and (fbe_struct_type == self.fbe_type)), "Model is broken!"
        if (fbe_struct_size <= 0) or (fbe_struct_type != self.fbe_type):
            return Account(), 8

        fbe_result = self._model.get(value)
        return fbe_result[0], (8 + fbe_result[1])

    # Move to the next struct value
    def next(self, prev):
        self._model.fbe_shift(prev)


# Fast Binary Encoding proto sender
class Sender(fbe.Sender):
    __slots__ = "_order_model", "_balance_model", "_account_model", 

    def __init__(self, buffer=None):
        super().__init__(buffer, False)
        self._order_model = OrderModel(self.buffer)
        self._balance_model = BalanceModel(self.buffer)
        self._account_model = AccountModel(self.buffer)

    # Sender models accessors

    @property
    def order_model(self):
        return self._order_model

    @property
    def balance_model(self):
        return self._balance_model

    @property
    def account_model(self):
        return self._account_model

    # Send methods

    def send(self, value):
        if isinstance(value, Order):
            return self.send_order(value)
        if isinstance(value, Balance):
            return self.send_balance(value)
        if isinstance(value, Account):
            return self.send_account(value)
        return 0

    def send_order(self, value):
        # Serialize the value into the FBE stream
        serialized = self.order_model.serialize(value)
        assert (serialized > 0), "proto.Order serialization failed!"
        assert self.order_model.verify(), "proto.Order validation failed!"

        # Log the value
        if self.logging:
            message = str(value)
            self.on_send_log(message)

        # Send the serialized value
        return self.send_serialized(serialized)

    def send_balance(self, value):
        # Serialize the value into the FBE stream
        serialized = self.balance_model.serialize(value)
        assert (serialized > 0), "proto.Balance serialization failed!"
        assert self.balance_model.verify(), "proto.Balance validation failed!"

        # Log the value
        if self.logging:
            message = str(value)
            self.on_send_log(message)

        # Send the serialized value
        return self.send_serialized(serialized)

    def send_account(self, value):
        # Serialize the value into the FBE stream
        serialized = self.account_model.serialize(value)
        assert (serialized > 0), "proto.Account serialization failed!"
        assert self.account_model.verify(), "proto.Account validation failed!"

        # Log the value
        if self.logging:
            message = str(value)
            self.on_send_log(message)

        # Send the serialized value
        return self.send_serialized(serialized)

    # Send message handler
    def on_send(self, buffer, offset, size):
        raise NotImplementedError("proto.Sender.on_send() not implemented!")


# Fast Binary Encoding proto receiver
class Receiver(fbe.Receiver):
    __slots__ = "_order_value", "_order_model", "_balance_value", "_balance_model", "_account_value", "_account_model", 

    def __init__(self, buffer=None):
        super().__init__(buffer, False)
        self._order_value = Order()
        self._order_model = OrderModel()
        self._balance_value = Balance()
        self._balance_model = BalanceModel()
        self._account_value = Account()
        self._account_model = AccountModel()

    # Receive handlers

    def on_receive_order(self, value):
        pass

    def on_receive_balance(self, value):
        pass

    def on_receive_account(self, value):
        pass

    def on_receive(self, type, buffer, offset, size):

        if type == OrderModel.TYPE:
            # Deserialize the value from the FBE stream
            self._order_model.attach_buffer(buffer, offset)
            assert self._order_model.verify(), "proto.Order validation failed!"
            (_, deserialized) = self._order_model.deserialize(self._order_value)
            assert (deserialized > 0), "proto.Order deserialization failed!"

            # Log the value
            if self.logging:
                message = str(self._order_value)
                self.on_receive_log(message)

            # Call receive handler with deserialized value
            self.on_receive_order(self._order_value)
            return True

        if type == BalanceModel.TYPE:
            # Deserialize the value from the FBE stream
            self._balance_model.attach_buffer(buffer, offset)
            assert self._balance_model.verify(), "proto.Balance validation failed!"
            (_, deserialized) = self._balance_model.deserialize(self._balance_value)
            assert (deserialized > 0), "proto.Balance deserialization failed!"

            # Log the value
            if self.logging:
                message = str(self._balance_value)
                self.on_receive_log(message)

            # Call receive handler with deserialized value
            self.on_receive_balance(self._balance_value)
            return True

        if type == AccountModel.TYPE:
            # Deserialize the value from the FBE stream
            self._account_model.attach_buffer(buffer, offset)
            assert self._account_model.verify(), "proto.Account validation failed!"
            (_, deserialized) = self._account_model.deserialize(self._account_value)
            assert (deserialized > 0), "proto.Account deserialization failed!"

            # Log the value
            if self.logging:
                message = str(self._account_value)
                self.on_receive_log(message)

            # Call receive handler with deserialized value
            self.on_receive_account(self._account_value)
            return True

        return False


# Fast Binary Encoding proto proxy
class Proxy(fbe.Receiver):
    __slots__ = "_order_model", "_balance_model", "_account_model", 

    def __init__(self, buffer=None):
        super().__init__(buffer, False)
        self._order_model = OrderModel()
        self._balance_model = BalanceModel()
        self._account_model = AccountModel()

    # Receive handlers

    def on_proxy_order(self, model, type, buffer, offset, size):
        pass

    def on_proxy_balance(self, model, type, buffer, offset, size):
        pass

    def on_proxy_account(self, model, type, buffer, offset, size):
        pass

    def on_receive(self, type, buffer, offset, size):

        if type == OrderModel.TYPE:
            # Attach the FBE stream to the proxy model
            self._order_model.attach_buffer(buffer, offset)
            assert self._order_model.verify(), "proto.Order validation failed!"

            fbe_begin = self._order_model.model.get_begin()
            if fbe_begin == 0:
                return False
            # Call proxy handler
            self.on_proxy_order(self._order_model, type, buffer, offset, size)
            self._order_model.model.get_end(fbe_begin)
            return True

        if type == BalanceModel.TYPE:
            # Attach the FBE stream to the proxy model
            self._balance_model.attach_buffer(buffer, offset)
            assert self._balance_model.verify(), "proto.Balance validation failed!"

            fbe_begin = self._balance_model.model.get_begin()
            if fbe_begin == 0:
                return False
            # Call proxy handler
            self.on_proxy_balance(self._balance_model, type, buffer, offset, size)
            self._balance_model.model.get_end(fbe_begin)
            return True

        if type == AccountModel.TYPE:
            # Attach the FBE stream to the proxy model
            self._account_model.attach_buffer(buffer, offset)
            assert self._account_model.verify(), "proto.Account validation failed!"

            fbe_begin = self._account_model.model.get_begin()
            if fbe_begin == 0:
                return False
            # Call proxy handler
            self.on_proxy_account(self._account_model, type, buffer, offset, size)
            self._account_model.model.get_end(fbe_begin)
            return True

        return False


# Fast Binary Encoding proto final sender
class FinalSender(fbe.Sender):
    __slots__ = "_order_model", "_balance_model", "_account_model", 

    def __init__(self, buffer=None):
        super().__init__(buffer, True)
        self._order_model = OrderFinalModel(self.buffer)
        self._balance_model = BalanceFinalModel(self.buffer)
        self._account_model = AccountFinalModel(self.buffer)

    # Sender models accessors

    @property
    def order_model(self):
        return self._order_model

    @property
    def balance_model(self):
        return self._balance_model

    @property
    def account_model(self):
        return self._account_model

    # Send methods

    def send(self, value):
        if isinstance(value, Order):
            return self.send_order(value)
        if isinstance(value, Balance):
            return self.send_balance(value)
        if isinstance(value, Account):
            return self.send_account(value)
        return 0

    def send_order(self, value):
        # Serialize the value into the FBE stream
        serialized = self.order_model.serialize(value)
        assert (serialized > 0), "proto.Order serialization failed!"
        assert self.order_model.verify(), "proto.Order validation failed!"

        # Log the value
        if self.logging:
            message = str(value)
            self.on_send_log(message)

        # Send the serialized value
        return self.send_serialized(serialized)

    def send_balance(self, value):
        # Serialize the value into the FBE stream
        serialized = self.balance_model.serialize(value)
        assert (serialized > 0), "proto.Balance serialization failed!"
        assert self.balance_model.verify(), "proto.Balance validation failed!"

        # Log the value
        if self.logging:
            message = str(value)
            self.on_send_log(message)

        # Send the serialized value
        return self.send_serialized(serialized)

    def send_account(self, value):
        # Serialize the value into the FBE stream
        serialized = self.account_model.serialize(value)
        assert (serialized > 0), "proto.Account serialization failed!"
        assert self.account_model.verify(), "proto.Account validation failed!"

        # Log the value
        if self.logging:
            message = str(value)
            self.on_send_log(message)

        # Send the serialized value
        return self.send_serialized(serialized)

    # Send message handler
    def on_send(self, buffer, offset, size):
        raise NotImplementedError("proto.Sender.on_send() not implemented!")


# Fast Binary Encoding proto final receiver
class FinalReceiver(fbe.Receiver):
    __slots__ = "_order_value", "_order_model", "_balance_value", "_balance_model", "_account_value", "_account_model", 

    def __init__(self, buffer=None):
        super().__init__(buffer, True)
        self._order_value = Order()
        self._order_model = OrderFinalModel()
        self._balance_value = Balance()
        self._balance_model = BalanceFinalModel()
        self._account_value = Account()
        self._account_model = AccountFinalModel()

    # Receive handlers

    def on_receive_order(self, value):
        pass

    def on_receive_balance(self, value):
        pass

    def on_receive_account(self, value):
        pass

    def on_receive(self, type, buffer, offset, size):

        if type == OrderFinalModel.TYPE:
            # Deserialize the value from the FBE stream
            self._order_model.attach_buffer(buffer, offset)
            assert self._order_model.verify(), "proto.Order validation failed!"
            (_, deserialized) = self._order_model.deserialize(self._order_value)
            assert (deserialized > 0), "proto.Order deserialization failed!"

            # Log the value
            if self.logging:
                message = str(self._order_value)
                self.on_receive_log(message)

            # Call receive handler with deserialized value
            self.on_receive_order(self._order_value)
            return True

        if type == BalanceFinalModel.TYPE:
            # Deserialize the value from the FBE stream
            self._balance_model.attach_buffer(buffer, offset)
            assert self._balance_model.verify(), "proto.Balance validation failed!"
            (_, deserialized) = self._balance_model.deserialize(self._balance_value)
            assert (deserialized > 0), "proto.Balance deserialization failed!"

            # Log the value
            if self.logging:
                message = str(self._balance_value)
                self.on_receive_log(message)

            # Call receive handler with deserialized value
            self.on_receive_balance(self._balance_value)
            return True

        if type == AccountFinalModel.TYPE:
            # Deserialize the value from the FBE stream
            self._account_model.attach_buffer(buffer, offset)
            assert self._account_model.verify(), "proto.Account validation failed!"
            (_, deserialized) = self._account_model.deserialize(self._account_value)
            assert (deserialized > 0), "proto.Account deserialization failed!"

            # Log the value
            if self.logging:
                message = str(self._account_value)
                self.on_receive_log(message)

            # Call receive handler with deserialized value
            self.on_receive_account(self._account_value)
            return True

        return False
