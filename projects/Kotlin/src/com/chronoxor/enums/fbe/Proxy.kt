// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: enums.fbe
// Version: 1.3.0.0

@file:Suppress("UnusedImport", "unused")

package com.chronoxor.enums.fbe

// Fast Binary Encoding com.chronoxor.enums proxy
@Suppress("MemberVisibilityCanBePrivate", "PrivatePropertyName", "UNUSED_PARAMETER")
open class Proxy : com.chronoxor.fbe.Receiver, ProxyListener
{
    // Proxy models accessors
    private val EnumsModel: EnumsModel

    constructor() : super(false)
    {
        EnumsModel = EnumsModel()
    }

    constructor(buffer: com.chronoxor.fbe.Buffer) : super(buffer, false)
    {
        EnumsModel = EnumsModel()
    }

    override fun onReceive(type: Long, buffer: ByteArray, offset: Long, size: Long): Boolean
    {
        return onReceiveListener(this, type, buffer, offset, size)
    }

    open fun onReceiveListener(listener: ProxyListener, type: Long, buffer: ByteArray, offset: Long, size: Long): Boolean
    {
        when (type)
        {
            com.chronoxor.enums.fbe.EnumsModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                EnumsModel.attach(buffer, offset)
                assert(EnumsModel.verify()) { "com.chronoxor.enums.Enums validation failed!" }

                val fbeBegin = EnumsModel.model.getBegin()
                if (fbeBegin == 0L)
                    return false
                // Call proxy handler
                listener.onProxy(EnumsModel, type, buffer, offset, size)
                EnumsModel.model.getEnd(fbeBegin)
                return true
            }
        }

        return false
    }
}
