// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: enums.fbe
// Version: 1.3.0.0

@file:Suppress("UnusedImport", "unused")

package com.chronoxor.enums.fbe

// Fast Binary Encoding com.chronoxor.enums client
@Suppress("MemberVisibilityCanBePrivate", "PropertyName")
open class Client : com.chronoxor.fbe.Client, ReceiverListener
{
    // Client sender models accessors
    val EnumsSenderModel: EnumsModel

    // Client receiver values accessors
    private val EnumsReceiverValue: com.chronoxor.enums.Enums

    // Client receiver models accessors
    private val EnumsReceiverModel: EnumsModel

    constructor() : super(false)
    {
        EnumsSenderModel = EnumsModel(sendBuffer)
        EnumsReceiverValue = com.chronoxor.enums.Enums()
        EnumsReceiverModel = EnumsModel()
    }

    constructor(sendBuffer: com.chronoxor.fbe.Buffer, receiveBuffer: com.chronoxor.fbe.Buffer) : super(sendBuffer, receiveBuffer, false)
    {
        EnumsSenderModel = EnumsModel(sendBuffer)
        EnumsReceiverValue = com.chronoxor.enums.Enums()
        EnumsReceiverModel = EnumsModel()
    }

    @Suppress("JoinDeclarationAndAssignment")
    fun send(obj: Any): Long
    {
        when (obj)
        {
            is com.chronoxor.enums.Enums -> if (obj.fbeType == EnumsSenderModel.fbeType) return send(obj)
        }

        return 0
    }

    fun send(value: com.chronoxor.enums.Enums): Long
    {
        // Serialize the value into the FBE stream
        val serialized = EnumsSenderModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.enums.Enums serialization failed!" }
        assert(EnumsSenderModel.verify()) { "com.chronoxor.enums.Enums validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }

    // Send message handler
    override fun onSend(buffer: ByteArray, offset: Long, size: Long): Long { throw UnsupportedOperationException("com.chronoxor.enums.fbe.Client.onSend() not implemented!") }
    override fun onReceive(type: Long, buffer: ByteArray, offset: Long, size: Long): Boolean
    {
        return onReceiveListener(this, type, buffer, offset, size)
    }

    open fun onReceiveListener(listener: ReceiverListener, type: Long, buffer: ByteArray, offset: Long, size: Long): Boolean
    {
        when (type)
        {
            com.chronoxor.enums.fbe.EnumsModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                EnumsReceiverModel.attach(buffer, offset)
                assert(EnumsReceiverModel.verify()) { "com.chronoxor.enums.Enums validation failed!" }
                val deserialized = EnumsReceiverModel.deserialize(EnumsReceiverValue)
                assert(deserialized > 0) { "com.chronoxor.enums.Enums deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = EnumsReceiverValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(EnumsReceiverValue)
                return true
            }
        }

        return false
    }
}
