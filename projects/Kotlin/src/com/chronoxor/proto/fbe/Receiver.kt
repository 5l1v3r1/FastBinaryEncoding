// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: proto.fbe
// Version: 1.3.0.0

@file:Suppress("UnusedImport", "unused")

package com.chronoxor.proto.fbe

import java.io.*
import java.lang.*
import java.lang.reflect.*
import java.math.*
import java.nio.charset.*
import java.time.*
import java.util.*

import com.chronoxor.fbe.*
import com.chronoxor.proto.*

// Fast Binary Encoding com.chronoxor.proto receiver
@Suppress("MemberVisibilityCanBePrivate", "PrivatePropertyName", "UNUSED_PARAMETER")
open class Receiver : com.chronoxor.fbe.Receiver
{
    // Receiver values accessors
    private val OrderValue: com.chronoxor.proto.Order
    private val BalanceValue: com.chronoxor.proto.Balance
    private val AccountValue: com.chronoxor.proto.Account

    // Receiver models accessors
    private val OrderModel: OrderModel
    private val BalanceModel: BalanceModel
    private val AccountModel: AccountModel

    constructor() : super(false)
    {
        OrderValue = com.chronoxor.proto.Order()
        OrderModel = OrderModel()
        BalanceValue = com.chronoxor.proto.Balance()
        BalanceModel = BalanceModel()
        AccountValue = com.chronoxor.proto.Account()
        AccountModel = AccountModel()
    }

    constructor(buffer: Buffer) : super(buffer, false)
    {
        OrderValue = com.chronoxor.proto.Order()
        OrderModel = OrderModel()
        BalanceValue = com.chronoxor.proto.Balance()
        BalanceModel = BalanceModel()
        AccountValue = com.chronoxor.proto.Account()
        AccountModel = AccountModel()
    }

    // Receive handlers
    protected open fun onReceive(value: com.chronoxor.proto.Order) {}
    protected open fun onReceive(value: com.chronoxor.proto.Balance) {}
    protected open fun onReceive(value: com.chronoxor.proto.Account) {}

    override fun onReceive(type: Long, buffer: ByteArray, offset: Long, size: Long): Boolean
    {
        when (type)
        {
            com.chronoxor.proto.fbe.OrderModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                OrderModel.attach(buffer, offset)
                assert(OrderModel.verify()) { "com.chronoxor.proto.Order validation failed!" }
                val deserialized = OrderModel.deserialize(OrderValue)
                assert(deserialized > 0) { "com.chronoxor.proto.Order deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = OrderValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                onReceive(OrderValue)
                return true
            }
            com.chronoxor.proto.fbe.BalanceModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                BalanceModel.attach(buffer, offset)
                assert(BalanceModel.verify()) { "com.chronoxor.proto.Balance validation failed!" }
                val deserialized = BalanceModel.deserialize(BalanceValue)
                assert(deserialized > 0) { "com.chronoxor.proto.Balance deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = BalanceValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                onReceive(BalanceValue)
                return true
            }
            com.chronoxor.proto.fbe.AccountModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                AccountModel.attach(buffer, offset)
                assert(AccountModel.verify()) { "com.chronoxor.proto.Account validation failed!" }
                val deserialized = AccountModel.deserialize(AccountValue)
                assert(deserialized > 0) { "com.chronoxor.proto.Account deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = AccountValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                onReceive(AccountValue)
                return true
            }
        }

        return false
    }
}
