// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: protoex.fbe
// Version: 1.3.0.0

@file:Suppress("UnusedImport", "unused")

package com.chronoxor.protoex.fbe

// Fast Binary Encoding com.chronoxor.protoex final client
@Suppress("MemberVisibilityCanBePrivate", "PropertyName")
open class FinalClient : com.chronoxor.fbe.Client, FinalReceiverListener
{
    // Imported senders
    val protoSender: com.chronoxor.proto.fbe.FinalClient

    // Imported receivers
    var protoReceiver: com.chronoxor.proto.fbe.FinalClient? = null

    // Client sender models accessors
    val OrderSenderModel: OrderFinalModel
    val BalanceSenderModel: BalanceFinalModel
    val AccountSenderModel: AccountFinalModel

    // Client receiver values accessors
    private val OrderReceiverValue: com.chronoxor.protoex.Order
    private val BalanceReceiverValue: com.chronoxor.protoex.Balance
    private val AccountReceiverValue: com.chronoxor.protoex.Account

    // Client receiver models accessors
    private val OrderReceiverModel: OrderFinalModel
    private val BalanceReceiverModel: BalanceFinalModel
    private val AccountReceiverModel: AccountFinalModel

    constructor() : super(true)
    {
        protoSender = com.chronoxor.proto.fbe.FinalClient(sendBuffer, receiveBuffer)
        protoReceiver = com.chronoxor.proto.fbe.FinalClient(sendBuffer, receiveBuffer)
        OrderSenderModel = OrderFinalModel(sendBuffer)
        OrderReceiverValue = com.chronoxor.protoex.Order()
        OrderReceiverModel = OrderFinalModel()
        BalanceSenderModel = BalanceFinalModel(sendBuffer)
        BalanceReceiverValue = com.chronoxor.protoex.Balance()
        BalanceReceiverModel = BalanceFinalModel()
        AccountSenderModel = AccountFinalModel(sendBuffer)
        AccountReceiverValue = com.chronoxor.protoex.Account()
        AccountReceiverModel = AccountFinalModel()
    }

    constructor(sendBuffer: com.chronoxor.fbe.Buffer, receiveBuffer: com.chronoxor.fbe.Buffer) : super(sendBuffer, receiveBuffer, true)
    {
        protoSender = com.chronoxor.proto.fbe.FinalClient(sendBuffer, receiveBuffer)
        protoReceiver = com.chronoxor.proto.fbe.FinalClient(sendBuffer, receiveBuffer)
        OrderSenderModel = OrderFinalModel(sendBuffer)
        OrderReceiverValue = com.chronoxor.protoex.Order()
        OrderReceiverModel = OrderFinalModel()
        BalanceSenderModel = BalanceFinalModel(sendBuffer)
        BalanceReceiverValue = com.chronoxor.protoex.Balance()
        BalanceReceiverModel = BalanceFinalModel()
        AccountSenderModel = AccountFinalModel(sendBuffer)
        AccountReceiverValue = com.chronoxor.protoex.Account()
        AccountReceiverModel = AccountFinalModel()
    }

    @Suppress("JoinDeclarationAndAssignment")
    fun send(obj: Any): Long
    {
        when (obj)
        {
            is com.chronoxor.protoex.Order -> return send(obj)
            is com.chronoxor.protoex.Balance -> return send(obj)
            is com.chronoxor.protoex.Account -> return send(obj)
        }

        // Try to send using imported clients
        @Suppress("CanBeVal")
        var result: Long
        result = protoSender.send(obj)
        if (result > 0)
            return result

        return 0
    }

    fun send(value: com.chronoxor.protoex.Order): Long
    {
        // Serialize the value into the FBE stream
        val serialized = OrderSenderModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.protoex.Order serialization failed!" }
        assert(OrderSenderModel.verify()) { "com.chronoxor.protoex.Order validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.protoex.Balance): Long
    {
        // Serialize the value into the FBE stream
        val serialized = BalanceSenderModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.protoex.Balance serialization failed!" }
        assert(BalanceSenderModel.verify()) { "com.chronoxor.protoex.Balance validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.protoex.Account): Long
    {
        // Serialize the value into the FBE stream
        val serialized = AccountSenderModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.protoex.Account serialization failed!" }
        assert(AccountSenderModel.verify()) { "com.chronoxor.protoex.Account validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }

    // Send message handler
    override fun onSend(buffer: ByteArray, offset: Long, size: Long): Long { throw UnsupportedOperationException("com.chronoxor.protoex.fbe.Client.onSend() not implemented!") }
    override fun onReceive(type: Long, buffer: ByteArray, offset: Long, size: Long): Boolean
    {
        return onReceiveListener(this, type, buffer, offset, size)
    }

    open fun onReceiveListener(listener: FinalReceiverListener, type: Long, buffer: ByteArray, offset: Long, size: Long): Boolean
    {
        when (type)
        {
            com.chronoxor.protoex.fbe.OrderFinalModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                OrderReceiverModel.attach(buffer, offset)
                assert(OrderReceiverModel.verify()) { "com.chronoxor.protoex.Order validation failed!" }
                val deserialized = OrderReceiverModel.deserialize(OrderReceiverValue)
                assert(deserialized > 0) { "com.chronoxor.protoex.Order deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = OrderReceiverValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(OrderReceiverValue)
                return true
            }
            com.chronoxor.protoex.fbe.BalanceFinalModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                BalanceReceiverModel.attach(buffer, offset)
                assert(BalanceReceiverModel.verify()) { "com.chronoxor.protoex.Balance validation failed!" }
                val deserialized = BalanceReceiverModel.deserialize(BalanceReceiverValue)
                assert(deserialized > 0) { "com.chronoxor.protoex.Balance deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = BalanceReceiverValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(BalanceReceiverValue)
                return true
            }
            com.chronoxor.protoex.fbe.AccountFinalModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                AccountReceiverModel.attach(buffer, offset)
                assert(AccountReceiverModel.verify()) { "com.chronoxor.protoex.Account validation failed!" }
                val deserialized = AccountReceiverModel.deserialize(AccountReceiverValue)
                assert(deserialized > 0) { "com.chronoxor.protoex.Account deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = AccountReceiverValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(AccountReceiverValue)
                return true
            }
        }

        if ((protoReceiver != null) && protoReceiver!!.onReceiveListener(listener, type, buffer, offset, size))
            return true

        return false
    }
}
