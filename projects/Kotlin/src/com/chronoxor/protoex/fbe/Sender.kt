// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: protoex.fbe
// Version: 1.3.0.0

@file:Suppress("UnusedImport", "unused")

package com.chronoxor.protoex.fbe

import java.io.*
import java.lang.*
import java.lang.reflect.*
import java.math.*
import java.nio.charset.*
import java.time.*
import java.util.*

import com.chronoxor.fbe.*
import com.chronoxor.protoex.*

// Fast Binary Encoding com.chronoxor.protoex sender
@Suppress("MemberVisibilityCanBePrivate", "PropertyName")
open class Sender : com.chronoxor.fbe.Sender
{
    // Imported senders
    val protoSender: com.chronoxor.proto.fbe.Sender

    // Sender models accessors
    val OrderModel: OrderModel
    val BalanceModel: BalanceModel
    val AccountModel: AccountModel

    constructor() : super(false)
    {
        protoSender = com.chronoxor.proto.fbe.Sender(buffer)
        OrderModel = OrderModel(buffer)
        BalanceModel = BalanceModel(buffer)
        AccountModel = AccountModel(buffer)
    }

    constructor(buffer: Buffer) : super(buffer, false)
    {
        protoSender = com.chronoxor.proto.fbe.Sender(buffer)
        OrderModel = OrderModel(buffer)
        BalanceModel = BalanceModel(buffer)
        AccountModel = AccountModel(buffer)
    }

    fun send(value: com.chronoxor.protoex.Order): Long
    {
        // Serialize the value into the FBE stream
        val serialized = OrderModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.protoex.Order serialization failed!" }
        assert(OrderModel.verify()) { "com.chronoxor.protoex.Order validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.protoex.Balance): Long
    {
        // Serialize the value into the FBE stream
        val serialized = BalanceModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.protoex.Balance serialization failed!" }
        assert(BalanceModel.verify()) { "com.chronoxor.protoex.Balance validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.protoex.Account): Long
    {
        // Serialize the value into the FBE stream
        val serialized = AccountModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.protoex.Account serialization failed!" }
        assert(AccountModel.verify()) { "com.chronoxor.protoex.Account validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }

    // Send message handler
    override fun onSend(buffer: ByteArray, offset: Long, size: Long): Long { throw UnsupportedOperationException("com.chronoxor.protoex.fbe.Sender.onSend() not implemented!") }
}
