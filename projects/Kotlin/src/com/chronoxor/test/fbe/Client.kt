// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// Version: 1.3.0.0

@file:Suppress("UnusedImport", "unused")

package com.chronoxor.test.fbe

// Fast Binary Encoding com.chronoxor.test client
@Suppress("MemberVisibilityCanBePrivate", "PropertyName")
open class Client : com.chronoxor.fbe.Client, ReceiverListener
{
    // Imported senders
    val protoSender: com.chronoxor.proto.fbe.Client

    // Imported receivers
    var protoReceiver: com.chronoxor.proto.fbe.Client? = null

    // Client sender models accessors
    val StructSimpleSenderModel: StructSimpleModel
    val StructOptionalSenderModel: StructOptionalModel
    val StructNestedSenderModel: StructNestedModel
    val StructBytesSenderModel: StructBytesModel
    val StructArraySenderModel: StructArrayModel
    val StructVectorSenderModel: StructVectorModel
    val StructListSenderModel: StructListModel
    val StructSetSenderModel: StructSetModel
    val StructMapSenderModel: StructMapModel
    val StructHashSenderModel: StructHashModel
    val StructHashExSenderModel: StructHashExModel
    val StructEmptySenderModel: StructEmptyModel

    // Client receiver values accessors
    private val StructSimpleReceiverValue: com.chronoxor.test.StructSimple
    private val StructOptionalReceiverValue: com.chronoxor.test.StructOptional
    private val StructNestedReceiverValue: com.chronoxor.test.StructNested
    private val StructBytesReceiverValue: com.chronoxor.test.StructBytes
    private val StructArrayReceiverValue: com.chronoxor.test.StructArray
    private val StructVectorReceiverValue: com.chronoxor.test.StructVector
    private val StructListReceiverValue: com.chronoxor.test.StructList
    private val StructSetReceiverValue: com.chronoxor.test.StructSet
    private val StructMapReceiverValue: com.chronoxor.test.StructMap
    private val StructHashReceiverValue: com.chronoxor.test.StructHash
    private val StructHashExReceiverValue: com.chronoxor.test.StructHashEx
    private val StructEmptyReceiverValue: com.chronoxor.test.StructEmpty

    // Client receiver models accessors
    private val StructSimpleReceiverModel: StructSimpleModel
    private val StructOptionalReceiverModel: StructOptionalModel
    private val StructNestedReceiverModel: StructNestedModel
    private val StructBytesReceiverModel: StructBytesModel
    private val StructArrayReceiverModel: StructArrayModel
    private val StructVectorReceiverModel: StructVectorModel
    private val StructListReceiverModel: StructListModel
    private val StructSetReceiverModel: StructSetModel
    private val StructMapReceiverModel: StructMapModel
    private val StructHashReceiverModel: StructHashModel
    private val StructHashExReceiverModel: StructHashExModel
    private val StructEmptyReceiverModel: StructEmptyModel

    constructor() : super(false)
    {
        protoSender = com.chronoxor.proto.fbe.Client(sendBuffer, receiveBuffer)
        protoReceiver = com.chronoxor.proto.fbe.Client(sendBuffer, receiveBuffer)
        StructSimpleSenderModel = StructSimpleModel(sendBuffer)
        StructSimpleReceiverValue = com.chronoxor.test.StructSimple()
        StructSimpleReceiverModel = StructSimpleModel()
        StructOptionalSenderModel = StructOptionalModel(sendBuffer)
        StructOptionalReceiverValue = com.chronoxor.test.StructOptional()
        StructOptionalReceiverModel = StructOptionalModel()
        StructNestedSenderModel = StructNestedModel(sendBuffer)
        StructNestedReceiverValue = com.chronoxor.test.StructNested()
        StructNestedReceiverModel = StructNestedModel()
        StructBytesSenderModel = StructBytesModel(sendBuffer)
        StructBytesReceiverValue = com.chronoxor.test.StructBytes()
        StructBytesReceiverModel = StructBytesModel()
        StructArraySenderModel = StructArrayModel(sendBuffer)
        StructArrayReceiverValue = com.chronoxor.test.StructArray()
        StructArrayReceiverModel = StructArrayModel()
        StructVectorSenderModel = StructVectorModel(sendBuffer)
        StructVectorReceiverValue = com.chronoxor.test.StructVector()
        StructVectorReceiverModel = StructVectorModel()
        StructListSenderModel = StructListModel(sendBuffer)
        StructListReceiverValue = com.chronoxor.test.StructList()
        StructListReceiverModel = StructListModel()
        StructSetSenderModel = StructSetModel(sendBuffer)
        StructSetReceiverValue = com.chronoxor.test.StructSet()
        StructSetReceiverModel = StructSetModel()
        StructMapSenderModel = StructMapModel(sendBuffer)
        StructMapReceiverValue = com.chronoxor.test.StructMap()
        StructMapReceiverModel = StructMapModel()
        StructHashSenderModel = StructHashModel(sendBuffer)
        StructHashReceiverValue = com.chronoxor.test.StructHash()
        StructHashReceiverModel = StructHashModel()
        StructHashExSenderModel = StructHashExModel(sendBuffer)
        StructHashExReceiverValue = com.chronoxor.test.StructHashEx()
        StructHashExReceiverModel = StructHashExModel()
        StructEmptySenderModel = StructEmptyModel(sendBuffer)
        StructEmptyReceiverValue = com.chronoxor.test.StructEmpty()
        StructEmptyReceiverModel = StructEmptyModel()
    }

    constructor(sendBuffer: com.chronoxor.fbe.Buffer, receiveBuffer: com.chronoxor.fbe.Buffer) : super(sendBuffer, receiveBuffer, false)
    {
        protoSender = com.chronoxor.proto.fbe.Client(sendBuffer, receiveBuffer)
        protoReceiver = com.chronoxor.proto.fbe.Client(sendBuffer, receiveBuffer)
        StructSimpleSenderModel = StructSimpleModel(sendBuffer)
        StructSimpleReceiverValue = com.chronoxor.test.StructSimple()
        StructSimpleReceiverModel = StructSimpleModel()
        StructOptionalSenderModel = StructOptionalModel(sendBuffer)
        StructOptionalReceiverValue = com.chronoxor.test.StructOptional()
        StructOptionalReceiverModel = StructOptionalModel()
        StructNestedSenderModel = StructNestedModel(sendBuffer)
        StructNestedReceiverValue = com.chronoxor.test.StructNested()
        StructNestedReceiverModel = StructNestedModel()
        StructBytesSenderModel = StructBytesModel(sendBuffer)
        StructBytesReceiverValue = com.chronoxor.test.StructBytes()
        StructBytesReceiverModel = StructBytesModel()
        StructArraySenderModel = StructArrayModel(sendBuffer)
        StructArrayReceiverValue = com.chronoxor.test.StructArray()
        StructArrayReceiverModel = StructArrayModel()
        StructVectorSenderModel = StructVectorModel(sendBuffer)
        StructVectorReceiverValue = com.chronoxor.test.StructVector()
        StructVectorReceiverModel = StructVectorModel()
        StructListSenderModel = StructListModel(sendBuffer)
        StructListReceiverValue = com.chronoxor.test.StructList()
        StructListReceiverModel = StructListModel()
        StructSetSenderModel = StructSetModel(sendBuffer)
        StructSetReceiverValue = com.chronoxor.test.StructSet()
        StructSetReceiverModel = StructSetModel()
        StructMapSenderModel = StructMapModel(sendBuffer)
        StructMapReceiverValue = com.chronoxor.test.StructMap()
        StructMapReceiverModel = StructMapModel()
        StructHashSenderModel = StructHashModel(sendBuffer)
        StructHashReceiverValue = com.chronoxor.test.StructHash()
        StructHashReceiverModel = StructHashModel()
        StructHashExSenderModel = StructHashExModel(sendBuffer)
        StructHashExReceiverValue = com.chronoxor.test.StructHashEx()
        StructHashExReceiverModel = StructHashExModel()
        StructEmptySenderModel = StructEmptyModel(sendBuffer)
        StructEmptyReceiverValue = com.chronoxor.test.StructEmpty()
        StructEmptyReceiverModel = StructEmptyModel()
    }

    @Suppress("JoinDeclarationAndAssignment")
    fun send(obj: Any): Long
    {
        when (obj)
        {
            is com.chronoxor.test.StructSimple -> if (obj.fbeType == StructSimpleSenderModel.fbeType) return send(obj)
            is com.chronoxor.test.StructOptional -> if (obj.fbeType == StructOptionalSenderModel.fbeType) return send(obj)
            is com.chronoxor.test.StructNested -> if (obj.fbeType == StructNestedSenderModel.fbeType) return send(obj)
            is com.chronoxor.test.StructBytes -> if (obj.fbeType == StructBytesSenderModel.fbeType) return send(obj)
            is com.chronoxor.test.StructArray -> if (obj.fbeType == StructArraySenderModel.fbeType) return send(obj)
            is com.chronoxor.test.StructVector -> if (obj.fbeType == StructVectorSenderModel.fbeType) return send(obj)
            is com.chronoxor.test.StructList -> if (obj.fbeType == StructListSenderModel.fbeType) return send(obj)
            is com.chronoxor.test.StructSet -> if (obj.fbeType == StructSetSenderModel.fbeType) return send(obj)
            is com.chronoxor.test.StructMap -> if (obj.fbeType == StructMapSenderModel.fbeType) return send(obj)
            is com.chronoxor.test.StructHash -> if (obj.fbeType == StructHashSenderModel.fbeType) return send(obj)
            is com.chronoxor.test.StructHashEx -> if (obj.fbeType == StructHashExSenderModel.fbeType) return send(obj)
            is com.chronoxor.test.StructEmpty -> if (obj.fbeType == StructEmptySenderModel.fbeType) return send(obj)
        }

        // Try to send using imported clients
        @Suppress("CanBeVal")
        var result: Long
        result = protoSender.send(obj)
        if (result > 0)
            return result

        return 0
    }

    fun send(value: com.chronoxor.test.StructSimple): Long
    {
        // Serialize the value into the FBE stream
        val serialized = StructSimpleSenderModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.test.StructSimple serialization failed!" }
        assert(StructSimpleSenderModel.verify()) { "com.chronoxor.test.StructSimple validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.test.StructOptional): Long
    {
        // Serialize the value into the FBE stream
        val serialized = StructOptionalSenderModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.test.StructOptional serialization failed!" }
        assert(StructOptionalSenderModel.verify()) { "com.chronoxor.test.StructOptional validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.test.StructNested): Long
    {
        // Serialize the value into the FBE stream
        val serialized = StructNestedSenderModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.test.StructNested serialization failed!" }
        assert(StructNestedSenderModel.verify()) { "com.chronoxor.test.StructNested validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.test.StructBytes): Long
    {
        // Serialize the value into the FBE stream
        val serialized = StructBytesSenderModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.test.StructBytes serialization failed!" }
        assert(StructBytesSenderModel.verify()) { "com.chronoxor.test.StructBytes validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.test.StructArray): Long
    {
        // Serialize the value into the FBE stream
        val serialized = StructArraySenderModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.test.StructArray serialization failed!" }
        assert(StructArraySenderModel.verify()) { "com.chronoxor.test.StructArray validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.test.StructVector): Long
    {
        // Serialize the value into the FBE stream
        val serialized = StructVectorSenderModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.test.StructVector serialization failed!" }
        assert(StructVectorSenderModel.verify()) { "com.chronoxor.test.StructVector validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.test.StructList): Long
    {
        // Serialize the value into the FBE stream
        val serialized = StructListSenderModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.test.StructList serialization failed!" }
        assert(StructListSenderModel.verify()) { "com.chronoxor.test.StructList validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.test.StructSet): Long
    {
        // Serialize the value into the FBE stream
        val serialized = StructSetSenderModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.test.StructSet serialization failed!" }
        assert(StructSetSenderModel.verify()) { "com.chronoxor.test.StructSet validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.test.StructMap): Long
    {
        // Serialize the value into the FBE stream
        val serialized = StructMapSenderModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.test.StructMap serialization failed!" }
        assert(StructMapSenderModel.verify()) { "com.chronoxor.test.StructMap validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.test.StructHash): Long
    {
        // Serialize the value into the FBE stream
        val serialized = StructHashSenderModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.test.StructHash serialization failed!" }
        assert(StructHashSenderModel.verify()) { "com.chronoxor.test.StructHash validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.test.StructHashEx): Long
    {
        // Serialize the value into the FBE stream
        val serialized = StructHashExSenderModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.test.StructHashEx serialization failed!" }
        assert(StructHashExSenderModel.verify()) { "com.chronoxor.test.StructHashEx validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.test.StructEmpty): Long
    {
        // Serialize the value into the FBE stream
        val serialized = StructEmptySenderModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.test.StructEmpty serialization failed!" }
        assert(StructEmptySenderModel.verify()) { "com.chronoxor.test.StructEmpty validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }

    // Send message handler
    override fun onSend(buffer: ByteArray, offset: Long, size: Long): Long { throw UnsupportedOperationException("com.chronoxor.test.fbe.Client.onSend() not implemented!") }
    override fun onReceive(type: Long, buffer: ByteArray, offset: Long, size: Long): Boolean
    {
        return onReceiveListener(this, type, buffer, offset, size)
    }

    open fun onReceiveListener(listener: ReceiverListener, type: Long, buffer: ByteArray, offset: Long, size: Long): Boolean
    {
        when (type)
        {
            com.chronoxor.test.fbe.StructSimpleModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                StructSimpleReceiverModel.attach(buffer, offset)
                assert(StructSimpleReceiverModel.verify()) { "com.chronoxor.test.StructSimple validation failed!" }
                val deserialized = StructSimpleReceiverModel.deserialize(StructSimpleReceiverValue)
                assert(deserialized > 0) { "com.chronoxor.test.StructSimple deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = StructSimpleReceiverValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(StructSimpleReceiverValue)
                return true
            }
            com.chronoxor.test.fbe.StructOptionalModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                StructOptionalReceiverModel.attach(buffer, offset)
                assert(StructOptionalReceiverModel.verify()) { "com.chronoxor.test.StructOptional validation failed!" }
                val deserialized = StructOptionalReceiverModel.deserialize(StructOptionalReceiverValue)
                assert(deserialized > 0) { "com.chronoxor.test.StructOptional deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = StructOptionalReceiverValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(StructOptionalReceiverValue)
                return true
            }
            com.chronoxor.test.fbe.StructNestedModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                StructNestedReceiverModel.attach(buffer, offset)
                assert(StructNestedReceiverModel.verify()) { "com.chronoxor.test.StructNested validation failed!" }
                val deserialized = StructNestedReceiverModel.deserialize(StructNestedReceiverValue)
                assert(deserialized > 0) { "com.chronoxor.test.StructNested deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = StructNestedReceiverValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(StructNestedReceiverValue)
                return true
            }
            com.chronoxor.test.fbe.StructBytesModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                StructBytesReceiverModel.attach(buffer, offset)
                assert(StructBytesReceiverModel.verify()) { "com.chronoxor.test.StructBytes validation failed!" }
                val deserialized = StructBytesReceiverModel.deserialize(StructBytesReceiverValue)
                assert(deserialized > 0) { "com.chronoxor.test.StructBytes deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = StructBytesReceiverValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(StructBytesReceiverValue)
                return true
            }
            com.chronoxor.test.fbe.StructArrayModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                StructArrayReceiverModel.attach(buffer, offset)
                assert(StructArrayReceiverModel.verify()) { "com.chronoxor.test.StructArray validation failed!" }
                val deserialized = StructArrayReceiverModel.deserialize(StructArrayReceiverValue)
                assert(deserialized > 0) { "com.chronoxor.test.StructArray deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = StructArrayReceiverValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(StructArrayReceiverValue)
                return true
            }
            com.chronoxor.test.fbe.StructVectorModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                StructVectorReceiverModel.attach(buffer, offset)
                assert(StructVectorReceiverModel.verify()) { "com.chronoxor.test.StructVector validation failed!" }
                val deserialized = StructVectorReceiverModel.deserialize(StructVectorReceiverValue)
                assert(deserialized > 0) { "com.chronoxor.test.StructVector deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = StructVectorReceiverValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(StructVectorReceiverValue)
                return true
            }
            com.chronoxor.test.fbe.StructListModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                StructListReceiverModel.attach(buffer, offset)
                assert(StructListReceiverModel.verify()) { "com.chronoxor.test.StructList validation failed!" }
                val deserialized = StructListReceiverModel.deserialize(StructListReceiverValue)
                assert(deserialized > 0) { "com.chronoxor.test.StructList deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = StructListReceiverValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(StructListReceiverValue)
                return true
            }
            com.chronoxor.test.fbe.StructSetModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                StructSetReceiverModel.attach(buffer, offset)
                assert(StructSetReceiverModel.verify()) { "com.chronoxor.test.StructSet validation failed!" }
                val deserialized = StructSetReceiverModel.deserialize(StructSetReceiverValue)
                assert(deserialized > 0) { "com.chronoxor.test.StructSet deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = StructSetReceiverValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(StructSetReceiverValue)
                return true
            }
            com.chronoxor.test.fbe.StructMapModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                StructMapReceiverModel.attach(buffer, offset)
                assert(StructMapReceiverModel.verify()) { "com.chronoxor.test.StructMap validation failed!" }
                val deserialized = StructMapReceiverModel.deserialize(StructMapReceiverValue)
                assert(deserialized > 0) { "com.chronoxor.test.StructMap deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = StructMapReceiverValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(StructMapReceiverValue)
                return true
            }
            com.chronoxor.test.fbe.StructHashModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                StructHashReceiverModel.attach(buffer, offset)
                assert(StructHashReceiverModel.verify()) { "com.chronoxor.test.StructHash validation failed!" }
                val deserialized = StructHashReceiverModel.deserialize(StructHashReceiverValue)
                assert(deserialized > 0) { "com.chronoxor.test.StructHash deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = StructHashReceiverValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(StructHashReceiverValue)
                return true
            }
            com.chronoxor.test.fbe.StructHashExModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                StructHashExReceiverModel.attach(buffer, offset)
                assert(StructHashExReceiverModel.verify()) { "com.chronoxor.test.StructHashEx validation failed!" }
                val deserialized = StructHashExReceiverModel.deserialize(StructHashExReceiverValue)
                assert(deserialized > 0) { "com.chronoxor.test.StructHashEx deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = StructHashExReceiverValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(StructHashExReceiverValue)
                return true
            }
            com.chronoxor.test.fbe.StructEmptyModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                StructEmptyReceiverModel.attach(buffer, offset)
                assert(StructEmptyReceiverModel.verify()) { "com.chronoxor.test.StructEmpty validation failed!" }
                val deserialized = StructEmptyReceiverModel.deserialize(StructEmptyReceiverValue)
                assert(deserialized > 0) { "com.chronoxor.test.StructEmpty deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = StructEmptyReceiverValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(StructEmptyReceiverValue)
                return true
            }
        }

        if ((protoReceiver != null) && protoReceiver!!.onReceiveListener(listener, type, buffer, offset, size))
            return true

        return false
    }
}
