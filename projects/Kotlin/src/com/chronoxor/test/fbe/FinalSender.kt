// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// Version: 1.3.0.0

@file:Suppress("UnusedImport", "unused")

package com.chronoxor.test.fbe

import java.io.*
import java.lang.*
import java.lang.reflect.*
import java.math.*
import java.nio.charset.*
import java.time.*
import java.util.*

import com.chronoxor.fbe.*
import com.chronoxor.test.*

// Fast Binary Encoding com.chronoxor.test final sender
@Suppress("MemberVisibilityCanBePrivate", "PropertyName")
open class FinalSender : com.chronoxor.fbe.Sender
{
    // Imported senders
    val protoSender: com.chronoxor.proto.fbe.FinalSender

    // Sender models accessors
    val StructSimpleModel: StructSimpleFinalModel
    val StructOptionalModel: StructOptionalFinalModel
    val StructNestedModel: StructNestedFinalModel
    val StructBytesModel: StructBytesFinalModel
    val StructArrayModel: StructArrayFinalModel
    val StructVectorModel: StructVectorFinalModel
    val StructListModel: StructListFinalModel
    val StructSetModel: StructSetFinalModel
    val StructMapModel: StructMapFinalModel
    val StructHashModel: StructHashFinalModel
    val StructHashExModel: StructHashExFinalModel
    val StructEmptyModel: StructEmptyFinalModel

    constructor() : super(true)
    {
        protoSender = com.chronoxor.proto.fbe.FinalSender(buffer)
        StructSimpleModel = StructSimpleFinalModel(buffer)
        StructOptionalModel = StructOptionalFinalModel(buffer)
        StructNestedModel = StructNestedFinalModel(buffer)
        StructBytesModel = StructBytesFinalModel(buffer)
        StructArrayModel = StructArrayFinalModel(buffer)
        StructVectorModel = StructVectorFinalModel(buffer)
        StructListModel = StructListFinalModel(buffer)
        StructSetModel = StructSetFinalModel(buffer)
        StructMapModel = StructMapFinalModel(buffer)
        StructHashModel = StructHashFinalModel(buffer)
        StructHashExModel = StructHashExFinalModel(buffer)
        StructEmptyModel = StructEmptyFinalModel(buffer)
    }

    constructor(buffer: Buffer) : super(buffer, true)
    {
        protoSender = com.chronoxor.proto.fbe.FinalSender(buffer)
        StructSimpleModel = StructSimpleFinalModel(buffer)
        StructOptionalModel = StructOptionalFinalModel(buffer)
        StructNestedModel = StructNestedFinalModel(buffer)
        StructBytesModel = StructBytesFinalModel(buffer)
        StructArrayModel = StructArrayFinalModel(buffer)
        StructVectorModel = StructVectorFinalModel(buffer)
        StructListModel = StructListFinalModel(buffer)
        StructSetModel = StructSetFinalModel(buffer)
        StructMapModel = StructMapFinalModel(buffer)
        StructHashModel = StructHashFinalModel(buffer)
        StructHashExModel = StructHashExFinalModel(buffer)
        StructEmptyModel = StructEmptyFinalModel(buffer)
    }

    fun send(value: com.chronoxor.test.StructSimple): Long
    {
        // Serialize the value into the FBE stream
        val serialized = StructSimpleModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.test.StructSimple serialization failed!" }
        assert(StructSimpleModel.verify()) { "com.chronoxor.test.StructSimple validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.test.StructOptional): Long
    {
        // Serialize the value into the FBE stream
        val serialized = StructOptionalModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.test.StructOptional serialization failed!" }
        assert(StructOptionalModel.verify()) { "com.chronoxor.test.StructOptional validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.test.StructNested): Long
    {
        // Serialize the value into the FBE stream
        val serialized = StructNestedModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.test.StructNested serialization failed!" }
        assert(StructNestedModel.verify()) { "com.chronoxor.test.StructNested validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.test.StructBytes): Long
    {
        // Serialize the value into the FBE stream
        val serialized = StructBytesModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.test.StructBytes serialization failed!" }
        assert(StructBytesModel.verify()) { "com.chronoxor.test.StructBytes validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.test.StructArray): Long
    {
        // Serialize the value into the FBE stream
        val serialized = StructArrayModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.test.StructArray serialization failed!" }
        assert(StructArrayModel.verify()) { "com.chronoxor.test.StructArray validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.test.StructVector): Long
    {
        // Serialize the value into the FBE stream
        val serialized = StructVectorModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.test.StructVector serialization failed!" }
        assert(StructVectorModel.verify()) { "com.chronoxor.test.StructVector validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.test.StructList): Long
    {
        // Serialize the value into the FBE stream
        val serialized = StructListModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.test.StructList serialization failed!" }
        assert(StructListModel.verify()) { "com.chronoxor.test.StructList validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.test.StructSet): Long
    {
        // Serialize the value into the FBE stream
        val serialized = StructSetModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.test.StructSet serialization failed!" }
        assert(StructSetModel.verify()) { "com.chronoxor.test.StructSet validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.test.StructMap): Long
    {
        // Serialize the value into the FBE stream
        val serialized = StructMapModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.test.StructMap serialization failed!" }
        assert(StructMapModel.verify()) { "com.chronoxor.test.StructMap validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.test.StructHash): Long
    {
        // Serialize the value into the FBE stream
        val serialized = StructHashModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.test.StructHash serialization failed!" }
        assert(StructHashModel.verify()) { "com.chronoxor.test.StructHash validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.test.StructHashEx): Long
    {
        // Serialize the value into the FBE stream
        val serialized = StructHashExModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.test.StructHashEx serialization failed!" }
        assert(StructHashExModel.verify()) { "com.chronoxor.test.StructHashEx validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }
    fun send(value: com.chronoxor.test.StructEmpty): Long
    {
        // Serialize the value into the FBE stream
        val serialized = StructEmptyModel.serialize(value)
        assert(serialized > 0) { "com.chronoxor.test.StructEmpty serialization failed!" }
        assert(StructEmptyModel.verify()) { "com.chronoxor.test.StructEmpty validation failed!" }

        // Log the value
        if (logging)
        {
            val message = value.toString()
            onSendLog(message)
        }

        // Send the serialized value
        return sendSerialized(serialized)
    }

    // Send message handler
    override fun onSend(buffer: ByteArray, offset: Long, size: Long): Long { throw UnsupportedOperationException("com.chronoxor.test.fbe.Sender.onSend() not implemented!") }
}
