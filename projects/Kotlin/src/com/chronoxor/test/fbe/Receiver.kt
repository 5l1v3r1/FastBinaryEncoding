// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// Version: 1.3.0.0

@file:Suppress("UnusedImport", "unused")

package com.chronoxor.test.fbe

// Fast Binary Encoding com.chronoxor.test receiver
@Suppress("MemberVisibilityCanBePrivate", "PrivatePropertyName", "UNUSED_PARAMETER")
open class Receiver : com.chronoxor.fbe.Receiver, ReceiverListener
{
    // Imported receivers
    var protoReceiver: com.chronoxor.proto.fbe.Receiver? = null

    // Receiver values accessors
    private val StructSimpleValue: com.chronoxor.test.StructSimple
    private val StructOptionalValue: com.chronoxor.test.StructOptional
    private val StructNestedValue: com.chronoxor.test.StructNested
    private val StructBytesValue: com.chronoxor.test.StructBytes
    private val StructArrayValue: com.chronoxor.test.StructArray
    private val StructVectorValue: com.chronoxor.test.StructVector
    private val StructListValue: com.chronoxor.test.StructList
    private val StructSetValue: com.chronoxor.test.StructSet
    private val StructMapValue: com.chronoxor.test.StructMap
    private val StructHashValue: com.chronoxor.test.StructHash
    private val StructHashExValue: com.chronoxor.test.StructHashEx
    private val StructEmptyValue: com.chronoxor.test.StructEmpty

    // Receiver models accessors
    private val StructSimpleModel: StructSimpleModel
    private val StructOptionalModel: StructOptionalModel
    private val StructNestedModel: StructNestedModel
    private val StructBytesModel: StructBytesModel
    private val StructArrayModel: StructArrayModel
    private val StructVectorModel: StructVectorModel
    private val StructListModel: StructListModel
    private val StructSetModel: StructSetModel
    private val StructMapModel: StructMapModel
    private val StructHashModel: StructHashModel
    private val StructHashExModel: StructHashExModel
    private val StructEmptyModel: StructEmptyModel

    constructor() : super(false)
    {
        protoReceiver = com.chronoxor.proto.fbe.Receiver(buffer)
        StructSimpleValue = com.chronoxor.test.StructSimple()
        StructSimpleModel = StructSimpleModel()
        StructOptionalValue = com.chronoxor.test.StructOptional()
        StructOptionalModel = StructOptionalModel()
        StructNestedValue = com.chronoxor.test.StructNested()
        StructNestedModel = StructNestedModel()
        StructBytesValue = com.chronoxor.test.StructBytes()
        StructBytesModel = StructBytesModel()
        StructArrayValue = com.chronoxor.test.StructArray()
        StructArrayModel = StructArrayModel()
        StructVectorValue = com.chronoxor.test.StructVector()
        StructVectorModel = StructVectorModel()
        StructListValue = com.chronoxor.test.StructList()
        StructListModel = StructListModel()
        StructSetValue = com.chronoxor.test.StructSet()
        StructSetModel = StructSetModel()
        StructMapValue = com.chronoxor.test.StructMap()
        StructMapModel = StructMapModel()
        StructHashValue = com.chronoxor.test.StructHash()
        StructHashModel = StructHashModel()
        StructHashExValue = com.chronoxor.test.StructHashEx()
        StructHashExModel = StructHashExModel()
        StructEmptyValue = com.chronoxor.test.StructEmpty()
        StructEmptyModel = StructEmptyModel()
    }

    constructor(buffer: com.chronoxor.fbe.Buffer) : super(buffer, false)
    {
        protoReceiver = com.chronoxor.proto.fbe.Receiver(buffer)
        StructSimpleValue = com.chronoxor.test.StructSimple()
        StructSimpleModel = StructSimpleModel()
        StructOptionalValue = com.chronoxor.test.StructOptional()
        StructOptionalModel = StructOptionalModel()
        StructNestedValue = com.chronoxor.test.StructNested()
        StructNestedModel = StructNestedModel()
        StructBytesValue = com.chronoxor.test.StructBytes()
        StructBytesModel = StructBytesModel()
        StructArrayValue = com.chronoxor.test.StructArray()
        StructArrayModel = StructArrayModel()
        StructVectorValue = com.chronoxor.test.StructVector()
        StructVectorModel = StructVectorModel()
        StructListValue = com.chronoxor.test.StructList()
        StructListModel = StructListModel()
        StructSetValue = com.chronoxor.test.StructSet()
        StructSetModel = StructSetModel()
        StructMapValue = com.chronoxor.test.StructMap()
        StructMapModel = StructMapModel()
        StructHashValue = com.chronoxor.test.StructHash()
        StructHashModel = StructHashModel()
        StructHashExValue = com.chronoxor.test.StructHashEx()
        StructHashExModel = StructHashExModel()
        StructEmptyValue = com.chronoxor.test.StructEmpty()
        StructEmptyModel = StructEmptyModel()
    }

    override fun onReceive(type: Long, buffer: ByteArray, offset: Long, size: Long): Boolean
    {
        return onReceiveListener(this, type, buffer, offset, size)
    }

    open fun onReceiveListener(listener: ReceiverListener, type: Long, buffer: ByteArray, offset: Long, size: Long): Boolean
    {
        when (type)
        {
            com.chronoxor.test.fbe.StructSimpleModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                StructSimpleModel.attach(buffer, offset)
                assert(StructSimpleModel.verify()) { "com.chronoxor.test.StructSimple validation failed!" }
                val deserialized = StructSimpleModel.deserialize(StructSimpleValue)
                assert(deserialized > 0) { "com.chronoxor.test.StructSimple deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = StructSimpleValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(StructSimpleValue)
                return true
            }
            com.chronoxor.test.fbe.StructOptionalModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                StructOptionalModel.attach(buffer, offset)
                assert(StructOptionalModel.verify()) { "com.chronoxor.test.StructOptional validation failed!" }
                val deserialized = StructOptionalModel.deserialize(StructOptionalValue)
                assert(deserialized > 0) { "com.chronoxor.test.StructOptional deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = StructOptionalValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(StructOptionalValue)
                return true
            }
            com.chronoxor.test.fbe.StructNestedModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                StructNestedModel.attach(buffer, offset)
                assert(StructNestedModel.verify()) { "com.chronoxor.test.StructNested validation failed!" }
                val deserialized = StructNestedModel.deserialize(StructNestedValue)
                assert(deserialized > 0) { "com.chronoxor.test.StructNested deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = StructNestedValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(StructNestedValue)
                return true
            }
            com.chronoxor.test.fbe.StructBytesModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                StructBytesModel.attach(buffer, offset)
                assert(StructBytesModel.verify()) { "com.chronoxor.test.StructBytes validation failed!" }
                val deserialized = StructBytesModel.deserialize(StructBytesValue)
                assert(deserialized > 0) { "com.chronoxor.test.StructBytes deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = StructBytesValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(StructBytesValue)
                return true
            }
            com.chronoxor.test.fbe.StructArrayModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                StructArrayModel.attach(buffer, offset)
                assert(StructArrayModel.verify()) { "com.chronoxor.test.StructArray validation failed!" }
                val deserialized = StructArrayModel.deserialize(StructArrayValue)
                assert(deserialized > 0) { "com.chronoxor.test.StructArray deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = StructArrayValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(StructArrayValue)
                return true
            }
            com.chronoxor.test.fbe.StructVectorModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                StructVectorModel.attach(buffer, offset)
                assert(StructVectorModel.verify()) { "com.chronoxor.test.StructVector validation failed!" }
                val deserialized = StructVectorModel.deserialize(StructVectorValue)
                assert(deserialized > 0) { "com.chronoxor.test.StructVector deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = StructVectorValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(StructVectorValue)
                return true
            }
            com.chronoxor.test.fbe.StructListModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                StructListModel.attach(buffer, offset)
                assert(StructListModel.verify()) { "com.chronoxor.test.StructList validation failed!" }
                val deserialized = StructListModel.deserialize(StructListValue)
                assert(deserialized > 0) { "com.chronoxor.test.StructList deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = StructListValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(StructListValue)
                return true
            }
            com.chronoxor.test.fbe.StructSetModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                StructSetModel.attach(buffer, offset)
                assert(StructSetModel.verify()) { "com.chronoxor.test.StructSet validation failed!" }
                val deserialized = StructSetModel.deserialize(StructSetValue)
                assert(deserialized > 0) { "com.chronoxor.test.StructSet deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = StructSetValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(StructSetValue)
                return true
            }
            com.chronoxor.test.fbe.StructMapModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                StructMapModel.attach(buffer, offset)
                assert(StructMapModel.verify()) { "com.chronoxor.test.StructMap validation failed!" }
                val deserialized = StructMapModel.deserialize(StructMapValue)
                assert(deserialized > 0) { "com.chronoxor.test.StructMap deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = StructMapValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(StructMapValue)
                return true
            }
            com.chronoxor.test.fbe.StructHashModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                StructHashModel.attach(buffer, offset)
                assert(StructHashModel.verify()) { "com.chronoxor.test.StructHash validation failed!" }
                val deserialized = StructHashModel.deserialize(StructHashValue)
                assert(deserialized > 0) { "com.chronoxor.test.StructHash deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = StructHashValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(StructHashValue)
                return true
            }
            com.chronoxor.test.fbe.StructHashExModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                StructHashExModel.attach(buffer, offset)
                assert(StructHashExModel.verify()) { "com.chronoxor.test.StructHashEx validation failed!" }
                val deserialized = StructHashExModel.deserialize(StructHashExValue)
                assert(deserialized > 0) { "com.chronoxor.test.StructHashEx deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = StructHashExValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(StructHashExValue)
                return true
            }
            com.chronoxor.test.fbe.StructEmptyModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                StructEmptyModel.attach(buffer, offset)
                assert(StructEmptyModel.verify()) { "com.chronoxor.test.StructEmpty validation failed!" }
                val deserialized = StructEmptyModel.deserialize(StructEmptyValue)
                assert(deserialized > 0) { "com.chronoxor.test.StructEmpty deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = StructEmptyValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                listener.onReceive(StructEmptyValue)
                return true
            }
        }

        if ((protoReceiver != null) && protoReceiver!!.onReceiveListener(listener, type, buffer, offset, size))
            return true

        return false
    }
}
