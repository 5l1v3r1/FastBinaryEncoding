// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// Version: 1.3.0.0

@file:Suppress("UnusedImport", "unused")

package com.chronoxor.test.fbe

// Fast Binary Encoding com.chronoxor.test final client
@Suppress("MemberVisibilityCanBePrivate", "PropertyName")
open class FinalClient : com.chronoxor.fbe.Client, FinalClientListener
{
    // Imported senders
    val protoSender: com.chronoxor.proto.fbe.FinalClient

    // Imported receivers
    var protoReceiver: com.chronoxor.proto.fbe.FinalClient? = null

    // Client sender models accessors

    // Client receiver values accessors

    // Client receiver models accessors

    constructor() : super(true)
    {
        protoSender = com.chronoxor.proto.fbe.FinalClient(sendBuffer, receiveBuffer)
        protoReceiver = com.chronoxor.proto.fbe.FinalClient(sendBuffer, receiveBuffer)
    }

    constructor(sendBuffer: com.chronoxor.fbe.Buffer, receiveBuffer: com.chronoxor.fbe.Buffer) : super(sendBuffer, receiveBuffer, true)
    {
        protoSender = com.chronoxor.proto.fbe.FinalClient(sendBuffer, receiveBuffer)
        protoReceiver = com.chronoxor.proto.fbe.FinalClient(sendBuffer, receiveBuffer)
    }

    fun send(obj: Any): Long
    {
        return sendListener(this, obj)
    }

    @Suppress("JoinDeclarationAndAssignment", "UNUSED_PARAMETER")
    fun sendListener(listener: FinalClientListener, obj: Any): Long
    {

        // Try to send using imported clients
        @Suppress("CanBeVal")
        var result: Long
        result = protoSender.sendListener(listener, obj)
        if (result > 0)
            return result

        return 0
    }


    // Send message handler
    override fun onSend(buffer: ByteArray, offset: Long, size: Long): Long { throw UnsupportedOperationException("com.chronoxor.test.fbe.Client.onSend() not implemented!") }

    override fun onReceive(type: Long, buffer: ByteArray, offset: Long, size: Long): Boolean
    {
        return onReceiveListener(this, type, buffer, offset, size)
    }

    open fun onReceiveListener(listener: FinalClientListener, type: Long, buffer: ByteArray, offset: Long, size: Long): Boolean
    {

        if ((protoReceiver != null) && protoReceiver!!.onReceiveListener(listener, type, buffer, offset, size))
            return true

        return false
    }
}
