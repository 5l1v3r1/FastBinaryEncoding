// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding

@file:Suppress("UnusedImport", "unused")

package enums.fbe

import java.io.*
import java.lang.*
import java.lang.reflect.*
import java.math.*
import java.nio.charset.*
import java.time.*
import java.util.*

import fbe.*
import enums.*

// Fast Binary Encoding EnumInt64 field model class
class FieldModelEnumInt64(buffer: Buffer, offset: Long) : FieldModel(buffer, offset)
{
    // Field size
    override val fbeSize: Long = 8

    // Get the value
    fun get(defaults: EnumInt64 = EnumInt64()): EnumInt64
    {
        if (_buffer.offset + fbeOffset + fbeSize > _buffer.size)
            return defaults

        return EnumInt64(readInt64(fbeOffset))
    }

    // Set the value
    fun set(value: EnumInt64)
    {
        assert(_buffer.offset + fbeOffset + fbeSize <= _buffer.size) { "Model is broken!" }
        if (_buffer.offset + fbeOffset + fbeSize > _buffer.size)
            return

        write(fbeOffset, value.raw)
    }
}
