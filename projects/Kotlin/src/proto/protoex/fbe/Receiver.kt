// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding

@file:Suppress("UnusedImport", "unused")

package protoex.fbe

import java.io.*
import java.lang.*
import java.lang.reflect.*
import java.math.*
import java.nio.charset.*
import java.time.*
import java.util.*

import fbe.*
import protoex.*

// Fast Binary Encoding protoex receiver class
@Suppress("MemberVisibilityCanBePrivate", "PrivatePropertyName", "UNUSED_PARAMETER")
open class Receiver : fbe.Receiver
{
    // Imported receivers
    var protoReceiver: proto.fbe.Receiver? = null

    // Receiver values accessors
    private val OrderValue: protoex.Order
    private val BalanceValue: protoex.Balance
    private val AccountValue: protoex.Account

    // Receiver models accessors
    private val OrderModel: OrderModel
    private val BalanceModel: BalanceModel
    private val AccountModel: AccountModel

    constructor()
    {
        protoReceiver = proto.fbe.Receiver(buffer)
        OrderValue = protoex.Order()
        OrderModel = OrderModel()
        BalanceValue = protoex.Balance()
        BalanceModel = BalanceModel()
        AccountValue = protoex.Account()
        AccountModel = AccountModel()
    }

    constructor(buffer: Buffer) : super(buffer)
    {
        protoReceiver = proto.fbe.Receiver(buffer)
        OrderValue = protoex.Order()
        OrderModel = OrderModel()
        BalanceValue = protoex.Balance()
        BalanceModel = BalanceModel()
        AccountValue = protoex.Account()
        AccountModel = AccountModel()
    }

    // Receive handlers
    protected open fun onReceive(value: protoex.Order) {}
    protected open fun onReceive(value: protoex.Balance) {}
    protected open fun onReceive(value: protoex.Account) {}

    override fun onReceive(type: Long, buffer: ByteArray, offset: Long, size: Long): Boolean
    {
        when (type)
        {
            protoex.fbe.OrderModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                OrderModel.attach(buffer, offset)
                assert(OrderModel.verify()) { "protoex.Order validation failed!" }
                val deserialized = OrderModel.deserialize(OrderValue)
                assert(deserialized > 0) { "protoex.Order deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = OrderValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                onReceive(OrderValue)
                return true
            }
            protoex.fbe.BalanceModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                BalanceModel.attach(buffer, offset)
                assert(BalanceModel.verify()) { "protoex.Balance validation failed!" }
                val deserialized = BalanceModel.deserialize(BalanceValue)
                assert(deserialized > 0) { "protoex.Balance deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = BalanceValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                onReceive(BalanceValue)
                return true
            }
            protoex.fbe.AccountModel.fbeTypeConst ->
            {
                // Deserialize the value from the FBE stream
                AccountModel.attach(buffer, offset)
                assert(AccountModel.verify()) { "protoex.Account validation failed!" }
                val deserialized = AccountModel.deserialize(AccountValue)
                assert(deserialized > 0) { "protoex.Account deserialization failed!" }

                // Log the value
                if (logging)
                {
                    val message = AccountValue.toString()
                    onReceiveLog(message)
                }

                // Call receive handler with deserialized value
                onReceive(AccountValue)
                return true
            }
        }

        if ((protoReceiver != null) && protoReceiver!!.onReceive(type, buffer, offset, size))
            return true

        return false
    }
}
