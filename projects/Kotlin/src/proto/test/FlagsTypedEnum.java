// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding

package test;

import java.io.*;
import java.lang.*;
import java.lang.reflect.*;
import java.math.*;
import java.nio.charset.*;
import java.time.*;
import java.util.*;
import fbe.*;
import proto.*;

public enum FlagsTypedEnum
{
    FLAG_VALUE_0(0x00u + 0)
    , FLAG_VALUE_1(0x01u + 0)
    , FLAG_VALUE_2(0x02u + 0)
    , FLAG_VALUE_3(0x04u + 0)
    , FLAG_VALUE_4(0x08u + 0)
    , FLAG_VALUE_5(0x10u + 0)
    , FLAG_VALUE_6(0x20u + 0)
    , FLAG_VALUE_7(0x40u + 0)
    , FLAG_VALUE_8(FLAG_VALUE_7.raw)
    , FLAG_VALUE_9(FLAG_VALUE_2.raw|FLAG_VALUE_4.raw|FLAG_VALUE_6.raw)
    ;

    private ULong value;

    FlagsTypedEnum(ULong value) { this.value = value; }
    FlagsTypedEnum(int value) { this.value = (ULong)value; }
    FlagsTypedEnum(FlagsTypedEnum value) { this.value = value.value; }

    public ULong getRaw() { return value; }

    public static FlagsTypedEnum mapValue(ULong value) { return mapping.get(value); }

    public boolean hasFlags(ULong flags) { return (((value & flags) != 0) && ((value & flags) == flags)); }
    public boolean hasFlags(FlagsTypedEnum flags) { return hasFlags(flags.value); }

    public EnumSet<FlagsTypedEnum> getAllSet()
    {
        return EnumSet.allOf(FlagsTypedEnum.class);
    }

    public EnumSet<FlagsTypedEnum> getNoneSet()
    {
        return EnumSet.noneOf(FlagsTypedEnum.class);
    }

    public EnumSet<FlagsTypedEnum> getCurrentSet()
    {
        EnumSet<FlagsTypedEnum> result = EnumSet.noneOf(FlagsTypedEnum.class);
        if ((value & FLAG_VALUE_0.getRaw()) != 0)
        {
            result.add(FLAG_VALUE_0);
        }
        if ((value & FLAG_VALUE_1.getRaw()) != 0)
        {
            result.add(FLAG_VALUE_1);
        }
        if ((value & FLAG_VALUE_2.getRaw()) != 0)
        {
            result.add(FLAG_VALUE_2);
        }
        if ((value & FLAG_VALUE_3.getRaw()) != 0)
        {
            result.add(FLAG_VALUE_3);
        }
        if ((value & FLAG_VALUE_4.getRaw()) != 0)
        {
            result.add(FLAG_VALUE_4);
        }
        if ((value & FLAG_VALUE_5.getRaw()) != 0)
        {
            result.add(FLAG_VALUE_5);
        }
        if ((value & FLAG_VALUE_6.getRaw()) != 0)
        {
            result.add(FLAG_VALUE_6);
        }
        if ((value & FLAG_VALUE_7.getRaw()) != 0)
        {
            result.add(FLAG_VALUE_7);
        }
        if ((value & FLAG_VALUE_8.getRaw()) != 0)
        {
            result.add(FLAG_VALUE_8);
        }
        if ((value & FLAG_VALUE_9.getRaw()) != 0)
        {
            result.add(FLAG_VALUE_9);
        }
        return result;
    }

    @Override
    public String toString()
    {
        var sb = new StringBuilder();
        boolean first = true;
        if (hasFlags(FLAG_VALUE_0))
        {
            sb.append(first ? "" : "|").append("FLAG_VALUE_0");
            first = false;
        }
        if (hasFlags(FLAG_VALUE_1))
        {
            sb.append(first ? "" : "|").append("FLAG_VALUE_1");
            first = false;
        }
        if (hasFlags(FLAG_VALUE_2))
        {
            sb.append(first ? "" : "|").append("FLAG_VALUE_2");
            first = false;
        }
        if (hasFlags(FLAG_VALUE_3))
        {
            sb.append(first ? "" : "|").append("FLAG_VALUE_3");
            first = false;
        }
        if (hasFlags(FLAG_VALUE_4))
        {
            sb.append(first ? "" : "|").append("FLAG_VALUE_4");
            first = false;
        }
        if (hasFlags(FLAG_VALUE_5))
        {
            sb.append(first ? "" : "|").append("FLAG_VALUE_5");
            first = false;
        }
        if (hasFlags(FLAG_VALUE_6))
        {
            sb.append(first ? "" : "|").append("FLAG_VALUE_6");
            first = false;
        }
        if (hasFlags(FLAG_VALUE_7))
        {
            sb.append(first ? "" : "|").append("FLAG_VALUE_7");
            first = false;
        }
        if (hasFlags(FLAG_VALUE_8))
        {
            sb.append(first ? "" : "|").append("FLAG_VALUE_8");
            first = false;
        }
        if (hasFlags(FLAG_VALUE_9))
        {
            sb.append(first ? "" : "|").append("FLAG_VALUE_9");
            first = false;
        }
        return sb.toString();
    }

    private static final Map<ULong, FlagsTypedEnum> mapping = new HashMap<>();
    static
    {
        for (var value : FlagsTypedEnum.values())
            mapping.put(value.value, value);
    }
}
