// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// Version: 1.2.0.0

@file:Suppress("UnusedImport", "unused")

package test.fbe

import java.io.*
import java.lang.*
import java.lang.reflect.*
import java.math.*
import java.nio.charset.*
import java.time.*
import java.util.*

import fbe.*
import test.*

// Fast Binary Encoding test final proxy
@Suppress("MemberVisibilityCanBePrivate", "PrivatePropertyName", "UNUSED_PARAMETER")
open class FinalProxy : fbe.Receiver
{
    // Imported proxy
    var protoProxy: proto.fbe.FinalProxy? = null

    // Proxy models accessors
    private val StructSimpleModel: StructSimpleFinalModel
    private val StructOptionalModel: StructOptionalFinalModel
    private val StructNestedModel: StructNestedFinalModel
    private val StructBytesModel: StructBytesFinalModel
    private val StructArrayModel: StructArrayFinalModel
    private val StructVectorModel: StructVectorFinalModel
    private val StructListModel: StructListFinalModel
    private val StructSetModel: StructSetFinalModel
    private val StructMapModel: StructMapFinalModel
    private val StructHashModel: StructHashFinalModel
    private val StructHashExModel: StructHashExFinalModel

    constructor() : super(true)
    {
        protoProxy = proto.fbe.FinalProxy(buffer)
        StructSimpleModel = StructSimpleFinalModel()
        StructOptionalModel = StructOptionalFinalModel()
        StructNestedModel = StructNestedFinalModel()
        StructBytesModel = StructBytesFinalModel()
        StructArrayModel = StructArrayFinalModel()
        StructVectorModel = StructVectorFinalModel()
        StructListModel = StructListFinalModel()
        StructSetModel = StructSetFinalModel()
        StructMapModel = StructMapFinalModel()
        StructHashModel = StructHashFinalModel()
        StructHashExModel = StructHashExFinalModel()
    }

    constructor(buffer: Buffer) : super(buffer, true)
    {
        protoProxy = proto.fbe.FinalProxy(buffer)
        StructSimpleModel = StructSimpleFinalModel()
        StructOptionalModel = StructOptionalFinalModel()
        StructNestedModel = StructNestedFinalModel()
        StructBytesModel = StructBytesFinalModel()
        StructArrayModel = StructArrayFinalModel()
        StructVectorModel = StructVectorFinalModel()
        StructListModel = StructListFinalModel()
        StructSetModel = StructSetFinalModel()
        StructMapModel = StructMapFinalModel()
        StructHashModel = StructHashFinalModel()
        StructHashExModel = StructHashExFinalModel()
    }

    // Proxy handlers
    protected open fun onProxy(model: StructSimpleFinalModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}
    protected open fun onProxy(model: StructOptionalFinalModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}
    protected open fun onProxy(model: StructNestedFinalModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}
    protected open fun onProxy(model: StructBytesFinalModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}
    protected open fun onProxy(model: StructArrayFinalModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}
    protected open fun onProxy(model: StructVectorFinalModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}
    protected open fun onProxy(model: StructListFinalModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}
    protected open fun onProxy(model: StructSetFinalModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}
    protected open fun onProxy(model: StructMapFinalModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}
    protected open fun onProxy(model: StructHashFinalModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}
    protected open fun onProxy(model: StructHashExFinalModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}

    override fun onReceive(type: Long, buffer: ByteArray, offset: Long, size: Long): Boolean
    {
        when (type)
        {
            test.fbe.StructSimpleFinalModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                StructSimpleModel.attach(buffer, offset)
                assert(StructSimpleModel.verify()) { "test.StructSimple validation failed!" }

                // Call proxy handler
                onProxy(StructSimpleModel, type, buffer, offset, size)
                return true
            }
            test.fbe.StructOptionalFinalModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                StructOptionalModel.attach(buffer, offset)
                assert(StructOptionalModel.verify()) { "test.StructOptional validation failed!" }

                // Call proxy handler
                onProxy(StructOptionalModel, type, buffer, offset, size)
                return true
            }
            test.fbe.StructNestedFinalModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                StructNestedModel.attach(buffer, offset)
                assert(StructNestedModel.verify()) { "test.StructNested validation failed!" }

                // Call proxy handler
                onProxy(StructNestedModel, type, buffer, offset, size)
                return true
            }
            test.fbe.StructBytesFinalModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                StructBytesModel.attach(buffer, offset)
                assert(StructBytesModel.verify()) { "test.StructBytes validation failed!" }

                // Call proxy handler
                onProxy(StructBytesModel, type, buffer, offset, size)
                return true
            }
            test.fbe.StructArrayFinalModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                StructArrayModel.attach(buffer, offset)
                assert(StructArrayModel.verify()) { "test.StructArray validation failed!" }

                // Call proxy handler
                onProxy(StructArrayModel, type, buffer, offset, size)
                return true
            }
            test.fbe.StructVectorFinalModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                StructVectorModel.attach(buffer, offset)
                assert(StructVectorModel.verify()) { "test.StructVector validation failed!" }

                // Call proxy handler
                onProxy(StructVectorModel, type, buffer, offset, size)
                return true
            }
            test.fbe.StructListFinalModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                StructListModel.attach(buffer, offset)
                assert(StructListModel.verify()) { "test.StructList validation failed!" }

                // Call proxy handler
                onProxy(StructListModel, type, buffer, offset, size)
                return true
            }
            test.fbe.StructSetFinalModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                StructSetModel.attach(buffer, offset)
                assert(StructSetModel.verify()) { "test.StructSet validation failed!" }

                // Call proxy handler
                onProxy(StructSetModel, type, buffer, offset, size)
                return true
            }
            test.fbe.StructMapFinalModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                StructMapModel.attach(buffer, offset)
                assert(StructMapModel.verify()) { "test.StructMap validation failed!" }

                // Call proxy handler
                onProxy(StructMapModel, type, buffer, offset, size)
                return true
            }
            test.fbe.StructHashFinalModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                StructHashModel.attach(buffer, offset)
                assert(StructHashModel.verify()) { "test.StructHash validation failed!" }

                // Call proxy handler
                onProxy(StructHashModel, type, buffer, offset, size)
                return true
            }
            test.fbe.StructHashExFinalModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                StructHashExModel.attach(buffer, offset)
                assert(StructHashExModel.verify()) { "test.StructHashEx validation failed!" }

                // Call proxy handler
                onProxy(StructHashExModel, type, buffer, offset, size)
                return true
            }
        }

        if ((protoProxy != null) && protoProxy!!.onReceive(type, buffer, offset, size))
            return true

        return false
    }
}
