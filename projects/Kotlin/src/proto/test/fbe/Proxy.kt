// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// Version: 1.2.0.0

@file:Suppress("UnusedImport", "unused")

package test.fbe

import java.io.*
import java.lang.*
import java.lang.reflect.*
import java.math.*
import java.nio.charset.*
import java.time.*
import java.util.*

import fbe.*
import test.*

// Fast Binary Encoding test proxy
@Suppress("MemberVisibilityCanBePrivate", "PrivatePropertyName", "UNUSED_PARAMETER")
open class Proxy : fbe.Receiver
{
    // Imported proxy
    var protoProxy: proto.fbe.Proxy? = null

    // Proxy models accessors
    private val StructSimpleModel: StructSimpleModel
    private val StructOptionalModel: StructOptionalModel
    private val StructNestedModel: StructNestedModel
    private val StructBytesModel: StructBytesModel
    private val StructArrayModel: StructArrayModel
    private val StructVectorModel: StructVectorModel
    private val StructListModel: StructListModel
    private val StructSetModel: StructSetModel
    private val StructMapModel: StructMapModel
    private val StructHashModel: StructHashModel
    private val StructHashExModel: StructHashExModel
    private val StructEmptyModel: StructEmptyModel

    constructor() : super(false)
    {
        protoProxy = proto.fbe.Proxy(buffer)
        StructSimpleModel = StructSimpleModel()
        StructOptionalModel = StructOptionalModel()
        StructNestedModel = StructNestedModel()
        StructBytesModel = StructBytesModel()
        StructArrayModel = StructArrayModel()
        StructVectorModel = StructVectorModel()
        StructListModel = StructListModel()
        StructSetModel = StructSetModel()
        StructMapModel = StructMapModel()
        StructHashModel = StructHashModel()
        StructHashExModel = StructHashExModel()
        StructEmptyModel = StructEmptyModel()
    }

    constructor(buffer: Buffer) : super(buffer, false)
    {
        protoProxy = proto.fbe.Proxy(buffer)
        StructSimpleModel = StructSimpleModel()
        StructOptionalModel = StructOptionalModel()
        StructNestedModel = StructNestedModel()
        StructBytesModel = StructBytesModel()
        StructArrayModel = StructArrayModel()
        StructVectorModel = StructVectorModel()
        StructListModel = StructListModel()
        StructSetModel = StructSetModel()
        StructMapModel = StructMapModel()
        StructHashModel = StructHashModel()
        StructHashExModel = StructHashExModel()
        StructEmptyModel = StructEmptyModel()
    }

    // Proxy handlers
    protected open fun onProxy(model: StructSimpleModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}
    protected open fun onProxy(model: StructOptionalModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}
    protected open fun onProxy(model: StructNestedModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}
    protected open fun onProxy(model: StructBytesModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}
    protected open fun onProxy(model: StructArrayModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}
    protected open fun onProxy(model: StructVectorModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}
    protected open fun onProxy(model: StructListModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}
    protected open fun onProxy(model: StructSetModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}
    protected open fun onProxy(model: StructMapModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}
    protected open fun onProxy(model: StructHashModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}
    protected open fun onProxy(model: StructHashExModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}
    protected open fun onProxy(model: StructEmptyModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}

    override fun onReceive(type: Long, buffer: ByteArray, offset: Long, size: Long): Boolean
    {
        when (type)
        {
            test.fbe.StructSimpleModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                StructSimpleModel.attach(buffer, offset)
                assert(StructSimpleModel.verify()) { "test.StructSimple validation failed!" }

                // Call proxy handler
                onProxy(StructSimpleModel, type, buffer, offset, size)
                return true
            }
            test.fbe.StructOptionalModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                StructOptionalModel.attach(buffer, offset)
                assert(StructOptionalModel.verify()) { "test.StructOptional validation failed!" }

                // Call proxy handler
                onProxy(StructOptionalModel, type, buffer, offset, size)
                return true
            }
            test.fbe.StructNestedModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                StructNestedModel.attach(buffer, offset)
                assert(StructNestedModel.verify()) { "test.StructNested validation failed!" }

                // Call proxy handler
                onProxy(StructNestedModel, type, buffer, offset, size)
                return true
            }
            test.fbe.StructBytesModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                StructBytesModel.attach(buffer, offset)
                assert(StructBytesModel.verify()) { "test.StructBytes validation failed!" }

                // Call proxy handler
                onProxy(StructBytesModel, type, buffer, offset, size)
                return true
            }
            test.fbe.StructArrayModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                StructArrayModel.attach(buffer, offset)
                assert(StructArrayModel.verify()) { "test.StructArray validation failed!" }

                // Call proxy handler
                onProxy(StructArrayModel, type, buffer, offset, size)
                return true
            }
            test.fbe.StructVectorModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                StructVectorModel.attach(buffer, offset)
                assert(StructVectorModel.verify()) { "test.StructVector validation failed!" }

                // Call proxy handler
                onProxy(StructVectorModel, type, buffer, offset, size)
                return true
            }
            test.fbe.StructListModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                StructListModel.attach(buffer, offset)
                assert(StructListModel.verify()) { "test.StructList validation failed!" }

                // Call proxy handler
                onProxy(StructListModel, type, buffer, offset, size)
                return true
            }
            test.fbe.StructSetModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                StructSetModel.attach(buffer, offset)
                assert(StructSetModel.verify()) { "test.StructSet validation failed!" }

                // Call proxy handler
                onProxy(StructSetModel, type, buffer, offset, size)
                return true
            }
            test.fbe.StructMapModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                StructMapModel.attach(buffer, offset)
                assert(StructMapModel.verify()) { "test.StructMap validation failed!" }

                // Call proxy handler
                onProxy(StructMapModel, type, buffer, offset, size)
                return true
            }
            test.fbe.StructHashModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                StructHashModel.attach(buffer, offset)
                assert(StructHashModel.verify()) { "test.StructHash validation failed!" }

                // Call proxy handler
                onProxy(StructHashModel, type, buffer, offset, size)
                return true
            }
            test.fbe.StructHashExModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                StructHashExModel.attach(buffer, offset)
                assert(StructHashExModel.verify()) { "test.StructHashEx validation failed!" }

                // Call proxy handler
                onProxy(StructHashExModel, type, buffer, offset, size)
                return true
            }
            test.fbe.StructEmptyModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                StructEmptyModel.attach(buffer, offset)
                assert(StructEmptyModel.verify()) { "test.StructEmpty validation failed!" }

                // Call proxy handler
                onProxy(StructEmptyModel, type, buffer, offset, size)
                return true
            }
        }

        if ((protoProxy != null) && protoProxy!!.onReceive(type, buffer, offset, size))
            return true

        return false
    }
}
