// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// Version: 1.2.0.0

@file:Suppress("UnusedImport", "unused")

package test

import java.io.*
import java.lang.*
import java.lang.reflect.*
import java.math.*
import java.nio.charset.*
import java.time.*
import java.util.*

import fbe.*
import proto.*

@Suppress("EnumEntryName", "MemberVisibilityCanBePrivate", "RemoveRedundantCallsOfConversionMethods")
enum class EnumEmptyEnum
{
    ;

    var raw: Int = 0
        private set

    constructor(value: Byte) { this.raw = value.toInt() }
    constructor(value: Short) { this.raw = value.toInt() }
    constructor(value: Int) { this.raw = value.toInt() }
    constructor(value: Long) { this.raw = value.toInt() }
    constructor(value: EnumEmptyEnum) { this.raw = value.raw }

    override fun toString(): String
    {
        return "<unknown>"
    }

    companion object
    {
        private val mapping = HashMap<Int, EnumEmptyEnum>()

        init
        {
            for (value in EnumEmptyEnum.values())
                mapping[value.raw] = value
        }

        fun mapValue(value: Int): EnumEmptyEnum? { return mapping[value] }
    }
}
