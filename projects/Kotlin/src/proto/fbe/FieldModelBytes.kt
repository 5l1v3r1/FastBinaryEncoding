// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding

package fbe;

import java.io.*;
import java.lang.*;
import java.lang.reflect.*;
import java.math.*;
import java.nio.charset.*;
import java.time.*;
import java.util.*;
import javafx.util.*;

// Fast Binary Encoding bytes field model class
class FieldModelBytes(buffer: Buffer, offset: Long) : FieldModel(buffer, offset)
{
    // Field size
    override val FBESize: Long = 4

    // Field extra size
    override val FBEExtra: Long get()
    {
        if (_buffer.offset + FBEOffset + FBESize > _buffer.size)
            return 0

        val fbeBytesOffset = readInt32(FBEOffset)
        if (fbeBytesOffset == 0 || _buffer.offset + fbeBytesOffset.toLong() + 4 > _buffer.size)
            return 0

        val fbeBytesSize = readInt32(fbeBytesOffset.toLong())
        return (4 + fbeBytesSize).toLong()
    }

    // Check if the bytes value is valid
    override fun verify(): Boolean {
        if (_buffer.offset + FBEOffset + FBESize > _buffer.size)
            return true

        val fbeBytesOffset = readInt32(FBEOffset)
        if (fbeBytesOffset == 0)
            return true

        if (_buffer.offset + fbeBytesOffset.toLong() + 4 > _buffer.size)
            return false

        val fbeBytesSize = readInt32(fbeBytesOffset.toLong())
        if (_buffer.offset + fbeBytesOffset.toLong() + 4 + fbeBytesSize.toLong() > _buffer.size)
            return false

        return true
    }

    fun get(defaults: ByteArray = ByteArray(0)): ByteArray {
        var value: ByteArray = defaults

        if (_buffer.offset + FBEOffset + FBESize > _buffer.size)
            return value

        val fbeBytesOffset = readInt32(FBEOffset)
        if (fbeBytesOffset == 0)
            return value

        assert(_buffer.offset + fbeBytesOffset.toLong() + 4 <= _buffer.size) { "Model is broken!" }
        if (_buffer.offset + fbeBytesOffset.toLong() + 4 > _buffer.size)
            return value

        val fbeBytesSize = readInt32(fbeBytesOffset.toLong())
        assert(_buffer.offset + fbeBytesOffset.toLong() + 4 + fbeBytesSize.toLong() <= _buffer.size) { "Model is broken!" }
        if (_buffer.offset + fbeBytesOffset.toLong() + 4 + fbeBytesSize.toLong() > _buffer.size)
            return value

        value = readBytes((fbeBytesOffset + 4).toLong(), fbeBytesSize.toLong())
        return value
    }

    // Set the bytes value
    fun set(value: ByteArray) {
        assert(_buffer.offset + FBEOffset + FBESize <= _buffer.size) { "Model is broken!" }
        if (_buffer.offset + FBEOffset + FBESize > _buffer.size)
            return

        val fbeBytesSize = value.size
        val fbeBytesOffset = (_buffer.allocate((4 + fbeBytesSize).toLong()) - _buffer.offset).toInt()
        assert(fbeBytesOffset > 0 && _buffer.offset + fbeBytesOffset.toLong() + 4 + fbeBytesSize.toLong() <= _buffer.size) { "Model is broken!" }
        if (fbeBytesOffset <= 0 || _buffer.offset + fbeBytesOffset.toLong() + 4 + fbeBytesSize.toLong() > _buffer.size)
            return

        write(FBEOffset, fbeBytesOffset)
        write(fbeBytesOffset.toLong(), fbeBytesSize)
        write((fbeBytesOffset + 4).toLong(), value)
    }
}
