// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding

package fbe;

import java.io.*;
import java.lang.*;
import java.lang.reflect.*;
import java.math.*;
import java.nio.charset.*;
import java.time.*;
import java.util.*;

// Fast Binary Encoding timestamp field model class
class FieldModelTimestamp(buffer: Buffer, offset: Long) : FieldModel(buffer, offset)
{
    // Field size
    override val FBESize: Long = 8

    // Get the value
    fun get(defaults: Instant = Instant.EPOCH): Instant {
        if (_buffer.offset + FBEOffset + FBESize > _buffer.size)
            return defaults

        val nanoseconds = readInt64(FBEOffset)
        return Instant.ofEpochSecond(nanoseconds / 1000000000, nanoseconds % 1000000000)
    }

    // Set the value
    fun set(value: Instant) {
        assert(_buffer.offset + FBEOffset + FBESize <= _buffer.size) { "Model is broken!" }
        if (_buffer.offset + FBEOffset + FBESize > _buffer.size)
            return

        val nanoseconds = value.epochSecond * 1000000000 + value.nano
        write(FBEOffset, nanoseconds)
    }
}
