// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding

package fbe;

import java.io.*;
import java.lang.*;
import java.lang.reflect.*;
import java.math.*;
import java.nio.charset.*;
import java.time.*;
import java.util.*;

// Fast Binary Encoding string field model class
class FieldModelString(buffer: Buffer, offset: Long) : FieldModel(buffer, offset)
{
    // Field size
    override val FBESize: Long = 4

    // Field extra size
    override val FBEExtra: Long get()
    {
        if (_buffer.offset + FBEOffset + FBESize > _buffer.size)
            return 0

        val fbeStringOffset = readInt32(FBEOffset)
        if (fbeStringOffset == 0 || _buffer.offset + fbeStringOffset.toLong() + 4 > _buffer.size)
            return 0

        val fbeStringSize = readInt32(fbeStringOffset.toLong())
        return (4 + fbeStringSize).toLong()
    }

    // Check if the string value is valid
    override fun verify(): Boolean
    {
        if (_buffer.offset + FBEOffset + FBESize > _buffer.size)
            return true

        val fbeStringOffset = readInt32(FBEOffset)
        if (fbeStringOffset == 0)
            return true

        if (_buffer.offset + fbeStringOffset.toLong() + 4 > _buffer.size)
            return false

        val fbeStringSize = readInt32(fbeStringOffset.toLong())
        if (_buffer.offset + fbeStringOffset.toLong() + 4 + fbeStringSize.toLong() > _buffer.size)
            return false

        return true
    }

    // Get the string value
    fun get(defaults: String = ""): String
    {
        var value: String = defaults

        if (_buffer.offset + FBEOffset + FBESize > _buffer.size)
            return value

        val fbeStringOffset = readInt32(FBEOffset)
        if (fbeStringOffset == 0)
            return value

        assert(_buffer.offset + fbeStringOffset.toLong() + 4 <= _buffer.size) { "Model is broken!" }
        if (_buffer.offset + fbeStringOffset.toLong() + 4 > _buffer.size)
            return value

        val fbeStringSize = readInt32(fbeStringOffset.toLong())
        assert(_buffer.offset + fbeStringOffset.toLong() + 4 + fbeStringSize.toLong() <= _buffer.size) { "Model is broken!" }
        if (_buffer.offset + fbeStringOffset.toLong() + 4 + fbeStringSize.toLong() > _buffer.size)
            return value

        value = readString((fbeStringOffset + 4).toLong(), fbeStringSize.toLong())
        return value
    }

    // Set the string value
    fun set(value: String)
    {
        assert(_buffer.offset + FBEOffset + FBESize <= _buffer.size) { "Model is broken!" }
        if (_buffer.offset + FBEOffset + FBESize > _buffer.size)
            return

        val bytes = value.toByteArray(StandardCharsets.UTF_8)

        val fbeStringSize = bytes.size
        val fbeStringOffset = (_buffer.allocate((4 + fbeStringSize).toLong()) - _buffer.offset).toInt()
        assert(fbeStringOffset > 0 && _buffer.offset + fbeStringOffset.toLong() + 4 + fbeStringSize.toLong() <= _buffer.size) { "Model is broken!" }
        if (fbeStringOffset <= 0 || _buffer.offset + fbeStringOffset.toLong() + 4 + fbeStringSize.toLong() > _buffer.size)
            return

        write(FBEOffset, fbeStringOffset)
        write(fbeStringOffset.toLong(), fbeStringSize)
        write((fbeStringOffset + 4).toLong(), bytes)
    }
}
