// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding

@file:Suppress("UnusedImport", "unused")

package fbe

import java.io.*
import java.lang.*
import java.lang.reflect.*
import java.math.*
import java.nio.charset.*
import java.time.*
import java.util.*

// Fast Binary Encoding base sender class
@Suppress("MemberVisibilityCanBePrivate")
abstract class Sender
{
    // Get the bytes buffer
    var buffer: Buffer = Buffer()
        private set
    // Enable/Disable logging
    var logging: Boolean = false
    // Get the final protocol flag
    var final: Boolean = false
        protected set

    protected constructor()
    protected constructor(buffer: Buffer) { this.buffer = buffer }

    // Send serialized buffer.
    // Direct call of the method requires knowledge about internals of FBE models serialization.
    // Use it with care!
    fun sendSerialized(serialized: Long): Long
    {
        assert(serialized > 0) { "Invalid size of the serialized buffer!" }
        if (serialized <= 0)
            return 0

        // Shift the send buffer
        buffer.shift(serialized)

        // Send the value
        val sent = onSend(buffer.data, 0, buffer.size)
        buffer.remove(0, sent)
        return sent
    }

    // Send message handler
    protected abstract fun onSend(buffer: ByteArray, offset: Long, size: Long): Long

    // Send log message handler
    @Suppress("UNUSED_PARAMETER")
    protected open fun onSendLog(message: String) {}
}
