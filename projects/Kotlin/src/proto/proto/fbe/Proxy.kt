// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: proto.fbe
// Version: 1.2.0.0

@file:Suppress("UnusedImport", "unused")

package proto.fbe

import java.io.*
import java.lang.*
import java.lang.reflect.*
import java.math.*
import java.nio.charset.*
import java.time.*
import java.util.*

import fbe.*
import proto.*

// Fast Binary Encoding proto proxy
@Suppress("MemberVisibilityCanBePrivate", "PrivatePropertyName", "UNUSED_PARAMETER")
open class Proxy : fbe.Receiver
{
    // Proxy models accessors
    private val OrderModel: OrderModel
    private val BalanceModel: BalanceModel
    private val AccountModel: AccountModel

    constructor() : super(false)
    {
        OrderModel = OrderModel()
        BalanceModel = BalanceModel()
        AccountModel = AccountModel()
    }

    constructor(buffer: Buffer) : super(buffer, false)
    {
        OrderModel = OrderModel()
        BalanceModel = BalanceModel()
        AccountModel = AccountModel()
    }

    // Proxy handlers
    protected open fun onProxy(model: OrderModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}
    protected open fun onProxy(model: BalanceModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}
    protected open fun onProxy(model: AccountModel, type: Long, buffer: ByteArray, offset: Long, size: Long) {}

    override fun onReceive(type: Long, buffer: ByteArray, offset: Long, size: Long): Boolean
    {
        when (type)
        {
            proto.fbe.OrderModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                OrderModel.attach(buffer, offset)
                assert(OrderModel.verify()) { "proto.Order validation failed!" }

                val fbeBegin = OrderModel.model.getBegin()
                if (fbeBegin == 0L)
                    return false
                // Call proxy handler
                onProxy(OrderModel, type, buffer, offset, size)
                OrderModel.model.getEnd(fbeBegin)
                return true
            }
            proto.fbe.BalanceModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                BalanceModel.attach(buffer, offset)
                assert(BalanceModel.verify()) { "proto.Balance validation failed!" }

                val fbeBegin = BalanceModel.model.getBegin()
                if (fbeBegin == 0L)
                    return false
                // Call proxy handler
                onProxy(BalanceModel, type, buffer, offset, size)
                BalanceModel.model.getEnd(fbeBegin)
                return true
            }
            proto.fbe.AccountModel.fbeTypeConst ->
            {
                // Attach the FBE stream to the proxy model
                AccountModel.attach(buffer, offset)
                assert(AccountModel.verify()) { "proto.Account validation failed!" }

                val fbeBegin = AccountModel.model.getBegin()
                if (fbeBegin == 0L)
                    return false
                // Call proxy handler
                onProxy(AccountModel, type, buffer, offset, size)
                AccountModel.model.getEnd(fbeBegin)
                return true
            }
        }

        return false
    }
}
