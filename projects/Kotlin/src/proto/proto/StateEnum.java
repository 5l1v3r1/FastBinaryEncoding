// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding

package proto;

import java.io.*;
import java.lang.*;
import java.lang.reflect.*;
import java.math.*;
import java.nio.charset.*;
import java.time.*;
import java.util.*;
import fbe.*;

public enum StateEnum
{
    unknown(0x00 + 0)
    , invalid(0x01 + 0)
    , initialized(0x02 + 0)
    , calculated(0x04 + 0)
    , broken(0x08 + 0)
    , good(initialized.raw|calculated.raw)
    , bad(unknown.raw|invalid.raw|broken.raw)
    ;

    private Byte value;

    StateEnum(Byte value) { this.value = value; }
    StateEnum(int value) { this.value = (Byte)value; }
    StateEnum(StateEnum value) { this.value = value.value; }

    public Byte getRaw() { return value; }

    public static StateEnum mapValue(Byte value) { return mapping.get(value); }

    public boolean hasFlags(Byte flags) { return (((value & flags) != 0) && ((value & flags) == flags)); }
    public boolean hasFlags(StateEnum flags) { return hasFlags(flags.value); }

    public EnumSet<StateEnum> getAllSet()
    {
        return EnumSet.allOf(StateEnum.class);
    }

    public EnumSet<StateEnum> getNoneSet()
    {
        return EnumSet.noneOf(StateEnum.class);
    }

    public EnumSet<StateEnum> getCurrentSet()
    {
        EnumSet<StateEnum> result = EnumSet.noneOf(StateEnum.class);
        if ((value & unknown.getRaw()) != 0)
        {
            result.add(unknown);
        }
        if ((value & invalid.getRaw()) != 0)
        {
            result.add(invalid);
        }
        if ((value & initialized.getRaw()) != 0)
        {
            result.add(initialized);
        }
        if ((value & calculated.getRaw()) != 0)
        {
            result.add(calculated);
        }
        if ((value & broken.getRaw()) != 0)
        {
            result.add(broken);
        }
        if ((value & good.getRaw()) != 0)
        {
            result.add(good);
        }
        if ((value & bad.getRaw()) != 0)
        {
            result.add(bad);
        }
        return result;
    }

    @Override
    public String toString()
    {
        var sb = new StringBuilder();
        boolean first = true;
        if (hasFlags(unknown))
        {
            sb.append(first ? "" : "|").append("unknown");
            first = false;
        }
        if (hasFlags(invalid))
        {
            sb.append(first ? "" : "|").append("invalid");
            first = false;
        }
        if (hasFlags(initialized))
        {
            sb.append(first ? "" : "|").append("initialized");
            first = false;
        }
        if (hasFlags(calculated))
        {
            sb.append(first ? "" : "|").append("calculated");
            first = false;
        }
        if (hasFlags(broken))
        {
            sb.append(first ? "" : "|").append("broken");
            first = false;
        }
        if (hasFlags(good))
        {
            sb.append(first ? "" : "|").append("good");
            first = false;
        }
        if (hasFlags(bad))
        {
            sb.append(first ? "" : "|").append("bad");
            first = false;
        }
        return sb.toString();
    }

    private static final Map<Byte, StateEnum> mapping = new HashMap<>();
    static
    {
        for (var value : StateEnum.values())
            mapping.put(value.value, value);
    }
}
