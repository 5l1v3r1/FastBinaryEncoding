// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: enums.fbe
// Version: 1.3.0.0


import fbe

import Foundation

// Fast Binary Encoding com.chronoxor.enums final sender
open class FinalSender : fbe.SenderProtocol { 
    // Sender models accessors
    private let EnumsModel: EnumsFinalModel

    public var buffer: Buffer = Buffer()
    public var logging: Bool = false
    public var final: Bool = false

    public init() {
        EnumsModel = enums.EnumsFinalModel(buffer: buffer)
        build(with: true)
    }

    public init(buffer: fbe.Buffer) {
        EnumsModel = enums.EnumsFinalModel(buffer: buffer)
        build(with: buffer, final: true)
    }

    public func send(obj: Any) throws -> Int {
        switch obj {
            case is enums.Enums: return try send(value: obj as! enums.Enums)
            default: break
        }

        return 0
    }

    public func send(value: enums.Enums) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try EnumsModel.serialize(value: value)
        assert(serialized > 0, "enums.Enums serialization failed!")
        assert(EnumsModel.verify(), "enums.Enums validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }

    // Send message handler
    open func onSend(buffer: Data, offset: Int, size: Int) throws -> Int { throw NSError() }
}
