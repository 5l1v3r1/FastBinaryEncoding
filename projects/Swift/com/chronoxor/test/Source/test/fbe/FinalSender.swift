// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// Version: 1.3.0.0


import fbe

import Foundation

// Fast Binary Encoding com.chronoxor.test final sender
open class FinalSender : fbe.SenderProtocol { 
    // Imported senders
    let protoSender: proto.FinalSender

    // Sender models accessors
    private let StructSimpleModel: StructSimpleFinalModel
    private let StructOptionalModel: StructOptionalFinalModel
    private let StructNestedModel: StructNestedFinalModel
    private let StructBytesModel: StructBytesFinalModel
    private let StructArrayModel: StructArrayFinalModel
    private let StructVectorModel: StructVectorFinalModel
    private let StructListModel: StructListFinalModel
    private let StructSetModel: StructSetFinalModel
    private let StructMapModel: StructMapFinalModel
    private let StructHashModel: StructHashFinalModel
    private let StructHashExModel: StructHashExFinalModel
    private let StructEmptyModel: StructEmptyFinalModel

    public var buffer: Buffer = Buffer()
    public var logging: Bool = false
    public var final: Bool = false

    public init() {
        protoSender = proto.FinalSender(buffer: buffer)
        StructSimpleModel = test.StructSimpleFinalModel(buffer: buffer)
        StructOptionalModel = test.StructOptionalFinalModel(buffer: buffer)
        StructNestedModel = test.StructNestedFinalModel(buffer: buffer)
        StructBytesModel = test.StructBytesFinalModel(buffer: buffer)
        StructArrayModel = test.StructArrayFinalModel(buffer: buffer)
        StructVectorModel = test.StructVectorFinalModel(buffer: buffer)
        StructListModel = test.StructListFinalModel(buffer: buffer)
        StructSetModel = test.StructSetFinalModel(buffer: buffer)
        StructMapModel = test.StructMapFinalModel(buffer: buffer)
        StructHashModel = test.StructHashFinalModel(buffer: buffer)
        StructHashExModel = test.StructHashExFinalModel(buffer: buffer)
        StructEmptyModel = test.StructEmptyFinalModel(buffer: buffer)
        build(with: true)
    }

    public init(buffer: fbe.Buffer) {
        protoSender = proto.FinalSender(buffer: buffer)
        StructSimpleModel = test.StructSimpleFinalModel(buffer: buffer)
        StructOptionalModel = test.StructOptionalFinalModel(buffer: buffer)
        StructNestedModel = test.StructNestedFinalModel(buffer: buffer)
        StructBytesModel = test.StructBytesFinalModel(buffer: buffer)
        StructArrayModel = test.StructArrayFinalModel(buffer: buffer)
        StructVectorModel = test.StructVectorFinalModel(buffer: buffer)
        StructListModel = test.StructListFinalModel(buffer: buffer)
        StructSetModel = test.StructSetFinalModel(buffer: buffer)
        StructMapModel = test.StructMapFinalModel(buffer: buffer)
        StructHashModel = test.StructHashFinalModel(buffer: buffer)
        StructHashExModel = test.StructHashExFinalModel(buffer: buffer)
        StructEmptyModel = test.StructEmptyFinalModel(buffer: buffer)
        build(with: buffer, final: true)
    }

    public func send(obj: Any) throws -> Int {
        switch obj {
            case is test.StructSimple: return try send(value: obj as! test.StructSimple)
            case is test.StructOptional: return try send(value: obj as! test.StructOptional)
            case is test.StructNested: return try send(value: obj as! test.StructNested)
            case is test.StructBytes: return try send(value: obj as! test.StructBytes)
            case is test.StructArray: return try send(value: obj as! test.StructArray)
            case is test.StructVector: return try send(value: obj as! test.StructVector)
            case is test.StructList: return try send(value: obj as! test.StructList)
            case is test.StructSet: return try send(value: obj as! test.StructSet)
            case is test.StructMap: return try send(value: obj as! test.StructMap)
            case is test.StructHash: return try send(value: obj as! test.StructHash)
            case is test.StructHashEx: return try send(value: obj as! test.StructHashEx)
            case is test.StructEmpty: return try send(value: obj as! test.StructEmpty)
            default: break
        }

        // Try to send using imported senders
        var result: Int = 0
        result = protoSender.send(obj: obj)
        if (result > 0)
            return result

        return 0
    }

    public func send(value: test.StructSimple) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructSimpleModel.serialize(value: value)
        assert(serialized > 0, "test.StructSimple serialization failed!")
        assert(StructSimpleModel.verify(), "test.StructSimple validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: test.StructOptional) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructOptionalModel.serialize(value: value)
        assert(serialized > 0, "test.StructOptional serialization failed!")
        assert(StructOptionalModel.verify(), "test.StructOptional validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: test.StructNested) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructNestedModel.serialize(value: value)
        assert(serialized > 0, "test.StructNested serialization failed!")
        assert(StructNestedModel.verify(), "test.StructNested validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: test.StructBytes) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructBytesModel.serialize(value: value)
        assert(serialized > 0, "test.StructBytes serialization failed!")
        assert(StructBytesModel.verify(), "test.StructBytes validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: test.StructArray) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructArrayModel.serialize(value: value)
        assert(serialized > 0, "test.StructArray serialization failed!")
        assert(StructArrayModel.verify(), "test.StructArray validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: test.StructVector) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructVectorModel.serialize(value: value)
        assert(serialized > 0, "test.StructVector serialization failed!")
        assert(StructVectorModel.verify(), "test.StructVector validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: test.StructList) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructListModel.serialize(value: value)
        assert(serialized > 0, "test.StructList serialization failed!")
        assert(StructListModel.verify(), "test.StructList validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: test.StructSet) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructSetModel.serialize(value: value)
        assert(serialized > 0, "test.StructSet serialization failed!")
        assert(StructSetModel.verify(), "test.StructSet validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: test.StructMap) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructMapModel.serialize(value: value)
        assert(serialized > 0, "test.StructMap serialization failed!")
        assert(StructMapModel.verify(), "test.StructMap validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: test.StructHash) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructHashModel.serialize(value: value)
        assert(serialized > 0, "test.StructHash serialization failed!")
        assert(StructHashModel.verify(), "test.StructHash validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: test.StructHashEx) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructHashExModel.serialize(value: value)
        assert(serialized > 0, "test.StructHashEx serialization failed!")
        assert(StructHashExModel.verify(), "test.StructHashEx validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: test.StructEmpty) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructEmptyModel.serialize(value: value)
        assert(serialized > 0, "test.StructEmpty serialization failed!")
        assert(StructEmptyModel.verify(), "test.StructEmpty validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }

    // Send message handler
    open func onSend(buffer: Data, offset: Int, size: Int) throws -> Int { throw NSError() }
}
