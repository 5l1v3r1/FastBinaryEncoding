// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: protoex.fbe
// Version: 1.3.0.0


import Foundation

import fbe

import proto

open class Balance: proto.Balance {
    public var locked: Double = 0.0

    public override init() { super.init() }
    public init(parent: proto.Balance, locked: Double) {
        super.init(other: parent)

        self.locked = locked
    }

    public init(other: Balance) {
        super.init(other: other)
        self.locked = other.locked
    }

    public required init(from decoder: Decoder) throws {
        try super.init(from: decoder)
        let container = try decoder.container(keyedBy: CodingKeys.self)
        locked = try container.decode(Double.self, forKey: .locked)
    }

    open override func clone() throws -> Balance {
        // Serialize the struct to the FBE stream
        let writer = BalanceModel()
        try _ = writer.serialize(value: self)

        // Deserialize the struct from the FBE stream
        let reader = BalanceModel()
        reader.attach(buffer: writer.buffer)
        return reader.deserialize()
    }

    public static func < (lhs: Balance, rhs: Balance) -> Bool {

        return true
    }

    public static func == (lhs: Balance, rhs: Balance) -> Bool {

        return true
    }

    open override func hash(into hasher: inout Hasher) {
        super.hash(into: &hasher)
    }

    open override var description: String {
        var sb = String()
        sb.append("Balance(")
        sb.append(super.description)
        sb.append(",locked="); sb.append(locked.description)
        sb.append(")")
        return sb
    }
    private enum CodingKeys: String, CodingKey {
        case locked
    }

    open override func encode(to encoder: Encoder) throws {
        try super.encode(to: encoder)
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(locked, forKey: .locked)
    }

    open override func toJson() throws -> String {
        return String(data: try JSONEncoder().encode(self), encoding: .utf8)!
    }

    open override class func fromJson(_ json: String) -> Balance {
        return try! JSONDecoder().decode(Balance.self, from: json.data(using: .utf8)!)
    }
}
