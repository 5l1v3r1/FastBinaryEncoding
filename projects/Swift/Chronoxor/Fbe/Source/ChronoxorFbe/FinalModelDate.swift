// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: Fbe
// Version: 1.3.0.0

import Foundation

// Fast Binary Encoding date final model
public class FinalModelDate: FinalModel {
    public var _buffer = Buffer()
    public var _offset: Int = 0

    public func fbeAllocationSize(value: Date) -> Int {
        return fbeSize
    }

    // Field size
    public let fbeSize: Int = 8

    public func verify() -> Int {
        if (_buffer.offset + fbeOffset + fbeSize) > _buffer.size {
            return Int.max
        }

        return fbeSize
    }

    // Get the value
    public func get(size: inout Size) -> Date {
        if ((_buffer.offset + fbeOffset + fbeSize) > _buffer.size) {
            return Date(timeIntervalSince1970: 0)
        }

        size.value = fbeSize
        let nanoseconds = readInt64(offset: fbeOffset)
        return Date(timeIntervalSince1970: TimeInterval(nanoseconds / 1000000))
    }

    // Set the value
    public func set(value: Date) throws -> Int {
        if ((_buffer.offset + fbeOffset + fbeSize) > _buffer.size) {
            assertionFailure("Model is broken!")
            return 0
        }

        let nanoseconds = value.timeIntervalSince1970 * 1000000
        write(offset: fbeOffset, value: UInt64(nanoseconds))
        return fbeSize
    }
}
