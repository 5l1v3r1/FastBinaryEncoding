// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: Fbe
// Version: 1.3.0.0

import Foundation

// Fast Binary Encoding timestamp field model
public class FieldModelTimestamp: FieldModel {
    public var _buffer = Buffer()
       public var _offset: Int = 0

       // Field size
       public let fbeSize: Int = 8

       public required init() {
           _buffer = Buffer()
           _offset = 0
       }

    public func get(defaults: TimeInterval = Date().timeIntervalSince1970) -> TimeInterval {
        if ((_buffer.offset + fbeOffset + fbeSize) > _buffer.size) {
            assertionFailure("Model is broken!")
            return defaults
        }

        let nanoseconds = TimeInterval(readInt64(offset: fbeOffset))
        return nanoseconds / 1000000000
    }

    public func set(value: TimeInterval) throws {
        if ((_buffer.offset + fbeOffset + fbeSize) > _buffer.size) {
            assertionFailure("Model is broken!")
            return
        }

        let nanoseconds = value * 1000000000
        write(offset: fbeOffset, value: UInt64(nanoseconds))
    }
}
