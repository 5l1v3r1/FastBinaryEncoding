// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: proto.fbe
// Version: 1.3.0.0


// Fast Binary Encoding Balance final model
class FinalModelBalance: FinalModel {
    var _buffer: Buffer
    var _offset: Int

    var currency: FinalModelString
    var amount: FinalModelDouble

    // Field type
    var fbeType: Int = fbeTypeConst

    static let fbeTypeConst: Int = 2

    required init(buffer: Buffer, offset: Int) {
        _buffer = buffer
        _offset = offset

        currency = FinalModelString(buffer: buffer, offset: 0)
        amount = FinalModelDouble(buffer: buffer, offset: 0)
    }

    // Get the allocation size
    func fbeAllocationSize(fbeValue: Balance) -> Int {
        return 0
            + currency.fbeAllocationSize(value: fbeValue.currency)
            + amount.fbeAllocationSize(value: fbeValue.amount)
    }

    // Check if the struct value is valid
    func verify() -> Int {
        _buffer.shift(offset: fbeOffset)
        let fbeResult = verifyFields()
        _buffer.unshift(offset: fbeOffset)
        return fbeResult
    }

    // Check if the struct fields are valid
    func verifyFields() -> Int {
        var fbeCurrentOffset: Int = 0
        var fbeFieldSize: Int = 0

        currency.fbeOffset = fbeCurrentOffset
        fbeFieldSize = currency.verify()
        if fbeFieldSize == Int.max {
            return Int.max
        }
        fbeCurrentOffset += fbeFieldSize

        amount.fbeOffset = fbeCurrentOffset
        fbeFieldSize = amount.verify()
        if fbeFieldSize == Int.max {
            return Int.max
        }
        fbeCurrentOffset += fbeFieldSize

        return fbeCurrentOffset
    }

    // Get the struct value
    func get(fbeSize: inout Size, fbeValue: Balance = Balance()) -> Balance {
        _buffer.shift(offset: fbeOffset)
        fbeSize.value = getFields(fbeValue: fbeValue)
        _buffer.unshift(offset: fbeOffset)
        return fbeValue
    }

    // Get the struct fields values
    func getFields(fbeValue: Balance) -> Int {
        var fbeCurrentOffset: Int = 0
        var fbeCurrentSize: Int = 0
        var fbeFieldSize = Size()

        currency.fbeOffset = fbeCurrentOffset
        fbeValue.currency = currency.get(size: &fbeFieldSize)
        fbeCurrentOffset += fbeFieldSize.value
        fbeCurrentSize += fbeFieldSize.value

        amount.fbeOffset = fbeCurrentOffset
        fbeValue.amount = amount.get(size: &fbeFieldSize)
        fbeCurrentOffset += fbeFieldSize.value
        fbeCurrentSize += fbeFieldSize.value

        return fbeCurrentSize
    }

    // Set the struct value
    func set(fbeValue: Balance) -> Int {
        _buffer.shift(offset: fbeOffset)
        let fbeSize = setFields(fbeValue: fbeValue)
        _buffer.unshift(offset: fbeOffset)
        return fbeSize
    }

    // Set the struct fields values
    func setFields(fbeValue: Balance) -> Int {
        var fbeCurrentOffset: Int = 0
        var fbeCurrentSize: Int = 0
        let fbeFieldSize = Size()

        currency.fbeOffset = fbeCurrentOffset
        fbeFieldSize.value = currency.set(value: fbeValue.currency)
        fbeCurrentOffset += fbeFieldSize.value
        fbeCurrentSize += fbeFieldSize.value

        amount.fbeOffset = fbeCurrentOffset
        fbeFieldSize.value = amount.set(value: fbeValue.amount)
        fbeCurrentOffset += fbeFieldSize.value
        fbeCurrentSize += fbeFieldSize.value

        return fbeCurrentSize
    }
}
