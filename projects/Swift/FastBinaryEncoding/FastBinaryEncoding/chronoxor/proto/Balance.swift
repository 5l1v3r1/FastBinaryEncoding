// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: proto.fbe
// Version: 1.3.0.0


class Balance: Comparable {
    var currency: String = ""
    var amount: Double = 0.0

    init() { }
    init(currency: String, amount: Double) {
        self.currency = currency
        self.amount = amount
    }

    init(other: Balance) {
        self.currency = other.currency
        self.amount = other.amount
    }

    func clone() throws -> Balance {
        // Serialize the struct to the FBE stream
        let writer = BalanceModel()
        try _ = writer.serialize(value: self)

        // Deserialize the struct from the FBE stream
        let reader = BalanceModel()
        reader.attach(buffer: writer.buffer)
        return reader.deserialize()
    }

    static func < (lhs: Balance, rhs: Balance) -> Bool {
        if !(lhs.currency < rhs.currency) { return false }

        return true
    }

    static func == (lhs: Balance, rhs: Balance) -> Bool {
        if !(lhs.currency < rhs.currency) { return false }

        return true
    }

    func hashCode() -> Int {
        var hash = 17
        hash = hash * 31 + currency.hashValue
        return hash
    }

    func toString() -> String {
        var sb = String()
        sb.append("Balance(")
        sb.append("currency="); sb.append("\""); sb.append(currency); sb.append("\"")
        sb.append(",amount="); sb.append(amount.description)
        sb.append(")")
        return sb
    }
}
