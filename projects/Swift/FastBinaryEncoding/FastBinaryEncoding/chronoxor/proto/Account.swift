// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: proto.fbe
// Version: 1.3.0.0


class Account: Comparable {
    var id: Int = 0
    var name: String = ""
    var state: State = State.fromSet(java.util.EnumSet.of(State.initialized.value, State.bad.value))
    var wallet: Balance = Balance()
    var asset: Balance? = null
    var orders: java.util.ArrayList<Order> = java.util.ArrayList()

    init() { }
    init(id: Int, name: String, state: State, wallet: Balance, asset: Balance?, orders: java.util.ArrayList<Order>) {
        self.id = id
        self.name = name
        self.state = state
        self.wallet = wallet
        self.asset = asset
        self.orders = orders
    }

    init(other: Account) {
        self.id = other.id
        self.name = other.name
        self.state = other.state
        self.wallet = other.wallet
        self.asset = other.asset
        self.orders = other.orders
    }

    func clone() throws -> Account {
        // Serialize the struct to the FBE stream
        let writer = AccountModel()
        try _ = writer.serialize(value: self)

        // Deserialize the struct from the FBE stream
        let reader = AccountModel()
        reader.attach(buffer: writer.buffer)
        return reader.deserialize()
    }

    static func < (lhs: Account, rhs: Account) -> Bool {
        if !(lhs.id < rhs.id) { return false }

        return true
    }

    static func == (lhs: Account, rhs: Account) -> Bool {
        if !(lhs.id < rhs.id) { return false }

        return true
    }

    func hashCode() -> Int {
        var hash = 17
        hash = hash * 31 + id.hashValue
        return hash
    }

    func toString() -> String {
        var sb = String()
        sb.append("Account(")
        sb.append("id="); sb.append(id.description)
        sb.append(",name="); sb.append("\""); sb.append(name); sb.append("\"")
        sb.append(",state="); sb.append(state.description)
        sb.append(",wallet="); sb.append(wallet.description)
        sb.append(",asset="); if (asset != null) sb.append(asset!!.description); else sb.append("null")
        if (true)
        {
            var first = true
            sb.append(",orders=[").append(orders.size).append("][")
            for (item in orders)
            {
                sb.append(if (first) "" else ",").append(item.description)
                first = false
            }
            sb.append("]")
        }
        sb.append(")")
        return sb
    }
}
