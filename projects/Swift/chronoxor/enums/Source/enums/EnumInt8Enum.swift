// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: enums.fbe
// Version: 1.3.0.0


import Foundation

public enum EnumInt8Enum {
    typealias RawValue = Int8
    case ENUM_VALUE_0
    case ENUM_VALUE_1
    case ENUM_VALUE_2
    case ENUM_VALUE_3
    case ENUM_VALUE_4
    case ENUM_VALUE_5

    var rawValue: RawValue {
        switch self {
        case .ENUM_VALUE_0: return 0 + 0
        case .ENUM_VALUE_1: return -128 + 0
        case .ENUM_VALUE_2: return -128 + 1
        case .ENUM_VALUE_3: return 126 + 0
        case .ENUM_VALUE_4: return 126 + 1
        case .ENUM_VALUE_5: return Self.ENUM_VALUE_3.rawValue
        }
    }

    init(value: Int8) { self = EnumInt8Enum(rawValue: NSNumber(value: value).int8Value) }
    init(value: Int16) { self = EnumInt8Enum(rawValue: NSNumber(value: value).int8Value) }
    init(value: Int32) { self = EnumInt8Enum(rawValue: NSNumber(value: value).int8Value) }
    init(value: Int64) { self = EnumInt8Enum(rawValue: NSNumber(value: value).int8Value) }
    init(value: EnumInt8Enum) { self = EnumInt8Enum(rawValue: value.rawValue) }
    init(rawValue: Int8) { self = Self.mapValue(value: rawValue)! }

    var description: String {
        switch self {
        case .ENUM_VALUE_0: return "ENUM_VALUE_0"
        case .ENUM_VALUE_1: return "ENUM_VALUE_1"
        case .ENUM_VALUE_2: return "ENUM_VALUE_2"
        case .ENUM_VALUE_3: return "ENUM_VALUE_3"
        case .ENUM_VALUE_4: return "ENUM_VALUE_4"
        case .ENUM_VALUE_5: return "ENUM_VALUE_5"
        }
    }

    static func values() -> [EnumInt8Enum] {
        return [
            EnumInt8Enum.ENUM_VALUE_0,
            EnumInt8Enum.ENUM_VALUE_1,
            EnumInt8Enum.ENUM_VALUE_2,
            EnumInt8Enum.ENUM_VALUE_3,
            EnumInt8Enum.ENUM_VALUE_4,
            EnumInt8Enum.ENUM_VALUE_5,
        ]
    }

    static func mapValue(value: Int8) -> EnumInt8Enum? {
        var mapping = Dictionary<Int8, EnumInt8Enum>()
        for value in values() {
            mapping[value.rawValue] = value
        }
        return mapping[value]
    }
}
