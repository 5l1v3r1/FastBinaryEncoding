// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: protoex.fbe
// Version: 1.3.0.0


import Foundation

import fbe

import proto

// Fast Binary Encoding com.chronoxor.protoex receiver
open class Receiver : fbe.ReceiverProtocol {
    // Imported receivers
    let protoReceiver: proto.Receiver?

    // Receiver values accessors
    private var OrderValue: protoex.Order
    private var BalanceValue: protoex.Balance

    // Receiver models accessors
    private var OrderModel: OrderModel
    private var BalanceModel: BalanceModel

    public var buffer: Buffer = Buffer()
    public var logging: Bool = false
    public var final: Bool = false

    public init() {
        protoReceiver = proto.Receiver(buffer: buffer)
        OrderValue = protoex.Order()
        OrderModel = protoex.OrderModel()
        BalanceValue = protoex.Balance()
        BalanceModel = protoex.BalanceModel()
        build(final: false)
    }

    public init(buffer: fbe.Buffer) {
        protoReceiver = proto.Receiver(buffer: buffer)
        OrderValue = protoex.Order()
        OrderModel = protoex.OrderModel()
        BalanceValue = protoex.Balance()
        BalanceModel = protoex.BalanceModel()
        build(with: buffer, final: false)
    }

    public func onReceive(type: Int, buffer: Data, offset: Int, size: Int) -> Bool {
        return onReceiveListener(listener: self as! ReceiverListener, type: type, buffer: buffer, offset: offset, size: size)
    }

    open func onReceiveListener(listener: ReceiverListener, type: Int, buffer: Data, offset: Int, size: Int) -> Bool {
        switch type {
        case protoex.OrderModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            OrderModel.attach(buffer: buffer, offset: offset)
            assert(OrderModel.verify(), "protoex.Order validation failed!")
            let deserialized = OrderModel.deserialize(value: &OrderValue)
            assert(deserialized > 0, "protoex.Order deserialization failed!")

            // Log the value
            if (logging)
            {
                let message = OrderValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: OrderValue)
            return true
        case protoex.BalanceModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            BalanceModel.attach(buffer: buffer, offset: offset)
            assert(BalanceModel.verify(), "protoex.Balance validation failed!")
            let deserialized = BalanceModel.deserialize(value: &BalanceValue)
            assert(deserialized > 0, "protoex.Balance deserialization failed!")

            // Log the value
            if (logging)
            {
                let message = BalanceValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: BalanceValue)
            return true
        default: break
        }

        if let protoReceiver = protoReceiver, protoReceiver.onReceiveListener(listener: listener, type: type, buffer: buffer, offset: offset, size: size) {
            return true
        }

        return false
    }
}
