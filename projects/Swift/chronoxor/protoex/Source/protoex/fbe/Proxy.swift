// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: protoex.fbe
// Version: 1.3.0.0


import Foundation

import fbe

import proto

// Fast Binary Encoding protoex proxy
open class Proxy : fbe.ReceiverProtocol {
    // Imported proxy
    let protoProxy: proto.Proxy?

    // Proxy models accessors
    private let OrderModel: OrderModel
    private let BalanceModel: BalanceModel

    public var buffer: Buffer = Buffer()
    public var logging: Bool = false
    public var final: Bool = false

    public init() {
        protoProxy = proto.Proxy(buffer: buffer)
        OrderModel = protoex.OrderModel()
        BalanceModel = protoex.BalanceModel()
        build(final: false)
    }

    public init(buffer: fbe.Buffer) {
        protoProxy = proto.Proxy(buffer: buffer)
        OrderModel = protoex.OrderModel()
        BalanceModel = protoex.BalanceModel()
        build(with: buffer, final: false)
    }

    open func onReceive(type: Int, buffer: Data, offset: Int, size: Int) -> Bool {
        return onReceiveListener(listener: self as! ProxyListener, type: type, buffer: buffer, offset: offset, size: size)
    }

    open func onReceiveListener(listener: ProxyListener, type: Int, buffer: Data, offset: Int, size: Int) -> Bool {
        switch type {
        case protoex.OrderModel.fbeTypeConst:
            // Attach the FBE stream to the proxy model
            OrderModel.attach(buffer: buffer, offset: offset)
            assert(OrderModel.verify(), "protoex.Order validation failed!")

            let fbeBegin = OrderModel.model.getBegin()
            if fbeBegin == 0 {
                return false
            }
            // Call proxy handler
            listener.onProxy(model: OrderModel, type: type, buffer: buffer, offset: offset, size: size)
            OrderModel.model.getEnd(fbeBegin: fbeBegin)
            return true
        case protoex.BalanceModel.fbeTypeConst:
            // Attach the FBE stream to the proxy model
            BalanceModel.attach(buffer: buffer, offset: offset)
            assert(BalanceModel.verify(), "protoex.Balance validation failed!")

            let fbeBegin = BalanceModel.model.getBegin()
            if fbeBegin == 0 {
                return false
            }
            // Call proxy handler
            listener.onProxy(model: BalanceModel, type: type, buffer: buffer, offset: offset, size: size)
            BalanceModel.model.getEnd(fbeBegin: fbeBegin)
            return true
        default: break
        }

        if let protoProxy = protoProxy, protoProxy.onReceiveListener(listener: listener, type: type, buffer: buffer, offset: offset, size: size) {
            return true
        }

        return false
    }
}
