// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: protoex.fbe
// Version: 1.3.0.0


import fbe

import Foundation

import proto

// Fast Binary Encoding com.chronoxor.protoex sender
open class Sender : fbe.SenderProtocol { 
    // Imported senders
    let protoSender: proto.Sender

    // Sender models accessors
    private let OrderModel: OrderModel
    private let BalanceModel: BalanceModel
    private let AccountModel: AccountModel

    public var buffer: Buffer = Buffer()
    public var logging: Bool = false
    public var final: Bool = false

    public init() {
        protoSender = proto.Sender(buffer: buffer)
        OrderModel = protoex.OrderModel(buffer: buffer)
        BalanceModel = protoex.BalanceModel(buffer: buffer)
        AccountModel = protoex.AccountModel(buffer: buffer)
        build(with: false)
    }

    public init(buffer: fbe.Buffer) {
        protoSender = proto.Sender(buffer: buffer)
        OrderModel = protoex.OrderModel(buffer: buffer)
        BalanceModel = protoex.BalanceModel(buffer: buffer)
        AccountModel = protoex.AccountModel(buffer: buffer)
        build(with: buffer, final: false)
    }

    public func send(obj: Any) throws -> Int {
        switch obj {
            case is protoex.Order: return try send(value: obj as! protoex.Order)
            case is protoex.Balance: return try send(value: obj as! protoex.Balance)
            case is protoex.Account: return try send(value: obj as! protoex.Account)
            default: break
        }

        // Try to send using imported senders
        var result: Int = 0
        result = protoSender.send(obj: obj)
        if (result > 0)
            return result

        return 0
    }

    public func send(value: protoex.Order) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try OrderModel.serialize(value: value)
        assert(serialized > 0, "protoex.Order serialization failed!")
        assert(OrderModel.verify(), "protoex.Order validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: protoex.Balance) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try BalanceModel.serialize(value: value)
        assert(serialized > 0, "protoex.Balance serialization failed!")
        assert(BalanceModel.verify(), "protoex.Balance validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: protoex.Account) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try AccountModel.serialize(value: value)
        assert(serialized > 0, "protoex.Account serialization failed!")
        assert(AccountModel.verify(), "protoex.Account validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }

    // Send message handler
    open func onSend(buffer: Data, offset: Int, size: Int) throws -> Int { throw NSError() }
}
