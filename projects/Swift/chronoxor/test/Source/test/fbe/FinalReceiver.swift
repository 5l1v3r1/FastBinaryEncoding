// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// Version: 1.3.0.0


import Foundation

import fbe

import proto

// Fast Binary Encoding com.chronoxor.test final receiver
open class FinalReceiver : FinalReceiverListener, fbe.ReceiverProtocol {
    // Imported receivers
    let protoReceiver: proto.FinalReceiver?

    // Receiver values accessors
    private var StructSimpleValue: test.StructSimple
    private var StructOptionalValue: test.StructOptional
    private var StructNestedValue: test.StructNested
    private var StructBytesValue: test.StructBytes
    private var StructArrayValue: test.StructArray
    private var StructVectorValue: test.StructVector
    private var StructListValue: test.StructList
    private var StructSetValue: test.StructSet
    private var StructMapValue: test.StructMap
    private var StructHashValue: test.StructHash
    private var StructHashExValue: test.StructHashEx
    private var StructEmptyValue: test.StructEmpty

    // Receiver models accessors
    private var StructSimpleModel: StructSimpleFinalModel
    private var StructOptionalModel: StructOptionalFinalModel
    private var StructNestedModel: StructNestedFinalModel
    private var StructBytesModel: StructBytesFinalModel
    private var StructArrayModel: StructArrayFinalModel
    private var StructVectorModel: StructVectorFinalModel
    private var StructListModel: StructListFinalModel
    private var StructSetModel: StructSetFinalModel
    private var StructMapModel: StructMapFinalModel
    private var StructHashModel: StructHashFinalModel
    private var StructHashExModel: StructHashExFinalModel
    private var StructEmptyModel: StructEmptyFinalModel

    public var buffer: Buffer = Buffer()
    public var logging: Bool = false
    public var final: Bool = false

    public override init() {
        protoReceiver = proto.FinalReceiver(buffer: buffer)
        StructSimpleValue = test.StructSimple()
        StructSimpleModel = test.StructSimpleFinalModel()
        StructOptionalValue = test.StructOptional()
        StructOptionalModel = test.StructOptionalFinalModel()
        StructNestedValue = test.StructNested()
        StructNestedModel = test.StructNestedFinalModel()
        StructBytesValue = test.StructBytes()
        StructBytesModel = test.StructBytesFinalModel()
        StructArrayValue = test.StructArray()
        StructArrayModel = test.StructArrayFinalModel()
        StructVectorValue = test.StructVector()
        StructVectorModel = test.StructVectorFinalModel()
        StructListValue = test.StructList()
        StructListModel = test.StructListFinalModel()
        StructSetValue = test.StructSet()
        StructSetModel = test.StructSetFinalModel()
        StructMapValue = test.StructMap()
        StructMapModel = test.StructMapFinalModel()
        StructHashValue = test.StructHash()
        StructHashModel = test.StructHashFinalModel()
        StructHashExValue = test.StructHashEx()
        StructHashExModel = test.StructHashExFinalModel()
        StructEmptyValue = test.StructEmpty()
        StructEmptyModel = test.StructEmptyFinalModel()
        super.init()
        build(final: true)
    }

    public init(buffer: fbe.Buffer) {
        protoReceiver = proto.FinalReceiver(buffer: buffer)
        StructSimpleValue = test.StructSimple()
        StructSimpleModel = test.StructSimpleFinalModel()
        StructOptionalValue = test.StructOptional()
        StructOptionalModel = test.StructOptionalFinalModel()
        StructNestedValue = test.StructNested()
        StructNestedModel = test.StructNestedFinalModel()
        StructBytesValue = test.StructBytes()
        StructBytesModel = test.StructBytesFinalModel()
        StructArrayValue = test.StructArray()
        StructArrayModel = test.StructArrayFinalModel()
        StructVectorValue = test.StructVector()
        StructVectorModel = test.StructVectorFinalModel()
        StructListValue = test.StructList()
        StructListModel = test.StructListFinalModel()
        StructSetValue = test.StructSet()
        StructSetModel = test.StructSetFinalModel()
        StructMapValue = test.StructMap()
        StructMapModel = test.StructMapFinalModel()
        StructHashValue = test.StructHash()
        StructHashModel = test.StructHashFinalModel()
        StructHashExValue = test.StructHashEx()
        StructHashExModel = test.StructHashExFinalModel()
        StructEmptyValue = test.StructEmpty()
        StructEmptyModel = test.StructEmptyFinalModel()
        super.init()
        build(with: buffer, final: true)
    }

    public func onReceive(type: Int, buffer: Data, offset: Int, size: Int) -> Bool {
        return onReceiveListener(listener: self, type: type, buffer: buffer, offset: offset, size: size)
    }

    open func onReceiveListener(listener: FinalReceiverListener, type: Int, buffer: Data, offset: Int, size: Int) -> Bool {
        switch type {
        case test.StructSimpleFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            StructSimpleModel.attach(buffer: buffer, offset: offset)
            assert(StructSimpleModel.verify(), "test.StructSimple validation failed!")
            let deserialized = StructSimpleModel.deserialize(value: &StructSimpleValue)
            assert(deserialized > 0, "test.StructSimple deserialization failed!")

            // Log the value
            if (logging)
            {
                let message = StructSimpleValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: StructSimpleValue)
            return true
        case test.StructOptionalFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            StructOptionalModel.attach(buffer: buffer, offset: offset)
            assert(StructOptionalModel.verify(), "test.StructOptional validation failed!")
            let deserialized = StructOptionalModel.deserialize(value: &StructOptionalValue)
            assert(deserialized > 0, "test.StructOptional deserialization failed!")

            // Log the value
            if (logging)
            {
                let message = StructOptionalValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: StructOptionalValue)
            return true
        case test.StructNestedFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            StructNestedModel.attach(buffer: buffer, offset: offset)
            assert(StructNestedModel.verify(), "test.StructNested validation failed!")
            let deserialized = StructNestedModel.deserialize(value: &StructNestedValue)
            assert(deserialized > 0, "test.StructNested deserialization failed!")

            // Log the value
            if (logging)
            {
                let message = StructNestedValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: StructNestedValue)
            return true
        case test.StructBytesFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            StructBytesModel.attach(buffer: buffer, offset: offset)
            assert(StructBytesModel.verify(), "test.StructBytes validation failed!")
            let deserialized = StructBytesModel.deserialize(value: &StructBytesValue)
            assert(deserialized > 0, "test.StructBytes deserialization failed!")

            // Log the value
            if (logging)
            {
                let message = StructBytesValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: StructBytesValue)
            return true
        case test.StructArrayFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            StructArrayModel.attach(buffer: buffer, offset: offset)
            assert(StructArrayModel.verify(), "test.StructArray validation failed!")
            let deserialized = StructArrayModel.deserialize(value: &StructArrayValue)
            assert(deserialized > 0, "test.StructArray deserialization failed!")

            // Log the value
            if (logging)
            {
                let message = StructArrayValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: StructArrayValue)
            return true
        case test.StructVectorFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            StructVectorModel.attach(buffer: buffer, offset: offset)
            assert(StructVectorModel.verify(), "test.StructVector validation failed!")
            let deserialized = StructVectorModel.deserialize(value: &StructVectorValue)
            assert(deserialized > 0, "test.StructVector deserialization failed!")

            // Log the value
            if (logging)
            {
                let message = StructVectorValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: StructVectorValue)
            return true
        case test.StructListFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            StructListModel.attach(buffer: buffer, offset: offset)
            assert(StructListModel.verify(), "test.StructList validation failed!")
            let deserialized = StructListModel.deserialize(value: &StructListValue)
            assert(deserialized > 0, "test.StructList deserialization failed!")

            // Log the value
            if (logging)
            {
                let message = StructListValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: StructListValue)
            return true
        case test.StructSetFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            StructSetModel.attach(buffer: buffer, offset: offset)
            assert(StructSetModel.verify(), "test.StructSet validation failed!")
            let deserialized = StructSetModel.deserialize(value: &StructSetValue)
            assert(deserialized > 0, "test.StructSet deserialization failed!")

            // Log the value
            if (logging)
            {
                let message = StructSetValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: StructSetValue)
            return true
        case test.StructMapFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            StructMapModel.attach(buffer: buffer, offset: offset)
            assert(StructMapModel.verify(), "test.StructMap validation failed!")
            let deserialized = StructMapModel.deserialize(value: &StructMapValue)
            assert(deserialized > 0, "test.StructMap deserialization failed!")

            // Log the value
            if (logging)
            {
                let message = StructMapValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: StructMapValue)
            return true
        case test.StructHashFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            StructHashModel.attach(buffer: buffer, offset: offset)
            assert(StructHashModel.verify(), "test.StructHash validation failed!")
            let deserialized = StructHashModel.deserialize(value: &StructHashValue)
            assert(deserialized > 0, "test.StructHash deserialization failed!")

            // Log the value
            if (logging)
            {
                let message = StructHashValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: StructHashValue)
            return true
        case test.StructHashExFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            StructHashExModel.attach(buffer: buffer, offset: offset)
            assert(StructHashExModel.verify(), "test.StructHashEx validation failed!")
            let deserialized = StructHashExModel.deserialize(value: &StructHashExValue)
            assert(deserialized > 0, "test.StructHashEx deserialization failed!")

            // Log the value
            if (logging)
            {
                let message = StructHashExValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: StructHashExValue)
            return true
        case test.StructEmptyFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            StructEmptyModel.attach(buffer: buffer, offset: offset)
            assert(StructEmptyModel.verify(), "test.StructEmpty validation failed!")
            let deserialized = StructEmptyModel.deserialize(value: &StructEmptyValue)
            assert(deserialized > 0, "test.StructEmpty deserialization failed!")

            // Log the value
            if (logging)
            {
                let message = StructEmptyValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: StructEmptyValue)
            return true
        default: break
        }

        if let protoReceiver = protoReceiver, protoReceiver.onReceiveListener(listener: listener, type: type, buffer: buffer, offset: offset, size: size) {
            return true
        }

        return false
    }
}
