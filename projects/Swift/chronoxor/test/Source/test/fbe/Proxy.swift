// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// Version: 1.3.0.0


import Foundation

import fbe

import proto

// Fast Binary Encoding test proxy
open class Proxy : fbe.ReceiverProtocol {
    // Imported proxy
    let protoProxy: proto.Proxy?

    // Proxy models accessors
    private let StructSimpleModel: StructSimpleModel
    private let StructOptionalModel: StructOptionalModel
    private let StructNestedModel: StructNestedModel
    private let StructBytesModel: StructBytesModel
    private let StructArrayModel: StructArrayModel
    private let StructVectorModel: StructVectorModel
    private let StructListModel: StructListModel
    private let StructSetModel: StructSetModel
    private let StructMapModel: StructMapModel
    private let StructHashModel: StructHashModel
    private let StructHashExModel: StructHashExModel
    private let StructEmptyModel: StructEmptyModel

    public var buffer: Buffer = Buffer()
    public var logging: Bool = false
    public var final: Bool = false

    public init() {
        protoProxy = proto.Proxy(buffer: buffer)
        StructSimpleModel = test.StructSimpleModel()
        StructOptionalModel = test.StructOptionalModel()
        StructNestedModel = test.StructNestedModel()
        StructBytesModel = test.StructBytesModel()
        StructArrayModel = test.StructArrayModel()
        StructVectorModel = test.StructVectorModel()
        StructListModel = test.StructListModel()
        StructSetModel = test.StructSetModel()
        StructMapModel = test.StructMapModel()
        StructHashModel = test.StructHashModel()
        StructHashExModel = test.StructHashExModel()
        StructEmptyModel = test.StructEmptyModel()
        build(final: false)
    }

    public init(buffer: fbe.Buffer) {
        protoProxy = proto.Proxy(buffer: buffer)
        StructSimpleModel = test.StructSimpleModel()
        StructOptionalModel = test.StructOptionalModel()
        StructNestedModel = test.StructNestedModel()
        StructBytesModel = test.StructBytesModel()
        StructArrayModel = test.StructArrayModel()
        StructVectorModel = test.StructVectorModel()
        StructListModel = test.StructListModel()
        StructSetModel = test.StructSetModel()
        StructMapModel = test.StructMapModel()
        StructHashModel = test.StructHashModel()
        StructHashExModel = test.StructHashExModel()
        StructEmptyModel = test.StructEmptyModel()
        build(with: buffer, final: false)
    }

    open func onReceive(type: Int, buffer: Data, offset: Int, size: Int) -> Bool {
        return onReceiveListener(listener: self as! ProxyListener, type: type, buffer: buffer, offset: offset, size: size)
    }

    open func onReceiveListener(listener: ProxyListener, type: Int, buffer: Data, offset: Int, size: Int) -> Bool {
        switch type {
        case test.StructSimpleModel.fbeTypeConst:
            // Attach the FBE stream to the proxy model
            StructSimpleModel.attach(buffer: buffer, offset: offset)
            assert(StructSimpleModel.verify(), "test.StructSimple validation failed!")

            let fbeBegin = StructSimpleModel.model.getBegin()
            if fbeBegin == 0 {
                return false
            }
            // Call proxy handler
            listener.onProxy(model: StructSimpleModel, type: type, buffer: buffer, offset: offset, size: size)
            StructSimpleModel.model.getEnd(fbeBegin: fbeBegin)
            return true
        case test.StructOptionalModel.fbeTypeConst:
            // Attach the FBE stream to the proxy model
            StructOptionalModel.attach(buffer: buffer, offset: offset)
            assert(StructOptionalModel.verify(), "test.StructOptional validation failed!")

            let fbeBegin = StructOptionalModel.model.getBegin()
            if fbeBegin == 0 {
                return false
            }
            // Call proxy handler
            listener.onProxy(model: StructOptionalModel, type: type, buffer: buffer, offset: offset, size: size)
            StructOptionalModel.model.getEnd(fbeBegin: fbeBegin)
            return true
        case test.StructNestedModel.fbeTypeConst:
            // Attach the FBE stream to the proxy model
            StructNestedModel.attach(buffer: buffer, offset: offset)
            assert(StructNestedModel.verify(), "test.StructNested validation failed!")

            let fbeBegin = StructNestedModel.model.getBegin()
            if fbeBegin == 0 {
                return false
            }
            // Call proxy handler
            listener.onProxy(model: StructNestedModel, type: type, buffer: buffer, offset: offset, size: size)
            StructNestedModel.model.getEnd(fbeBegin: fbeBegin)
            return true
        case test.StructBytesModel.fbeTypeConst:
            // Attach the FBE stream to the proxy model
            StructBytesModel.attach(buffer: buffer, offset: offset)
            assert(StructBytesModel.verify(), "test.StructBytes validation failed!")

            let fbeBegin = StructBytesModel.model.getBegin()
            if fbeBegin == 0 {
                return false
            }
            // Call proxy handler
            listener.onProxy(model: StructBytesModel, type: type, buffer: buffer, offset: offset, size: size)
            StructBytesModel.model.getEnd(fbeBegin: fbeBegin)
            return true
        case test.StructArrayModel.fbeTypeConst:
            // Attach the FBE stream to the proxy model
            StructArrayModel.attach(buffer: buffer, offset: offset)
            assert(StructArrayModel.verify(), "test.StructArray validation failed!")

            let fbeBegin = StructArrayModel.model.getBegin()
            if fbeBegin == 0 {
                return false
            }
            // Call proxy handler
            listener.onProxy(model: StructArrayModel, type: type, buffer: buffer, offset: offset, size: size)
            StructArrayModel.model.getEnd(fbeBegin: fbeBegin)
            return true
        case test.StructVectorModel.fbeTypeConst:
            // Attach the FBE stream to the proxy model
            StructVectorModel.attach(buffer: buffer, offset: offset)
            assert(StructVectorModel.verify(), "test.StructVector validation failed!")

            let fbeBegin = StructVectorModel.model.getBegin()
            if fbeBegin == 0 {
                return false
            }
            // Call proxy handler
            listener.onProxy(model: StructVectorModel, type: type, buffer: buffer, offset: offset, size: size)
            StructVectorModel.model.getEnd(fbeBegin: fbeBegin)
            return true
        case test.StructListModel.fbeTypeConst:
            // Attach the FBE stream to the proxy model
            StructListModel.attach(buffer: buffer, offset: offset)
            assert(StructListModel.verify(), "test.StructList validation failed!")

            let fbeBegin = StructListModel.model.getBegin()
            if fbeBegin == 0 {
                return false
            }
            // Call proxy handler
            listener.onProxy(model: StructListModel, type: type, buffer: buffer, offset: offset, size: size)
            StructListModel.model.getEnd(fbeBegin: fbeBegin)
            return true
        case test.StructSetModel.fbeTypeConst:
            // Attach the FBE stream to the proxy model
            StructSetModel.attach(buffer: buffer, offset: offset)
            assert(StructSetModel.verify(), "test.StructSet validation failed!")

            let fbeBegin = StructSetModel.model.getBegin()
            if fbeBegin == 0 {
                return false
            }
            // Call proxy handler
            listener.onProxy(model: StructSetModel, type: type, buffer: buffer, offset: offset, size: size)
            StructSetModel.model.getEnd(fbeBegin: fbeBegin)
            return true
        case test.StructMapModel.fbeTypeConst:
            // Attach the FBE stream to the proxy model
            StructMapModel.attach(buffer: buffer, offset: offset)
            assert(StructMapModel.verify(), "test.StructMap validation failed!")

            let fbeBegin = StructMapModel.model.getBegin()
            if fbeBegin == 0 {
                return false
            }
            // Call proxy handler
            listener.onProxy(model: StructMapModel, type: type, buffer: buffer, offset: offset, size: size)
            StructMapModel.model.getEnd(fbeBegin: fbeBegin)
            return true
        case test.StructHashModel.fbeTypeConst:
            // Attach the FBE stream to the proxy model
            StructHashModel.attach(buffer: buffer, offset: offset)
            assert(StructHashModel.verify(), "test.StructHash validation failed!")

            let fbeBegin = StructHashModel.model.getBegin()
            if fbeBegin == 0 {
                return false
            }
            // Call proxy handler
            listener.onProxy(model: StructHashModel, type: type, buffer: buffer, offset: offset, size: size)
            StructHashModel.model.getEnd(fbeBegin: fbeBegin)
            return true
        case test.StructHashExModel.fbeTypeConst:
            // Attach the FBE stream to the proxy model
            StructHashExModel.attach(buffer: buffer, offset: offset)
            assert(StructHashExModel.verify(), "test.StructHashEx validation failed!")

            let fbeBegin = StructHashExModel.model.getBegin()
            if fbeBegin == 0 {
                return false
            }
            // Call proxy handler
            listener.onProxy(model: StructHashExModel, type: type, buffer: buffer, offset: offset, size: size)
            StructHashExModel.model.getEnd(fbeBegin: fbeBegin)
            return true
        case test.StructEmptyModel.fbeTypeConst:
            // Attach the FBE stream to the proxy model
            StructEmptyModel.attach(buffer: buffer, offset: offset)
            assert(StructEmptyModel.verify(), "test.StructEmpty validation failed!")

            let fbeBegin = StructEmptyModel.model.getBegin()
            if fbeBegin == 0 {
                return false
            }
            // Call proxy handler
            listener.onProxy(model: StructEmptyModel, type: type, buffer: buffer, offset: offset, size: size)
            StructEmptyModel.model.getEnd(fbeBegin: fbeBegin)
            return true
        default: break
        }

        if let protoProxy = protoProxy, protoProxy.onReceiveListener(listener: listener, type: type, buffer: buffer, offset: offset, size: size) {
            return true
        }

        return false
    }
}
