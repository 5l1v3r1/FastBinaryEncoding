// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: proto.fbe
// Version: 1.3.0.0


import Foundation

import fbe

// Fast Binary Encoding proto client
open class Client : fbe.ClientProtocol, ReceiverListener {
    // Client sender models accessors
    let OrderSenderModel: OrderModel
    let BalanceSenderModel: BalanceModel
    let AccountSenderModel: AccountModel

    // Client receiver values accessors
    private var OrderReceiverValue: proto.Order
    private var BalanceReceiverValue: proto.Balance
    private var AccountReceiverValue: proto.Account

    // Client receiver models accessors
    private let OrderReceiverModel: OrderModel
    private let BalanceReceiverModel: BalanceModel
    private let AccountReceiverModel: AccountModel

    public var sendBuffer: Buffer = Buffer()
    public var receiveBuffer: Buffer = Buffer()
    public var logging: Bool = false
    public var final: Bool = false

    public init() {
        OrderSenderModel = OrderModel(buffer: sendBuffer)
        OrderReceiverValue = proto.Order()
        OrderReceiverModel = OrderModel()
        BalanceSenderModel = BalanceModel(buffer: sendBuffer)
        BalanceReceiverValue = proto.Balance()
        BalanceReceiverModel = BalanceModel()
        AccountSenderModel = AccountModel(buffer: sendBuffer)
        AccountReceiverValue = proto.Account()
        AccountReceiverModel = AccountModel()
        build(with: false)
    }

    public init(sendBuffer: fbe.Buffer, receiveBuffer: fbe.Buffer) {
        OrderSenderModel = OrderModel(buffer: sendBuffer)
        OrderReceiverValue = proto.Order()
        OrderReceiverModel = OrderModel()
        BalanceSenderModel = BalanceModel(buffer: sendBuffer)
        BalanceReceiverValue = proto.Balance()
        BalanceReceiverModel = BalanceModel()
        AccountSenderModel = AccountModel(buffer: sendBuffer)
        AccountReceiverValue = proto.Account()
        AccountReceiverModel = AccountModel()
        build(with: sendBuffer, receiveBuffer: receiveBuffer, final: false)
    }

    public func send(obj: Any) throws -> Int {
        switch obj {
            case is proto.Order: return try send(value: obj as! proto.Order)
            case is proto.Balance: return try send(value: obj as! proto.Balance)
            case is proto.Account: return try send(value: obj as! proto.Account)
            default: break
        }

        return 0
    }

    public func send(value: proto.Order) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try OrderSenderModel.serialize(value: value)
        assert(serialized > 0, "proto.Order serialization failed!")
        assert(OrderSenderModel.verify(), "proto.Order validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: proto.Balance) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try BalanceSenderModel.serialize(value: value)
        assert(serialized > 0, "proto.Balance serialization failed!")
        assert(BalanceSenderModel.verify(), "proto.Balance validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: proto.Account) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try AccountSenderModel.serialize(value: value)
        assert(serialized > 0, "proto.Account serialization failed!")
        assert(AccountSenderModel.verify(), "proto.Account validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }

    // Send message handler
    open func onSend(buffer: Data, offset: Int, size: Int) throws -> Int { throw NSError() }
    open func onReceive(type: Int, buffer: Data, offset: Int, size: Int) -> Bool {
        return onReceiveListener(listener: self, type: type, buffer: buffer, offset: offset, size: size)
    }

    open func onReceiveListener(listener: ReceiverListener, type: Int, buffer: Data, offset: Int, size: Int) -> Bool {
        switch type {
        case proto.OrderModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            OrderReceiverModel.attach(buffer: buffer, offset: offset)
            assert(OrderReceiverModel.verify(), "proto.Order validation failed!")
            let deserialized = OrderReceiverModel.deserialize(value: &OrderReceiverValue)
            assert(deserialized > 0, "proto.Order deserialization failed!")

            // Log the value
            if logging {
                let message = OrderReceiverValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: OrderReceiverValue)
            return true
        case proto.BalanceModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            BalanceReceiverModel.attach(buffer: buffer, offset: offset)
            assert(BalanceReceiverModel.verify(), "proto.Balance validation failed!")
            let deserialized = BalanceReceiverModel.deserialize(value: &BalanceReceiverValue)
            assert(deserialized > 0, "proto.Balance deserialization failed!")

            // Log the value
            if logging {
                let message = BalanceReceiverValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: BalanceReceiverValue)
            return true
        case proto.AccountModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            AccountReceiverModel.attach(buffer: buffer, offset: offset)
            assert(AccountReceiverModel.verify(), "proto.Account validation failed!")
            let deserialized = AccountReceiverModel.deserialize(value: &AccountReceiverValue)
            assert(deserialized > 0, "proto.Account deserialization failed!")

            // Log the value
            if logging {
                let message = AccountReceiverValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: AccountReceiverValue)
            return true
        default: break
        }

        return false
    }

    open func onReceive(value: proto.Order) { }
    open func onReceive(value: proto.Balance) { }
    open func onReceive(value: proto.Account) { }
}
