// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: proto.fbe
// Version: 1.3.0.0

import ChronoxorFbe
import Foundation

// Fast Binary Encoding ChronoxorProto sender
open class Sender : ChronoxorFbe.SenderProtocol { 
    // Sender models accessors
    private let OrderModel: OrderModel
    private let BalanceModel: BalanceModel
    private let AccountModel: AccountModel

    public var buffer: Buffer = Buffer()
    public var logging: Bool = false
    public var final: Bool = false

    public init() {
        OrderModel = ChronoxorProto.OrderModel(buffer: buffer)
        BalanceModel = ChronoxorProto.BalanceModel(buffer: buffer)
        AccountModel = ChronoxorProto.AccountModel(buffer: buffer)
        build(with: false)
    }

    public init(buffer: ChronoxorFbe.Buffer) {
        OrderModel = ChronoxorProto.OrderModel(buffer: buffer)
        BalanceModel = ChronoxorProto.BalanceModel(buffer: buffer)
        AccountModel = ChronoxorProto.AccountModel(buffer: buffer)
        build(with: buffer, final: false)
    }

    public func send(obj: Any) throws -> Int {
        return try send(obj: obj, listener: self as! ChronoxorFbe.LogListener)
    }

    public func send(obj: Any, listener: ChronoxorFbe.LogListener) throws -> Int {
        switch obj {
            case is ChronoxorProto.Order: return try send(value: obj as! ChronoxorProto.Order, listener: listener)
            case is ChronoxorProto.Balance: return try send(value: obj as! ChronoxorProto.Balance, listener: listener)
            case is ChronoxorProto.Account: return try send(value: obj as! ChronoxorProto.Account, listener: listener)
            default: break
        }

        return 0
    }

    public func send(value: ChronoxorProto.Order) throws -> Int {
        return try send(value: value, listener: self as! ChronoxorFbe.LogListener)
    }
    public func send(value: ChronoxorProto.Order, listener: ChronoxorFbe.LogListener) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try OrderModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorProto.Order serialization failed!")
        assert(OrderModel.verify(), "ChronoxorProto.Order validation failed!")

        // Log the value
        if logging {
            let message = value.description
            listener.onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorProto.Balance) throws -> Int {
        return try send(value: value, listener: self as! ChronoxorFbe.LogListener)
    }
    public func send(value: ChronoxorProto.Balance, listener: ChronoxorFbe.LogListener) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try BalanceModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorProto.Balance serialization failed!")
        assert(BalanceModel.verify(), "ChronoxorProto.Balance validation failed!")

        // Log the value
        if logging {
            let message = value.description
            listener.onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorProto.Account) throws -> Int {
        return try send(value: value, listener: self as! ChronoxorFbe.LogListener)
    }
    public func send(value: ChronoxorProto.Account, listener: ChronoxorFbe.LogListener) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try AccountModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorProto.Account serialization failed!")
        assert(AccountModel.verify(), "ChronoxorProto.Account validation failed!")

        // Log the value
        if logging {
            let message = value.description
            listener.onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }

    // Send message handler
    open func onSend(buffer: Data, offset: Int, size: Int) throws -> Int { throw NSError() }
}
