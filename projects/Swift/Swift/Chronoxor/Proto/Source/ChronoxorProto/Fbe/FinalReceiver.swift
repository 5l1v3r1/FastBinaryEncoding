// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: proto.fbe
// Version: 1.3.0.0

import Foundation
import ChronoxorFbe

// Fast Binary Encoding ChronoxorProto final receiver
open class FinalReceiver : ChronoxorFbe.ReceiverProtocol {
    // Receiver values accessors
    private var OrderValue: ChronoxorProto.Order
    private var BalanceValue: ChronoxorProto.Balance
    private var AccountValue: ChronoxorProto.Account

    // Receiver models accessors
    private var OrderModel: OrderFinalModel
    private var BalanceModel: BalanceFinalModel
    private var AccountModel: AccountFinalModel

    public var buffer: Buffer = Buffer()
    public var logging: Bool = false
    public var final: Bool = false

    public init() {
        OrderValue = ChronoxorProto.Order()
        OrderModel = ChronoxorProto.OrderFinalModel()
        BalanceValue = ChronoxorProto.Balance()
        BalanceModel = ChronoxorProto.BalanceFinalModel()
        AccountValue = ChronoxorProto.Account()
        AccountModel = ChronoxorProto.AccountFinalModel()
        build(final: true)
    }

    public init(buffer: ChronoxorFbe.Buffer) {
        OrderValue = ChronoxorProto.Order()
        OrderModel = ChronoxorProto.OrderFinalModel()
        BalanceValue = ChronoxorProto.Balance()
        BalanceModel = ChronoxorProto.BalanceFinalModel()
        AccountValue = ChronoxorProto.Account()
        AccountModel = ChronoxorProto.AccountFinalModel()
        build(with: buffer, final: true)
    }

    public func onReceive(type: Int, buffer: Data, offset: Int, size: Int) -> Bool {
        return onReceiveListener(listener: self as! FinalReceiverListener, type: type, buffer: buffer, offset: offset, size: size)
    }

    open func onReceiveListener(listener: FinalReceiverListener, type: Int, buffer: Data, offset: Int, size: Int) -> Bool {
        switch type {
        case ChronoxorProto.OrderFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            OrderModel.attach(buffer: buffer, offset: offset)
            assert(OrderModel.verify(), "Proto.Order validation failed!")
            let deserialized = OrderModel.deserialize(value: &OrderValue)
            assert(deserialized > 0, "Proto.Order deserialization failed!")

            // Log the value
            if (logging)
            {
                let message = OrderValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: OrderValue)
            return true
        case ChronoxorProto.BalanceFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            BalanceModel.attach(buffer: buffer, offset: offset)
            assert(BalanceModel.verify(), "Proto.Balance validation failed!")
            let deserialized = BalanceModel.deserialize(value: &BalanceValue)
            assert(deserialized > 0, "Proto.Balance deserialization failed!")

            // Log the value
            if (logging)
            {
                let message = BalanceValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: BalanceValue)
            return true
        case ChronoxorProto.AccountFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            AccountModel.attach(buffer: buffer, offset: offset)
            assert(AccountModel.verify(), "Proto.Account validation failed!")
            let deserialized = AccountModel.deserialize(value: &AccountValue)
            assert(deserialized > 0, "Proto.Account deserialization failed!")

            // Log the value
            if (logging)
            {
                let message = AccountValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: AccountValue)
            return true
        default: break
        }

        return false
    }
}
