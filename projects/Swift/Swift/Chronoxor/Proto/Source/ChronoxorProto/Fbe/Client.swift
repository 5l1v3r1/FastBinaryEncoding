// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: proto.fbe
// Version: 1.3.0.0

import Foundation
import ChronoxorFbe

// Fast Binary Encoding Proto client
open class Client : ChronoxorFbe.ClientProtocol {
    // Client sender models accessors
    let OrderMessageSenderModel: OrderMessageModel
    let BalanceMessageSenderModel: BalanceMessageModel
    let AccountMessageSenderModel: AccountMessageModel

    // Client receiver values accessors
    private var OrderMessageReceiverValue: ChronoxorProto.OrderMessage
    private var BalanceMessageReceiverValue: ChronoxorProto.BalanceMessage
    private var AccountMessageReceiverValue: ChronoxorProto.AccountMessage

    // Client receiver models accessors
    private let OrderMessageReceiverModel: OrderMessageModel
    private let BalanceMessageReceiverModel: BalanceMessageModel
    private let AccountMessageReceiverModel: AccountMessageModel

    public var sendBuffer: Buffer = Buffer()
    public var receiveBuffer: Buffer = Buffer()
    public var logging: Bool = false
    public var final: Bool = false

    public init() {
        OrderMessageSenderModel = OrderMessageModel(buffer: sendBuffer)
        OrderMessageReceiverValue = ChronoxorProto.OrderMessage()
        OrderMessageReceiverModel = OrderMessageModel()
        BalanceMessageSenderModel = BalanceMessageModel(buffer: sendBuffer)
        BalanceMessageReceiverValue = ChronoxorProto.BalanceMessage()
        BalanceMessageReceiverModel = BalanceMessageModel()
        AccountMessageSenderModel = AccountMessageModel(buffer: sendBuffer)
        AccountMessageReceiverValue = ChronoxorProto.AccountMessage()
        AccountMessageReceiverModel = AccountMessageModel()
        build(with: false)
    }

    public init(sendBuffer: ChronoxorFbe.Buffer, receiveBuffer: ChronoxorFbe.Buffer) {
        OrderMessageSenderModel = OrderMessageModel(buffer: sendBuffer)
        OrderMessageReceiverValue = ChronoxorProto.OrderMessage()
        OrderMessageReceiverModel = OrderMessageModel()
        BalanceMessageSenderModel = BalanceMessageModel(buffer: sendBuffer)
        BalanceMessageReceiverValue = ChronoxorProto.BalanceMessage()
        BalanceMessageReceiverModel = BalanceMessageModel()
        AccountMessageSenderModel = AccountMessageModel(buffer: sendBuffer)
        AccountMessageReceiverValue = ChronoxorProto.AccountMessage()
        AccountMessageReceiverModel = AccountMessageModel()
        build(with: sendBuffer, receiveBuffer: receiveBuffer, final: false)
    }

    public func send(obj: Any) throws -> Int {
        return try send(obj: obj, listener: self as? ChronoxorFbe.LogListener)
    }

    public func send(obj: Any, listener: ChronoxorFbe.LogListener?) throws -> Int {
        switch obj {
            case is ChronoxorProto.OrderMessage: return try send(value: obj as! ChronoxorProto.OrderMessage, listener: listener)
            case is ChronoxorProto.BalanceMessage: return try send(value: obj as! ChronoxorProto.BalanceMessage, listener: listener)
            case is ChronoxorProto.AccountMessage: return try send(value: obj as! ChronoxorProto.AccountMessage, listener: listener)
            default: break
        }

        return 0
    }

    public func send(value: ChronoxorProto.OrderMessage) throws -> Int {
        return try send(value: value, listener: self as? ChronoxorFbe.LogListener)
    }

    public func send(value: ChronoxorProto.OrderMessage, listener: ChronoxorFbe.LogListener?) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try OrderMessageSenderModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorProto.OrderMessage serialization failed!")
        assert(OrderMessageSenderModel.verify(), "ChronoxorProto.OrderMessage validation failed!")

        // Log the value
        if logging {
            let message = value.description
            listener?.onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }

    public func send(value: ChronoxorProto.BalanceMessage) throws -> Int {
        return try send(value: value, listener: self as? ChronoxorFbe.LogListener)
    }

    public func send(value: ChronoxorProto.BalanceMessage, listener: ChronoxorFbe.LogListener?) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try BalanceMessageSenderModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorProto.BalanceMessage serialization failed!")
        assert(BalanceMessageSenderModel.verify(), "ChronoxorProto.BalanceMessage validation failed!")

        // Log the value
        if logging {
            let message = value.description
            listener?.onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }

    public func send(value: ChronoxorProto.AccountMessage) throws -> Int {
        return try send(value: value, listener: self as? ChronoxorFbe.LogListener)
    }

    public func send(value: ChronoxorProto.AccountMessage, listener: ChronoxorFbe.LogListener?) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try AccountMessageSenderModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorProto.AccountMessage serialization failed!")
        assert(AccountMessageSenderModel.verify(), "ChronoxorProto.AccountMessage validation failed!")

        // Log the value
        if logging {
            let message = value.description
            listener?.onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }

    // Send message handler
    open func onSend(buffer: Data, offset: Int, size: Int) throws -> Int { throw NSError() }
    open func onReceive(type: Int, buffer: Data, offset: Int, size: Int) -> Bool {
        return onReceiveListener(listener: self as! ReceiverListener, type: type, buffer: buffer, offset: offset, size: size)
    }

    open func onReceiveListener(listener: ReceiverListener, type: Int, buffer: Data, offset: Int, size: Int) -> Bool {
        switch type {
        case ChronoxorProto.OrderMessageModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            OrderMessageReceiverModel.attach(buffer: buffer, offset: offset)
            assert(OrderMessageReceiverModel.verify(), "Proto.OrderMessage validation failed!")
            let deserialized = OrderMessageReceiverModel.deserialize(value: &OrderMessageReceiverValue)
            assert(deserialized > 0, "Proto.OrderMessage deserialization failed!")

            // Log the value
            if logging {
                let message = OrderMessageReceiverValue.description
                listener.onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: OrderMessageReceiverValue)
            return true
        case ChronoxorProto.BalanceMessageModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            BalanceMessageReceiverModel.attach(buffer: buffer, offset: offset)
            assert(BalanceMessageReceiverModel.verify(), "Proto.BalanceMessage validation failed!")
            let deserialized = BalanceMessageReceiverModel.deserialize(value: &BalanceMessageReceiverValue)
            assert(deserialized > 0, "Proto.BalanceMessage deserialization failed!")

            // Log the value
            if logging {
                let message = BalanceMessageReceiverValue.description
                listener.onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: BalanceMessageReceiverValue)
            return true
        case ChronoxorProto.AccountMessageModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            AccountMessageReceiverModel.attach(buffer: buffer, offset: offset)
            assert(AccountMessageReceiverModel.verify(), "Proto.AccountMessage validation failed!")
            let deserialized = AccountMessageReceiverModel.deserialize(value: &AccountMessageReceiverValue)
            assert(deserialized > 0, "Proto.AccountMessage deserialization failed!")

            // Log the value
            if logging {
                let message = AccountMessageReceiverValue.description
                listener.onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: AccountMessageReceiverValue)
            return true
        default: break
        }

        return false
    }
}
