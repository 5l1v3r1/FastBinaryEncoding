// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: protoex.fbe
// Version: 1.3.0.0

import Foundation
import ChronoxorFbe
import ChronoxorProto

// Fast Binary Encoding Protoex final client
open class FinalClient : ChronoxorFbe.ClientProtocol {
    // Imported senders
    let ProtoSender: ChronoxorProto.FinalClient

    // Imported receivers
    let ProtoReceiver: ChronoxorProto.FinalClient?

    // Client sender models accessors
    let OrderSenderModel: OrderFinalModel
    let BalanceSenderModel: BalanceFinalModel
    let AccountSenderModel: AccountFinalModel
    let OrderMessageSenderModel: OrderMessageFinalModel
    let BalanceMessageSenderModel: BalanceMessageFinalModel
    let AccountMessageSenderModel: AccountMessageFinalModel

    // Client receiver values accessors
    private var OrderReceiverValue: ChronoxorProtoex.Order
    private var BalanceReceiverValue: ChronoxorProtoex.Balance
    private var AccountReceiverValue: ChronoxorProtoex.Account
    private var OrderMessageReceiverValue: ChronoxorProtoex.OrderMessage
    private var BalanceMessageReceiverValue: ChronoxorProtoex.BalanceMessage
    private var AccountMessageReceiverValue: ChronoxorProtoex.AccountMessage

    // Client receiver models accessors
    private let OrderReceiverModel: OrderFinalModel
    private let BalanceReceiverModel: BalanceFinalModel
    private let AccountReceiverModel: AccountFinalModel
    private let OrderMessageReceiverModel: OrderMessageFinalModel
    private let BalanceMessageReceiverModel: BalanceMessageFinalModel
    private let AccountMessageReceiverModel: AccountMessageFinalModel

    public var sendBuffer: Buffer = Buffer()
    public var receiveBuffer: Buffer = Buffer()
    public var logging: Bool = false
    public var final: Bool = false

    public init() {
        ProtoSender = ChronoxorProto.FinalClient(sendBuffer: sendBuffer, receiveBuffer: receiveBuffer)
        ProtoReceiver = ChronoxorProto.FinalClient(sendBuffer: sendBuffer, receiveBuffer: receiveBuffer)
        OrderSenderModel = OrderFinalModel(buffer: sendBuffer)
        OrderReceiverValue = ChronoxorProtoex.Order()
        OrderReceiverModel = OrderFinalModel()
        BalanceSenderModel = BalanceFinalModel(buffer: sendBuffer)
        BalanceReceiverValue = ChronoxorProtoex.Balance()
        BalanceReceiverModel = BalanceFinalModel()
        AccountSenderModel = AccountFinalModel(buffer: sendBuffer)
        AccountReceiverValue = ChronoxorProtoex.Account()
        AccountReceiverModel = AccountFinalModel()
        OrderMessageSenderModel = OrderMessageFinalModel(buffer: sendBuffer)
        OrderMessageReceiverValue = ChronoxorProtoex.OrderMessage()
        OrderMessageReceiverModel = OrderMessageFinalModel()
        BalanceMessageSenderModel = BalanceMessageFinalModel(buffer: sendBuffer)
        BalanceMessageReceiverValue = ChronoxorProtoex.BalanceMessage()
        BalanceMessageReceiverModel = BalanceMessageFinalModel()
        AccountMessageSenderModel = AccountMessageFinalModel(buffer: sendBuffer)
        AccountMessageReceiverValue = ChronoxorProtoex.AccountMessage()
        AccountMessageReceiverModel = AccountMessageFinalModel()
        build(with: true)
    }

    public init(sendBuffer: ChronoxorFbe.Buffer, receiveBuffer: ChronoxorFbe.Buffer) {
        ProtoSender = ChronoxorProto.FinalClient(sendBuffer: sendBuffer, receiveBuffer: receiveBuffer)
        ProtoReceiver = ChronoxorProto.FinalClient(sendBuffer: sendBuffer, receiveBuffer: receiveBuffer)
        OrderSenderModel = OrderFinalModel(buffer: sendBuffer)
        OrderReceiverValue = ChronoxorProtoex.Order()
        OrderReceiverModel = OrderFinalModel()
        BalanceSenderModel = BalanceFinalModel(buffer: sendBuffer)
        BalanceReceiverValue = ChronoxorProtoex.Balance()
        BalanceReceiverModel = BalanceFinalModel()
        AccountSenderModel = AccountFinalModel(buffer: sendBuffer)
        AccountReceiverValue = ChronoxorProtoex.Account()
        AccountReceiverModel = AccountFinalModel()
        OrderMessageSenderModel = OrderMessageFinalModel(buffer: sendBuffer)
        OrderMessageReceiverValue = ChronoxorProtoex.OrderMessage()
        OrderMessageReceiverModel = OrderMessageFinalModel()
        BalanceMessageSenderModel = BalanceMessageFinalModel(buffer: sendBuffer)
        BalanceMessageReceiverValue = ChronoxorProtoex.BalanceMessage()
        BalanceMessageReceiverModel = BalanceMessageFinalModel()
        AccountMessageSenderModel = AccountMessageFinalModel(buffer: sendBuffer)
        AccountMessageReceiverValue = ChronoxorProtoex.AccountMessage()
        AccountMessageReceiverModel = AccountMessageFinalModel()
        build(with: sendBuffer, receiveBuffer: receiveBuffer, final: true)
    }

    public func send(obj: Any) throws -> Int {
        switch obj {
            case is ChronoxorProtoex.Order: return try send(value: obj as! ChronoxorProtoex.Order)
            case is ChronoxorProtoex.Balance: return try send(value: obj as! ChronoxorProtoex.Balance)
            case is ChronoxorProtoex.Account: return try send(value: obj as! ChronoxorProtoex.Account)
            case is ChronoxorProtoex.OrderMessage: return try send(value: obj as! ChronoxorProtoex.OrderMessage)
            case is ChronoxorProtoex.BalanceMessage: return try send(value: obj as! ChronoxorProtoex.BalanceMessage)
            case is ChronoxorProtoex.AccountMessage: return try send(value: obj as! ChronoxorProtoex.AccountMessage)
            default: break
        }

        // Try to send using imported clients
        var result: Int = 0
        result = try ProtoSender.send(obj: obj)
        if result > 0 { return result }

        return 0
    }

    public func send(value: ChronoxorProtoex.Order) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try OrderSenderModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorProtoex.Order serialization failed!")
        assert(OrderSenderModel.verify(), "ChronoxorProtoex.Order validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorProtoex.Balance) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try BalanceSenderModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorProtoex.Balance serialization failed!")
        assert(BalanceSenderModel.verify(), "ChronoxorProtoex.Balance validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorProtoex.Account) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try AccountSenderModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorProtoex.Account serialization failed!")
        assert(AccountSenderModel.verify(), "ChronoxorProtoex.Account validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorProtoex.OrderMessage) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try OrderMessageSenderModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorProtoex.OrderMessage serialization failed!")
        assert(OrderMessageSenderModel.verify(), "ChronoxorProtoex.OrderMessage validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorProtoex.BalanceMessage) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try BalanceMessageSenderModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorProtoex.BalanceMessage serialization failed!")
        assert(BalanceMessageSenderModel.verify(), "ChronoxorProtoex.BalanceMessage validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorProtoex.AccountMessage) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try AccountMessageSenderModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorProtoex.AccountMessage serialization failed!")
        assert(AccountMessageSenderModel.verify(), "ChronoxorProtoex.AccountMessage validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }

    // Send message handler
    open func onSend(buffer: Data, offset: Int, size: Int) throws -> Int { throw NSError() }
    open func onReceive(type: Int, buffer: Data, offset: Int, size: Int) -> Bool {
        return onReceiveListener(listener: self as! FinalReceiverListener, type: type, buffer: buffer, offset: offset, size: size)
    }

    open func onReceiveListener(listener: FinalReceiverListener, type: Int, buffer: Data, offset: Int, size: Int) -> Bool {
        switch type {
        case ChronoxorProtoex.OrderFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            OrderReceiverModel.attach(buffer: buffer, offset: offset)
            assert(OrderReceiverModel.verify(), "Protoex.Order validation failed!")
            let deserialized = OrderReceiverModel.deserialize(value: &OrderReceiverValue)
            assert(deserialized > 0, "Protoex.Order deserialization failed!")

            // Log the value
            if logging {
                let message = OrderReceiverValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: OrderReceiverValue)
            return true
        case ChronoxorProtoex.BalanceFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            BalanceReceiverModel.attach(buffer: buffer, offset: offset)
            assert(BalanceReceiverModel.verify(), "Protoex.Balance validation failed!")
            let deserialized = BalanceReceiverModel.deserialize(value: &BalanceReceiverValue)
            assert(deserialized > 0, "Protoex.Balance deserialization failed!")

            // Log the value
            if logging {
                let message = BalanceReceiverValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: BalanceReceiverValue)
            return true
        case ChronoxorProtoex.AccountFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            AccountReceiverModel.attach(buffer: buffer, offset: offset)
            assert(AccountReceiverModel.verify(), "Protoex.Account validation failed!")
            let deserialized = AccountReceiverModel.deserialize(value: &AccountReceiverValue)
            assert(deserialized > 0, "Protoex.Account deserialization failed!")

            // Log the value
            if logging {
                let message = AccountReceiverValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: AccountReceiverValue)
            return true
        case ChronoxorProtoex.OrderMessageFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            OrderMessageReceiverModel.attach(buffer: buffer, offset: offset)
            assert(OrderMessageReceiverModel.verify(), "Protoex.OrderMessage validation failed!")
            let deserialized = OrderMessageReceiverModel.deserialize(value: &OrderMessageReceiverValue)
            assert(deserialized > 0, "Protoex.OrderMessage deserialization failed!")

            // Log the value
            if logging {
                let message = OrderMessageReceiverValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: OrderMessageReceiverValue)
            return true
        case ChronoxorProtoex.BalanceMessageFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            BalanceMessageReceiverModel.attach(buffer: buffer, offset: offset)
            assert(BalanceMessageReceiverModel.verify(), "Protoex.BalanceMessage validation failed!")
            let deserialized = BalanceMessageReceiverModel.deserialize(value: &BalanceMessageReceiverValue)
            assert(deserialized > 0, "Protoex.BalanceMessage deserialization failed!")

            // Log the value
            if logging {
                let message = BalanceMessageReceiverValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: BalanceMessageReceiverValue)
            return true
        case ChronoxorProtoex.AccountMessageFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            AccountMessageReceiverModel.attach(buffer: buffer, offset: offset)
            assert(AccountMessageReceiverModel.verify(), "Protoex.AccountMessage validation failed!")
            let deserialized = AccountMessageReceiverModel.deserialize(value: &AccountMessageReceiverValue)
            assert(deserialized > 0, "Protoex.AccountMessage deserialization failed!")

            // Log the value
            if logging {
                let message = AccountMessageReceiverValue.description
                onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: AccountMessageReceiverValue)
            return true
        default: break
        }

        if let ProtoReceiver = ProtoReceiver, ProtoReceiver.onReceiveListener(listener: listener, type: type, buffer: buffer, offset: offset, size: size) {
            return true
        }

        return false
    }
}
