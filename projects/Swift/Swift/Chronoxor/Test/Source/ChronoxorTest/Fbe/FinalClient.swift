// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// Version: 1.3.0.0

import Foundation
import ChronoxorFbe
import ChronoxorProto

// Fast Binary Encoding Test final client
open class FinalClient : ChronoxorFbe.ClientProtocol {
    // Imported senders
    let ProtoSender: ChronoxorProto.FinalClient

    // Imported receivers
    let ProtoReceiver: ChronoxorProto.FinalClient?

    // Client sender models accessors
    let StructSimpleSenderModel: StructSimpleFinalModel
    let StructOptionalSenderModel: StructOptionalFinalModel
    let StructNestedSenderModel: StructNestedFinalModel
    let StructBytesSenderModel: StructBytesFinalModel
    let StructArraySenderModel: StructArrayFinalModel
    let StructVectorSenderModel: StructVectorFinalModel
    let StructListSenderModel: StructListFinalModel
    let StructSetSenderModel: StructSetFinalModel
    let StructMapSenderModel: StructMapFinalModel
    let StructHashSenderModel: StructHashFinalModel
    let StructHashExSenderModel: StructHashExFinalModel
    let StructEmptySenderModel: StructEmptyFinalModel

    // Client receiver values accessors
    private var StructSimpleReceiverValue: ChronoxorTest.StructSimple
    private var StructOptionalReceiverValue: ChronoxorTest.StructOptional
    private var StructNestedReceiverValue: ChronoxorTest.StructNested
    private var StructBytesReceiverValue: ChronoxorTest.StructBytes
    private var StructArrayReceiverValue: ChronoxorTest.StructArray
    private var StructVectorReceiverValue: ChronoxorTest.StructVector
    private var StructListReceiverValue: ChronoxorTest.StructList
    private var StructSetReceiverValue: ChronoxorTest.StructSet
    private var StructMapReceiverValue: ChronoxorTest.StructMap
    private var StructHashReceiverValue: ChronoxorTest.StructHash
    private var StructHashExReceiverValue: ChronoxorTest.StructHashEx
    private var StructEmptyReceiverValue: ChronoxorTest.StructEmpty

    // Client receiver models accessors
    private let StructSimpleReceiverModel: StructSimpleFinalModel
    private let StructOptionalReceiverModel: StructOptionalFinalModel
    private let StructNestedReceiverModel: StructNestedFinalModel
    private let StructBytesReceiverModel: StructBytesFinalModel
    private let StructArrayReceiverModel: StructArrayFinalModel
    private let StructVectorReceiverModel: StructVectorFinalModel
    private let StructListReceiverModel: StructListFinalModel
    private let StructSetReceiverModel: StructSetFinalModel
    private let StructMapReceiverModel: StructMapFinalModel
    private let StructHashReceiverModel: StructHashFinalModel
    private let StructHashExReceiverModel: StructHashExFinalModel
    private let StructEmptyReceiverModel: StructEmptyFinalModel

    public var sendBuffer: Buffer = Buffer()
    public var receiveBuffer: Buffer = Buffer()
    public var logging: Bool = false
    public var final: Bool = false

    public init() {
        ProtoSender = ChronoxorProto.FinalClient(sendBuffer: sendBuffer, receiveBuffer: receiveBuffer)
        ProtoReceiver = ChronoxorProto.FinalClient(sendBuffer: sendBuffer, receiveBuffer: receiveBuffer)
        StructSimpleSenderModel = StructSimpleFinalModel(buffer: sendBuffer)
        StructSimpleReceiverValue = ChronoxorTest.StructSimple()
        StructSimpleReceiverModel = StructSimpleFinalModel()
        StructOptionalSenderModel = StructOptionalFinalModel(buffer: sendBuffer)
        StructOptionalReceiverValue = ChronoxorTest.StructOptional()
        StructOptionalReceiverModel = StructOptionalFinalModel()
        StructNestedSenderModel = StructNestedFinalModel(buffer: sendBuffer)
        StructNestedReceiverValue = ChronoxorTest.StructNested()
        StructNestedReceiverModel = StructNestedFinalModel()
        StructBytesSenderModel = StructBytesFinalModel(buffer: sendBuffer)
        StructBytesReceiverValue = ChronoxorTest.StructBytes()
        StructBytesReceiverModel = StructBytesFinalModel()
        StructArraySenderModel = StructArrayFinalModel(buffer: sendBuffer)
        StructArrayReceiverValue = ChronoxorTest.StructArray()
        StructArrayReceiverModel = StructArrayFinalModel()
        StructVectorSenderModel = StructVectorFinalModel(buffer: sendBuffer)
        StructVectorReceiverValue = ChronoxorTest.StructVector()
        StructVectorReceiverModel = StructVectorFinalModel()
        StructListSenderModel = StructListFinalModel(buffer: sendBuffer)
        StructListReceiverValue = ChronoxorTest.StructList()
        StructListReceiverModel = StructListFinalModel()
        StructSetSenderModel = StructSetFinalModel(buffer: sendBuffer)
        StructSetReceiverValue = ChronoxorTest.StructSet()
        StructSetReceiverModel = StructSetFinalModel()
        StructMapSenderModel = StructMapFinalModel(buffer: sendBuffer)
        StructMapReceiverValue = ChronoxorTest.StructMap()
        StructMapReceiverModel = StructMapFinalModel()
        StructHashSenderModel = StructHashFinalModel(buffer: sendBuffer)
        StructHashReceiverValue = ChronoxorTest.StructHash()
        StructHashReceiverModel = StructHashFinalModel()
        StructHashExSenderModel = StructHashExFinalModel(buffer: sendBuffer)
        StructHashExReceiverValue = ChronoxorTest.StructHashEx()
        StructHashExReceiverModel = StructHashExFinalModel()
        StructEmptySenderModel = StructEmptyFinalModel(buffer: sendBuffer)
        StructEmptyReceiverValue = ChronoxorTest.StructEmpty()
        StructEmptyReceiverModel = StructEmptyFinalModel()
        build(with: true)
    }

    public init(sendBuffer: ChronoxorFbe.Buffer, receiveBuffer: ChronoxorFbe.Buffer) {
        ProtoSender = ChronoxorProto.FinalClient(sendBuffer: sendBuffer, receiveBuffer: receiveBuffer)
        ProtoReceiver = ChronoxorProto.FinalClient(sendBuffer: sendBuffer, receiveBuffer: receiveBuffer)
        StructSimpleSenderModel = StructSimpleFinalModel(buffer: sendBuffer)
        StructSimpleReceiverValue = ChronoxorTest.StructSimple()
        StructSimpleReceiverModel = StructSimpleFinalModel()
        StructOptionalSenderModel = StructOptionalFinalModel(buffer: sendBuffer)
        StructOptionalReceiverValue = ChronoxorTest.StructOptional()
        StructOptionalReceiverModel = StructOptionalFinalModel()
        StructNestedSenderModel = StructNestedFinalModel(buffer: sendBuffer)
        StructNestedReceiverValue = ChronoxorTest.StructNested()
        StructNestedReceiverModel = StructNestedFinalModel()
        StructBytesSenderModel = StructBytesFinalModel(buffer: sendBuffer)
        StructBytesReceiverValue = ChronoxorTest.StructBytes()
        StructBytesReceiverModel = StructBytesFinalModel()
        StructArraySenderModel = StructArrayFinalModel(buffer: sendBuffer)
        StructArrayReceiverValue = ChronoxorTest.StructArray()
        StructArrayReceiverModel = StructArrayFinalModel()
        StructVectorSenderModel = StructVectorFinalModel(buffer: sendBuffer)
        StructVectorReceiverValue = ChronoxorTest.StructVector()
        StructVectorReceiverModel = StructVectorFinalModel()
        StructListSenderModel = StructListFinalModel(buffer: sendBuffer)
        StructListReceiverValue = ChronoxorTest.StructList()
        StructListReceiverModel = StructListFinalModel()
        StructSetSenderModel = StructSetFinalModel(buffer: sendBuffer)
        StructSetReceiverValue = ChronoxorTest.StructSet()
        StructSetReceiverModel = StructSetFinalModel()
        StructMapSenderModel = StructMapFinalModel(buffer: sendBuffer)
        StructMapReceiverValue = ChronoxorTest.StructMap()
        StructMapReceiverModel = StructMapFinalModel()
        StructHashSenderModel = StructHashFinalModel(buffer: sendBuffer)
        StructHashReceiverValue = ChronoxorTest.StructHash()
        StructHashReceiverModel = StructHashFinalModel()
        StructHashExSenderModel = StructHashExFinalModel(buffer: sendBuffer)
        StructHashExReceiverValue = ChronoxorTest.StructHashEx()
        StructHashExReceiverModel = StructHashExFinalModel()
        StructEmptySenderModel = StructEmptyFinalModel(buffer: sendBuffer)
        StructEmptyReceiverValue = ChronoxorTest.StructEmpty()
        StructEmptyReceiverModel = StructEmptyFinalModel()
        build(with: sendBuffer, receiveBuffer: receiveBuffer, final: true)
    }

    public func send(obj: Any) throws -> Int {
        return try send(obj: obj, listener: self as! ChronoxorFbe.LogListener)
    }

    public func send(obj: Any, listener: ChronoxorFbe.LogListener) throws -> Int {
        switch obj {
            case is ChronoxorTest.StructSimple: return try send(value: obj as! ChronoxorTest.StructSimple, listener: listener)
            case is ChronoxorTest.StructOptional: return try send(value: obj as! ChronoxorTest.StructOptional, listener: listener)
            case is ChronoxorTest.StructNested: return try send(value: obj as! ChronoxorTest.StructNested, listener: listener)
            case is ChronoxorTest.StructBytes: return try send(value: obj as! ChronoxorTest.StructBytes, listener: listener)
            case is ChronoxorTest.StructArray: return try send(value: obj as! ChronoxorTest.StructArray, listener: listener)
            case is ChronoxorTest.StructVector: return try send(value: obj as! ChronoxorTest.StructVector, listener: listener)
            case is ChronoxorTest.StructList: return try send(value: obj as! ChronoxorTest.StructList, listener: listener)
            case is ChronoxorTest.StructSet: return try send(value: obj as! ChronoxorTest.StructSet, listener: listener)
            case is ChronoxorTest.StructMap: return try send(value: obj as! ChronoxorTest.StructMap, listener: listener)
            case is ChronoxorTest.StructHash: return try send(value: obj as! ChronoxorTest.StructHash, listener: listener)
            case is ChronoxorTest.StructHashEx: return try send(value: obj as! ChronoxorTest.StructHashEx, listener: listener)
            case is ChronoxorTest.StructEmpty: return try send(value: obj as! ChronoxorTest.StructEmpty, listener: listener)
            default: break
        }

        // Try to send using imported clients
        var result: Int = 0
        result = try ProtoSender.send(obj: obj, listener: listener)
        if result > 0 { return result }

        return 0
    }

    public func send(value: ChronoxorTest.StructSimple) throws -> Int {
        return try send(value: value, listener: self as! ChronoxorFbe.LogListener)
    }
    public func send(value: ChronoxorTest.StructSimple, listener: ChronoxorFbe.LogListener) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructSimpleSenderModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorTest.StructSimple serialization failed!")
        assert(StructSimpleSenderModel.verify(), "ChronoxorTest.StructSimple validation failed!")

        // Log the value
        if logging {
            let message = value.description
            listener.onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorTest.StructOptional) throws -> Int {
        return try send(value: value, listener: self as! ChronoxorFbe.LogListener)
    }
    public func send(value: ChronoxorTest.StructOptional, listener: ChronoxorFbe.LogListener) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructOptionalSenderModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorTest.StructOptional serialization failed!")
        assert(StructOptionalSenderModel.verify(), "ChronoxorTest.StructOptional validation failed!")

        // Log the value
        if logging {
            let message = value.description
            listener.onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorTest.StructNested) throws -> Int {
        return try send(value: value, listener: self as! ChronoxorFbe.LogListener)
    }
    public func send(value: ChronoxorTest.StructNested, listener: ChronoxorFbe.LogListener) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructNestedSenderModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorTest.StructNested serialization failed!")
        assert(StructNestedSenderModel.verify(), "ChronoxorTest.StructNested validation failed!")

        // Log the value
        if logging {
            let message = value.description
            listener.onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorTest.StructBytes) throws -> Int {
        return try send(value: value, listener: self as! ChronoxorFbe.LogListener)
    }
    public func send(value: ChronoxorTest.StructBytes, listener: ChronoxorFbe.LogListener) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructBytesSenderModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorTest.StructBytes serialization failed!")
        assert(StructBytesSenderModel.verify(), "ChronoxorTest.StructBytes validation failed!")

        // Log the value
        if logging {
            let message = value.description
            listener.onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorTest.StructArray) throws -> Int {
        return try send(value: value, listener: self as! ChronoxorFbe.LogListener)
    }
    public func send(value: ChronoxorTest.StructArray, listener: ChronoxorFbe.LogListener) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructArraySenderModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorTest.StructArray serialization failed!")
        assert(StructArraySenderModel.verify(), "ChronoxorTest.StructArray validation failed!")

        // Log the value
        if logging {
            let message = value.description
            listener.onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorTest.StructVector) throws -> Int {
        return try send(value: value, listener: self as! ChronoxorFbe.LogListener)
    }
    public func send(value: ChronoxorTest.StructVector, listener: ChronoxorFbe.LogListener) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructVectorSenderModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorTest.StructVector serialization failed!")
        assert(StructVectorSenderModel.verify(), "ChronoxorTest.StructVector validation failed!")

        // Log the value
        if logging {
            let message = value.description
            listener.onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorTest.StructList) throws -> Int {
        return try send(value: value, listener: self as! ChronoxorFbe.LogListener)
    }
    public func send(value: ChronoxorTest.StructList, listener: ChronoxorFbe.LogListener) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructListSenderModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorTest.StructList serialization failed!")
        assert(StructListSenderModel.verify(), "ChronoxorTest.StructList validation failed!")

        // Log the value
        if logging {
            let message = value.description
            listener.onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorTest.StructSet) throws -> Int {
        return try send(value: value, listener: self as! ChronoxorFbe.LogListener)
    }
    public func send(value: ChronoxorTest.StructSet, listener: ChronoxorFbe.LogListener) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructSetSenderModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorTest.StructSet serialization failed!")
        assert(StructSetSenderModel.verify(), "ChronoxorTest.StructSet validation failed!")

        // Log the value
        if logging {
            let message = value.description
            listener.onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorTest.StructMap) throws -> Int {
        return try send(value: value, listener: self as! ChronoxorFbe.LogListener)
    }
    public func send(value: ChronoxorTest.StructMap, listener: ChronoxorFbe.LogListener) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructMapSenderModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorTest.StructMap serialization failed!")
        assert(StructMapSenderModel.verify(), "ChronoxorTest.StructMap validation failed!")

        // Log the value
        if logging {
            let message = value.description
            listener.onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorTest.StructHash) throws -> Int {
        return try send(value: value, listener: self as! ChronoxorFbe.LogListener)
    }
    public func send(value: ChronoxorTest.StructHash, listener: ChronoxorFbe.LogListener) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructHashSenderModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorTest.StructHash serialization failed!")
        assert(StructHashSenderModel.verify(), "ChronoxorTest.StructHash validation failed!")

        // Log the value
        if logging {
            let message = value.description
            listener.onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorTest.StructHashEx) throws -> Int {
        return try send(value: value, listener: self as! ChronoxorFbe.LogListener)
    }
    public func send(value: ChronoxorTest.StructHashEx, listener: ChronoxorFbe.LogListener) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructHashExSenderModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorTest.StructHashEx serialization failed!")
        assert(StructHashExSenderModel.verify(), "ChronoxorTest.StructHashEx validation failed!")

        // Log the value
        if logging {
            let message = value.description
            listener.onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorTest.StructEmpty) throws -> Int {
        return try send(value: value, listener: self as! ChronoxorFbe.LogListener)
    }
    public func send(value: ChronoxorTest.StructEmpty, listener: ChronoxorFbe.LogListener) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructEmptySenderModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorTest.StructEmpty serialization failed!")
        assert(StructEmptySenderModel.verify(), "ChronoxorTest.StructEmpty validation failed!")

        // Log the value
        if logging {
            let message = value.description
            listener.onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }

    // Send message handler
    open func onSend(buffer: Data, offset: Int, size: Int) throws -> Int { throw NSError() }
    open func onReceive(type: Int, buffer: Data, offset: Int, size: Int) -> Bool {
        return onReceiveListener(listener: self as! FinalReceiverListener, type: type, buffer: buffer, offset: offset, size: size)
    }

    open func onReceiveListener(listener: FinalReceiverListener, type: Int, buffer: Data, offset: Int, size: Int) -> Bool {
        switch type {
        case ChronoxorTest.StructSimpleFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            StructSimpleReceiverModel.attach(buffer: buffer, offset: offset)
            assert(StructSimpleReceiverModel.verify(), "Test.StructSimple validation failed!")
            let deserialized = StructSimpleReceiverModel.deserialize(value: &StructSimpleReceiverValue)
            assert(deserialized > 0, "Test.StructSimple deserialization failed!")

            // Log the value
            if logging {
                let message = StructSimpleReceiverValue.description
                listener.onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: StructSimpleReceiverValue)
            return true
        case ChronoxorTest.StructOptionalFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            StructOptionalReceiverModel.attach(buffer: buffer, offset: offset)
            assert(StructOptionalReceiverModel.verify(), "Test.StructOptional validation failed!")
            let deserialized = StructOptionalReceiverModel.deserialize(value: &StructOptionalReceiverValue)
            assert(deserialized > 0, "Test.StructOptional deserialization failed!")

            // Log the value
            if logging {
                let message = StructOptionalReceiverValue.description
                listener.onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: StructOptionalReceiverValue)
            return true
        case ChronoxorTest.StructNestedFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            StructNestedReceiverModel.attach(buffer: buffer, offset: offset)
            assert(StructNestedReceiverModel.verify(), "Test.StructNested validation failed!")
            let deserialized = StructNestedReceiverModel.deserialize(value: &StructNestedReceiverValue)
            assert(deserialized > 0, "Test.StructNested deserialization failed!")

            // Log the value
            if logging {
                let message = StructNestedReceiverValue.description
                listener.onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: StructNestedReceiverValue)
            return true
        case ChronoxorTest.StructBytesFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            StructBytesReceiverModel.attach(buffer: buffer, offset: offset)
            assert(StructBytesReceiverModel.verify(), "Test.StructBytes validation failed!")
            let deserialized = StructBytesReceiverModel.deserialize(value: &StructBytesReceiverValue)
            assert(deserialized > 0, "Test.StructBytes deserialization failed!")

            // Log the value
            if logging {
                let message = StructBytesReceiverValue.description
                listener.onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: StructBytesReceiverValue)
            return true
        case ChronoxorTest.StructArrayFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            StructArrayReceiverModel.attach(buffer: buffer, offset: offset)
            assert(StructArrayReceiverModel.verify(), "Test.StructArray validation failed!")
            let deserialized = StructArrayReceiverModel.deserialize(value: &StructArrayReceiverValue)
            assert(deserialized > 0, "Test.StructArray deserialization failed!")

            // Log the value
            if logging {
                let message = StructArrayReceiverValue.description
                listener.onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: StructArrayReceiverValue)
            return true
        case ChronoxorTest.StructVectorFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            StructVectorReceiverModel.attach(buffer: buffer, offset: offset)
            assert(StructVectorReceiverModel.verify(), "Test.StructVector validation failed!")
            let deserialized = StructVectorReceiverModel.deserialize(value: &StructVectorReceiverValue)
            assert(deserialized > 0, "Test.StructVector deserialization failed!")

            // Log the value
            if logging {
                let message = StructVectorReceiverValue.description
                listener.onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: StructVectorReceiverValue)
            return true
        case ChronoxorTest.StructListFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            StructListReceiverModel.attach(buffer: buffer, offset: offset)
            assert(StructListReceiverModel.verify(), "Test.StructList validation failed!")
            let deserialized = StructListReceiverModel.deserialize(value: &StructListReceiverValue)
            assert(deserialized > 0, "Test.StructList deserialization failed!")

            // Log the value
            if logging {
                let message = StructListReceiverValue.description
                listener.onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: StructListReceiverValue)
            return true
        case ChronoxorTest.StructSetFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            StructSetReceiverModel.attach(buffer: buffer, offset: offset)
            assert(StructSetReceiverModel.verify(), "Test.StructSet validation failed!")
            let deserialized = StructSetReceiverModel.deserialize(value: &StructSetReceiverValue)
            assert(deserialized > 0, "Test.StructSet deserialization failed!")

            // Log the value
            if logging {
                let message = StructSetReceiverValue.description
                listener.onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: StructSetReceiverValue)
            return true
        case ChronoxorTest.StructMapFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            StructMapReceiverModel.attach(buffer: buffer, offset: offset)
            assert(StructMapReceiverModel.verify(), "Test.StructMap validation failed!")
            let deserialized = StructMapReceiverModel.deserialize(value: &StructMapReceiverValue)
            assert(deserialized > 0, "Test.StructMap deserialization failed!")

            // Log the value
            if logging {
                let message = StructMapReceiverValue.description
                listener.onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: StructMapReceiverValue)
            return true
        case ChronoxorTest.StructHashFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            StructHashReceiverModel.attach(buffer: buffer, offset: offset)
            assert(StructHashReceiverModel.verify(), "Test.StructHash validation failed!")
            let deserialized = StructHashReceiverModel.deserialize(value: &StructHashReceiverValue)
            assert(deserialized > 0, "Test.StructHash deserialization failed!")

            // Log the value
            if logging {
                let message = StructHashReceiverValue.description
                listener.onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: StructHashReceiverValue)
            return true
        case ChronoxorTest.StructHashExFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            StructHashExReceiverModel.attach(buffer: buffer, offset: offset)
            assert(StructHashExReceiverModel.verify(), "Test.StructHashEx validation failed!")
            let deserialized = StructHashExReceiverModel.deserialize(value: &StructHashExReceiverValue)
            assert(deserialized > 0, "Test.StructHashEx deserialization failed!")

            // Log the value
            if logging {
                let message = StructHashExReceiverValue.description
                listener.onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: StructHashExReceiverValue)
            return true
        case ChronoxorTest.StructEmptyFinalModel.fbeTypeConst:
            // Deserialize the value from the FBE stream
            StructEmptyReceiverModel.attach(buffer: buffer, offset: offset)
            assert(StructEmptyReceiverModel.verify(), "Test.StructEmpty validation failed!")
            let deserialized = StructEmptyReceiverModel.deserialize(value: &StructEmptyReceiverValue)
            assert(deserialized > 0, "Test.StructEmpty deserialization failed!")

            // Log the value
            if logging {
                let message = StructEmptyReceiverValue.description
                listener.onReceiveLog(message: message)
            }

            // Call receive handler with deserialized value
            listener.onReceive(value: StructEmptyReceiverValue)
            return true
        default: break
        }

        if let ProtoReceiver = ProtoReceiver, ProtoReceiver.onReceiveListener(listener: listener, type: type, buffer: buffer, offset: offset, size: size) {
            return true
        }

        return false
    }
}
