// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// Version: 1.3.0.0

import ChronoxorWowFbe
import Foundation
import ChronoxorWowProto

// Fast Binary Encoding ChronoxorWowTest final sender
open class FinalSender : ChronoxorWowFbe.SenderProtocol { 
    // Imported senders
    let ProtoSender: ChronoxorWowProto.FinalSender

    // Sender models accessors
    private let StructSimpleModel: StructSimpleFinalModel
    private let StructOptionalModel: StructOptionalFinalModel
    private let StructNestedModel: StructNestedFinalModel
    private let StructBytesModel: StructBytesFinalModel
    private let StructArrayModel: StructArrayFinalModel
    private let StructVectorModel: StructVectorFinalModel
    private let StructListModel: StructListFinalModel
    private let StructSetModel: StructSetFinalModel
    private let StructMapModel: StructMapFinalModel
    private let StructHashModel: StructHashFinalModel
    private let StructHashExModel: StructHashExFinalModel
    private let StructEmptyModel: StructEmptyFinalModel

    public var buffer: Buffer = Buffer()
    public var logging: Bool = false
    public var final: Bool = false

    public init() {
        ProtoSender = ChronoxorWowProto.FinalSender(buffer: buffer)
        StructSimpleModel = ChronoxorWowTest.StructSimpleFinalModel(buffer: buffer)
        StructOptionalModel = ChronoxorWowTest.StructOptionalFinalModel(buffer: buffer)
        StructNestedModel = ChronoxorWowTest.StructNestedFinalModel(buffer: buffer)
        StructBytesModel = ChronoxorWowTest.StructBytesFinalModel(buffer: buffer)
        StructArrayModel = ChronoxorWowTest.StructArrayFinalModel(buffer: buffer)
        StructVectorModel = ChronoxorWowTest.StructVectorFinalModel(buffer: buffer)
        StructListModel = ChronoxorWowTest.StructListFinalModel(buffer: buffer)
        StructSetModel = ChronoxorWowTest.StructSetFinalModel(buffer: buffer)
        StructMapModel = ChronoxorWowTest.StructMapFinalModel(buffer: buffer)
        StructHashModel = ChronoxorWowTest.StructHashFinalModel(buffer: buffer)
        StructHashExModel = ChronoxorWowTest.StructHashExFinalModel(buffer: buffer)
        StructEmptyModel = ChronoxorWowTest.StructEmptyFinalModel(buffer: buffer)
        build(with: true)
    }

    public init(buffer: ChronoxorWowFbe.Buffer) {
        ProtoSender = ChronoxorWowProto.FinalSender(buffer: buffer)
        StructSimpleModel = ChronoxorWowTest.StructSimpleFinalModel(buffer: buffer)
        StructOptionalModel = ChronoxorWowTest.StructOptionalFinalModel(buffer: buffer)
        StructNestedModel = ChronoxorWowTest.StructNestedFinalModel(buffer: buffer)
        StructBytesModel = ChronoxorWowTest.StructBytesFinalModel(buffer: buffer)
        StructArrayModel = ChronoxorWowTest.StructArrayFinalModel(buffer: buffer)
        StructVectorModel = ChronoxorWowTest.StructVectorFinalModel(buffer: buffer)
        StructListModel = ChronoxorWowTest.StructListFinalModel(buffer: buffer)
        StructSetModel = ChronoxorWowTest.StructSetFinalModel(buffer: buffer)
        StructMapModel = ChronoxorWowTest.StructMapFinalModel(buffer: buffer)
        StructHashModel = ChronoxorWowTest.StructHashFinalModel(buffer: buffer)
        StructHashExModel = ChronoxorWowTest.StructHashExFinalModel(buffer: buffer)
        StructEmptyModel = ChronoxorWowTest.StructEmptyFinalModel(buffer: buffer)
        build(with: buffer, final: true)
    }

    public func send(obj: Any) throws -> Int {
        switch obj {
            case is ChronoxorWowTest.StructSimple: return try send(value: obj as! ChronoxorWowTest.StructSimple)
            case is ChronoxorWowTest.StructOptional: return try send(value: obj as! ChronoxorWowTest.StructOptional)
            case is ChronoxorWowTest.StructNested: return try send(value: obj as! ChronoxorWowTest.StructNested)
            case is ChronoxorWowTest.StructBytes: return try send(value: obj as! ChronoxorWowTest.StructBytes)
            case is ChronoxorWowTest.StructArray: return try send(value: obj as! ChronoxorWowTest.StructArray)
            case is ChronoxorWowTest.StructVector: return try send(value: obj as! ChronoxorWowTest.StructVector)
            case is ChronoxorWowTest.StructList: return try send(value: obj as! ChronoxorWowTest.StructList)
            case is ChronoxorWowTest.StructSet: return try send(value: obj as! ChronoxorWowTest.StructSet)
            case is ChronoxorWowTest.StructMap: return try send(value: obj as! ChronoxorWowTest.StructMap)
            case is ChronoxorWowTest.StructHash: return try send(value: obj as! ChronoxorWowTest.StructHash)
            case is ChronoxorWowTest.StructHashEx: return try send(value: obj as! ChronoxorWowTest.StructHashEx)
            case is ChronoxorWowTest.StructEmpty: return try send(value: obj as! ChronoxorWowTest.StructEmpty)
            default: break
        }

        // Try to send using imported senders
        var result: Int = 0
        result = try ProtoSender.send(obj: obj)
        if result > 0 {
            return result
            }

        return 0
    }

    public func send(value: ChronoxorWowTest.StructSimple) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructSimpleModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorWowTest.StructSimple serialization failed!")
        assert(StructSimpleModel.verify(), "ChronoxorWowTest.StructSimple validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorWowTest.StructOptional) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructOptionalModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorWowTest.StructOptional serialization failed!")
        assert(StructOptionalModel.verify(), "ChronoxorWowTest.StructOptional validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorWowTest.StructNested) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructNestedModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorWowTest.StructNested serialization failed!")
        assert(StructNestedModel.verify(), "ChronoxorWowTest.StructNested validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorWowTest.StructBytes) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructBytesModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorWowTest.StructBytes serialization failed!")
        assert(StructBytesModel.verify(), "ChronoxorWowTest.StructBytes validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorWowTest.StructArray) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructArrayModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorWowTest.StructArray serialization failed!")
        assert(StructArrayModel.verify(), "ChronoxorWowTest.StructArray validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorWowTest.StructVector) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructVectorModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorWowTest.StructVector serialization failed!")
        assert(StructVectorModel.verify(), "ChronoxorWowTest.StructVector validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorWowTest.StructList) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructListModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorWowTest.StructList serialization failed!")
        assert(StructListModel.verify(), "ChronoxorWowTest.StructList validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorWowTest.StructSet) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructSetModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorWowTest.StructSet serialization failed!")
        assert(StructSetModel.verify(), "ChronoxorWowTest.StructSet validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorWowTest.StructMap) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructMapModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorWowTest.StructMap serialization failed!")
        assert(StructMapModel.verify(), "ChronoxorWowTest.StructMap validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorWowTest.StructHash) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructHashModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorWowTest.StructHash serialization failed!")
        assert(StructHashModel.verify(), "ChronoxorWowTest.StructHash validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorWowTest.StructHashEx) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructHashExModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorWowTest.StructHashEx serialization failed!")
        assert(StructHashExModel.verify(), "ChronoxorWowTest.StructHashEx validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }
    public func send(value: ChronoxorWowTest.StructEmpty) throws -> Int {
        // Serialize the value into the FBE stream
        let serialized = try StructEmptyModel.serialize(value: value)
        assert(serialized > 0, "ChronoxorWowTest.StructEmpty serialization failed!")
        assert(StructEmptyModel.verify(), "ChronoxorWowTest.StructEmpty validation failed!")

        // Log the value
        if logging {
            let message = value.description
            onSendLog(message: message)
        }

        // Send the serialized value
        return try sendSerialized(serialized: serialized)
    }

    // Send message handler
    open func onSend(buffer: Data, offset: Int, size: Int) throws -> Int { throw NSError() }
}
