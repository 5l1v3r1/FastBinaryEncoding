/*
   Client protocol
*/

// Domain declaration
domain com.finstek.proto

// Package declaration
package client offset 4000

// Protocol version
version 0.4

// Package imports
import core

// Ping request
[request]
[response(PongResponse)]
[reject(*core.Reject)]
message PingRequest : core.Request
{
    // Ping time: request accepted timestamp
    timestamp Ping;
}

// Pong response
message PongResponse : core.Response
{
    // Ping time: request accepted timestamp
    timestamp Ping;
    // Ping time: request processed timestamp
    timestamp Pong;
}

// Login request
[request]
[response(LoginResponse)]
[reject(*core.Reject, LoginReject)]
message LoginRequest : core.Request
{
    // Authentication token (optional)
    [hidden]
    string? AuthToken;

    // Login (optional)
    uint64? Login;
    // Password (optional)
    [hidden]
    string? Password;
    // One-time-password token (optional)
    [hidden]
    string? OTPToken;

    // Protocol version (major) (optional)
    uint16? ProtocolVersionMajor;
    // Protocol version (minor) (optional)
    uint16? ProtocolVersionMinor;
}

// Login response
message LoginResponse : core.Response
{
    // Authentication token
    [hidden]
    string AuthToken;

    // Login
    uint64 Login;

    // Resolved protocol version (major)
    uint16 ProtocolVersionMajor;
    // Resolved protocol version (minor)
    uint16 ProtocolVersionMinor;
}

// Login reject
message LoginReject : core.Reject
{
    // Is login required?
    bool IsLoginRequired;
    // Is password required?
    bool IsPasswordRequired;
    // Is one-time-password token required?
    bool IsOTPTokenRequired;
    // Is protocol version required?
    bool IsProtocolVersionRequired;
}

// Logout reason
enum LogoutReason
{
    UNKNOWN;
    CLIENT_REQUEST;
    MANAGER_REQUEST;
}

// Logout request
[request]
[response(LogoutResponse)]
[reject(*core.Reject)]
message LogoutRequest : core.Request
{
    // Logout client message
    string Message;
}

// Logout response
message LogoutResponse : core.Response
{
    // Logout server message
    string Message;

    // Logout reason
    LogoutReason Reason;
}

// Logout notification
message LogoutNotify
{
    // Logout server message
    string Message;

    // Logout reason
    LogoutReason Reason;
}

// Session info request
[request]
[response(SessionInfoResponse)]
[reject(*core.Reject)]
message SessionInfoRequest : core.Request
{
}

// Session info response
message SessionInfoResponse : core.Response
{
    // Session info
    core.SessionInfo SessionInfo;
}

// Configuration update notification
message ConfigUpdateNotify
{
    // Configuration actual version as a timestamp
    timestamp ActualVersion;
}

// History update notification
message HistoryUpdateNotify
{
}

// Storage update notification
message StorageUpdateNotify
{
}

// Time zone get request
[request]
[response(TimezoneGetResponse)]
[reject(*core.Reject)]
message TimezoneGetRequest : core.Request
{
    // Time zone Id
    uuid? TimezoneId;
    // Time zone name
    string? TimezoneName;
}

// Time zone get response
message TimezoneGetResponse : core.Response
{
    // Timezone
    core.Timezone Timezone;
}

// Time zones get all request
[request]
[response(TimezonesGetAllResponse)]
[reject(*core.Reject)]
message TimezonesGetAllRequest : core.Request
{
}

// Time zones get all response
message TimezonesGetAllResponse : core.Response
{
    // Time zones
    core.Timezone[] Timezones;
}

// Time zone update notification
message TimezoneUpdateNotify : ConfigUpdateNotify
{
    // Update type
    core.UpdateType UpdateType;
    // Time zone previous value
    core.Timezone Previous;
    // Time zone current value
    core.Timezone Current;
}

// Currency group get request
[request]
[response(CurrencyGroupGetResponse)]
[reject(*core.Reject)]
message CurrencyGroupGetRequest : core.Request
{
    // Currency group Id
    uuid? CurrencyGroupId;
    // Currency group name
    string? CurrencyGroupName;
}

// Currency group get response
message CurrencyGroupGetResponse : core.Response
{
    // Currency group
    core.CurrencyGroup CurrencyGroup;
}

// Currency groups get all request
[request]
[response(CurrencyGroupsGetAllResponse)]
[reject(*core.Reject)]
message CurrencyGroupsGetAllRequest : core.Request
{
}

// Currency groups get all response
message CurrencyGroupsGetAllResponse : core.Response
{
    // Currency groups
    core.CurrencyGroup[] CurrencyGroups;
}

// Currency group update notification
message CurrencyGroupUpdateNotify : ConfigUpdateNotify
{
    // Update type
    core.UpdateType UpdateType;
    // Currency group previous value
    core.CurrencyGroup Previous;
    // Currency group current value
    core.CurrencyGroup Current;
}

// Currency get request
[request]
[response(CurrencyGetResponse)]
[reject(*core.Reject)]
message CurrencyGetRequest : core.Request
{
    // Currency Id
    uuid? CurrencyId;
    // Currency name
    string? CurrencyName;
}

// Currency get response
message CurrencyGetResponse : core.Response
{
    // Currency
    core.Currency Currency;
}

// Currencies get all request
[request]
[response(CurrenciesGetAllResponse)]
[reject(*core.Reject)]
message CurrenciesGetAllRequest : core.Request
{
}

// Currencies get all response
message CurrenciesGetAllResponse : core.Response
{
    // Currencies
    core.Currency[] Currencies;
}

// Currency update notification
message CurrencyUpdateNotify : ConfigUpdateNotify
{
    // Update type
    core.UpdateType UpdateType;
    // Currency previous value
    core.Currency Previous;
    // Currency current value
    core.Currency Current;
}

// Symbol get request
[request]
[response(SymbolGetResponse)]
[reject(*core.Reject)]
message SymbolGetRequest : core.Request
{
    // Symbol Id
    uuid? SymbolId;
    // Symbol name
    string? SymbolName;
}

// Symbol get response
message SymbolGetResponse : core.Response
{
    // Symbol
    core.Symbol Symbol;
}

// Symbols get all request
[request]
[response(SymbolsGetAllResponse)]
[reject(*core.Reject)]
message SymbolsGetAllRequest : core.Request
{
}

// Symbols get all response
message SymbolsGetAllResponse : core.Response
{
    // Symbols
    core.Symbol[] Symbols;
}

// Symbol update notification
message SymbolUpdateNotify : ConfigUpdateNotify
{
    // Update type
    core.UpdateType UpdateType;
    // Symbol previous value
    core.Symbol Previous;
    // Symbol current value
    core.Symbol Current;
}

// Platform get request
[request]
[response(PlatformGetResponse)]
[reject(*core.Reject)]
message PlatformGetRequest : core.Request
{
    // Platform Id
    uuid? PlatformId;
    // Platform name
    string? PlatformName;
}

// Platform get response
message PlatformGetResponse : core.Response
{
    // Platform
    core.Platform Platform;
}

// Platform get all request
[request]
[response(PlatformsGetAllResponse)]
[reject(*core.Reject)]
message PlatformsGetAllRequest : core.Request
{
}

// Platform get all response
message PlatformsGetAllResponse : core.Response
{
    // Platforms
    core.Platform[] Platforms;
}

// Platform update notification
message PlatformUpdateNotify : ConfigUpdateNotify
{
    // Update type
    core.UpdateType UpdateType;
    // Platform previous value
    core.Platform Previous;
    // Platform current value
    core.Platform Current;
}

// Account update notification
message AccountUpdateNotify : StorageUpdateNotify
{
    // Update type
    core.UpdateType UpdateType;
    // Account previous value
    core.Account Previous;
    // Account current value
    core.Account Current;
}
