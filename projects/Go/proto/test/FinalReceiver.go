// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// Version: 1.3.0.0

package test

import "errors"
import "../fbe"
import "../proto"

// Workaround for Go unused imports issue
var _ = fbe.Version
var _ = proto.Version

// Fast Binary Encoding test final receiver
type FinalReceiver struct {
    *fbe.Receiver
    protoReceiver *proto.FinalReceiver
    structSimpleValue *StructSimple
    structSimpleModel *StructSimpleFinalModel
    structOptionalValue *StructOptional
    structOptionalModel *StructOptionalFinalModel
    structNestedValue *StructNested
    structNestedModel *StructNestedFinalModel
    structBytesValue *StructBytes
    structBytesModel *StructBytesFinalModel
    structArrayValue *StructArray
    structArrayModel *StructArrayFinalModel
    structVectorValue *StructVector
    structVectorModel *StructVectorFinalModel
    structListValue *StructList
    structListModel *StructListFinalModel
    structSetValue *StructSet
    structSetModel *StructSetFinalModel
    structMapValue *StructMap
    structMapModel *StructMapFinalModel
    structHashValue *StructHash
    structHashModel *StructHashFinalModel
    structHashExValue *StructHashEx
    structHashExModel *StructHashExFinalModel
    structEmptyValue *StructEmpty
    structEmptyModel *StructEmptyFinalModel

    // Receive StructSimple handler
    HandlerOnReceiveStructSimple OnReceiveStructSimple
    // Receive StructOptional handler
    HandlerOnReceiveStructOptional OnReceiveStructOptional
    // Receive StructNested handler
    HandlerOnReceiveStructNested OnReceiveStructNested
    // Receive StructBytes handler
    HandlerOnReceiveStructBytes OnReceiveStructBytes
    // Receive StructArray handler
    HandlerOnReceiveStructArray OnReceiveStructArray
    // Receive StructVector handler
    HandlerOnReceiveStructVector OnReceiveStructVector
    // Receive StructList handler
    HandlerOnReceiveStructList OnReceiveStructList
    // Receive StructSet handler
    HandlerOnReceiveStructSet OnReceiveStructSet
    // Receive StructMap handler
    HandlerOnReceiveStructMap OnReceiveStructMap
    // Receive StructHash handler
    HandlerOnReceiveStructHash OnReceiveStructHash
    // Receive StructHashEx handler
    HandlerOnReceiveStructHashEx OnReceiveStructHashEx
    // Receive StructEmpty handler
    HandlerOnReceiveStructEmpty OnReceiveStructEmpty
}

// Create a new test final receiver with an empty buffer
func NewFinalReceiver() *FinalReceiver {
    return NewFinalReceiverWithBuffer(fbe.NewEmptyBuffer())
}

// Create a new test final receiver with the given buffer
func NewFinalReceiverWithBuffer(buffer *fbe.Buffer) *FinalReceiver {
    receiver := &FinalReceiver{
        fbe.NewReceiver(buffer, true),
        proto.NewFinalReceiverWithBuffer(buffer),
        NewStructSimple(),
        NewStructSimpleFinalModel(buffer),
        NewStructOptional(),
        NewStructOptionalFinalModel(buffer),
        NewStructNested(),
        NewStructNestedFinalModel(buffer),
        NewStructBytes(),
        NewStructBytesFinalModel(buffer),
        NewStructArray(),
        NewStructArrayFinalModel(buffer),
        NewStructVector(),
        NewStructVectorFinalModel(buffer),
        NewStructList(),
        NewStructListFinalModel(buffer),
        NewStructSet(),
        NewStructSetFinalModel(buffer),
        NewStructMap(),
        NewStructMapFinalModel(buffer),
        NewStructHash(),
        NewStructHashFinalModel(buffer),
        NewStructHashEx(),
        NewStructHashExFinalModel(buffer),
        NewStructEmpty(),
        NewStructEmptyFinalModel(buffer),
        nil,
        nil,
        nil,
        nil,
        nil,
        nil,
        nil,
        nil,
        nil,
        nil,
        nil,
        nil,
    }
    receiver.SetupHandlerOnReceive(receiver)
    receiver.SetupHandlerOnReceiveStructSimpleFunc(func(value *StructSimple) {})
    receiver.SetupHandlerOnReceiveStructOptionalFunc(func(value *StructOptional) {})
    receiver.SetupHandlerOnReceiveStructNestedFunc(func(value *StructNested) {})
    receiver.SetupHandlerOnReceiveStructBytesFunc(func(value *StructBytes) {})
    receiver.SetupHandlerOnReceiveStructArrayFunc(func(value *StructArray) {})
    receiver.SetupHandlerOnReceiveStructVectorFunc(func(value *StructVector) {})
    receiver.SetupHandlerOnReceiveStructListFunc(func(value *StructList) {})
    receiver.SetupHandlerOnReceiveStructSetFunc(func(value *StructSet) {})
    receiver.SetupHandlerOnReceiveStructMapFunc(func(value *StructMap) {})
    receiver.SetupHandlerOnReceiveStructHashFunc(func(value *StructHash) {})
    receiver.SetupHandlerOnReceiveStructHashExFunc(func(value *StructHashEx) {})
    receiver.SetupHandlerOnReceiveStructEmptyFunc(func(value *StructEmpty) {})
    return receiver
}

// Imported receivers

// Get the proto receiver
func (r *FinalReceiver) ProtoReceiver() *proto.FinalReceiver { return r.protoReceiver }
// Set the proto receiver
func (r *FinalReceiver) SetProtoReceiver(receiver *proto.FinalReceiver) { r.protoReceiver = receiver }

// Setup handlers
func (r *FinalReceiver) SetupHandlers(handlers interface{}) {
    r.Receiver.SetupHandlers(handlers)
    r.protoReceiver.SetupHandlers(handlers)
    if handler, ok := handlers.(OnReceiveStructSimple); ok {
        r.SetupHandlerOnReceiveStructSimple(handler)
    }
    if handler, ok := handlers.(OnReceiveStructOptional); ok {
        r.SetupHandlerOnReceiveStructOptional(handler)
    }
    if handler, ok := handlers.(OnReceiveStructNested); ok {
        r.SetupHandlerOnReceiveStructNested(handler)
    }
    if handler, ok := handlers.(OnReceiveStructBytes); ok {
        r.SetupHandlerOnReceiveStructBytes(handler)
    }
    if handler, ok := handlers.(OnReceiveStructArray); ok {
        r.SetupHandlerOnReceiveStructArray(handler)
    }
    if handler, ok := handlers.(OnReceiveStructVector); ok {
        r.SetupHandlerOnReceiveStructVector(handler)
    }
    if handler, ok := handlers.(OnReceiveStructList); ok {
        r.SetupHandlerOnReceiveStructList(handler)
    }
    if handler, ok := handlers.(OnReceiveStructSet); ok {
        r.SetupHandlerOnReceiveStructSet(handler)
    }
    if handler, ok := handlers.(OnReceiveStructMap); ok {
        r.SetupHandlerOnReceiveStructMap(handler)
    }
    if handler, ok := handlers.(OnReceiveStructHash); ok {
        r.SetupHandlerOnReceiveStructHash(handler)
    }
    if handler, ok := handlers.(OnReceiveStructHashEx); ok {
        r.SetupHandlerOnReceiveStructHashEx(handler)
    }
    if handler, ok := handlers.(OnReceiveStructEmpty); ok {
        r.SetupHandlerOnReceiveStructEmpty(handler)
    }
}

// Setup receive StructSimple handler
func (r *FinalReceiver) SetupHandlerOnReceiveStructSimple(handler OnReceiveStructSimple) { r.HandlerOnReceiveStructSimple = handler }
// Setup receive StructSimple handler function
func (r *FinalReceiver) SetupHandlerOnReceiveStructSimpleFunc(function func(value *StructSimple)) { r.HandlerOnReceiveStructSimple = OnReceiveStructSimpleFunc(function) }
// Setup receive StructOptional handler
func (r *FinalReceiver) SetupHandlerOnReceiveStructOptional(handler OnReceiveStructOptional) { r.HandlerOnReceiveStructOptional = handler }
// Setup receive StructOptional handler function
func (r *FinalReceiver) SetupHandlerOnReceiveStructOptionalFunc(function func(value *StructOptional)) { r.HandlerOnReceiveStructOptional = OnReceiveStructOptionalFunc(function) }
// Setup receive StructNested handler
func (r *FinalReceiver) SetupHandlerOnReceiveStructNested(handler OnReceiveStructNested) { r.HandlerOnReceiveStructNested = handler }
// Setup receive StructNested handler function
func (r *FinalReceiver) SetupHandlerOnReceiveStructNestedFunc(function func(value *StructNested)) { r.HandlerOnReceiveStructNested = OnReceiveStructNestedFunc(function) }
// Setup receive StructBytes handler
func (r *FinalReceiver) SetupHandlerOnReceiveStructBytes(handler OnReceiveStructBytes) { r.HandlerOnReceiveStructBytes = handler }
// Setup receive StructBytes handler function
func (r *FinalReceiver) SetupHandlerOnReceiveStructBytesFunc(function func(value *StructBytes)) { r.HandlerOnReceiveStructBytes = OnReceiveStructBytesFunc(function) }
// Setup receive StructArray handler
func (r *FinalReceiver) SetupHandlerOnReceiveStructArray(handler OnReceiveStructArray) { r.HandlerOnReceiveStructArray = handler }
// Setup receive StructArray handler function
func (r *FinalReceiver) SetupHandlerOnReceiveStructArrayFunc(function func(value *StructArray)) { r.HandlerOnReceiveStructArray = OnReceiveStructArrayFunc(function) }
// Setup receive StructVector handler
func (r *FinalReceiver) SetupHandlerOnReceiveStructVector(handler OnReceiveStructVector) { r.HandlerOnReceiveStructVector = handler }
// Setup receive StructVector handler function
func (r *FinalReceiver) SetupHandlerOnReceiveStructVectorFunc(function func(value *StructVector)) { r.HandlerOnReceiveStructVector = OnReceiveStructVectorFunc(function) }
// Setup receive StructList handler
func (r *FinalReceiver) SetupHandlerOnReceiveStructList(handler OnReceiveStructList) { r.HandlerOnReceiveStructList = handler }
// Setup receive StructList handler function
func (r *FinalReceiver) SetupHandlerOnReceiveStructListFunc(function func(value *StructList)) { r.HandlerOnReceiveStructList = OnReceiveStructListFunc(function) }
// Setup receive StructSet handler
func (r *FinalReceiver) SetupHandlerOnReceiveStructSet(handler OnReceiveStructSet) { r.HandlerOnReceiveStructSet = handler }
// Setup receive StructSet handler function
func (r *FinalReceiver) SetupHandlerOnReceiveStructSetFunc(function func(value *StructSet)) { r.HandlerOnReceiveStructSet = OnReceiveStructSetFunc(function) }
// Setup receive StructMap handler
func (r *FinalReceiver) SetupHandlerOnReceiveStructMap(handler OnReceiveStructMap) { r.HandlerOnReceiveStructMap = handler }
// Setup receive StructMap handler function
func (r *FinalReceiver) SetupHandlerOnReceiveStructMapFunc(function func(value *StructMap)) { r.HandlerOnReceiveStructMap = OnReceiveStructMapFunc(function) }
// Setup receive StructHash handler
func (r *FinalReceiver) SetupHandlerOnReceiveStructHash(handler OnReceiveStructHash) { r.HandlerOnReceiveStructHash = handler }
// Setup receive StructHash handler function
func (r *FinalReceiver) SetupHandlerOnReceiveStructHashFunc(function func(value *StructHash)) { r.HandlerOnReceiveStructHash = OnReceiveStructHashFunc(function) }
// Setup receive StructHashEx handler
func (r *FinalReceiver) SetupHandlerOnReceiveStructHashEx(handler OnReceiveStructHashEx) { r.HandlerOnReceiveStructHashEx = handler }
// Setup receive StructHashEx handler function
func (r *FinalReceiver) SetupHandlerOnReceiveStructHashExFunc(function func(value *StructHashEx)) { r.HandlerOnReceiveStructHashEx = OnReceiveStructHashExFunc(function) }
// Setup receive StructEmpty handler
func (r *FinalReceiver) SetupHandlerOnReceiveStructEmpty(handler OnReceiveStructEmpty) { r.HandlerOnReceiveStructEmpty = handler }
// Setup receive StructEmpty handler function
func (r *FinalReceiver) SetupHandlerOnReceiveStructEmptyFunc(function func(value *StructEmpty)) { r.HandlerOnReceiveStructEmpty = OnReceiveStructEmptyFunc(function) }

// Receive message handler
func (r *FinalReceiver) OnReceive(fbeType int, buffer []byte) (bool, error) {
    switch fbeType {
    case r.structSimpleModel.FBEType():
        // Deserialize the value from the FBE stream
        r.structSimpleModel.Buffer().Attach(buffer)
        if !r.structSimpleModel.Verify() {
            return false, errors.New("test.StructSimple validation failed")
        }
        deserialized, err := r.structSimpleModel.DeserializeValue(r.structSimpleValue)
        if deserialized <= 0 {
            return false, errors.New("test.StructSimple deserialization failed")
        }
        if err != nil {
            return false, err
        }

        // Log the value
        if r.Logging() {
            message := r.structSimpleValue.String()
            r.HandlerOnReceiveLog.OnReceiveLog(message)
        }

        // Call receive handler with deserialized value
        r.HandlerOnReceiveStructSimple.OnReceiveStructSimple(r.structSimpleValue)
        return true, nil
    case r.structOptionalModel.FBEType():
        // Deserialize the value from the FBE stream
        r.structOptionalModel.Buffer().Attach(buffer)
        if !r.structOptionalModel.Verify() {
            return false, errors.New("test.StructOptional validation failed")
        }
        deserialized, err := r.structOptionalModel.DeserializeValue(r.structOptionalValue)
        if deserialized <= 0 {
            return false, errors.New("test.StructOptional deserialization failed")
        }
        if err != nil {
            return false, err
        }

        // Log the value
        if r.Logging() {
            message := r.structOptionalValue.String()
            r.HandlerOnReceiveLog.OnReceiveLog(message)
        }

        // Call receive handler with deserialized value
        r.HandlerOnReceiveStructOptional.OnReceiveStructOptional(r.structOptionalValue)
        return true, nil
    case r.structNestedModel.FBEType():
        // Deserialize the value from the FBE stream
        r.structNestedModel.Buffer().Attach(buffer)
        if !r.structNestedModel.Verify() {
            return false, errors.New("test.StructNested validation failed")
        }
        deserialized, err := r.structNestedModel.DeserializeValue(r.structNestedValue)
        if deserialized <= 0 {
            return false, errors.New("test.StructNested deserialization failed")
        }
        if err != nil {
            return false, err
        }

        // Log the value
        if r.Logging() {
            message := r.structNestedValue.String()
            r.HandlerOnReceiveLog.OnReceiveLog(message)
        }

        // Call receive handler with deserialized value
        r.HandlerOnReceiveStructNested.OnReceiveStructNested(r.structNestedValue)
        return true, nil
    case r.structBytesModel.FBEType():
        // Deserialize the value from the FBE stream
        r.structBytesModel.Buffer().Attach(buffer)
        if !r.structBytesModel.Verify() {
            return false, errors.New("test.StructBytes validation failed")
        }
        deserialized, err := r.structBytesModel.DeserializeValue(r.structBytesValue)
        if deserialized <= 0 {
            return false, errors.New("test.StructBytes deserialization failed")
        }
        if err != nil {
            return false, err
        }

        // Log the value
        if r.Logging() {
            message := r.structBytesValue.String()
            r.HandlerOnReceiveLog.OnReceiveLog(message)
        }

        // Call receive handler with deserialized value
        r.HandlerOnReceiveStructBytes.OnReceiveStructBytes(r.structBytesValue)
        return true, nil
    case r.structArrayModel.FBEType():
        // Deserialize the value from the FBE stream
        r.structArrayModel.Buffer().Attach(buffer)
        if !r.structArrayModel.Verify() {
            return false, errors.New("test.StructArray validation failed")
        }
        deserialized, err := r.structArrayModel.DeserializeValue(r.structArrayValue)
        if deserialized <= 0 {
            return false, errors.New("test.StructArray deserialization failed")
        }
        if err != nil {
            return false, err
        }

        // Log the value
        if r.Logging() {
            message := r.structArrayValue.String()
            r.HandlerOnReceiveLog.OnReceiveLog(message)
        }

        // Call receive handler with deserialized value
        r.HandlerOnReceiveStructArray.OnReceiveStructArray(r.structArrayValue)
        return true, nil
    case r.structVectorModel.FBEType():
        // Deserialize the value from the FBE stream
        r.structVectorModel.Buffer().Attach(buffer)
        if !r.structVectorModel.Verify() {
            return false, errors.New("test.StructVector validation failed")
        }
        deserialized, err := r.structVectorModel.DeserializeValue(r.structVectorValue)
        if deserialized <= 0 {
            return false, errors.New("test.StructVector deserialization failed")
        }
        if err != nil {
            return false, err
        }

        // Log the value
        if r.Logging() {
            message := r.structVectorValue.String()
            r.HandlerOnReceiveLog.OnReceiveLog(message)
        }

        // Call receive handler with deserialized value
        r.HandlerOnReceiveStructVector.OnReceiveStructVector(r.structVectorValue)
        return true, nil
    case r.structListModel.FBEType():
        // Deserialize the value from the FBE stream
        r.structListModel.Buffer().Attach(buffer)
        if !r.structListModel.Verify() {
            return false, errors.New("test.StructList validation failed")
        }
        deserialized, err := r.structListModel.DeserializeValue(r.structListValue)
        if deserialized <= 0 {
            return false, errors.New("test.StructList deserialization failed")
        }
        if err != nil {
            return false, err
        }

        // Log the value
        if r.Logging() {
            message := r.structListValue.String()
            r.HandlerOnReceiveLog.OnReceiveLog(message)
        }

        // Call receive handler with deserialized value
        r.HandlerOnReceiveStructList.OnReceiveStructList(r.structListValue)
        return true, nil
    case r.structSetModel.FBEType():
        // Deserialize the value from the FBE stream
        r.structSetModel.Buffer().Attach(buffer)
        if !r.structSetModel.Verify() {
            return false, errors.New("test.StructSet validation failed")
        }
        deserialized, err := r.structSetModel.DeserializeValue(r.structSetValue)
        if deserialized <= 0 {
            return false, errors.New("test.StructSet deserialization failed")
        }
        if err != nil {
            return false, err
        }

        // Log the value
        if r.Logging() {
            message := r.structSetValue.String()
            r.HandlerOnReceiveLog.OnReceiveLog(message)
        }

        // Call receive handler with deserialized value
        r.HandlerOnReceiveStructSet.OnReceiveStructSet(r.structSetValue)
        return true, nil
    case r.structMapModel.FBEType():
        // Deserialize the value from the FBE stream
        r.structMapModel.Buffer().Attach(buffer)
        if !r.structMapModel.Verify() {
            return false, errors.New("test.StructMap validation failed")
        }
        deserialized, err := r.structMapModel.DeserializeValue(r.structMapValue)
        if deserialized <= 0 {
            return false, errors.New("test.StructMap deserialization failed")
        }
        if err != nil {
            return false, err
        }

        // Log the value
        if r.Logging() {
            message := r.structMapValue.String()
            r.HandlerOnReceiveLog.OnReceiveLog(message)
        }

        // Call receive handler with deserialized value
        r.HandlerOnReceiveStructMap.OnReceiveStructMap(r.structMapValue)
        return true, nil
    case r.structHashModel.FBEType():
        // Deserialize the value from the FBE stream
        r.structHashModel.Buffer().Attach(buffer)
        if !r.structHashModel.Verify() {
            return false, errors.New("test.StructHash validation failed")
        }
        deserialized, err := r.structHashModel.DeserializeValue(r.structHashValue)
        if deserialized <= 0 {
            return false, errors.New("test.StructHash deserialization failed")
        }
        if err != nil {
            return false, err
        }

        // Log the value
        if r.Logging() {
            message := r.structHashValue.String()
            r.HandlerOnReceiveLog.OnReceiveLog(message)
        }

        // Call receive handler with deserialized value
        r.HandlerOnReceiveStructHash.OnReceiveStructHash(r.structHashValue)
        return true, nil
    case r.structHashExModel.FBEType():
        // Deserialize the value from the FBE stream
        r.structHashExModel.Buffer().Attach(buffer)
        if !r.structHashExModel.Verify() {
            return false, errors.New("test.StructHashEx validation failed")
        }
        deserialized, err := r.structHashExModel.DeserializeValue(r.structHashExValue)
        if deserialized <= 0 {
            return false, errors.New("test.StructHashEx deserialization failed")
        }
        if err != nil {
            return false, err
        }

        // Log the value
        if r.Logging() {
            message := r.structHashExValue.String()
            r.HandlerOnReceiveLog.OnReceiveLog(message)
        }

        // Call receive handler with deserialized value
        r.HandlerOnReceiveStructHashEx.OnReceiveStructHashEx(r.structHashExValue)
        return true, nil
    case r.structEmptyModel.FBEType():
        // Deserialize the value from the FBE stream
        r.structEmptyModel.Buffer().Attach(buffer)
        if !r.structEmptyModel.Verify() {
            return false, errors.New("test.StructEmpty validation failed")
        }
        deserialized, err := r.structEmptyModel.DeserializeValue(r.structEmptyValue)
        if deserialized <= 0 {
            return false, errors.New("test.StructEmpty deserialization failed")
        }
        if err != nil {
            return false, err
        }

        // Log the value
        if r.Logging() {
            message := r.structEmptyValue.String()
            r.HandlerOnReceiveLog.OnReceiveLog(message)
        }

        // Call receive handler with deserialized value
        r.HandlerOnReceiveStructEmpty.OnReceiveStructEmpty(r.structEmptyValue)
        return true, nil
    }

    if r.protoReceiver != nil {
        if ok, err := r.protoReceiver.OnReceive(fbeType, buffer); ok {
            return ok, err
        }
    }

    return false, nil
}
