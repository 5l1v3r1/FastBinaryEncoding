// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// Version: 1.1.0.0

package test

import "strings"
import "encoding/json"

type FlagsTyped uint64

//noinspection GoSnakeCaseUsage
const (
    FlagsTyped_FLAG_VALUE_0 = FlagsTyped(0x00)
    FlagsTyped_FLAG_VALUE_1 = FlagsTyped(0x01)
    FlagsTyped_FLAG_VALUE_2 = FlagsTyped(0x02)
    FlagsTyped_FLAG_VALUE_3 = FlagsTyped(0x04)
    FlagsTyped_FLAG_VALUE_4 = FlagsTyped(0x08)
    FlagsTyped_FLAG_VALUE_5 = FlagsTyped(0x10)
    FlagsTyped_FLAG_VALUE_6 = FlagsTyped(0x20)
    FlagsTyped_FLAG_VALUE_7 = FlagsTyped(0x40)
    FlagsTyped_FLAG_VALUE_8 = FlagsTyped(FlagsTyped_FLAG_VALUE_7)
    FlagsTyped_FLAG_VALUE_9 = FlagsTyped(FlagsTyped_FLAG_VALUE_2 | FlagsTyped_FLAG_VALUE_4 | FlagsTyped_FLAG_VALUE_6)
)

//noinspection GoBoolExpressions
func (f FlagsTyped) String() string {
    var sb strings.Builder
    first := true
    if ((f & FlagsTyped_FLAG_VALUE_0) != 0) && ((f & FlagsTyped_FLAG_VALUE_0) == FlagsTyped_FLAG_VALUE_0) {
        if first {
            first = false
        } else {
            sb.WriteRune('|')
        }
        sb.WriteString("FLAG_VALUE_0")
    }
    if ((f & FlagsTyped_FLAG_VALUE_1) != 0) && ((f & FlagsTyped_FLAG_VALUE_1) == FlagsTyped_FLAG_VALUE_1) {
        if first {
            first = false
        } else {
            sb.WriteRune('|')
        }
        sb.WriteString("FLAG_VALUE_1")
    }
    if ((f & FlagsTyped_FLAG_VALUE_2) != 0) && ((f & FlagsTyped_FLAG_VALUE_2) == FlagsTyped_FLAG_VALUE_2) {
        if first {
            first = false
        } else {
            sb.WriteRune('|')
        }
        sb.WriteString("FLAG_VALUE_2")
    }
    if ((f & FlagsTyped_FLAG_VALUE_3) != 0) && ((f & FlagsTyped_FLAG_VALUE_3) == FlagsTyped_FLAG_VALUE_3) {
        if first {
            first = false
        } else {
            sb.WriteRune('|')
        }
        sb.WriteString("FLAG_VALUE_3")
    }
    if ((f & FlagsTyped_FLAG_VALUE_4) != 0) && ((f & FlagsTyped_FLAG_VALUE_4) == FlagsTyped_FLAG_VALUE_4) {
        if first {
            first = false
        } else {
            sb.WriteRune('|')
        }
        sb.WriteString("FLAG_VALUE_4")
    }
    if ((f & FlagsTyped_FLAG_VALUE_5) != 0) && ((f & FlagsTyped_FLAG_VALUE_5) == FlagsTyped_FLAG_VALUE_5) {
        if first {
            first = false
        } else {
            sb.WriteRune('|')
        }
        sb.WriteString("FLAG_VALUE_5")
    }
    if ((f & FlagsTyped_FLAG_VALUE_6) != 0) && ((f & FlagsTyped_FLAG_VALUE_6) == FlagsTyped_FLAG_VALUE_6) {
        if first {
            first = false
        } else {
            sb.WriteRune('|')
        }
        sb.WriteString("FLAG_VALUE_6")
    }
    if ((f & FlagsTyped_FLAG_VALUE_7) != 0) && ((f & FlagsTyped_FLAG_VALUE_7) == FlagsTyped_FLAG_VALUE_7) {
        if first {
            first = false
        } else {
            sb.WriteRune('|')
        }
        sb.WriteString("FLAG_VALUE_7")
    }
    if ((f & FlagsTyped_FLAG_VALUE_8) != 0) && ((f & FlagsTyped_FLAG_VALUE_8) == FlagsTyped_FLAG_VALUE_8) {
        if first {
            first = false
        } else {
            sb.WriteRune('|')
        }
        sb.WriteString("FLAG_VALUE_8")
    }
    if ((f & FlagsTyped_FLAG_VALUE_9) != 0) && ((f & FlagsTyped_FLAG_VALUE_9) == FlagsTyped_FLAG_VALUE_9) {
        if first {
            first = false
        } else {
            sb.WriteRune('|')
        }
        sb.WriteString("FLAG_VALUE_9")
    }
    return sb.String()
}

func (f FlagsTyped) MarshalJSON() ([]byte, error) {
    return json.Marshal(uint64(f))
}

func (f *FlagsTyped) UnmarshalJSON(b []byte) error {
    var value uint64
    err := json.Unmarshal(b, &value)
    if err != nil {
        return err
    }
    *f = FlagsTyped(value)
    return nil
}
