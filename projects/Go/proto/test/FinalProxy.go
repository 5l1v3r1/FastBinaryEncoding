// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// Version: 1.2.0.0

package test

import "errors"
import "../fbe"
import "../proto"

// Workaround for Go unused imports issue
var _ = fbe.Version
var _ = proto.Version

// Proxy StructSimple interface
type OnProxyFinalStructSimple interface {
    OnProxyStructSimple(model *StructSimpleFinalModel, fbeType int, buffer []byte)
}

// Proxy StructSimple function
type OnProxyFinalStructSimpleFunc func(model *StructSimpleFinalModel, fbeType int, buffer []byte)
func (f OnProxyFinalStructSimpleFunc) OnProxyStructSimple(model *StructSimpleFinalModel, fbeType int, buffer []byte) {
    f(model, fbeType, buffer)
}

// Proxy StructOptional interface
type OnProxyFinalStructOptional interface {
    OnProxyStructOptional(model *StructOptionalFinalModel, fbeType int, buffer []byte)
}

// Proxy StructOptional function
type OnProxyFinalStructOptionalFunc func(model *StructOptionalFinalModel, fbeType int, buffer []byte)
func (f OnProxyFinalStructOptionalFunc) OnProxyStructOptional(model *StructOptionalFinalModel, fbeType int, buffer []byte) {
    f(model, fbeType, buffer)
}

// Proxy StructNested interface
type OnProxyFinalStructNested interface {
    OnProxyStructNested(model *StructNestedFinalModel, fbeType int, buffer []byte)
}

// Proxy StructNested function
type OnProxyFinalStructNestedFunc func(model *StructNestedFinalModel, fbeType int, buffer []byte)
func (f OnProxyFinalStructNestedFunc) OnProxyStructNested(model *StructNestedFinalModel, fbeType int, buffer []byte) {
    f(model, fbeType, buffer)
}

// Proxy StructBytes interface
type OnProxyFinalStructBytes interface {
    OnProxyStructBytes(model *StructBytesFinalModel, fbeType int, buffer []byte)
}

// Proxy StructBytes function
type OnProxyFinalStructBytesFunc func(model *StructBytesFinalModel, fbeType int, buffer []byte)
func (f OnProxyFinalStructBytesFunc) OnProxyStructBytes(model *StructBytesFinalModel, fbeType int, buffer []byte) {
    f(model, fbeType, buffer)
}

// Proxy StructArray interface
type OnProxyFinalStructArray interface {
    OnProxyStructArray(model *StructArrayFinalModel, fbeType int, buffer []byte)
}

// Proxy StructArray function
type OnProxyFinalStructArrayFunc func(model *StructArrayFinalModel, fbeType int, buffer []byte)
func (f OnProxyFinalStructArrayFunc) OnProxyStructArray(model *StructArrayFinalModel, fbeType int, buffer []byte) {
    f(model, fbeType, buffer)
}

// Proxy StructVector interface
type OnProxyFinalStructVector interface {
    OnProxyStructVector(model *StructVectorFinalModel, fbeType int, buffer []byte)
}

// Proxy StructVector function
type OnProxyFinalStructVectorFunc func(model *StructVectorFinalModel, fbeType int, buffer []byte)
func (f OnProxyFinalStructVectorFunc) OnProxyStructVector(model *StructVectorFinalModel, fbeType int, buffer []byte) {
    f(model, fbeType, buffer)
}

// Proxy StructList interface
type OnProxyFinalStructList interface {
    OnProxyStructList(model *StructListFinalModel, fbeType int, buffer []byte)
}

// Proxy StructList function
type OnProxyFinalStructListFunc func(model *StructListFinalModel, fbeType int, buffer []byte)
func (f OnProxyFinalStructListFunc) OnProxyStructList(model *StructListFinalModel, fbeType int, buffer []byte) {
    f(model, fbeType, buffer)
}

// Proxy StructSet interface
type OnProxyFinalStructSet interface {
    OnProxyStructSet(model *StructSetFinalModel, fbeType int, buffer []byte)
}

// Proxy StructSet function
type OnProxyFinalStructSetFunc func(model *StructSetFinalModel, fbeType int, buffer []byte)
func (f OnProxyFinalStructSetFunc) OnProxyStructSet(model *StructSetFinalModel, fbeType int, buffer []byte) {
    f(model, fbeType, buffer)
}

// Proxy StructMap interface
type OnProxyFinalStructMap interface {
    OnProxyStructMap(model *StructMapFinalModel, fbeType int, buffer []byte)
}

// Proxy StructMap function
type OnProxyFinalStructMapFunc func(model *StructMapFinalModel, fbeType int, buffer []byte)
func (f OnProxyFinalStructMapFunc) OnProxyStructMap(model *StructMapFinalModel, fbeType int, buffer []byte) {
    f(model, fbeType, buffer)
}

// Proxy StructHash interface
type OnProxyFinalStructHash interface {
    OnProxyStructHash(model *StructHashFinalModel, fbeType int, buffer []byte)
}

// Proxy StructHash function
type OnProxyFinalStructHashFunc func(model *StructHashFinalModel, fbeType int, buffer []byte)
func (f OnProxyFinalStructHashFunc) OnProxyStructHash(model *StructHashFinalModel, fbeType int, buffer []byte) {
    f(model, fbeType, buffer)
}

// Proxy StructHashEx interface
type OnProxyFinalStructHashEx interface {
    OnProxyStructHashEx(model *StructHashExFinalModel, fbeType int, buffer []byte)
}

// Proxy StructHashEx function
type OnProxyFinalStructHashExFunc func(model *StructHashExFinalModel, fbeType int, buffer []byte)
func (f OnProxyFinalStructHashExFunc) OnProxyStructHashEx(model *StructHashExFinalModel, fbeType int, buffer []byte) {
    f(model, fbeType, buffer)
}

// Proxy StructEmpty interface
type OnProxyFinalStructEmpty interface {
    OnProxyStructEmpty(model *StructEmptyFinalModel, fbeType int, buffer []byte)
}

// Proxy StructEmpty function
type OnProxyFinalStructEmptyFunc func(model *StructEmptyFinalModel, fbeType int, buffer []byte)
func (f OnProxyFinalStructEmptyFunc) OnProxyStructEmpty(model *StructEmptyFinalModel, fbeType int, buffer []byte) {
    f(model, fbeType, buffer)
}

// Fast Binary Encoding test final proxy
type FinalProxy struct {
    *fbe.Receiver
    protoProxy *proto.FinalProxy
    structSimpleModel *StructSimpleFinalModel
    structOptionalModel *StructOptionalFinalModel
    structNestedModel *StructNestedFinalModel
    structBytesModel *StructBytesFinalModel
    structArrayModel *StructArrayFinalModel
    structVectorModel *StructVectorFinalModel
    structListModel *StructListFinalModel
    structSetModel *StructSetFinalModel
    structMapModel *StructMapFinalModel
    structHashModel *StructHashFinalModel
    structHashExModel *StructHashExFinalModel
    structEmptyModel *StructEmptyFinalModel

    // Proxy StructSimple handler
    HandlerOnProxyStructSimple OnProxyFinalStructSimple
    // Proxy StructOptional handler
    HandlerOnProxyStructOptional OnProxyFinalStructOptional
    // Proxy StructNested handler
    HandlerOnProxyStructNested OnProxyFinalStructNested
    // Proxy StructBytes handler
    HandlerOnProxyStructBytes OnProxyFinalStructBytes
    // Proxy StructArray handler
    HandlerOnProxyStructArray OnProxyFinalStructArray
    // Proxy StructVector handler
    HandlerOnProxyStructVector OnProxyFinalStructVector
    // Proxy StructList handler
    HandlerOnProxyStructList OnProxyFinalStructList
    // Proxy StructSet handler
    HandlerOnProxyStructSet OnProxyFinalStructSet
    // Proxy StructMap handler
    HandlerOnProxyStructMap OnProxyFinalStructMap
    // Proxy StructHash handler
    HandlerOnProxyStructHash OnProxyFinalStructHash
    // Proxy StructHashEx handler
    HandlerOnProxyStructHashEx OnProxyFinalStructHashEx
    // Proxy StructEmpty handler
    HandlerOnProxyStructEmpty OnProxyFinalStructEmpty
}

// Create a new test final proxy with an empty buffer
func NewFinalProxy() *FinalProxy {
    return NewFinalProxyWithBuffer(fbe.NewEmptyBuffer())
}

// Create a new test final proxy with the given buffer
func NewFinalProxyWithBuffer(buffer *fbe.Buffer) *FinalProxy {
    proxy := &FinalProxy{
        fbe.NewReceiver(buffer, true),
        proto.NewFinalProxyWithBuffer(buffer),
        NewStructSimpleFinalModel(buffer),
        NewStructOptionalFinalModel(buffer),
        NewStructNestedFinalModel(buffer),
        NewStructBytesFinalModel(buffer),
        NewStructArrayFinalModel(buffer),
        NewStructVectorFinalModel(buffer),
        NewStructListFinalModel(buffer),
        NewStructSetFinalModel(buffer),
        NewStructMapFinalModel(buffer),
        NewStructHashFinalModel(buffer),
        NewStructHashExFinalModel(buffer),
        NewStructEmptyFinalModel(buffer),
        nil,
        nil,
        nil,
        nil,
        nil,
        nil,
        nil,
        nil,
        nil,
        nil,
        nil,
        nil,
    }
    proxy.SetupHandlerOnReceive(proxy)
    proxy.SetupHandlerOnProxyStructSimpleFunc(func(model *StructSimpleFinalModel, fbeType int, buffer []byte) {})
    proxy.SetupHandlerOnProxyStructOptionalFunc(func(model *StructOptionalFinalModel, fbeType int, buffer []byte) {})
    proxy.SetupHandlerOnProxyStructNestedFunc(func(model *StructNestedFinalModel, fbeType int, buffer []byte) {})
    proxy.SetupHandlerOnProxyStructBytesFunc(func(model *StructBytesFinalModel, fbeType int, buffer []byte) {})
    proxy.SetupHandlerOnProxyStructArrayFunc(func(model *StructArrayFinalModel, fbeType int, buffer []byte) {})
    proxy.SetupHandlerOnProxyStructVectorFunc(func(model *StructVectorFinalModel, fbeType int, buffer []byte) {})
    proxy.SetupHandlerOnProxyStructListFunc(func(model *StructListFinalModel, fbeType int, buffer []byte) {})
    proxy.SetupHandlerOnProxyStructSetFunc(func(model *StructSetFinalModel, fbeType int, buffer []byte) {})
    proxy.SetupHandlerOnProxyStructMapFunc(func(model *StructMapFinalModel, fbeType int, buffer []byte) {})
    proxy.SetupHandlerOnProxyStructHashFunc(func(model *StructHashFinalModel, fbeType int, buffer []byte) {})
    proxy.SetupHandlerOnProxyStructHashExFunc(func(model *StructHashExFinalModel, fbeType int, buffer []byte) {})
    proxy.SetupHandlerOnProxyStructEmptyFunc(func(model *StructEmptyFinalModel, fbeType int, buffer []byte) {})
    return proxy
}

// Imported proxy

// Get the proto proxy
func (p *FinalProxy) ProtoProxy() *proto.FinalProxy { return p.protoProxy }
// Set the proto proxy
func (p *FinalProxy) SetProtoProxy(proxy *proto.FinalProxy) { p.protoProxy = proxy }

// Setup handlers
func (p *FinalProxy) SetupHandlers(handlers interface{}) {
    p.Receiver.SetupHandlers(handlers)
    p.protoProxy.SetupHandlers(handlers)
    if handler, ok := handlers.(OnProxyFinalStructSimple); ok {
        p.SetupHandlerOnProxyStructSimple(handler)
    }
    if handler, ok := handlers.(OnProxyFinalStructOptional); ok {
        p.SetupHandlerOnProxyStructOptional(handler)
    }
    if handler, ok := handlers.(OnProxyFinalStructNested); ok {
        p.SetupHandlerOnProxyStructNested(handler)
    }
    if handler, ok := handlers.(OnProxyFinalStructBytes); ok {
        p.SetupHandlerOnProxyStructBytes(handler)
    }
    if handler, ok := handlers.(OnProxyFinalStructArray); ok {
        p.SetupHandlerOnProxyStructArray(handler)
    }
    if handler, ok := handlers.(OnProxyFinalStructVector); ok {
        p.SetupHandlerOnProxyStructVector(handler)
    }
    if handler, ok := handlers.(OnProxyFinalStructList); ok {
        p.SetupHandlerOnProxyStructList(handler)
    }
    if handler, ok := handlers.(OnProxyFinalStructSet); ok {
        p.SetupHandlerOnProxyStructSet(handler)
    }
    if handler, ok := handlers.(OnProxyFinalStructMap); ok {
        p.SetupHandlerOnProxyStructMap(handler)
    }
    if handler, ok := handlers.(OnProxyFinalStructHash); ok {
        p.SetupHandlerOnProxyStructHash(handler)
    }
    if handler, ok := handlers.(OnProxyFinalStructHashEx); ok {
        p.SetupHandlerOnProxyStructHashEx(handler)
    }
    if handler, ok := handlers.(OnProxyFinalStructEmpty); ok {
        p.SetupHandlerOnProxyStructEmpty(handler)
    }
}

// Setup proxy StructSimple handler
func (p *FinalProxy) SetupHandlerOnProxyStructSimple(handler OnProxyFinalStructSimple) { p.HandlerOnProxyStructSimple = handler }
// Setup proxy StructSimple handler function
func (p *FinalProxy) SetupHandlerOnProxyStructSimpleFunc(function func(model *StructSimpleFinalModel, fbeType int, buffer []byte)) { p.HandlerOnProxyStructSimple = OnProxyFinalStructSimpleFunc(function) }
// Setup proxy StructOptional handler
func (p *FinalProxy) SetupHandlerOnProxyStructOptional(handler OnProxyFinalStructOptional) { p.HandlerOnProxyStructOptional = handler }
// Setup proxy StructOptional handler function
func (p *FinalProxy) SetupHandlerOnProxyStructOptionalFunc(function func(model *StructOptionalFinalModel, fbeType int, buffer []byte)) { p.HandlerOnProxyStructOptional = OnProxyFinalStructOptionalFunc(function) }
// Setup proxy StructNested handler
func (p *FinalProxy) SetupHandlerOnProxyStructNested(handler OnProxyFinalStructNested) { p.HandlerOnProxyStructNested = handler }
// Setup proxy StructNested handler function
func (p *FinalProxy) SetupHandlerOnProxyStructNestedFunc(function func(model *StructNestedFinalModel, fbeType int, buffer []byte)) { p.HandlerOnProxyStructNested = OnProxyFinalStructNestedFunc(function) }
// Setup proxy StructBytes handler
func (p *FinalProxy) SetupHandlerOnProxyStructBytes(handler OnProxyFinalStructBytes) { p.HandlerOnProxyStructBytes = handler }
// Setup proxy StructBytes handler function
func (p *FinalProxy) SetupHandlerOnProxyStructBytesFunc(function func(model *StructBytesFinalModel, fbeType int, buffer []byte)) { p.HandlerOnProxyStructBytes = OnProxyFinalStructBytesFunc(function) }
// Setup proxy StructArray handler
func (p *FinalProxy) SetupHandlerOnProxyStructArray(handler OnProxyFinalStructArray) { p.HandlerOnProxyStructArray = handler }
// Setup proxy StructArray handler function
func (p *FinalProxy) SetupHandlerOnProxyStructArrayFunc(function func(model *StructArrayFinalModel, fbeType int, buffer []byte)) { p.HandlerOnProxyStructArray = OnProxyFinalStructArrayFunc(function) }
// Setup proxy StructVector handler
func (p *FinalProxy) SetupHandlerOnProxyStructVector(handler OnProxyFinalStructVector) { p.HandlerOnProxyStructVector = handler }
// Setup proxy StructVector handler function
func (p *FinalProxy) SetupHandlerOnProxyStructVectorFunc(function func(model *StructVectorFinalModel, fbeType int, buffer []byte)) { p.HandlerOnProxyStructVector = OnProxyFinalStructVectorFunc(function) }
// Setup proxy StructList handler
func (p *FinalProxy) SetupHandlerOnProxyStructList(handler OnProxyFinalStructList) { p.HandlerOnProxyStructList = handler }
// Setup proxy StructList handler function
func (p *FinalProxy) SetupHandlerOnProxyStructListFunc(function func(model *StructListFinalModel, fbeType int, buffer []byte)) { p.HandlerOnProxyStructList = OnProxyFinalStructListFunc(function) }
// Setup proxy StructSet handler
func (p *FinalProxy) SetupHandlerOnProxyStructSet(handler OnProxyFinalStructSet) { p.HandlerOnProxyStructSet = handler }
// Setup proxy StructSet handler function
func (p *FinalProxy) SetupHandlerOnProxyStructSetFunc(function func(model *StructSetFinalModel, fbeType int, buffer []byte)) { p.HandlerOnProxyStructSet = OnProxyFinalStructSetFunc(function) }
// Setup proxy StructMap handler
func (p *FinalProxy) SetupHandlerOnProxyStructMap(handler OnProxyFinalStructMap) { p.HandlerOnProxyStructMap = handler }
// Setup proxy StructMap handler function
func (p *FinalProxy) SetupHandlerOnProxyStructMapFunc(function func(model *StructMapFinalModel, fbeType int, buffer []byte)) { p.HandlerOnProxyStructMap = OnProxyFinalStructMapFunc(function) }
// Setup proxy StructHash handler
func (p *FinalProxy) SetupHandlerOnProxyStructHash(handler OnProxyFinalStructHash) { p.HandlerOnProxyStructHash = handler }
// Setup proxy StructHash handler function
func (p *FinalProxy) SetupHandlerOnProxyStructHashFunc(function func(model *StructHashFinalModel, fbeType int, buffer []byte)) { p.HandlerOnProxyStructHash = OnProxyFinalStructHashFunc(function) }
// Setup proxy StructHashEx handler
func (p *FinalProxy) SetupHandlerOnProxyStructHashEx(handler OnProxyFinalStructHashEx) { p.HandlerOnProxyStructHashEx = handler }
// Setup proxy StructHashEx handler function
func (p *FinalProxy) SetupHandlerOnProxyStructHashExFunc(function func(model *StructHashExFinalModel, fbeType int, buffer []byte)) { p.HandlerOnProxyStructHashEx = OnProxyFinalStructHashExFunc(function) }
// Setup proxy StructEmpty handler
func (p *FinalProxy) SetupHandlerOnProxyStructEmpty(handler OnProxyFinalStructEmpty) { p.HandlerOnProxyStructEmpty = handler }
// Setup proxy StructEmpty handler function
func (p *FinalProxy) SetupHandlerOnProxyStructEmptyFunc(function func(model *StructEmptyFinalModel, fbeType int, buffer []byte)) { p.HandlerOnProxyStructEmpty = OnProxyFinalStructEmptyFunc(function) }

// Receive message handler
func (p *FinalProxy) OnReceive(fbeType int, buffer []byte) (bool, error) {
    switch fbeType {
    case p.structSimpleModel.FBEType():
        // Attach the FBE stream to the proxy model
        p.structSimpleModel.Buffer().Attach(buffer)
        if !p.structSimpleModel.Verify() {
            return false, errors.New("test.StructSimple validation failed")
        }

        // Call proxy handler
        fbeBegin, err := p.structSimpleModel.model.GetBegin()
        if fbeBegin == 0 {
            return false, err
        }
        p.HandlerOnProxyStructSimple.OnProxyStructSimple(p.structSimpleModel, fbeType, buffer)
        p.structSimpleModel.model.GetEnd(fbeBegin)
        return true, nil
    case p.structOptionalModel.FBEType():
        // Attach the FBE stream to the proxy model
        p.structOptionalModel.Buffer().Attach(buffer)
        if !p.structOptionalModel.Verify() {
            return false, errors.New("test.StructOptional validation failed")
        }

        // Call proxy handler
        fbeBegin, err := p.structOptionalModel.model.GetBegin()
        if fbeBegin == 0 {
            return false, err
        }
        p.HandlerOnProxyStructOptional.OnProxyStructOptional(p.structOptionalModel, fbeType, buffer)
        p.structOptionalModel.model.GetEnd(fbeBegin)
        return true, nil
    case p.structNestedModel.FBEType():
        // Attach the FBE stream to the proxy model
        p.structNestedModel.Buffer().Attach(buffer)
        if !p.structNestedModel.Verify() {
            return false, errors.New("test.StructNested validation failed")
        }

        // Call proxy handler
        fbeBegin, err := p.structNestedModel.model.GetBegin()
        if fbeBegin == 0 {
            return false, err
        }
        p.HandlerOnProxyStructNested.OnProxyStructNested(p.structNestedModel, fbeType, buffer)
        p.structNestedModel.model.GetEnd(fbeBegin)
        return true, nil
    case p.structBytesModel.FBEType():
        // Attach the FBE stream to the proxy model
        p.structBytesModel.Buffer().Attach(buffer)
        if !p.structBytesModel.Verify() {
            return false, errors.New("test.StructBytes validation failed")
        }

        // Call proxy handler
        fbeBegin, err := p.structBytesModel.model.GetBegin()
        if fbeBegin == 0 {
            return false, err
        }
        p.HandlerOnProxyStructBytes.OnProxyStructBytes(p.structBytesModel, fbeType, buffer)
        p.structBytesModel.model.GetEnd(fbeBegin)
        return true, nil
    case p.structArrayModel.FBEType():
        // Attach the FBE stream to the proxy model
        p.structArrayModel.Buffer().Attach(buffer)
        if !p.structArrayModel.Verify() {
            return false, errors.New("test.StructArray validation failed")
        }

        // Call proxy handler
        fbeBegin, err := p.structArrayModel.model.GetBegin()
        if fbeBegin == 0 {
            return false, err
        }
        p.HandlerOnProxyStructArray.OnProxyStructArray(p.structArrayModel, fbeType, buffer)
        p.structArrayModel.model.GetEnd(fbeBegin)
        return true, nil
    case p.structVectorModel.FBEType():
        // Attach the FBE stream to the proxy model
        p.structVectorModel.Buffer().Attach(buffer)
        if !p.structVectorModel.Verify() {
            return false, errors.New("test.StructVector validation failed")
        }

        // Call proxy handler
        fbeBegin, err := p.structVectorModel.model.GetBegin()
        if fbeBegin == 0 {
            return false, err
        }
        p.HandlerOnProxyStructVector.OnProxyStructVector(p.structVectorModel, fbeType, buffer)
        p.structVectorModel.model.GetEnd(fbeBegin)
        return true, nil
    case p.structListModel.FBEType():
        // Attach the FBE stream to the proxy model
        p.structListModel.Buffer().Attach(buffer)
        if !p.structListModel.Verify() {
            return false, errors.New("test.StructList validation failed")
        }

        // Call proxy handler
        fbeBegin, err := p.structListModel.model.GetBegin()
        if fbeBegin == 0 {
            return false, err
        }
        p.HandlerOnProxyStructList.OnProxyStructList(p.structListModel, fbeType, buffer)
        p.structListModel.model.GetEnd(fbeBegin)
        return true, nil
    case p.structSetModel.FBEType():
        // Attach the FBE stream to the proxy model
        p.structSetModel.Buffer().Attach(buffer)
        if !p.structSetModel.Verify() {
            return false, errors.New("test.StructSet validation failed")
        }

        // Call proxy handler
        fbeBegin, err := p.structSetModel.model.GetBegin()
        if fbeBegin == 0 {
            return false, err
        }
        p.HandlerOnProxyStructSet.OnProxyStructSet(p.structSetModel, fbeType, buffer)
        p.structSetModel.model.GetEnd(fbeBegin)
        return true, nil
    case p.structMapModel.FBEType():
        // Attach the FBE stream to the proxy model
        p.structMapModel.Buffer().Attach(buffer)
        if !p.structMapModel.Verify() {
            return false, errors.New("test.StructMap validation failed")
        }

        // Call proxy handler
        fbeBegin, err := p.structMapModel.model.GetBegin()
        if fbeBegin == 0 {
            return false, err
        }
        p.HandlerOnProxyStructMap.OnProxyStructMap(p.structMapModel, fbeType, buffer)
        p.structMapModel.model.GetEnd(fbeBegin)
        return true, nil
    case p.structHashModel.FBEType():
        // Attach the FBE stream to the proxy model
        p.structHashModel.Buffer().Attach(buffer)
        if !p.structHashModel.Verify() {
            return false, errors.New("test.StructHash validation failed")
        }

        // Call proxy handler
        fbeBegin, err := p.structHashModel.model.GetBegin()
        if fbeBegin == 0 {
            return false, err
        }
        p.HandlerOnProxyStructHash.OnProxyStructHash(p.structHashModel, fbeType, buffer)
        p.structHashModel.model.GetEnd(fbeBegin)
        return true, nil
    case p.structHashExModel.FBEType():
        // Attach the FBE stream to the proxy model
        p.structHashExModel.Buffer().Attach(buffer)
        if !p.structHashExModel.Verify() {
            return false, errors.New("test.StructHashEx validation failed")
        }

        // Call proxy handler
        fbeBegin, err := p.structHashExModel.model.GetBegin()
        if fbeBegin == 0 {
            return false, err
        }
        p.HandlerOnProxyStructHashEx.OnProxyStructHashEx(p.structHashExModel, fbeType, buffer)
        p.structHashExModel.model.GetEnd(fbeBegin)
        return true, nil
    case p.structEmptyModel.FBEType():
        // Attach the FBE stream to the proxy model
        p.structEmptyModel.Buffer().Attach(buffer)
        if !p.structEmptyModel.Verify() {
            return false, errors.New("test.StructEmpty validation failed")
        }

        // Call proxy handler
        fbeBegin, err := p.structEmptyModel.model.GetBegin()
        if fbeBegin == 0 {
            return false, err
        }
        p.HandlerOnProxyStructEmpty.OnProxyStructEmpty(p.structEmptyModel, fbeType, buffer)
        p.structEmptyModel.model.GetEnd(fbeBegin)
        return true, nil
    }

    if p.protoProxy != nil {
        if ok, err := p.protoProxy.OnReceive(fbeType, buffer); ok {
            return ok, err
        }
    }

    return false, nil
}
