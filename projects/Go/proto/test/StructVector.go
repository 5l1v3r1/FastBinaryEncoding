// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// Version: 1.1.0.0

package test

import "strings"
import "../fbe"
import "../proto"

// Workaround for Go unused imports issue
var _ = fbe.Version
var _ = proto.Version

// StructVector key
type StructVectorKey struct {
}

// Convert StructVector flags key to string
func (k StructVectorKey) String() string {
    var sb strings.Builder
    return sb.String()
}

// StructVector struct
type StructVector struct {
    F1 []byte `json:"f1"`
    F2 []*byte `json:"f2"`
    F3 [][]byte `json:"f3"`
    F4 []*[]byte `json:"f4"`
    F5 []EnumSimple `json:"f5"`
    F6 []*EnumSimple `json:"f6"`
    F7 []FlagsSimple `json:"f7"`
    F8 []*FlagsSimple `json:"f8"`
    F9 []StructSimple `json:"f9"`
    F10 []*StructSimple `json:"f10"`
}

// Create a new StructVector struct
func NewStructVector() *StructVector {
    return &StructVector{
        F1: make([]byte, 0),
        F2: make([]*byte, 0),
        F3: make([][]byte, 0),
        F4: make([]*[]byte, 0),
        F5: make([]EnumSimple, 0),
        F6: make([]*EnumSimple, 0),
        F7: make([]FlagsSimple, 0),
        F8: make([]*FlagsSimple, 0),
        F9: make([]StructSimple, 0),
        F10: make([]*StructSimple, 0),
    }
}

// Create a new StructVector struct from JSON
func NewStructVectorFromJSON(buffer []byte) (*StructVector, error) {
    result := *NewStructVector()
    err := fbe.Json.Unmarshal(buffer, &result)
    if err != nil {
        return nil, err
    }
    return &result, nil
}

// Struct shallow copy
func (s StructVector) Copy() *StructVector {
    var result = s
    return &result
}

// Struct deep clone
func (s StructVector) Clone() *StructVector {
    var result = s
    return &result
}

// Get the struct key
func (s StructVector) Key() StructVectorKey {
    return StructVectorKey{
    }
}

// Convert struct to optional
func (s StructVector) Optional() *StructVector {
    return &s
}

// Convert struct to string
func (s StructVector) String() string {
    var sb strings.Builder
    return sb.String()
}

// Convert struct to JSON
func (s StructVector) JSON() ([]byte, error) {
    return fbe.Json.Marshal(&s)
}
