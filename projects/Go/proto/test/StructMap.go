// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// Version: 1.1.0.0

package test

import "fmt"
import "strconv"
import "strings"
import "../fbe"
import "../proto"

// Workaround for Go unused imports issue
var _ = fbe.Version
var _ = proto.Version

// Workaround for Go unused imports issue
var _ = fmt.Print
var _ = strconv.FormatInt

// StructMap key
type StructMapKey struct {
}

// Convert StructMap flags key to string
func (k StructMapKey) String() string {
    var sb strings.Builder
    return sb.String()
}

// StructMap struct
type StructMap struct {
    F1 map[int32]byte `json:"f1"`
    F2 map[int32]*byte `json:"f2"`
    F3 map[int32][]byte `json:"f3"`
    F4 map[int32]*[]byte `json:"f4"`
    F5 map[int32]EnumSimple `json:"f5"`
    F6 map[int32]*EnumSimple `json:"f6"`
    F7 map[int32]FlagsSimple `json:"f7"`
    F8 map[int32]*FlagsSimple `json:"f8"`
    F9 map[int32]StructSimple `json:"f9"`
    F10 map[int32]*StructSimple `json:"f10"`
}

// Create a new StructMap struct
func NewStructMap() *StructMap {
    return &StructMap{
        F1: make(map[int32]byte),
        F2: make(map[int32]*byte),
        F3: make(map[int32][]byte),
        F4: make(map[int32]*[]byte),
        F5: make(map[int32]EnumSimple),
        F6: make(map[int32]*EnumSimple),
        F7: make(map[int32]FlagsSimple),
        F8: make(map[int32]*FlagsSimple),
        F9: make(map[int32]StructSimple),
        F10: make(map[int32]*StructSimple),
    }
}

// Create a new StructMap struct from JSON
func NewStructMapFromJSON(buffer []byte) (*StructMap, error) {
    result := *NewStructMap()
    err := fbe.Json.Unmarshal(buffer, &result)
    if err != nil {
        return nil, err
    }
    return &result, nil
}

// Struct shallow copy
func (s StructMap) Copy() *StructMap {
    var result = s
    return &result
}

// Struct deep clone
func (s StructMap) Clone() *StructMap {
    var result = s
    return &result
}

// Get the struct key
func (s StructMap) Key() StructMapKey {
    return StructMapKey{
    }
}

// Convert struct to optional
func (s StructMap) Optional() *StructMap {
    return &s
}

// Convert struct to string
func (s StructMap) String() string {
    var sb strings.Builder
    sb.WriteString("StructMap(")
    sb.WriteString("f1=")
    sb.WriteString(",f2=")
    sb.WriteString(",f3=")
    sb.WriteString(",f4=")
    sb.WriteString(",f5=")
    sb.WriteString(",f6=")
    sb.WriteString(",f7=")
    sb.WriteString(",f8=")
    sb.WriteString(",f9=")
    sb.WriteString(",f10=")
    sb.WriteString(")")
    return sb.String()
}

// Convert struct to JSON
func (s StructMap) JSON() ([]byte, error) {
    return fbe.Json.Marshal(&s)
}
