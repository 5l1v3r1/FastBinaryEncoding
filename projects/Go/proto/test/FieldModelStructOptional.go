// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// Version: 1.1.0.0

package test

import "errors"
import "../fbe"
import "../proto"

// Workaround for Go unused imports issue
var _ = fbe.Version
var _ = proto.Version

// Fast Binary Encoding StructOptional field model
type FieldModelStructOptional struct {
    buffer *fbe.Buffer  // Field model buffer
    offset int          // Field model buffer offset

    FieldModelStructSimple
    F100 *FieldModelOptionalBool
    F101 *FieldModelOptionalBool
    F102 *FieldModelOptionalBool
    F103 *FieldModelOptionalByte
    F104 *FieldModelOptionalByte
    F105 *FieldModelOptionalByte
    F106 *FieldModelOptionalChar
    F107 *FieldModelOptionalChar
    F108 *FieldModelOptionalChar
    F109 *FieldModelOptionalWChar
    F110 *FieldModelOptionalWChar
    F111 *FieldModelOptionalWChar
    F112 *FieldModelOptionalInt8
    F113 *FieldModelOptionalInt8
    F114 *FieldModelOptionalInt8
    F115 *FieldModelOptionalUInt8
    F116 *FieldModelOptionalUInt8
    F117 *FieldModelOptionalUInt8
    F118 *FieldModelOptionalInt16
    F119 *FieldModelOptionalInt16
    F120 *FieldModelOptionalInt16
    F121 *FieldModelOptionalUInt16
    F122 *FieldModelOptionalUInt16
    F123 *FieldModelOptionalUInt16
    F124 *FieldModelOptionalInt32
    F125 *FieldModelOptionalInt32
    F126 *FieldModelOptionalInt32
    F127 *FieldModelOptionalUInt32
    F128 *FieldModelOptionalUInt32
    F129 *FieldModelOptionalUInt32
    F130 *FieldModelOptionalInt64
    F131 *FieldModelOptionalInt64
    F132 *FieldModelOptionalInt64
    F133 *FieldModelOptionalUInt64
    F134 *FieldModelOptionalUInt64
    F135 *FieldModelOptionalUInt64
    F136 *FieldModelOptionalFloat
    F137 *FieldModelOptionalFloat
    F138 *FieldModelOptionalFloat
    F139 *FieldModelOptionalDouble
    F140 *FieldModelOptionalDouble
    F141 *FieldModelOptionalDouble
    F142 *FieldModelOptionalDecimal
    F143 *FieldModelOptionalDecimal
    F144 *FieldModelOptionalDecimal
    F145 *FieldModelOptionalString
    F146 *FieldModelOptionalString
    F147 *FieldModelOptionalString
    F148 *FieldModelOptionalTimestamp
    F149 *FieldModelOptionalTimestamp
    F150 *FieldModelOptionalTimestamp
    F151 *FieldModelOptionalUUID
    F152 *FieldModelOptionalUUID
    F153 *FieldModelOptionalUUID
    F154 *FieldModelOptionalOrderSide
    F155 *FieldModelOptionalOrderSide
    F156 *FieldModelOptionalOrderType
    F157 *FieldModelOptionalOrderType
    F158 *FieldModelOptionalOrder
    F159 *FieldModelOptionalOrder
    F160 *FieldModelOptionalBalance
    F161 *FieldModelOptionalBalance
    F162 *FieldModelOptionalState
    F163 *FieldModelOptionalState
    F164 *FieldModelOptionalAccount
    F165 *FieldModelOptionalAccount
}

// Create a new StructOptional field model
func NewFieldModelStructOptional(buffer *fbe.Buffer, offset int) *FieldModelStructOptional {
    fbeResult := FieldModelStructOptional{buffer: buffer, offset: offset}
    fbeResult.FieldModelStructSimple = *NewFieldModelStructSimple(buffer, 4 + 4)
    fbeResult.F100 = NewFieldModelOptionalBool(buffer, fbeResult.FieldModelStructSimple.FBEOffset() + fbeResult.FieldModelStructSimple.FBEBody() - 4 - 4)
    fbeResult.F101 = NewFieldModelOptionalBool(buffer, fbeResult.F100.FBEOffset() + fbeResult.F100.FBESize())
    fbeResult.F102 = NewFieldModelOptionalBool(buffer, fbeResult.F101.FBEOffset() + fbeResult.F101.FBESize())
    fbeResult.F103 = NewFieldModelOptionalByte(buffer, fbeResult.F102.FBEOffset() + fbeResult.F102.FBESize())
    fbeResult.F104 = NewFieldModelOptionalByte(buffer, fbeResult.F103.FBEOffset() + fbeResult.F103.FBESize())
    fbeResult.F105 = NewFieldModelOptionalByte(buffer, fbeResult.F104.FBEOffset() + fbeResult.F104.FBESize())
    fbeResult.F106 = NewFieldModelOptionalChar(buffer, fbeResult.F105.FBEOffset() + fbeResult.F105.FBESize())
    fbeResult.F107 = NewFieldModelOptionalChar(buffer, fbeResult.F106.FBEOffset() + fbeResult.F106.FBESize())
    fbeResult.F108 = NewFieldModelOptionalChar(buffer, fbeResult.F107.FBEOffset() + fbeResult.F107.FBESize())
    fbeResult.F109 = NewFieldModelOptionalWChar(buffer, fbeResult.F108.FBEOffset() + fbeResult.F108.FBESize())
    fbeResult.F110 = NewFieldModelOptionalWChar(buffer, fbeResult.F109.FBEOffset() + fbeResult.F109.FBESize())
    fbeResult.F111 = NewFieldModelOptionalWChar(buffer, fbeResult.F110.FBEOffset() + fbeResult.F110.FBESize())
    fbeResult.F112 = NewFieldModelOptionalInt8(buffer, fbeResult.F111.FBEOffset() + fbeResult.F111.FBESize())
    fbeResult.F113 = NewFieldModelOptionalInt8(buffer, fbeResult.F112.FBEOffset() + fbeResult.F112.FBESize())
    fbeResult.F114 = NewFieldModelOptionalInt8(buffer, fbeResult.F113.FBEOffset() + fbeResult.F113.FBESize())
    fbeResult.F115 = NewFieldModelOptionalUInt8(buffer, fbeResult.F114.FBEOffset() + fbeResult.F114.FBESize())
    fbeResult.F116 = NewFieldModelOptionalUInt8(buffer, fbeResult.F115.FBEOffset() + fbeResult.F115.FBESize())
    fbeResult.F117 = NewFieldModelOptionalUInt8(buffer, fbeResult.F116.FBEOffset() + fbeResult.F116.FBESize())
    fbeResult.F118 = NewFieldModelOptionalInt16(buffer, fbeResult.F117.FBEOffset() + fbeResult.F117.FBESize())
    fbeResult.F119 = NewFieldModelOptionalInt16(buffer, fbeResult.F118.FBEOffset() + fbeResult.F118.FBESize())
    fbeResult.F120 = NewFieldModelOptionalInt16(buffer, fbeResult.F119.FBEOffset() + fbeResult.F119.FBESize())
    fbeResult.F121 = NewFieldModelOptionalUInt16(buffer, fbeResult.F120.FBEOffset() + fbeResult.F120.FBESize())
    fbeResult.F122 = NewFieldModelOptionalUInt16(buffer, fbeResult.F121.FBEOffset() + fbeResult.F121.FBESize())
    fbeResult.F123 = NewFieldModelOptionalUInt16(buffer, fbeResult.F122.FBEOffset() + fbeResult.F122.FBESize())
    fbeResult.F124 = NewFieldModelOptionalInt32(buffer, fbeResult.F123.FBEOffset() + fbeResult.F123.FBESize())
    fbeResult.F125 = NewFieldModelOptionalInt32(buffer, fbeResult.F124.FBEOffset() + fbeResult.F124.FBESize())
    fbeResult.F126 = NewFieldModelOptionalInt32(buffer, fbeResult.F125.FBEOffset() + fbeResult.F125.FBESize())
    fbeResult.F127 = NewFieldModelOptionalUInt32(buffer, fbeResult.F126.FBEOffset() + fbeResult.F126.FBESize())
    fbeResult.F128 = NewFieldModelOptionalUInt32(buffer, fbeResult.F127.FBEOffset() + fbeResult.F127.FBESize())
    fbeResult.F129 = NewFieldModelOptionalUInt32(buffer, fbeResult.F128.FBEOffset() + fbeResult.F128.FBESize())
    fbeResult.F130 = NewFieldModelOptionalInt64(buffer, fbeResult.F129.FBEOffset() + fbeResult.F129.FBESize())
    fbeResult.F131 = NewFieldModelOptionalInt64(buffer, fbeResult.F130.FBEOffset() + fbeResult.F130.FBESize())
    fbeResult.F132 = NewFieldModelOptionalInt64(buffer, fbeResult.F131.FBEOffset() + fbeResult.F131.FBESize())
    fbeResult.F133 = NewFieldModelOptionalUInt64(buffer, fbeResult.F132.FBEOffset() + fbeResult.F132.FBESize())
    fbeResult.F134 = NewFieldModelOptionalUInt64(buffer, fbeResult.F133.FBEOffset() + fbeResult.F133.FBESize())
    fbeResult.F135 = NewFieldModelOptionalUInt64(buffer, fbeResult.F134.FBEOffset() + fbeResult.F134.FBESize())
    fbeResult.F136 = NewFieldModelOptionalFloat(buffer, fbeResult.F135.FBEOffset() + fbeResult.F135.FBESize())
    fbeResult.F137 = NewFieldModelOptionalFloat(buffer, fbeResult.F136.FBEOffset() + fbeResult.F136.FBESize())
    fbeResult.F138 = NewFieldModelOptionalFloat(buffer, fbeResult.F137.FBEOffset() + fbeResult.F137.FBESize())
    fbeResult.F139 = NewFieldModelOptionalDouble(buffer, fbeResult.F138.FBEOffset() + fbeResult.F138.FBESize())
    fbeResult.F140 = NewFieldModelOptionalDouble(buffer, fbeResult.F139.FBEOffset() + fbeResult.F139.FBESize())
    fbeResult.F141 = NewFieldModelOptionalDouble(buffer, fbeResult.F140.FBEOffset() + fbeResult.F140.FBESize())
    fbeResult.F142 = NewFieldModelOptionalDecimal(buffer, fbeResult.F141.FBEOffset() + fbeResult.F141.FBESize())
    fbeResult.F143 = NewFieldModelOptionalDecimal(buffer, fbeResult.F142.FBEOffset() + fbeResult.F142.FBESize())
    fbeResult.F144 = NewFieldModelOptionalDecimal(buffer, fbeResult.F143.FBEOffset() + fbeResult.F143.FBESize())
    fbeResult.F145 = NewFieldModelOptionalString(buffer, fbeResult.F144.FBEOffset() + fbeResult.F144.FBESize())
    fbeResult.F146 = NewFieldModelOptionalString(buffer, fbeResult.F145.FBEOffset() + fbeResult.F145.FBESize())
    fbeResult.F147 = NewFieldModelOptionalString(buffer, fbeResult.F146.FBEOffset() + fbeResult.F146.FBESize())
    fbeResult.F148 = NewFieldModelOptionalTimestamp(buffer, fbeResult.F147.FBEOffset() + fbeResult.F147.FBESize())
    fbeResult.F149 = NewFieldModelOptionalTimestamp(buffer, fbeResult.F148.FBEOffset() + fbeResult.F148.FBESize())
    fbeResult.F150 = NewFieldModelOptionalTimestamp(buffer, fbeResult.F149.FBEOffset() + fbeResult.F149.FBESize())
    fbeResult.F151 = NewFieldModelOptionalUUID(buffer, fbeResult.F150.FBEOffset() + fbeResult.F150.FBESize())
    fbeResult.F152 = NewFieldModelOptionalUUID(buffer, fbeResult.F151.FBEOffset() + fbeResult.F151.FBESize())
    fbeResult.F153 = NewFieldModelOptionalUUID(buffer, fbeResult.F152.FBEOffset() + fbeResult.F152.FBESize())
    fbeResult.F154 = NewFieldModelOptionalOrderSide(buffer, fbeResult.F153.FBEOffset() + fbeResult.F153.FBESize())
    fbeResult.F155 = NewFieldModelOptionalOrderSide(buffer, fbeResult.F154.FBEOffset() + fbeResult.F154.FBESize())
    fbeResult.F156 = NewFieldModelOptionalOrderType(buffer, fbeResult.F155.FBEOffset() + fbeResult.F155.FBESize())
    fbeResult.F157 = NewFieldModelOptionalOrderType(buffer, fbeResult.F156.FBEOffset() + fbeResult.F156.FBESize())
    fbeResult.F158 = NewFieldModelOptionalOrder(buffer, fbeResult.F157.FBEOffset() + fbeResult.F157.FBESize())
    fbeResult.F159 = NewFieldModelOptionalOrder(buffer, fbeResult.F158.FBEOffset() + fbeResult.F158.FBESize())
    fbeResult.F160 = NewFieldModelOptionalBalance(buffer, fbeResult.F159.FBEOffset() + fbeResult.F159.FBESize())
    fbeResult.F161 = NewFieldModelOptionalBalance(buffer, fbeResult.F160.FBEOffset() + fbeResult.F160.FBESize())
    fbeResult.F162 = NewFieldModelOptionalState(buffer, fbeResult.F161.FBEOffset() + fbeResult.F161.FBESize())
    fbeResult.F163 = NewFieldModelOptionalState(buffer, fbeResult.F162.FBEOffset() + fbeResult.F162.FBESize())
    fbeResult.F164 = NewFieldModelOptionalAccount(buffer, fbeResult.F163.FBEOffset() + fbeResult.F163.FBESize())
    fbeResult.F165 = NewFieldModelOptionalAccount(buffer, fbeResult.F164.FBEOffset() + fbeResult.F164.FBESize())
    return &fbeResult
}

// Get the field size
func (fm *FieldModelStructOptional) FBESize() int { return 1 }

// Get the field body size
func (fm *FieldModelStructOptional) FBEBody() int {
    fbeResult := 4 + 4 +
        fm.FieldModelStructSimple.FBEBody() - 4 - 4 +
        0
    return fbeResult
}

// Get the field extra size
func (fm *FieldModelStructOptional) FBEExtra() int {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return 0
    }

    fbeStructOffset := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset()))
    if (fbeStructOffset == 0) || ((fm.buffer.Offset() + fbeStructOffset + 4) > fm.buffer.Size()) {
        return 0
    }

    fm.buffer.Shift(fbeStructOffset)

    fbeResult := fm.FBEBody() +
        fm.FieldModelStructSimple.FBEExtra() + 
        0

    fm.buffer.Unshift(fbeStructOffset)

    return fbeResult
}

// Get the field type
func (fm *FieldModelStructOptional) FBEType() int { return 111 }

// Get the field offset
func (fm *FieldModelStructOptional) FBEOffset() int { return fm.offset }
// Set the field offset
func (fm *FieldModelStructOptional) SetFBEOffset(value int) { fm.offset = value }

// Shift the current field offset
func (fm *FieldModelStructOptional) FBEShift(size int) { fm.offset += size }
// Unshift the current field offset
func (fm *FieldModelStructOptional) FBEUnshift(size int) { fm.offset -= size }

// Check if the struct value is valid
func (fm *FieldModelStructOptional) Verify() bool { return fm.VerifyType(true) }

// Check if the struct value and its type are valid
func (fm *FieldModelStructOptional) VerifyType(fbeVerifyType bool) bool {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return true
    }

    fbeStructOffset := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset()))
    if (fbeStructOffset == 0) || ((fm.buffer.Offset() + fbeStructOffset + 4 + 4) > fm.buffer.Size()) {
        return false
    }

    fbeStructSize := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fbeStructOffset))
    if fbeStructSize < (4 + 4) {
        return false
    }

    fbeStructType := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fbeStructOffset + 4))
    if fbeVerifyType && (fbeStructType != fm.FBEType()) {
        return false
    }

    fm.buffer.Shift(fbeStructOffset)
    fbeResult := fm.VerifyFields(fbeStructSize)
    fm.buffer.Unshift(fbeStructOffset)
    return fbeResult
}

// // Check if the struct value fields are valid
func (fm *FieldModelStructOptional) VerifyFields(fbeStructSize int) bool {
    fbeCurrentSize := 4 + 4
    fm.FieldModelStructSimple.FBEExtra() + 

    if (fbeCurrentSize + fm.FieldModelStructSimple.FBEBody() - 4 - 4) > fbeStructSize {
        return true
    }
    if !fm.FieldModelStructSimple.VerifyFields(fbeStructSize) {
        return false
    }
    fbeCurrentSize += fm.FieldModelStructSimple.FBEBody() - 4 - 4

    if (fbeCurrentSize + fm.F100.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F100.Verify() {
        return false
    }
    fbeCurrentSize += fm.F100.FBESize()

    if (fbeCurrentSize + fm.F101.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F101.Verify() {
        return false
    }
    fbeCurrentSize += fm.F101.FBESize()

    if (fbeCurrentSize + fm.F102.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F102.Verify() {
        return false
    }
    fbeCurrentSize += fm.F102.FBESize()

    if (fbeCurrentSize + fm.F103.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F103.Verify() {
        return false
    }
    fbeCurrentSize += fm.F103.FBESize()

    if (fbeCurrentSize + fm.F104.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F104.Verify() {
        return false
    }
    fbeCurrentSize += fm.F104.FBESize()

    if (fbeCurrentSize + fm.F105.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F105.Verify() {
        return false
    }
    fbeCurrentSize += fm.F105.FBESize()

    if (fbeCurrentSize + fm.F106.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F106.Verify() {
        return false
    }
    fbeCurrentSize += fm.F106.FBESize()

    if (fbeCurrentSize + fm.F107.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F107.Verify() {
        return false
    }
    fbeCurrentSize += fm.F107.FBESize()

    if (fbeCurrentSize + fm.F108.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F108.Verify() {
        return false
    }
    fbeCurrentSize += fm.F108.FBESize()

    if (fbeCurrentSize + fm.F109.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F109.Verify() {
        return false
    }
    fbeCurrentSize += fm.F109.FBESize()

    if (fbeCurrentSize + fm.F110.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F110.Verify() {
        return false
    }
    fbeCurrentSize += fm.F110.FBESize()

    if (fbeCurrentSize + fm.F111.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F111.Verify() {
        return false
    }
    fbeCurrentSize += fm.F111.FBESize()

    if (fbeCurrentSize + fm.F112.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F112.Verify() {
        return false
    }
    fbeCurrentSize += fm.F112.FBESize()

    if (fbeCurrentSize + fm.F113.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F113.Verify() {
        return false
    }
    fbeCurrentSize += fm.F113.FBESize()

    if (fbeCurrentSize + fm.F114.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F114.Verify() {
        return false
    }
    fbeCurrentSize += fm.F114.FBESize()

    if (fbeCurrentSize + fm.F115.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F115.Verify() {
        return false
    }
    fbeCurrentSize += fm.F115.FBESize()

    if (fbeCurrentSize + fm.F116.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F116.Verify() {
        return false
    }
    fbeCurrentSize += fm.F116.FBESize()

    if (fbeCurrentSize + fm.F117.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F117.Verify() {
        return false
    }
    fbeCurrentSize += fm.F117.FBESize()

    if (fbeCurrentSize + fm.F118.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F118.Verify() {
        return false
    }
    fbeCurrentSize += fm.F118.FBESize()

    if (fbeCurrentSize + fm.F119.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F119.Verify() {
        return false
    }
    fbeCurrentSize += fm.F119.FBESize()

    if (fbeCurrentSize + fm.F120.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F120.Verify() {
        return false
    }
    fbeCurrentSize += fm.F120.FBESize()

    if (fbeCurrentSize + fm.F121.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F121.Verify() {
        return false
    }
    fbeCurrentSize += fm.F121.FBESize()

    if (fbeCurrentSize + fm.F122.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F122.Verify() {
        return false
    }
    fbeCurrentSize += fm.F122.FBESize()

    if (fbeCurrentSize + fm.F123.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F123.Verify() {
        return false
    }
    fbeCurrentSize += fm.F123.FBESize()

    if (fbeCurrentSize + fm.F124.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F124.Verify() {
        return false
    }
    fbeCurrentSize += fm.F124.FBESize()

    if (fbeCurrentSize + fm.F125.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F125.Verify() {
        return false
    }
    fbeCurrentSize += fm.F125.FBESize()

    if (fbeCurrentSize + fm.F126.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F126.Verify() {
        return false
    }
    fbeCurrentSize += fm.F126.FBESize()

    if (fbeCurrentSize + fm.F127.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F127.Verify() {
        return false
    }
    fbeCurrentSize += fm.F127.FBESize()

    if (fbeCurrentSize + fm.F128.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F128.Verify() {
        return false
    }
    fbeCurrentSize += fm.F128.FBESize()

    if (fbeCurrentSize + fm.F129.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F129.Verify() {
        return false
    }
    fbeCurrentSize += fm.F129.FBESize()

    if (fbeCurrentSize + fm.F130.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F130.Verify() {
        return false
    }
    fbeCurrentSize += fm.F130.FBESize()

    if (fbeCurrentSize + fm.F131.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F131.Verify() {
        return false
    }
    fbeCurrentSize += fm.F131.FBESize()

    if (fbeCurrentSize + fm.F132.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F132.Verify() {
        return false
    }
    fbeCurrentSize += fm.F132.FBESize()

    if (fbeCurrentSize + fm.F133.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F133.Verify() {
        return false
    }
    fbeCurrentSize += fm.F133.FBESize()

    if (fbeCurrentSize + fm.F134.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F134.Verify() {
        return false
    }
    fbeCurrentSize += fm.F134.FBESize()

    if (fbeCurrentSize + fm.F135.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F135.Verify() {
        return false
    }
    fbeCurrentSize += fm.F135.FBESize()

    if (fbeCurrentSize + fm.F136.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F136.Verify() {
        return false
    }
    fbeCurrentSize += fm.F136.FBESize()

    if (fbeCurrentSize + fm.F137.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F137.Verify() {
        return false
    }
    fbeCurrentSize += fm.F137.FBESize()

    if (fbeCurrentSize + fm.F138.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F138.Verify() {
        return false
    }
    fbeCurrentSize += fm.F138.FBESize()

    if (fbeCurrentSize + fm.F139.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F139.Verify() {
        return false
    }
    fbeCurrentSize += fm.F139.FBESize()

    if (fbeCurrentSize + fm.F140.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F140.Verify() {
        return false
    }
    fbeCurrentSize += fm.F140.FBESize()

    if (fbeCurrentSize + fm.F141.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F141.Verify() {
        return false
    }
    fbeCurrentSize += fm.F141.FBESize()

    if (fbeCurrentSize + fm.F142.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F142.Verify() {
        return false
    }
    fbeCurrentSize += fm.F142.FBESize()

    if (fbeCurrentSize + fm.F143.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F143.Verify() {
        return false
    }
    fbeCurrentSize += fm.F143.FBESize()

    if (fbeCurrentSize + fm.F144.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F144.Verify() {
        return false
    }
    fbeCurrentSize += fm.F144.FBESize()

    if (fbeCurrentSize + fm.F145.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F145.Verify() {
        return false
    }
    fbeCurrentSize += fm.F145.FBESize()

    if (fbeCurrentSize + fm.F146.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F146.Verify() {
        return false
    }
    fbeCurrentSize += fm.F146.FBESize()

    if (fbeCurrentSize + fm.F147.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F147.Verify() {
        return false
    }
    fbeCurrentSize += fm.F147.FBESize()

    if (fbeCurrentSize + fm.F148.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F148.Verify() {
        return false
    }
    fbeCurrentSize += fm.F148.FBESize()

    if (fbeCurrentSize + fm.F149.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F149.Verify() {
        return false
    }
    fbeCurrentSize += fm.F149.FBESize()

    if (fbeCurrentSize + fm.F150.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F150.Verify() {
        return false
    }
    fbeCurrentSize += fm.F150.FBESize()

    if (fbeCurrentSize + fm.F151.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F151.Verify() {
        return false
    }
    fbeCurrentSize += fm.F151.FBESize()

    if (fbeCurrentSize + fm.F152.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F152.Verify() {
        return false
    }
    fbeCurrentSize += fm.F152.FBESize()

    if (fbeCurrentSize + fm.F153.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F153.Verify() {
        return false
    }
    fbeCurrentSize += fm.F153.FBESize()

    if (fbeCurrentSize + fm.F154.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F154.Verify() {
        return false
    }
    fbeCurrentSize += fm.F154.FBESize()

    if (fbeCurrentSize + fm.F155.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F155.Verify() {
        return false
    }
    fbeCurrentSize += fm.F155.FBESize()

    if (fbeCurrentSize + fm.F156.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F156.Verify() {
        return false
    }
    fbeCurrentSize += fm.F156.FBESize()

    if (fbeCurrentSize + fm.F157.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F157.Verify() {
        return false
    }
    fbeCurrentSize += fm.F157.FBESize()

    if (fbeCurrentSize + fm.F158.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F158.Verify() {
        return false
    }
    fbeCurrentSize += fm.F158.FBESize()

    if (fbeCurrentSize + fm.F159.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F159.Verify() {
        return false
    }
    fbeCurrentSize += fm.F159.FBESize()

    if (fbeCurrentSize + fm.F160.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F160.Verify() {
        return false
    }
    fbeCurrentSize += fm.F160.FBESize()

    if (fbeCurrentSize + fm.F161.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F161.Verify() {
        return false
    }
    fbeCurrentSize += fm.F161.FBESize()

    if (fbeCurrentSize + fm.F162.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F162.Verify() {
        return false
    }
    fbeCurrentSize += fm.F162.FBESize()

    if (fbeCurrentSize + fm.F163.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F163.Verify() {
        return false
    }
    fbeCurrentSize += fm.F163.FBESize()

    if (fbeCurrentSize + fm.F164.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F164.Verify() {
        return false
    }
    fbeCurrentSize += fm.F164.FBESize()

    if (fbeCurrentSize + fm.F165.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F165.Verify() {
        return false
    }
    fbeCurrentSize += fm.F165.FBESize()

    return true
}

// Get the struct value (begin phase)
func (fm *FieldModelStructOptional) GetBegin() (int, error) {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return 0, nil
    }

    fbeStructOffset := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset()))
    if (fbeStructOffset == 0) || ((fm.buffer.Offset() + fbeStructOffset + 4 + 4) > fm.buffer.Size()) {
        return 0, errors.New("model is broken")
    }

    fbeStructSize := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fbeStructOffset))
    if fbeStructSize < (4 + 4) {
        return 0, errors.New("model is broken")
    }

    fm.buffer.Shift(fbeStructOffset)
    return fbeStructOffset, nil
}

// Get the struct value (end phase)
func (fm *FieldModelStructOptional) GetEnd(fbeBegin int) {
    fm.buffer.Unshift(fbeBegin)
}

// Get the struct value
func (fm *FieldModelStructOptional) Get() (*StructOptional, error) {
    fbeResult := NewStructOptional()
    return fm.GetValue(fbeResult)
}

// Get the struct value by pointer
func (fm *FieldModelStructOptional) GetValue(fbeValue *StructOptional) (*StructOptional, error) {
    fbeBegin, err := fm.GetBegin()
    if fbeBegin == 0 {
        return fbeValue, err
    }

    fbeStructSize := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset()))
    fm.GetFields(fbeValue, fbeStructSize)
    fm.GetEnd(fbeBegin)
    return fbeValue, nil
}

// Get the struct fields values
func (fm *FieldModelStructOptional) GetFields(fbeValue *StructOptional, fbeStructSize int) {
    fbeCurrentSize := 4 + 4

    if (fbeCurrentSize + fm.FieldModelStructSimple.FBEBody() - 4 - 4) > fbeStructSize {
        fm.FieldModelStructSimple.GetFields(fbeValue, fbeStructSize)
    }
    fbeCurrentSize += fm.FieldModelStructSimple.FBEBody() - 4 - 4

    if (fbeCurrentSize + fm.F100.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F100 = nil
    }
    fbeCurrentSize += fm.F100.FBESize()

    if (fbeCurrentSize + fm.F101.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F101 = fbe.OptionalBool(true)
    }
    fbeCurrentSize += fm.F101.FBESize()

    if (fbeCurrentSize + fm.F102.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F102 = nil
    }
    fbeCurrentSize += fm.F102.FBESize()

    if (fbeCurrentSize + fm.F103.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F103 = nil
    }
    fbeCurrentSize += fm.F103.FBESize()

    if (fbeCurrentSize + fm.F104.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F104 = fbe.OptionalByte(byte(255))
    }
    fbeCurrentSize += fm.F104.FBESize()

    if (fbeCurrentSize + fm.F105.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F105 = nil
    }
    fbeCurrentSize += fm.F105.FBESize()

    if (fbeCurrentSize + fm.F106.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F106 = nil
    }
    fbeCurrentSize += fm.F106.FBESize()

    if (fbeCurrentSize + fm.F107.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F107 = fbe.OptionalRune('!')
    }
    fbeCurrentSize += fm.F107.FBESize()

    if (fbeCurrentSize + fm.F108.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F108 = nil
    }
    fbeCurrentSize += fm.F108.FBESize()

    if (fbeCurrentSize + fm.F109.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F109 = nil
    }
    fbeCurrentSize += fm.F109.FBESize()

    if (fbeCurrentSize + fm.F110.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F110 = fbe.OptionalRune(rune(0x0444))
    }
    fbeCurrentSize += fm.F110.FBESize()

    if (fbeCurrentSize + fm.F111.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F111 = nil
    }
    fbeCurrentSize += fm.F111.FBESize()

    if (fbeCurrentSize + fm.F112.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F112 = nil
    }
    fbeCurrentSize += fm.F112.FBESize()

    if (fbeCurrentSize + fm.F113.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F113 = fbe.OptionalInt8(int8(127))
    }
    fbeCurrentSize += fm.F113.FBESize()

    if (fbeCurrentSize + fm.F114.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F114 = nil
    }
    fbeCurrentSize += fm.F114.FBESize()

    if (fbeCurrentSize + fm.F115.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F115 = nil
    }
    fbeCurrentSize += fm.F115.FBESize()

    if (fbeCurrentSize + fm.F116.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F116 = fbe.OptionalUInt8(uint8(255))
    }
    fbeCurrentSize += fm.F116.FBESize()

    if (fbeCurrentSize + fm.F117.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F117 = nil
    }
    fbeCurrentSize += fm.F117.FBESize()

    if (fbeCurrentSize + fm.F118.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F118 = nil
    }
    fbeCurrentSize += fm.F118.FBESize()

    if (fbeCurrentSize + fm.F119.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F119 = fbe.OptionalInt16(int16(32767))
    }
    fbeCurrentSize += fm.F119.FBESize()

    if (fbeCurrentSize + fm.F120.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F120 = nil
    }
    fbeCurrentSize += fm.F120.FBESize()

    if (fbeCurrentSize + fm.F121.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F121 = nil
    }
    fbeCurrentSize += fm.F121.FBESize()

    if (fbeCurrentSize + fm.F122.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F122 = fbe.OptionalUInt16(uint16(65535))
    }
    fbeCurrentSize += fm.F122.FBESize()

    if (fbeCurrentSize + fm.F123.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F123 = nil
    }
    fbeCurrentSize += fm.F123.FBESize()

    if (fbeCurrentSize + fm.F124.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F124 = nil
    }
    fbeCurrentSize += fm.F124.FBESize()

    if (fbeCurrentSize + fm.F125.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F125 = fbe.OptionalInt32(int32(2147483647))
    }
    fbeCurrentSize += fm.F125.FBESize()

    if (fbeCurrentSize + fm.F126.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F126 = nil
    }
    fbeCurrentSize += fm.F126.FBESize()

    if (fbeCurrentSize + fm.F127.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F127 = nil
    }
    fbeCurrentSize += fm.F127.FBESize()

    if (fbeCurrentSize + fm.F128.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F128 = fbe.OptionalUInt32(uint32(0xFFFFFFFF))
    }
    fbeCurrentSize += fm.F128.FBESize()

    if (fbeCurrentSize + fm.F129.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F129 = nil
    }
    fbeCurrentSize += fm.F129.FBESize()

    if (fbeCurrentSize + fm.F130.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F130 = nil
    }
    fbeCurrentSize += fm.F130.FBESize()

    if (fbeCurrentSize + fm.F131.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F131 = fbe.OptionalInt64(int64(9223372036854775807))
    }
    fbeCurrentSize += fm.F131.FBESize()

    if (fbeCurrentSize + fm.F132.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F132 = nil
    }
    fbeCurrentSize += fm.F132.FBESize()

    if (fbeCurrentSize + fm.F133.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F133 = nil
    }
    fbeCurrentSize += fm.F133.FBESize()

    if (fbeCurrentSize + fm.F134.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F134 = fbe.OptionalUInt64(uint64(0xFFFFFFFFFFFFFFFF))
    }
    fbeCurrentSize += fm.F134.FBESize()

    if (fbeCurrentSize + fm.F135.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F135 = nil
    }
    fbeCurrentSize += fm.F135.FBESize()

    if (fbeCurrentSize + fm.F136.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F136 = nil
    }
    fbeCurrentSize += fm.F136.FBESize()

    if (fbeCurrentSize + fm.F137.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F137 = fbe.OptionalFloat32(float32(123.456))
    }
    fbeCurrentSize += fm.F137.FBESize()

    if (fbeCurrentSize + fm.F138.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F138 = nil
    }
    fbeCurrentSize += fm.F138.FBESize()

    if (fbeCurrentSize + fm.F139.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F139 = nil
    }
    fbeCurrentSize += fm.F139.FBESize()

    if (fbeCurrentSize + fm.F140.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F140 = fbe.OptionalFloat64(float64(-123.456e+123))
    }
    fbeCurrentSize += fm.F140.FBESize()

    if (fbeCurrentSize + fm.F141.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F141 = nil
    }
    fbeCurrentSize += fm.F141.FBESize()

    if (fbeCurrentSize + fm.F142.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F142 = nil
    }
    fbeCurrentSize += fm.F142.FBESize()

    if (fbeCurrentSize + fm.F143.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F143 = fbe.OptionalDecimal(fbe.DecimalFromString("123456.123456"))
    }
    fbeCurrentSize += fm.F143.FBESize()

    if (fbeCurrentSize + fm.F144.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F144 = nil
    }
    fbeCurrentSize += fm.F144.FBESize()

    if (fbeCurrentSize + fm.F145.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F145 = nil
    }
    fbeCurrentSize += fm.F145.FBESize()

    if (fbeCurrentSize + fm.F146.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F146 = fbe.OptionalString("Initial string!")
    }
    fbeCurrentSize += fm.F146.FBESize()

    if (fbeCurrentSize + fm.F147.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F147 = nil
    }
    fbeCurrentSize += fm.F147.FBESize()

    if (fbeCurrentSize + fm.F148.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F148 = nil
    }
    fbeCurrentSize += fm.F148.FBESize()

    if (fbeCurrentSize + fm.F149.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F149 = fbe.OptionalTimestamp(fbe.TimestampUTC())
    }
    fbeCurrentSize += fm.F149.FBESize()

    if (fbeCurrentSize + fm.F150.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F150 = nil
    }
    fbeCurrentSize += fm.F150.FBESize()

    if (fbeCurrentSize + fm.F151.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F151 = nil
    }
    fbeCurrentSize += fm.F151.FBESize()

    if (fbeCurrentSize + fm.F152.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F152 = fbe.OptionalUUID(fbe.UUIDFromString("123e4567-e89b-12d3-a456-426655440000"))
    }
    fbeCurrentSize += fm.F152.FBESize()

    if (fbeCurrentSize + fm.F153.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F153 = nil
    }
    fbeCurrentSize += fm.F153.FBESize()

    if (fbeCurrentSize + fm.F154.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F154 = nil
    }
    fbeCurrentSize += fm.F154.FBESize()

    if (fbeCurrentSize + fm.F155.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F155 = nil
    }
    fbeCurrentSize += fm.F155.FBESize()

    if (fbeCurrentSize + fm.F156.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F156 = nil
    }
    fbeCurrentSize += fm.F156.FBESize()

    if (fbeCurrentSize + fm.F157.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F157 = nil
    }
    fbeCurrentSize += fm.F157.FBESize()

    if (fbeCurrentSize + fm.F158.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F158 = nil
    }
    fbeCurrentSize += fm.F158.FBESize()

    if (fbeCurrentSize + fm.F159.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F159 = nil
    }
    fbeCurrentSize += fm.F159.FBESize()

    if (fbeCurrentSize + fm.F160.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F160 = nil
    }
    fbeCurrentSize += fm.F160.FBESize()

    if (fbeCurrentSize + fm.F161.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F161 = nil
    }
    fbeCurrentSize += fm.F161.FBESize()

    if (fbeCurrentSize + fm.F162.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F162 = nil
    }
    fbeCurrentSize += fm.F162.FBESize()

    if (fbeCurrentSize + fm.F163.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F163 = nil
    }
    fbeCurrentSize += fm.F163.FBESize()

    if (fbeCurrentSize + fm.F164.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F164 = nil
    }
    fbeCurrentSize += fm.F164.FBESize()

    if (fbeCurrentSize + fm.F165.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F165 = nil
    }
    fbeCurrentSize += fm.F165.FBESize()
}
