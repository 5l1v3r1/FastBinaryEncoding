// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// Version: 1.1.0.0

package test

import "errors"
import "../fbe"
import "../proto"

// Workaround for Go unused imports issue
var _ = fbe.Version
var _ = proto.Version

// Fast Binary Encoding StructSimple field model
type FieldModelStructSimple struct {
    buffer *fbe.Buffer  // Field model buffer
    offset int          // Field model buffer offset

    Uid *fbe.FieldModelInt32
    F1 *fbe.FieldModelBool
    F2 *fbe.FieldModelBool
    F3 *fbe.FieldModelByte
    F4 *fbe.FieldModelByte
    F5 *fbe.FieldModelChar
    F6 *fbe.FieldModelChar
    F7 *fbe.FieldModelWChar
    F8 *fbe.FieldModelWChar
    F9 *fbe.FieldModelInt8
    F10 *fbe.FieldModelInt8
    F11 *fbe.FieldModelUInt8
    F12 *fbe.FieldModelUInt8
    F13 *fbe.FieldModelInt16
    F14 *fbe.FieldModelInt16
    F15 *fbe.FieldModelUInt16
    F16 *fbe.FieldModelUInt16
    F17 *fbe.FieldModelInt32
    F18 *fbe.FieldModelInt32
    F19 *fbe.FieldModelUInt32
    F20 *fbe.FieldModelUInt32
    F21 *fbe.FieldModelInt64
    F22 *fbe.FieldModelInt64
    F23 *fbe.FieldModelUInt64
    F24 *fbe.FieldModelUInt64
    F25 *fbe.FieldModelFloat
    F26 *fbe.FieldModelFloat
    F27 *fbe.FieldModelDouble
    F28 *fbe.FieldModelDouble
    F29 *fbe.FieldModelDecimal
    F30 *fbe.FieldModelDecimal
    F31 *fbe.FieldModelString
    F32 *fbe.FieldModelString
    F33 *fbe.FieldModelTimestamp
    F34 *fbe.FieldModelTimestamp
    F35 *fbe.FieldModelTimestamp
    F36 *fbe.FieldModelUUID
    F37 *fbe.FieldModelUUID
    F38 *fbe.FieldModelUUID
    F39 *proto.FieldModelOrderSide
    F40 *proto.FieldModelOrderType
    F41 *proto.FieldModelOrder
    F42 *proto.FieldModelBalance
    F43 *proto.FieldModelState
    F44 *proto.FieldModelAccount
}

// Create a new StructSimple field model
func NewFieldModelStructSimple(buffer *fbe.Buffer, offset int) *FieldModelStructSimple {
    fbeResult := FieldModelStructSimple{buffer: buffer, offset: offset}
    fbeResult.Uid = fbe.NewFieldModelInt32(buffer, 4 + 4)
    fbeResult.F1 = fbe.NewFieldModelBool(buffer, fbeResult.Uid.FBEOffset() + fbeResult.Uid.FBESize())
    fbeResult.F2 = fbe.NewFieldModelBool(buffer, fbeResult.F1.FBEOffset() + fbeResult.F1.FBESize())
    fbeResult.F3 = fbe.NewFieldModelByte(buffer, fbeResult.F2.FBEOffset() + fbeResult.F2.FBESize())
    fbeResult.F4 = fbe.NewFieldModelByte(buffer, fbeResult.F3.FBEOffset() + fbeResult.F3.FBESize())
    fbeResult.F5 = fbe.NewFieldModelChar(buffer, fbeResult.F4.FBEOffset() + fbeResult.F4.FBESize())
    fbeResult.F6 = fbe.NewFieldModelChar(buffer, fbeResult.F5.FBEOffset() + fbeResult.F5.FBESize())
    fbeResult.F7 = fbe.NewFieldModelWChar(buffer, fbeResult.F6.FBEOffset() + fbeResult.F6.FBESize())
    fbeResult.F8 = fbe.NewFieldModelWChar(buffer, fbeResult.F7.FBEOffset() + fbeResult.F7.FBESize())
    fbeResult.F9 = fbe.NewFieldModelInt8(buffer, fbeResult.F8.FBEOffset() + fbeResult.F8.FBESize())
    fbeResult.F10 = fbe.NewFieldModelInt8(buffer, fbeResult.F9.FBEOffset() + fbeResult.F9.FBESize())
    fbeResult.F11 = fbe.NewFieldModelUInt8(buffer, fbeResult.F10.FBEOffset() + fbeResult.F10.FBESize())
    fbeResult.F12 = fbe.NewFieldModelUInt8(buffer, fbeResult.F11.FBEOffset() + fbeResult.F11.FBESize())
    fbeResult.F13 = fbe.NewFieldModelInt16(buffer, fbeResult.F12.FBEOffset() + fbeResult.F12.FBESize())
    fbeResult.F14 = fbe.NewFieldModelInt16(buffer, fbeResult.F13.FBEOffset() + fbeResult.F13.FBESize())
    fbeResult.F15 = fbe.NewFieldModelUInt16(buffer, fbeResult.F14.FBEOffset() + fbeResult.F14.FBESize())
    fbeResult.F16 = fbe.NewFieldModelUInt16(buffer, fbeResult.F15.FBEOffset() + fbeResult.F15.FBESize())
    fbeResult.F17 = fbe.NewFieldModelInt32(buffer, fbeResult.F16.FBEOffset() + fbeResult.F16.FBESize())
    fbeResult.F18 = fbe.NewFieldModelInt32(buffer, fbeResult.F17.FBEOffset() + fbeResult.F17.FBESize())
    fbeResult.F19 = fbe.NewFieldModelUInt32(buffer, fbeResult.F18.FBEOffset() + fbeResult.F18.FBESize())
    fbeResult.F20 = fbe.NewFieldModelUInt32(buffer, fbeResult.F19.FBEOffset() + fbeResult.F19.FBESize())
    fbeResult.F21 = fbe.NewFieldModelInt64(buffer, fbeResult.F20.FBEOffset() + fbeResult.F20.FBESize())
    fbeResult.F22 = fbe.NewFieldModelInt64(buffer, fbeResult.F21.FBEOffset() + fbeResult.F21.FBESize())
    fbeResult.F23 = fbe.NewFieldModelUInt64(buffer, fbeResult.F22.FBEOffset() + fbeResult.F22.FBESize())
    fbeResult.F24 = fbe.NewFieldModelUInt64(buffer, fbeResult.F23.FBEOffset() + fbeResult.F23.FBESize())
    fbeResult.F25 = fbe.NewFieldModelFloat(buffer, fbeResult.F24.FBEOffset() + fbeResult.F24.FBESize())
    fbeResult.F26 = fbe.NewFieldModelFloat(buffer, fbeResult.F25.FBEOffset() + fbeResult.F25.FBESize())
    fbeResult.F27 = fbe.NewFieldModelDouble(buffer, fbeResult.F26.FBEOffset() + fbeResult.F26.FBESize())
    fbeResult.F28 = fbe.NewFieldModelDouble(buffer, fbeResult.F27.FBEOffset() + fbeResult.F27.FBESize())
    fbeResult.F29 = fbe.NewFieldModelDecimal(buffer, fbeResult.F28.FBEOffset() + fbeResult.F28.FBESize())
    fbeResult.F30 = fbe.NewFieldModelDecimal(buffer, fbeResult.F29.FBEOffset() + fbeResult.F29.FBESize())
    fbeResult.F31 = fbe.NewFieldModelString(buffer, fbeResult.F30.FBEOffset() + fbeResult.F30.FBESize())
    fbeResult.F32 = fbe.NewFieldModelString(buffer, fbeResult.F31.FBEOffset() + fbeResult.F31.FBESize())
    fbeResult.F33 = fbe.NewFieldModelTimestamp(buffer, fbeResult.F32.FBEOffset() + fbeResult.F32.FBESize())
    fbeResult.F34 = fbe.NewFieldModelTimestamp(buffer, fbeResult.F33.FBEOffset() + fbeResult.F33.FBESize())
    fbeResult.F35 = fbe.NewFieldModelTimestamp(buffer, fbeResult.F34.FBEOffset() + fbeResult.F34.FBESize())
    fbeResult.F36 = fbe.NewFieldModelUUID(buffer, fbeResult.F35.FBEOffset() + fbeResult.F35.FBESize())
    fbeResult.F37 = fbe.NewFieldModelUUID(buffer, fbeResult.F36.FBEOffset() + fbeResult.F36.FBESize())
    fbeResult.F38 = fbe.NewFieldModelUUID(buffer, fbeResult.F37.FBEOffset() + fbeResult.F37.FBESize())
    fbeResult.F39 = proto.NewFieldModelOrderSide(buffer, fbeResult.F38.FBEOffset() + fbeResult.F38.FBESize())
    fbeResult.F40 = proto.NewFieldModelOrderType(buffer, fbeResult.F39.FBEOffset() + fbeResult.F39.FBESize())
    fbeResult.F41 = proto.NewFieldModelOrder(buffer, fbeResult.F40.FBEOffset() + fbeResult.F40.FBESize())
    fbeResult.F42 = proto.NewFieldModelBalance(buffer, fbeResult.F41.FBEOffset() + fbeResult.F41.FBESize())
    fbeResult.F43 = proto.NewFieldModelState(buffer, fbeResult.F42.FBEOffset() + fbeResult.F42.FBESize())
    fbeResult.F44 = proto.NewFieldModelAccount(buffer, fbeResult.F43.FBEOffset() + fbeResult.F43.FBESize())
    return &fbeResult
}

// Get the field size
func (fm *FieldModelStructSimple) FBESize() int { return 1 }

// Get the field body size
func (fm *FieldModelStructSimple) FBEBody() int {
    fbeResult := 4 + 4 +
        0
    return fbeResult
}

// Get the field extra size
func (fm *FieldModelStructSimple) FBEExtra() int {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return 0
    }

    fbeStructOffset := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset()))
    if (fbeStructOffset == 0) || ((fm.buffer.Offset() + fbeStructOffset + 4) > fm.buffer.Size()) {
        return 0
    }

    fm.buffer.Shift(fbeStructOffset)

    fbeResult := fm.FBEBody() +
        0

    fm.buffer.Unshift(fbeStructOffset)

    return fbeResult
}

// Get the field type
func (fm *FieldModelStructSimple) FBEType() int { return 110 }

// Get the field offset
func (fm *FieldModelStructSimple) FBEOffset() int { return fm.offset }
// Set the field offset
func (fm *FieldModelStructSimple) SetFBEOffset(value int) { fm.offset = value }

// Shift the current field offset
func (fm *FieldModelStructSimple) FBEShift(size int) { fm.offset += size }
// Unshift the current field offset
func (fm *FieldModelStructSimple) FBEUnshift(size int) { fm.offset -= size }

// Check if the struct value is valid
func (fm *FieldModelStructSimple) Verify() bool { return fm.VerifyType(true) }

// Check if the struct value and its type are valid
func (fm *FieldModelStructSimple) VerifyType(fbeVerifyType bool) bool {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return true
    }

    fbeStructOffset := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset()))
    if (fbeStructOffset == 0) || ((fm.buffer.Offset() + fbeStructOffset + 4 + 4) > fm.buffer.Size()) {
        return false
    }

    fbeStructSize := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fbeStructOffset))
    if fbeStructSize < (4 + 4) {
        return false
    }

    fbeStructType := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fbeStructOffset + 4))
    if fbeVerifyType && (fbeStructType != fm.FBEType()) {
        return false
    }

    fm.buffer.Shift(fbeStructOffset)
    fbeResult := fm.VerifyFields(fbeStructSize)
    fm.buffer.Unshift(fbeStructOffset)
    return fbeResult
}

// // Check if the struct value fields are valid
func (fm *FieldModelStructSimple) VerifyFields(fbeStructSize int) bool {
    fbeCurrentSize := 4 + 4

    if (fbeCurrentSize + fm.Uid.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.Uid.Verify() {
        return false
    }
    fbeCurrentSize += fm.Uid.FBESize()

    if (fbeCurrentSize + fm.F1.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F1.Verify() {
        return false
    }
    fbeCurrentSize += fm.F1.FBESize()

    if (fbeCurrentSize + fm.F2.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F2.Verify() {
        return false
    }
    fbeCurrentSize += fm.F2.FBESize()

    if (fbeCurrentSize + fm.F3.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F3.Verify() {
        return false
    }
    fbeCurrentSize += fm.F3.FBESize()

    if (fbeCurrentSize + fm.F4.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F4.Verify() {
        return false
    }
    fbeCurrentSize += fm.F4.FBESize()

    if (fbeCurrentSize + fm.F5.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F5.Verify() {
        return false
    }
    fbeCurrentSize += fm.F5.FBESize()

    if (fbeCurrentSize + fm.F6.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F6.Verify() {
        return false
    }
    fbeCurrentSize += fm.F6.FBESize()

    if (fbeCurrentSize + fm.F7.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F7.Verify() {
        return false
    }
    fbeCurrentSize += fm.F7.FBESize()

    if (fbeCurrentSize + fm.F8.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F8.Verify() {
        return false
    }
    fbeCurrentSize += fm.F8.FBESize()

    if (fbeCurrentSize + fm.F9.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F9.Verify() {
        return false
    }
    fbeCurrentSize += fm.F9.FBESize()

    if (fbeCurrentSize + fm.F10.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F10.Verify() {
        return false
    }
    fbeCurrentSize += fm.F10.FBESize()

    if (fbeCurrentSize + fm.F11.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F11.Verify() {
        return false
    }
    fbeCurrentSize += fm.F11.FBESize()

    if (fbeCurrentSize + fm.F12.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F12.Verify() {
        return false
    }
    fbeCurrentSize += fm.F12.FBESize()

    if (fbeCurrentSize + fm.F13.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F13.Verify() {
        return false
    }
    fbeCurrentSize += fm.F13.FBESize()

    if (fbeCurrentSize + fm.F14.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F14.Verify() {
        return false
    }
    fbeCurrentSize += fm.F14.FBESize()

    if (fbeCurrentSize + fm.F15.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F15.Verify() {
        return false
    }
    fbeCurrentSize += fm.F15.FBESize()

    if (fbeCurrentSize + fm.F16.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F16.Verify() {
        return false
    }
    fbeCurrentSize += fm.F16.FBESize()

    if (fbeCurrentSize + fm.F17.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F17.Verify() {
        return false
    }
    fbeCurrentSize += fm.F17.FBESize()

    if (fbeCurrentSize + fm.F18.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F18.Verify() {
        return false
    }
    fbeCurrentSize += fm.F18.FBESize()

    if (fbeCurrentSize + fm.F19.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F19.Verify() {
        return false
    }
    fbeCurrentSize += fm.F19.FBESize()

    if (fbeCurrentSize + fm.F20.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F20.Verify() {
        return false
    }
    fbeCurrentSize += fm.F20.FBESize()

    if (fbeCurrentSize + fm.F21.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F21.Verify() {
        return false
    }
    fbeCurrentSize += fm.F21.FBESize()

    if (fbeCurrentSize + fm.F22.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F22.Verify() {
        return false
    }
    fbeCurrentSize += fm.F22.FBESize()

    if (fbeCurrentSize + fm.F23.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F23.Verify() {
        return false
    }
    fbeCurrentSize += fm.F23.FBESize()

    if (fbeCurrentSize + fm.F24.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F24.Verify() {
        return false
    }
    fbeCurrentSize += fm.F24.FBESize()

    if (fbeCurrentSize + fm.F25.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F25.Verify() {
        return false
    }
    fbeCurrentSize += fm.F25.FBESize()

    if (fbeCurrentSize + fm.F26.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F26.Verify() {
        return false
    }
    fbeCurrentSize += fm.F26.FBESize()

    if (fbeCurrentSize + fm.F27.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F27.Verify() {
        return false
    }
    fbeCurrentSize += fm.F27.FBESize()

    if (fbeCurrentSize + fm.F28.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F28.Verify() {
        return false
    }
    fbeCurrentSize += fm.F28.FBESize()

    if (fbeCurrentSize + fm.F29.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F29.Verify() {
        return false
    }
    fbeCurrentSize += fm.F29.FBESize()

    if (fbeCurrentSize + fm.F30.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F30.Verify() {
        return false
    }
    fbeCurrentSize += fm.F30.FBESize()

    if (fbeCurrentSize + fm.F31.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F31.Verify() {
        return false
    }
    fbeCurrentSize += fm.F31.FBESize()

    if (fbeCurrentSize + fm.F32.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F32.Verify() {
        return false
    }
    fbeCurrentSize += fm.F32.FBESize()

    if (fbeCurrentSize + fm.F33.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F33.Verify() {
        return false
    }
    fbeCurrentSize += fm.F33.FBESize()

    if (fbeCurrentSize + fm.F34.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F34.Verify() {
        return false
    }
    fbeCurrentSize += fm.F34.FBESize()

    if (fbeCurrentSize + fm.F35.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F35.Verify() {
        return false
    }
    fbeCurrentSize += fm.F35.FBESize()

    if (fbeCurrentSize + fm.F36.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F36.Verify() {
        return false
    }
    fbeCurrentSize += fm.F36.FBESize()

    if (fbeCurrentSize + fm.F37.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F37.Verify() {
        return false
    }
    fbeCurrentSize += fm.F37.FBESize()

    if (fbeCurrentSize + fm.F38.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F38.Verify() {
        return false
    }
    fbeCurrentSize += fm.F38.FBESize()

    if (fbeCurrentSize + fm.F39.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F39.Verify() {
        return false
    }
    fbeCurrentSize += fm.F39.FBESize()

    if (fbeCurrentSize + fm.F40.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F40.Verify() {
        return false
    }
    fbeCurrentSize += fm.F40.FBESize()

    if (fbeCurrentSize + fm.F41.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F41.Verify() {
        return false
    }
    fbeCurrentSize += fm.F41.FBESize()

    if (fbeCurrentSize + fm.F42.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F42.Verify() {
        return false
    }
    fbeCurrentSize += fm.F42.FBESize()

    if (fbeCurrentSize + fm.F43.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F43.Verify() {
        return false
    }
    fbeCurrentSize += fm.F43.FBESize()

    if (fbeCurrentSize + fm.F44.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.F44.Verify() {
        return false
    }
    fbeCurrentSize += fm.F44.FBESize()

    return true
}

// Get the struct value (begin phase)
func (fm *FieldModelStructSimple) GetBegin() (int, error) {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return 0, nil
    }

    fbeStructOffset := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset()))
    if (fbeStructOffset == 0) || ((fm.buffer.Offset() + fbeStructOffset + 4 + 4) > fm.buffer.Size()) {
        return 0, errors.New("model is broken")
    }

    fbeStructSize := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fbeStructOffset))
    if fbeStructSize < (4 + 4) {
        return 0, errors.New("model is broken")
    }

    fm.buffer.Shift(fbeStructOffset)
    return fbeStructOffset, nil
}

// Get the struct value (end phase)
func (fm *FieldModelStructSimple) GetEnd(fbeBegin int) {
    fm.buffer.Unshift(fbeBegin)
}

// Get the struct value
func (fm *FieldModelStructSimple) Get() (*StructSimple, error) {
    fbeResult := NewStructSimple()
    return fm.GetValue(fbeResult)
}

// Get the struct value by pointer
func (fm *FieldModelStructSimple) GetValue(fbeValue *StructSimple) (*StructSimple, error) {
    fbeBegin, err := fm.GetBegin()
    if fbeBegin == 0 {
        return fbeValue, err
    }

    fbeStructSize := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset()))
    fm.GetFields(fbeValue, fbeStructSize)
    fm.GetEnd(fbeBegin)
    return fbeValue, nil
}

// Get the struct fields values
func (fm *FieldModelStructSimple) GetFields(fbeValue *StructSimple, fbeStructSize int) {
    fbeCurrentSize := 4 + 4

    if (fbeCurrentSize + fm.Uid.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.Uid = 0
    }
    fbeCurrentSize += fm.Uid.FBESize()

    if (fbeCurrentSize + fm.F1.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F1 = false
    }
    fbeCurrentSize += fm.F1.FBESize()

    if (fbeCurrentSize + fm.F2.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F2 = true
    }
    fbeCurrentSize += fm.F2.FBESize()

    if (fbeCurrentSize + fm.F3.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F3 = 0
    }
    fbeCurrentSize += fm.F3.FBESize()

    if (fbeCurrentSize + fm.F4.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F4 = byte(255)
    }
    fbeCurrentSize += fm.F4.FBESize()

    if (fbeCurrentSize + fm.F5.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F5 = '\000'
    }
    fbeCurrentSize += fm.F5.FBESize()

    if (fbeCurrentSize + fm.F6.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F6 = '!'
    }
    fbeCurrentSize += fm.F6.FBESize()

    if (fbeCurrentSize + fm.F7.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F7 = '\000'
    }
    fbeCurrentSize += fm.F7.FBESize()

    if (fbeCurrentSize + fm.F8.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F8 = rune(0x0444)
    }
    fbeCurrentSize += fm.F8.FBESize()

    if (fbeCurrentSize + fm.F9.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F9 = 0
    }
    fbeCurrentSize += fm.F9.FBESize()

    if (fbeCurrentSize + fm.F10.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F10 = int8(127)
    }
    fbeCurrentSize += fm.F10.FBESize()

    if (fbeCurrentSize + fm.F11.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F11 = 0
    }
    fbeCurrentSize += fm.F11.FBESize()

    if (fbeCurrentSize + fm.F12.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F12 = uint8(255)
    }
    fbeCurrentSize += fm.F12.FBESize()

    if (fbeCurrentSize + fm.F13.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F13 = 0
    }
    fbeCurrentSize += fm.F13.FBESize()

    if (fbeCurrentSize + fm.F14.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F14 = int16(32767)
    }
    fbeCurrentSize += fm.F14.FBESize()

    if (fbeCurrentSize + fm.F15.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F15 = 0
    }
    fbeCurrentSize += fm.F15.FBESize()

    if (fbeCurrentSize + fm.F16.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F16 = uint16(65535)
    }
    fbeCurrentSize += fm.F16.FBESize()

    if (fbeCurrentSize + fm.F17.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F17 = 0
    }
    fbeCurrentSize += fm.F17.FBESize()

    if (fbeCurrentSize + fm.F18.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F18 = int32(2147483647)
    }
    fbeCurrentSize += fm.F18.FBESize()

    if (fbeCurrentSize + fm.F19.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F19 = 0
    }
    fbeCurrentSize += fm.F19.FBESize()

    if (fbeCurrentSize + fm.F20.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F20 = uint32(0xFFFFFFFF)
    }
    fbeCurrentSize += fm.F20.FBESize()

    if (fbeCurrentSize + fm.F21.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F21 = 0
    }
    fbeCurrentSize += fm.F21.FBESize()

    if (fbeCurrentSize + fm.F22.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F22 = int64(9223372036854775807)
    }
    fbeCurrentSize += fm.F22.FBESize()

    if (fbeCurrentSize + fm.F23.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F23 = 0
    }
    fbeCurrentSize += fm.F23.FBESize()

    if (fbeCurrentSize + fm.F24.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F24 = uint64(0xFFFFFFFFFFFFFFFF)
    }
    fbeCurrentSize += fm.F24.FBESize()

    if (fbeCurrentSize + fm.F25.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F25 = 0.0
    }
    fbeCurrentSize += fm.F25.FBESize()

    if (fbeCurrentSize + fm.F26.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F26 = float32(123.456)
    }
    fbeCurrentSize += fm.F26.FBESize()

    if (fbeCurrentSize + fm.F27.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F27 = 0.0
    }
    fbeCurrentSize += fm.F27.FBESize()

    if (fbeCurrentSize + fm.F28.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F28 = float64(-123.456e+123)
    }
    fbeCurrentSize += fm.F28.FBESize()

    if (fbeCurrentSize + fm.F29.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F29 = fbe.DecimalZero()
    }
    fbeCurrentSize += fm.F29.FBESize()

    if (fbeCurrentSize + fm.F30.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F30 = fbe.DecimalFromString("123456.123456")
    }
    fbeCurrentSize += fm.F30.FBESize()

    if (fbeCurrentSize + fm.F31.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F31 = ""
    }
    fbeCurrentSize += fm.F31.FBESize()

    if (fbeCurrentSize + fm.F32.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F32 = "Initial string!"
    }
    fbeCurrentSize += fm.F32.FBESize()

    if (fbeCurrentSize + fm.F33.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F33 = fbe.TimestampEpoch()
    }
    fbeCurrentSize += fm.F33.FBESize()

    if (fbeCurrentSize + fm.F34.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F34 = fbe.TimestampEpoch()
    }
    fbeCurrentSize += fm.F34.FBESize()

    if (fbeCurrentSize + fm.F35.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F35 = fbe.TimestampUTC()
    }
    fbeCurrentSize += fm.F35.FBESize()

    if (fbeCurrentSize + fm.F36.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F36 = fbe.UUIDNil()
    }
    fbeCurrentSize += fm.F36.FBESize()

    if (fbeCurrentSize + fm.F37.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F37 = fbe.UUIDSequential()
    }
    fbeCurrentSize += fm.F37.FBESize()

    if (fbeCurrentSize + fm.F38.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F38 = fbe.UUIDFromString("123e4567-e89b-12d3-a456-426655440000")
    }
    fbeCurrentSize += fm.F38.FBESize()

    if (fbeCurrentSize + fm.F39.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F39 = *proto.NewOrderSide()
    }
    fbeCurrentSize += fm.F39.FBESize()

    if (fbeCurrentSize + fm.F40.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F40 = *proto.NewOrderType()
    }
    fbeCurrentSize += fm.F40.FBESize()

    if (fbeCurrentSize + fm.F41.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F41 = *proto.NewOrder()
    }
    fbeCurrentSize += fm.F41.FBESize()

    if (fbeCurrentSize + fm.F42.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F42 = *proto.NewBalance()
    }
    fbeCurrentSize += fm.F42.FBESize()

    if (fbeCurrentSize + fm.F43.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F43 = *proto.NewState()
    }
    fbeCurrentSize += fm.F43.FBESize()

    if (fbeCurrentSize + fm.F44.FBESize()) <= fbeStructSize {
    } else {
        fbeValue.F44 = *proto.NewAccount()
    }
    fbeCurrentSize += fm.F44.FBESize()
}
