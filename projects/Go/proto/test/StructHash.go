// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// Version: 1.1.0.0

package test

import "strconv"
import "strings"
import "encoding/json"
import "../fbe"
import "../proto"

// Workaround for Go unused imports issue
var _ = fbe.Version
var _ = proto.Version

// StructHash key
type StructHashKey struct {
}

// Convert StructHash flags key to string
func (k StructHashKey) String() string {
    var sb strings.Builder
    return sb.String()
}

// StructHash struct
type StructHash struct {
    F1 map[string]byte `json:"f1"`
    F2 map[string]*byte `json:"f2"`
    F3 map[string][]byte `json:"f3"`
    F4 map[string]*[]byte `json:"f4"`
    F5 map[string]EnumSimple `json:"f5"`
    F6 map[string]*EnumSimple `json:"f6"`
    F7 map[string]FlagsSimple `json:"f7"`
    F8 map[string]*FlagsSimple `json:"f8"`
    F9 map[string]StructSimple `json:"f9"`
    F10 map[string]*StructSimple `json:"f10"`
}

// Create a new StructHash struct
func NewStructHash() *StructHash {
    return &StructHash{
        F1: make(map[string]byte),
        F2: make(map[string]*byte),
        F3: make(map[string][]byte),
        F4: make(map[string]*[]byte),
        F5: make(map[string]EnumSimple),
        F6: make(map[string]*EnumSimple),
        F7: make(map[string]FlagsSimple),
        F8: make(map[string]*FlagsSimple),
        F9: make(map[string]StructSimple),
        F10: make(map[string]*StructSimple),
    }
}

// Create a new StructHash struct from JSON
func NewStructHashFromJSON(buffer []byte) (*StructHash, error) {
    var result StructHash
    err := json.Unmarshal(buffer, &result)
    if err != nil {
        return nil, err
    }
    return &result, nil
}

// Struct shallow copy
func (s StructHash) Copy() *StructHash {
    var result = s
    return &result
}

// Struct deep clone
func (s StructHash) Clone() *StructHash {
    var result = s
    return &result
}

// Get the struct key
func (s StructHash) Key() StructHashKey {
    return StructHashKey{
    }
}

// Convert struct to optional
func (s StructHash) Optional() *StructHash {
    return &s
}

// Convert struct to string
func (s StructHash) String() string {
    var sb strings.Builder
    return sb.String()
}

// Convert struct to JSON
func (s StructHash) JSON() ([]byte, error) {
    return json.Marshal(s)
}
