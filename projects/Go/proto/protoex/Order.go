// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: protoex.fbe
// Version: 1.1.0.0

package protoex

import "strings"
import "../fbe"
import "../proto"

// Workaround for Go unused imports issue
var _ = fbe.Version
var _ = proto.Version

// Order key
type OrderKey struct {
    Uid int32
}

// Convert Order flags key to string
func (k OrderKey) String() string {
    var sb strings.Builder
    return sb.String()
}

// Order struct
type Order struct {
    Uid int32 `json:"uid"`
    Symbol string `json:"symbol"`
    Side OrderSide `json:"side"`
    Type OrderType `json:"type"`
    Price float64 `json:"price"`
    Volume float64 `json:"volume"`
    Tp float64 `json:"tp"`
    Sl float64 `json:"sl"`
}

// Create a new Order struct
func NewOrder() *Order {
    return &Order{
        Uid: 0,
        Symbol: "",
        Side: *NewOrderSide(),
        Type: *NewOrderType(),
        Price: float64(0.0),
        Volume: float64(0.0),
        Tp: float64(10.0),
        Sl: float64(-10.0),
    }
}

// Create a new Order struct from JSON
func NewOrderFromJSON(buffer []byte) (*Order, error) {
    var result Order
    err := fbe.Json.Unmarshal(buffer, &result)
    if err != nil {
        return nil, err
    }
    return &result, nil
}

// Struct shallow copy
func (s Order) Copy() *Order {
    var result = s
    return &result
}

// Struct deep clone
func (s Order) Clone() *Order {
    var result = s
    return &result
}

// Get the struct key
func (s Order) Key() OrderKey {
    return OrderKey{
        Uid: s.Uid,
    }
}

// Convert struct to optional
func (s Order) Optional() *Order {
    return &s
}

// Convert struct to string
func (s Order) String() string {
    var sb strings.Builder
    return sb.String()
}

// Convert struct to JSON
func (s Order) JSON() ([]byte, error) {
    return fbe.Json.Marshal(&s)
}
