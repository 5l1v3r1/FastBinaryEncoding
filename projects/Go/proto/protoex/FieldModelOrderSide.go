// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: protoex.fbe
// Version: 1.1.0.0

package protoex

import "../fbe"

import "errors"

// Fast Binary Encoding OrderSide field model class
type FieldModelOrderSide struct {
    buffer *fbe.Buffer  // Field model buffer
    offset int          // Field model buffer offset
}

// Get the field size
func (fm FieldModelOrderSide) FBESize() int { return 1 }
// Get the field extra size
func (fm FieldModelOrderSide) FBEExtra() int { return 0 }

// Get the field offset
func (fm FieldModelOrderSide) FBEOffset() int { return fm.offset }
// Set the field offset
func (fm *FieldModelOrderSide) SetFBEOffset(value int) { fm.offset = value }

// Shift the current field offset
func (fm *FieldModelOrderSide) FBEShift(size int) { fm.offset += size }
// Unshift the current field offset
func (fm *FieldModelOrderSide) FBEUnshift(size int) { fm.offset -= size }

// Create a new field model
func NewFieldModelOrderSide(buffer *fbe.Buffer, offset int) *FieldModelOrderSide {
    return &FieldModelOrderSide{ buffer: buffer, offset: offset }
}

// Check if the value is valid
func (fm FieldModelOrderSide) Verify() bool { return true }

// Get the value
func (fm FieldModelOrderSide) Get() (OrderSide, error) {
    return fm.GetDefault(0)
}

// Get the value with provided default value
func (fm FieldModelOrderSide) GetDefault(defaults OrderSide) (OrderSide, error) {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return OrderSide(0), nil
    }

    return OrderSide(fbe.ReadByte(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset())), nil
}

// Set the value
func (fm *FieldModelOrderSide) Set(value OrderSide) error {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return errors.New("model is broken")
    }

    fbe.WriteByte(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset(), byte(value))
    return nil
}
