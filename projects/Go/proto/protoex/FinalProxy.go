// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: protoex.fbe
// Version: 1.2.0.0

package protoex

import "errors"
import "../fbe"
import "../proto"

// Workaround for Go unused imports issue
var _ = fbe.Version
var _ = proto.Version

// Proxy Order interface
type OnProxyFinalOrder interface {
    OnProxyOrder(model *OrderFinalModel, fbeType int, buffer []byte)
}

// Proxy Order function
type OnProxyFinalOrderFunc func(model *OrderFinalModel, fbeType int, buffer []byte)
func (f OnProxyFinalOrderFunc) OnProxyOrder(model *OrderFinalModel, fbeType int, buffer []byte) {
    f(model, fbeType, buffer)
}

// Proxy Balance interface
type OnProxyFinalBalance interface {
    OnProxyBalance(model *BalanceFinalModel, fbeType int, buffer []byte)
}

// Proxy Balance function
type OnProxyFinalBalanceFunc func(model *BalanceFinalModel, fbeType int, buffer []byte)
func (f OnProxyFinalBalanceFunc) OnProxyBalance(model *BalanceFinalModel, fbeType int, buffer []byte) {
    f(model, fbeType, buffer)
}

// Proxy Account interface
type OnProxyFinalAccount interface {
    OnProxyAccount(model *AccountFinalModel, fbeType int, buffer []byte)
}

// Proxy Account function
type OnProxyFinalAccountFunc func(model *AccountFinalModel, fbeType int, buffer []byte)
func (f OnProxyFinalAccountFunc) OnProxyAccount(model *AccountFinalModel, fbeType int, buffer []byte) {
    f(model, fbeType, buffer)
}

// Fast Binary Encoding protoex final proxy
type FinalProxy struct {
    *fbe.Receiver
    protoProxy *proto.FinalProxy
    orderModel *OrderFinalModel
    balanceModel *BalanceFinalModel
    accountModel *AccountFinalModel

    // Proxy Order handler
    HandlerOnProxyOrder OnProxyFinalOrder
    // Proxy Balance handler
    HandlerOnProxyBalance OnProxyFinalBalance
    // Proxy Account handler
    HandlerOnProxyAccount OnProxyFinalAccount
}

// Create a new protoex final proxy with an empty buffer
func NewFinalProxy() *FinalProxy {
    return NewFinalProxyWithBuffer(fbe.NewEmptyBuffer())
}

// Create a new protoex final proxy with the given buffer
func NewFinalProxyWithBuffer(buffer *fbe.Buffer) *FinalProxy {
    proxy := &FinalProxy{
        fbe.NewReceiver(buffer, true),
        proto.NewFinalProxyWithBuffer(buffer),
        NewOrderFinalModel(buffer),
        NewBalanceFinalModel(buffer),
        NewAccountFinalModel(buffer),
        nil,
        nil,
        nil,
    }
    proxy.SetupHandlerOnReceive(proxy)
    proxy.SetupHandlerOnProxyOrderFunc(func(model *OrderFinalModel, fbeType int, buffer []byte) {})
    proxy.SetupHandlerOnProxyBalanceFunc(func(model *BalanceFinalModel, fbeType int, buffer []byte) {})
    proxy.SetupHandlerOnProxyAccountFunc(func(model *AccountFinalModel, fbeType int, buffer []byte) {})
    return proxy
}

// Imported proxy

// Get the proto proxy
func (p *FinalProxy) ProtoProxy() *proto.FinalProxy { return p.protoProxy }
// Set the proto proxy
func (p *FinalProxy) SetProtoProxy(proxy *proto.FinalProxy) { p.protoProxy = proxy }

// Setup handlers
func (p *FinalProxy) SetupHandlers(handlers interface{}) {
    p.Receiver.SetupHandlers(handlers)
    p.protoProxy.SetupHandlers(handlers)
    if handler, ok := handlers.(OnProxyFinalOrder); ok {
        p.SetupHandlerOnProxyOrder(handler)
    }
    if handler, ok := handlers.(OnProxyFinalBalance); ok {
        p.SetupHandlerOnProxyBalance(handler)
    }
    if handler, ok := handlers.(OnProxyFinalAccount); ok {
        p.SetupHandlerOnProxyAccount(handler)
    }
}

// Setup proxy Order handler
func (p *FinalProxy) SetupHandlerOnProxyOrder(handler OnProxyFinalOrder) { p.HandlerOnProxyOrder = handler }
// Setup proxy Order handler function
func (p *FinalProxy) SetupHandlerOnProxyOrderFunc(function func(model *OrderFinalModel, fbeType int, buffer []byte)) { p.HandlerOnProxyOrder = OnProxyFinalOrderFunc(function) }
// Setup proxy Balance handler
func (p *FinalProxy) SetupHandlerOnProxyBalance(handler OnProxyFinalBalance) { p.HandlerOnProxyBalance = handler }
// Setup proxy Balance handler function
func (p *FinalProxy) SetupHandlerOnProxyBalanceFunc(function func(model *BalanceFinalModel, fbeType int, buffer []byte)) { p.HandlerOnProxyBalance = OnProxyFinalBalanceFunc(function) }
// Setup proxy Account handler
func (p *FinalProxy) SetupHandlerOnProxyAccount(handler OnProxyFinalAccount) { p.HandlerOnProxyAccount = handler }
// Setup proxy Account handler function
func (p *FinalProxy) SetupHandlerOnProxyAccountFunc(function func(model *AccountFinalModel, fbeType int, buffer []byte)) { p.HandlerOnProxyAccount = OnProxyFinalAccountFunc(function) }

// Receive message handler
func (p *FinalProxy) OnReceive(fbeType int, buffer []byte) (bool, error) {
    switch fbeType {
    case p.orderModel.FBEType():
        // Attach the FBE stream to the proxy model
        p.orderModel.Buffer().Attach(buffer)
        if !p.orderModel.Verify() {
            return false, errors.New("protoex.Order validation failed")
        }

        // Call proxy handler
        fbeBegin, err := p.orderModel.model.GetBegin()
        if fbeBegin == 0 {
            return false, err
        }
        p.HandlerOnProxyOrder.OnProxyOrder(p.orderModel, fbeType, buffer)
        p.orderModel.model.GetEnd(fbeBegin)
        return true, nil
    case p.balanceModel.FBEType():
        // Attach the FBE stream to the proxy model
        p.balanceModel.Buffer().Attach(buffer)
        if !p.balanceModel.Verify() {
            return false, errors.New("protoex.Balance validation failed")
        }

        // Call proxy handler
        fbeBegin, err := p.balanceModel.model.GetBegin()
        if fbeBegin == 0 {
            return false, err
        }
        p.HandlerOnProxyBalance.OnProxyBalance(p.balanceModel, fbeType, buffer)
        p.balanceModel.model.GetEnd(fbeBegin)
        return true, nil
    case p.accountModel.FBEType():
        // Attach the FBE stream to the proxy model
        p.accountModel.Buffer().Attach(buffer)
        if !p.accountModel.Verify() {
            return false, errors.New("protoex.Account validation failed")
        }

        // Call proxy handler
        fbeBegin, err := p.accountModel.model.GetBegin()
        if fbeBegin == 0 {
            return false, err
        }
        p.HandlerOnProxyAccount.OnProxyAccount(p.accountModel, fbeType, buffer)
        p.accountModel.model.GetEnd(fbeBegin)
        return true, nil
    }

    if p.protoProxy != nil {
        if ok, err := p.protoProxy.OnReceive(fbeType, buffer); ok {
            return ok, err
        }
    }

    return false, nil
}
