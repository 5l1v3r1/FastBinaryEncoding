// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: enums.fbe
// Version: 1.1.0.0

package enums

import "errors"
import "../fbe"

// Workaround for Go unused imports issue
var _ = fbe.Version

// Fast Binary Encoding enums sender
type Sender struct {
    fbe.Sender
    enumsModel *EnumsModel
}

// Create a new enums sender
func NewSender(buffer *fbe.Buffer) *Sender {
    return &Sender{
        *fbe.NewSender(buffer, false, false),
        NewEnumsModel(buffer),
    }
}

// Sender models accessors

func (s *Sender) EnumsModel() *EnumsModel { return s.enumsModel }

// Send methods

func (s *Sender) Send(value interface{}) (int, error) {
    switch value.(type) {
    case *Enums:
        return s.SendEnums(value.(*Enums))
    }
    return 0, nil
}

func (s *Sender) SendEnums(value *Enums) (int, error) {
    // Serialize the value into the FBE stream
    serialized, err := s.enumsModel.Serialize(value)
    if serialized <= 0 {
        return 0, errors.New("enums.Enums serialization failed")
    }
    if err != nil {
        return 0, err
    }
    if !s.enumsModel.Verify() {
        return 0, errors.New("enums.Enums validation failed")
    }

    // Log the value
    if s.Logging() {
        message := value.String()
        if err := s.OnSendLogCallback.OnSendLog(message); err != nil {
            return 0, err
        }
    }

    // Send the serialized value
    return s.SendSerialized(serialized)
}
