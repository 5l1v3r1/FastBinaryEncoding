// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: enums.fbe
// Version: 1.1.0.0

package enums

import "encoding/json"
import "../fbe"

// Workaround for Go unused imports issue
var _ = fbe.Version

// EnumUInt64 enum type
type EnumUInt64 uint64

// EnumUInt64 enum values
//noinspection GoSnakeCaseUsage
const (
    EnumUInt64_ENUM_VALUE_0 = EnumUInt64(0 + 0)
    EnumUInt64_ENUM_VALUE_1 = EnumUInt64(0 + 0)
    EnumUInt64_ENUM_VALUE_2 = EnumUInt64(0 + 1)
    EnumUInt64_ENUM_VALUE_3 = EnumUInt64(0xFFFFFFFFFFFFFFFE + 0)
    EnumUInt64_ENUM_VALUE_4 = EnumUInt64(0xFFFFFFFFFFFFFFFE + 1)
    EnumUInt64_ENUM_VALUE_5 = EnumUInt64(EnumUInt64_ENUM_VALUE_3)
)

// Convert enum to string
func (e EnumUInt64) String() string {
    if e == EnumUInt64_ENUM_VALUE_0 {
        return "ENUM_VALUE_0"
    }
    if e == EnumUInt64_ENUM_VALUE_1 {
        return "ENUM_VALUE_1"
    }
    if e == EnumUInt64_ENUM_VALUE_2 {
        return "ENUM_VALUE_2"
    }
    if e == EnumUInt64_ENUM_VALUE_3 {
        return "ENUM_VALUE_3"
    }
    if e == EnumUInt64_ENUM_VALUE_4 {
        return "ENUM_VALUE_4"
    }
    if e == EnumUInt64_ENUM_VALUE_5 {
        return "ENUM_VALUE_5"
    }
    return "<unknown>"
}

// Convert enum to JSON
func (e EnumUInt64) MarshalJSON() ([]byte, error) {
    return json.Marshal(uint64(e))
}

// Convert JSON to enum
func (e *EnumUInt64) UnmarshalJSON(b []byte) error {
    var value uint64
    err := json.Unmarshal(b, &value)
    if err != nil {
        return err
    }
    *e = EnumUInt64(value)
    return nil
}
