// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: enums.fbe
// Version: 1.1.0.0

package enums

import "encoding/json"
import "../fbe"

// Workaround for Go unused imports issue
var _ = fbe.Version

// EnumInt32 enum type
type EnumInt32 int32

// EnumInt32 enum values
//noinspection GoSnakeCaseUsage
const (
    EnumInt32_ENUM_VALUE_0 = EnumInt32(0 + 0)
    EnumInt32_ENUM_VALUE_1 = EnumInt32(-2147483648 + 0)
    EnumInt32_ENUM_VALUE_2 = EnumInt32(-2147483648 + 1)
    EnumInt32_ENUM_VALUE_3 = EnumInt32(2147483646 + 0)
    EnumInt32_ENUM_VALUE_4 = EnumInt32(2147483646 + 1)
    EnumInt32_ENUM_VALUE_5 = EnumInt32(EnumInt32_ENUM_VALUE_3)
)

// Convert enum to string
func (e EnumInt32) String() string {
    if e == EnumInt32_ENUM_VALUE_0 {
        return "ENUM_VALUE_0"
    }
    if e == EnumInt32_ENUM_VALUE_1 {
        return "ENUM_VALUE_1"
    }
    if e == EnumInt32_ENUM_VALUE_2 {
        return "ENUM_VALUE_2"
    }
    if e == EnumInt32_ENUM_VALUE_3 {
        return "ENUM_VALUE_3"
    }
    if e == EnumInt32_ENUM_VALUE_4 {
        return "ENUM_VALUE_4"
    }
    if e == EnumInt32_ENUM_VALUE_5 {
        return "ENUM_VALUE_5"
    }
    return "<unknown>"
}

// Convert enum to JSON
func (e EnumInt32) MarshalJSON() ([]byte, error) {
    return json.Marshal(int32(e))
}

// Convert JSON to enum
func (e *EnumInt32) UnmarshalJSON(b []byte) error {
    var value int32
    err := json.Unmarshal(b, &value)
    if err != nil {
        return err
    }
    *e = EnumInt32(value)
    return nil
}
