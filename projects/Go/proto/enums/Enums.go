// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: enums.fbe
// Version: 1.1.0.0

package enums

import "strconv"
import "strings"
import "encoding/json"
import "../fbe"

// Workaround for Go unused imports issue
var _ = fbe.Version

// Enums key
type EnumsKey struct {
}

// Convert Enums flags key to string
func (k EnumsKey) String() string {
    var sb strings.Builder
    return sb.String()
}

// Enums struct
type Enums struct {
    Byte0 EnumByte
    Byte1 EnumByte
    Byte2 EnumByte
    Byte3 EnumByte
    Byte4 EnumByte
    Byte5 EnumByte
    Char0 EnumChar
    Char1 EnumChar
    Char2 EnumChar
    Char3 EnumChar
    Char4 EnumChar
    Char5 EnumChar
    Wchar0 EnumWChar
    Wchar1 EnumWChar
    Wchar2 EnumWChar
    Wchar3 EnumWChar
    Wchar4 EnumWChar
    Wchar5 EnumWChar
    Int8b0 EnumInt8
    Int8b1 EnumInt8
    Int8b2 EnumInt8
    Int8b3 EnumInt8
    Int8b4 EnumInt8
    Int8b5 EnumInt8
    Uint8b0 EnumUInt8
    Uint8b1 EnumUInt8
    Uint8b2 EnumUInt8
    Uint8b3 EnumUInt8
    Uint8b4 EnumUInt8
    Uint8b5 EnumUInt8
    Int16b0 EnumInt16
    Int16b1 EnumInt16
    Int16b2 EnumInt16
    Int16b3 EnumInt16
    Int16b4 EnumInt16
    Int16b5 EnumInt16
    Uint16b0 EnumUInt16
    Uint16b1 EnumUInt16
    Uint16b2 EnumUInt16
    Uint16b3 EnumUInt16
    Uint16b4 EnumUInt16
    Uint16b5 EnumUInt16
    Int32b0 EnumInt32
    Int32b1 EnumInt32
    Int32b2 EnumInt32
    Int32b3 EnumInt32
    Int32b4 EnumInt32
    Int32b5 EnumInt32
    Uint32b0 EnumUInt32
    Uint32b1 EnumUInt32
    Uint32b2 EnumUInt32
    Uint32b3 EnumUInt32
    Uint32b4 EnumUInt32
    Uint32b5 EnumUInt32
    Int64b0 EnumInt64
    Int64b1 EnumInt64
    Int64b2 EnumInt64
    Int64b3 EnumInt64
    Int64b4 EnumInt64
    Int64b5 EnumInt64
    Uint64b0 EnumUInt64
    Uint64b1 EnumUInt64
    Uint64b2 EnumUInt64
    Uint64b3 EnumUInt64
    Uint64b4 EnumUInt64
    Uint64b5 EnumUInt64
}

// Create a new Enums struct from JSON
func NewEnumsFromJSON(buffer []byte) (*Enums, error) {
    var result Enums
    err := json.Unmarshal(buffer, &result)
    if err != nil {
        return nil, err
    }
    return &result, nil
}

// Get the struct key
func (s Enums) Key() EnumsKey {
    return EnumsKey{
    }
}

// Convert struct to string
func (s Enums) String() string {
    var sb strings.Builder
    return sb.String()
}

// Convert struct to JSON
func (s Enums) JSON() ([]byte, error) {
    return json.Marshal(s)
}
