// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: proto.fbe
// Version: 1.1.0.0

package proto

import "strings"
import "encoding/json"

type State byte

//noinspection GoSnakeCaseUsage
const (
    State_unknown = State(0x00)
    State_invalid = State(0x01)
    State_initialized = State(0x02)
    State_calculated = State(0x04)
    State_broken = State(0x08)
    State_good = State(State_initialized | State_calculated)
    State_bad = State(State_unknown | State_invalid | State_broken)
)

//noinspection GoBoolExpressions
func (f State) String() string {
    var sb strings.Builder
    first := true
    if ((f & State_unknown) != 0) && ((f & State_unknown) == State_unknown) {
        if first {
            first = false
        } else {
            sb.WriteRune('|')
        }
        sb.WriteString("unknown")
    }
    if ((f & State_invalid) != 0) && ((f & State_invalid) == State_invalid) {
        if first {
            first = false
        } else {
            sb.WriteRune('|')
        }
        sb.WriteString("invalid")
    }
    if ((f & State_initialized) != 0) && ((f & State_initialized) == State_initialized) {
        if first {
            first = false
        } else {
            sb.WriteRune('|')
        }
        sb.WriteString("initialized")
    }
    if ((f & State_calculated) != 0) && ((f & State_calculated) == State_calculated) {
        if first {
            first = false
        } else {
            sb.WriteRune('|')
        }
        sb.WriteString("calculated")
    }
    if ((f & State_broken) != 0) && ((f & State_broken) == State_broken) {
        if first {
            first = false
        } else {
            sb.WriteRune('|')
        }
        sb.WriteString("broken")
    }
    if ((f & State_good) != 0) && ((f & State_good) == State_good) {
        if first {
            first = false
        } else {
            sb.WriteRune('|')
        }
        sb.WriteString("good")
    }
    if ((f & State_bad) != 0) && ((f & State_bad) == State_bad) {
        if first {
            first = false
        } else {
            sb.WriteRune('|')
        }
        sb.WriteString("bad")
    }
    return sb.String()
}

func (f State) MarshalJSON() ([]byte, error) {
    return json.Marshal(byte(f))
}

func (f *State) UnmarshalJSON(b []byte) error {
    var value byte
    err := json.Unmarshal(b, &value)
    if err != nil {
        return err
    }
    *f = State(value)
    return nil
}
