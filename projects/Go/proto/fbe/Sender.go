// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: fbe
// Version: 1.1.0.0

package fbe

// Send message handler
type OnSendHandler interface {
    OnSend(buffer []byte, offset int, size int) (int, error)
}

// Send message handler function
type OnSendHandlerFunc func(buffer []byte, offset int, size int) (int, error)
func (f OnSendHandlerFunc) OnSend(buffer []byte, offset int, size int) (int, error) {
    return f(buffer, offset, size)
}

// Send log message handler
type OnSendLogHandler interface {
    OnSendLog(message string) error
}

// Send log message handler function
type OnSendLogHandlerFunc func(message string) error
func (f OnSendLogHandlerFunc) OnSendLog(message string) error {
    return f(message)
}

// Fast Binary Encoding base sender
type Sender struct {
    // Sender bytes buffer
    buffer *Buffer
    // Logging flag
    logging bool
    // Final protocol flag
    final bool

    // Send message callback
    OnSendCallback OnSendHandler
    // Send log message callback
    OnSendLogCallback OnSendLogHandler
}

// Create a new base sender
func NewSender(buffer *Buffer, logging bool, final bool) *Sender {
    sender := &Sender{buffer: buffer, logging: logging, final: final}
    sender.OnSendFunc(func(buffer []byte, offset int, size int) (int, error) { panic("send handler is not provided") })
    sender.OnSendLogFunc(func(message string) error { return nil })
    return sender
}

// Get the bytes buffer
func (s *Sender) Buffer() *Buffer { return s.buffer }

// Get the logging flag
func (s *Sender) Logging() bool { return s.logging }
// Set the logging flag
func (s *Sender) SetLogging(logging bool) { s.logging = logging }

// Get the final protocol flag
func (s *Sender) Final() bool { return s.final }
// Set the final protocol flag
func (s *Sender) SetFinal(final bool) { s.final = final }

// Send message handler
func (s *Sender) OnSend(handler OnSendHandler) { s.OnSendCallback = handler }
// Send message handler function
func (s *Sender) OnSendFunc(function func(buffer []byte, offset int, size int) (int, error)) { s.OnSendCallback = OnSendHandlerFunc(function) }
// Send log message handler
func (s *Sender) OnSendLog(handler OnSendLogHandler) { s.OnSendLogCallback = handler }
// Send log message handler function
func (s *Sender) OnSendLogFunc(function func(message string) error) { s.OnSendLogCallback = OnSendLogHandlerFunc(function) }

// Send serialized buffer.
// Direct call of the method requires knowledge about internals of FBE models serialization.
// Use it with care!
func (s *Sender) SendSerialized(serialized int) (int, error) {
    if serialized <= 0 {
        return 0, nil
    }

    // Shift the send buffer
    s.buffer.Shift(serialized)

    // Send the value
    sent, err := s.OnSendCallback.OnSend(s.buffer.Data(), 0, s.buffer.Size())
    s.buffer.Remove(0, sent)
    return sent, err
}
