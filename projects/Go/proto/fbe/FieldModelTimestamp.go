// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: fbe
// Version: 1.1.0.0

package fbe

import "time"
import "github.com/google/uuid"

// Workaround for Go unused imports issue
var _ = time.Unix(0, 0)
var _ = uuid.Nil

// Fast Binary Encoding time.Time field model class
type FieldModelTimestamp struct {
    buffer Buffer // Field model buffer
    offset int    // Field model buffer offset
}

// Get the field size
func (fm FieldModelTimestamp) FBESize() int { return 8 }
// Get the field extra size
func (fm FieldModelTimestamp) FBEExtra() int { return 0 }

// Get the field offset
func (fm FieldModelTimestamp) FBEOffset() int { return fm.offset }
// Set the field offset
func (fm *FieldModelTimestamp) SetFBEOffset(value int) { fm.offset = value }

// Shift the current field offset
func (fm *FieldModelTimestamp) FBEShift(size int) { fm.offset += size }
// Unshift the current field offset
func (fm *FieldModelTimestamp) FBEUnshift(size int) { fm.offset -= size }

func NewFieldModelTimestamp(buffer Buffer, offset int) *FieldModelTimestamp {
    return &FieldModelTimestamp{buffer: buffer, offset: offset}
}

// Check if the value is valid
func (fm FieldModelTimestamp) Verify() bool { return true }

// Get the value
func (fm FieldModelTimestamp) Get() time.Time {
    return fm.GetDefault(time.Unix(0, 0))
}

// Get the value with provided default value
func (fm FieldModelTimestamp) GetDefault(defaults time.Time) time.Time {
    if fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize() > fm.buffer.Size() {
        return defaults
    }

    return ReadTimestamp(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset())
}

// Set the value
func (fm *FieldModelTimestamp) Set(value time.Time) {
    if fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize() > fm.buffer.Size() {
        return
    }

    WriteTimestamp(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset(), value)
}
