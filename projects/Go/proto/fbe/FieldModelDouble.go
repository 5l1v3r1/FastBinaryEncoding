// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: fbe
// Version: 1.1.0.0

package fbe

import "time"
import "github.com/google/uuid"

// Workaround for Go unused imports issue
var _ = time.Unix(0, 0)
var _ = uuid.Nil

// Fast Binary Encoding float64 field model class
type FieldModelDouble struct {
    buffer Buffer // Field model buffer
    offset int    // Field model buffer offset
}

// Get the field size
func (fm FieldModelDouble) FBESize() int { return 8 }
// Get the field extra size
func (fm FieldModelDouble) FBEExtra() int { return 0 }

// Get the field offset
func (fm FieldModelDouble) FBEOffset() int { return fm.offset }
// Set the field offset
func (fm *FieldModelDouble) SetFBEOffset(value int) { fm.offset = value }

// Shift the current field offset
func (fm *FieldModelDouble) FBEShift(size int) { fm.offset += size }
// Unshift the current field offset
func (fm *FieldModelDouble) FBEUnshift(size int) { fm.offset -= size }

func NewFieldModelDouble(buffer Buffer, offset int) *FieldModelDouble {
    return &FieldModelDouble{buffer: buffer, offset: offset}
}

// Check if the value is valid
func (fm FieldModelDouble) Verify() bool { return true }

// Get the value
func (fm FieldModelDouble) Get() float64 {
    return fm.GetDefault(0.0)
}

// Get the value with provided default value
func (fm FieldModelDouble) GetDefault(defaults float64) float64 {
    if fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize() > fm.buffer.Size() {
        return defaults
    }

    return ReadDouble(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset())
}

// Set the value
func (fm *FieldModelDouble) Set(value float64) {
    if fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize() > fm.buffer.Size() {
        return
    }

    WriteDouble(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset(), value)
}
