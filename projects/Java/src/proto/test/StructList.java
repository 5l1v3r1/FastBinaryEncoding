// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding

package test;

import java.io.*;
import java.lang.*;
import java.lang.reflect.*;
import java.math.*;
import java.nio.charset.*;
import java.time.*;
import java.util.*;
import fbe.*;
import proto.*;

public class StructList implements Comparable<Object>
{
    public LinkedList<Byte> f1 = new LinkedList<Byte>();
    public LinkedList<Byte> f2 = new LinkedList<Byte>();
    public LinkedList<byte[]> f3 = new LinkedList<byte[]>();
    public LinkedList<byte[]> f4 = new LinkedList<byte[]>();
    public LinkedList<EnumSimple> f5 = new LinkedList<EnumSimple>();
    public LinkedList<EnumSimple> f6 = new LinkedList<EnumSimple>();
    public LinkedList<FlagsSimple> f7 = new LinkedList<FlagsSimple>();
    public LinkedList<FlagsSimple> f8 = new LinkedList<FlagsSimple>();
    public LinkedList<StructSimple> f9 = new LinkedList<StructSimple>();
    public LinkedList<StructSimple> f10 = new LinkedList<StructSimple>();

    public StructList() {}

    public StructList(LinkedList<Byte> f1, LinkedList<Byte> f2, LinkedList<byte[]> f3, LinkedList<byte[]> f4, LinkedList<EnumSimple> f5, LinkedList<EnumSimple> f6, LinkedList<FlagsSimple> f7, LinkedList<FlagsSimple> f8, LinkedList<StructSimple> f9, LinkedList<StructSimple> f10)
    {
        this.f1 = f1;
        this.f2 = f2;
        this.f3 = f3;
        this.f4 = f4;
        this.f5 = f5;
        this.f6 = f6;
        this.f7 = f7;
        this.f8 = f8;
        this.f9 = f9;
        this.f10 = f10;
    }

    public StructList(StructList other)
    {
        this.f1 = other.f1;
        this.f2 = other.f2;
        this.f3 = other.f3;
        this.f4 = other.f4;
        this.f5 = other.f5;
        this.f6 = other.f6;
        this.f7 = other.f7;
        this.f8 = other.f8;
        this.f9 = other.f9;
        this.f10 = other.f10;
    }

    public StructList clone()
    {
        // Serialize the struct to the FBE stream
        var writer = new test.fbe.StructListModel();
        writer.serialize(this);

        // Deserialize the struct from the FBE stream
        var reader = new test.fbe.StructListModel();
        reader.attach(writer.getBuffer());
        return reader.deserialize();
    }

    @Override
    public int compareTo(Object obj)
    {
        if (obj == null)
            return -1;

        if (!StructList.class.isAssignableFrom(obj.getClass()))
            return -1;

        final StructList other = (StructList)obj;

        int result = 0;
        return result;
    }

    @Override
    public boolean equals(Object obj)
    {
        if (obj == null)
            return false;

        if (!StructList.class.isAssignableFrom(obj.getClass()))
            return false;

        final StructList other = (StructList)obj;

        return true;
    }

    @Override
    public int hashCode()
    {
        int hash = 17;
        return hash;
    }

    @Override
    public String toString()
    {
        var sb = new StringBuilder();
        sb.append("StructList(");
        if (f1 != null)
        {
            boolean first = true;
            sb.append("f1=[").append(f1.size()).append("]<");
            for (var item : f1)
            {
                sb.append(first ? "" : ",").append(item);
                first = false;
            }
            sb.append(">");
        }
        if (f2 != null)
        {
            boolean first = true;
            sb.append(",f2=[").append(f2.size()).append("]<");
            for (var item : f2)
            {
                if (item != null) sb.append(first ? "" : ",").append(item); else sb.append("null");
                first = false;
            }
            sb.append(">");
        }
        if (f3 != null)
        {
            boolean first = true;
            sb.append(",f3=[").append(f3.size()).append("]<");
            for (var item : f3)
            {
                if (item != null) sb.append(first ? "" : ",").append("bytes[").append(item.length).append("]"); else sb.append("null");
                first = false;
            }
            sb.append(">");
        }
        if (f4 != null)
        {
            boolean first = true;
            sb.append(",f4=[").append(f4.size()).append("]<");
            for (var item : f4)
            {
                if (item != null) sb.append(first ? "" : ",").append("bytes[").append(item.length).append("]"); else sb.append("null");
                first = false;
            }
            sb.append(">");
        }
        if (f5 != null)
        {
            boolean first = true;
            sb.append(",f5=[").append(f5.size()).append("]<");
            for (var item : f5)
            {
                sb.append(first ? "" : ",").append(item);
                first = false;
            }
            sb.append(">");
        }
        if (f6 != null)
        {
            boolean first = true;
            sb.append(",f6=[").append(f6.size()).append("]<");
            for (var item : f6)
            {
                if (item != null) sb.append(first ? "" : ",").append(item); else sb.append("null");
                first = false;
            }
            sb.append(">");
        }
        if (f7 != null)
        {
            boolean first = true;
            sb.append(",f7=[").append(f7.size()).append("]<");
            for (var item : f7)
            {
                sb.append(first ? "" : ",").append(item);
                first = false;
            }
            sb.append(">");
        }
        if (f8 != null)
        {
            boolean first = true;
            sb.append(",f8=[").append(f8.size()).append("]<");
            for (var item : f8)
            {
                if (item != null) sb.append(first ? "" : ",").append(item); else sb.append("null");
                first = false;
            }
            sb.append(">");
        }
        if (f9 != null)
        {
            boolean first = true;
            sb.append(",f9=[").append(f9.size()).append("]<");
            for (var item : f9)
            {
                sb.append(first ? "" : ",").append(item);
                first = false;
            }
            sb.append(">");
        }
        if (f10 != null)
        {
            boolean first = true;
            sb.append(",f10=[").append(f10.size()).append("]<");
            for (var item : f10)
            {
                if (item != null) sb.append(first ? "" : ",").append(item); else sb.append("null");
                first = false;
            }
            sb.append(">");
        }
        sb.append(")");
        return sb.toString();
    }

    public String toJson() { return test.fbe.Json.getJsonEngine().toJson(this); }
    public static StructList fromJson(String json) { return test.fbe.Json.getJsonEngine().fromJson(json, StructList.class); }
}
