// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding

package test.fbe;

import java.io.*;
import java.lang.*;
import java.lang.reflect.*;
import java.math.*;
import java.nio.charset.*;
import java.time.*;
import java.util.*;
import javafx.util.*;

import fbe.*;
import test.*;

// Fast Binary Encoding StructSimple field model class
public final class FieldModelStructSimple extends FieldModel
{
    public final FieldModelInt32 uid;
    public final FieldModelBoolean f1;
    public final FieldModelBoolean f2;
    public final FieldModelByte f3;
    public final FieldModelByte f4;
    public final FieldModelChar f5;
    public final FieldModelChar f6;
    public final FieldModelWChar f7;
    public final FieldModelWChar f8;
    public final FieldModelInt8 f9;
    public final FieldModelInt8 f10;
    public final FieldModelInt8 f11;
    public final FieldModelInt8 f12;
    public final FieldModelInt16 f13;
    public final FieldModelInt16 f14;
    public final FieldModelInt16 f15;
    public final FieldModelInt16 f16;
    public final FieldModelInt32 f17;
    public final FieldModelInt32 f18;
    public final FieldModelInt32 f19;
    public final FieldModelInt32 f20;
    public final FieldModelInt64 f21;
    public final FieldModelInt64 f22;
    public final FieldModelInt64 f23;
    public final FieldModelInt64 f24;
    public final FieldModelFloat f25;
    public final FieldModelFloat f26;
    public final FieldModelDouble f27;
    public final FieldModelDouble f28;
    public final FieldModelDecimal f29;
    public final FieldModelDecimal f30;
    public final FieldModelString f31;
    public final FieldModelString f32;
    public final FieldModelTimestamp f33;
    public final FieldModelTimestamp f34;
    public final FieldModelTimestamp f35;
    public final FieldModelUUID f36;
    public final FieldModelUUID f37;
    public final FieldModelUUID f38;
    public final proto.fbe.FieldModelOrderSide f39;
    public final proto.fbe.FieldModelOrderType f40;
    public final proto.fbe.FieldModelOrder f41;
    public final proto.fbe.FieldModelBalance f42;
    public final proto.fbe.FieldModelState f43;
    public final proto.fbe.FieldModelAccount f44;

    public FieldModelStructSimple(Buffer buffer, long offset)
    {
        super(buffer, offset);
        uid = new FieldModelInt32(buffer, 4 + 4);
        f1 = new FieldModelBoolean(buffer, uid.FBEOffset() + uid.FBESize());
        f2 = new FieldModelBoolean(buffer, f1.FBEOffset() + f1.FBESize());
        f3 = new FieldModelByte(buffer, f2.FBEOffset() + f2.FBESize());
        f4 = new FieldModelByte(buffer, f3.FBEOffset() + f3.FBESize());
        f5 = new FieldModelChar(buffer, f4.FBEOffset() + f4.FBESize());
        f6 = new FieldModelChar(buffer, f5.FBEOffset() + f5.FBESize());
        f7 = new FieldModelWChar(buffer, f6.FBEOffset() + f6.FBESize());
        f8 = new FieldModelWChar(buffer, f7.FBEOffset() + f7.FBESize());
        f9 = new FieldModelInt8(buffer, f8.FBEOffset() + f8.FBESize());
        f10 = new FieldModelInt8(buffer, f9.FBEOffset() + f9.FBESize());
        f11 = new FieldModelInt8(buffer, f10.FBEOffset() + f10.FBESize());
        f12 = new FieldModelInt8(buffer, f11.FBEOffset() + f11.FBESize());
        f13 = new FieldModelInt16(buffer, f12.FBEOffset() + f12.FBESize());
        f14 = new FieldModelInt16(buffer, f13.FBEOffset() + f13.FBESize());
        f15 = new FieldModelInt16(buffer, f14.FBEOffset() + f14.FBESize());
        f16 = new FieldModelInt16(buffer, f15.FBEOffset() + f15.FBESize());
        f17 = new FieldModelInt32(buffer, f16.FBEOffset() + f16.FBESize());
        f18 = new FieldModelInt32(buffer, f17.FBEOffset() + f17.FBESize());
        f19 = new FieldModelInt32(buffer, f18.FBEOffset() + f18.FBESize());
        f20 = new FieldModelInt32(buffer, f19.FBEOffset() + f19.FBESize());
        f21 = new FieldModelInt64(buffer, f20.FBEOffset() + f20.FBESize());
        f22 = new FieldModelInt64(buffer, f21.FBEOffset() + f21.FBESize());
        f23 = new FieldModelInt64(buffer, f22.FBEOffset() + f22.FBESize());
        f24 = new FieldModelInt64(buffer, f23.FBEOffset() + f23.FBESize());
        f25 = new FieldModelFloat(buffer, f24.FBEOffset() + f24.FBESize());
        f26 = new FieldModelFloat(buffer, f25.FBEOffset() + f25.FBESize());
        f27 = new FieldModelDouble(buffer, f26.FBEOffset() + f26.FBESize());
        f28 = new FieldModelDouble(buffer, f27.FBEOffset() + f27.FBESize());
        f29 = new FieldModelDecimal(buffer, f28.FBEOffset() + f28.FBESize());
        f30 = new FieldModelDecimal(buffer, f29.FBEOffset() + f29.FBESize());
        f31 = new FieldModelString(buffer, f30.FBEOffset() + f30.FBESize());
        f32 = new FieldModelString(buffer, f31.FBEOffset() + f31.FBESize());
        f33 = new FieldModelTimestamp(buffer, f32.FBEOffset() + f32.FBESize());
        f34 = new FieldModelTimestamp(buffer, f33.FBEOffset() + f33.FBESize());
        f35 = new FieldModelTimestamp(buffer, f34.FBEOffset() + f34.FBESize());
        f36 = new FieldModelUUID(buffer, f35.FBEOffset() + f35.FBESize());
        f37 = new FieldModelUUID(buffer, f36.FBEOffset() + f36.FBESize());
        f38 = new FieldModelUUID(buffer, f37.FBEOffset() + f37.FBESize());
        f39 = new proto.fbe.FieldModelOrderSide(buffer, f38.FBEOffset() + f38.FBESize());
        f40 = new proto.fbe.FieldModelOrderType(buffer, f39.FBEOffset() + f39.FBESize());
        f41 = new proto.fbe.FieldModelOrder(buffer, f40.FBEOffset() + f40.FBESize());
        f42 = new proto.fbe.FieldModelBalance(buffer, f41.FBEOffset() + f41.FBESize());
        f43 = new proto.fbe.FieldModelState(buffer, f42.FBEOffset() + f42.FBESize());
        f44 = new proto.fbe.FieldModelAccount(buffer, f43.FBEOffset() + f43.FBESize());
    }

    // Get the field size
    @Override
    public long FBESize() { return 4; }
    // Get the field body size
    public long FBEBody()
    {
        long fbeResult = 4 + 4
            + uid.FBESize()
            + f1.FBESize()
            + f2.FBESize()
            + f3.FBESize()
            + f4.FBESize()
            + f5.FBESize()
            + f6.FBESize()
            + f7.FBESize()
            + f8.FBESize()
            + f9.FBESize()
            + f10.FBESize()
            + f11.FBESize()
            + f12.FBESize()
            + f13.FBESize()
            + f14.FBESize()
            + f15.FBESize()
            + f16.FBESize()
            + f17.FBESize()
            + f18.FBESize()
            + f19.FBESize()
            + f20.FBESize()
            + f21.FBESize()
            + f22.FBESize()
            + f23.FBESize()
            + f24.FBESize()
            + f25.FBESize()
            + f26.FBESize()
            + f27.FBESize()
            + f28.FBESize()
            + f29.FBESize()
            + f30.FBESize()
            + f31.FBESize()
            + f32.FBESize()
            + f33.FBESize()
            + f34.FBESize()
            + f35.FBESize()
            + f36.FBESize()
            + f37.FBESize()
            + f38.FBESize()
            + f39.FBESize()
            + f40.FBESize()
            + f41.FBESize()
            + f42.FBESize()
            + f43.FBESize()
            + f44.FBESize()
            ;
        return fbeResult;
    }
    // Get the field extra size
    @Override
    public long FBEExtra()
    {
        if ((_buffer.getOffset() + FBEOffset() + FBESize()) > _buffer.getSize())
            return 0;

        int fbeStructOffset = readInt32(FBEOffset());
        if ((fbeStructOffset == 0) || ((_buffer.getOffset() + fbeStructOffset + 4) > _buffer.getSize()))
            return 0;

        _buffer.shift(fbeStructOffset);

        long fbeResult = FBEBody()
            + uid.FBEExtra()
            + f1.FBEExtra()
            + f2.FBEExtra()
            + f3.FBEExtra()
            + f4.FBEExtra()
            + f5.FBEExtra()
            + f6.FBEExtra()
            + f7.FBEExtra()
            + f8.FBEExtra()
            + f9.FBEExtra()
            + f10.FBEExtra()
            + f11.FBEExtra()
            + f12.FBEExtra()
            + f13.FBEExtra()
            + f14.FBEExtra()
            + f15.FBEExtra()
            + f16.FBEExtra()
            + f17.FBEExtra()
            + f18.FBEExtra()
            + f19.FBEExtra()
            + f20.FBEExtra()
            + f21.FBEExtra()
            + f22.FBEExtra()
            + f23.FBEExtra()
            + f24.FBEExtra()
            + f25.FBEExtra()
            + f26.FBEExtra()
            + f27.FBEExtra()
            + f28.FBEExtra()
            + f29.FBEExtra()
            + f30.FBEExtra()
            + f31.FBEExtra()
            + f32.FBEExtra()
            + f33.FBEExtra()
            + f34.FBEExtra()
            + f35.FBEExtra()
            + f36.FBEExtra()
            + f37.FBEExtra()
            + f38.FBEExtra()
            + f39.FBEExtra()
            + f40.FBEExtra()
            + f41.FBEExtra()
            + f42.FBEExtra()
            + f43.FBEExtra()
            + f44.FBEExtra()
            ;

        _buffer.unshift(fbeStructOffset);

        return fbeResult;
    }
    // Get the field type
    public static final long FBETypeConst = 110;
    public long FBEType() { return FBETypeConst; }

    // Check if the struct value is valid
    @Override
    public boolean verify() { return verify(true); }
    public boolean verify(boolean fbeVerifyType)
    {
        if ((_buffer.getOffset() + FBEOffset() + FBESize()) > _buffer.getSize())
            return true;

        int fbeStructOffset = readInt32(FBEOffset());
        if ((fbeStructOffset == 0) || ((_buffer.getOffset() + fbeStructOffset + 4 + 4) > _buffer.getSize()))
            return false;

        int fbeStructSize = readInt32(fbeStructOffset);
        if (fbeStructSize < 4 + 4)
            return false;

        int fbeStructType = readInt32(fbeStructOffset + 4);
        if (fbeVerifyType && (fbeStructType != FBEType()))
            return false;

        _buffer.shift(fbeStructOffset);
        boolean fbeResult = verifyFields(fbeStructSize);
        _buffer.unshift(fbeStructOffset);
        return fbeResult;
    }

    // Check if the struct fields are valid
    public boolean verifyFields(long fbeStructSize)
    {
        long fbeCurrentSize = 4 + 4;

        if ((fbeCurrentSize + uid.FBESize()) > fbeStructSize)
            return true;
        if (!uid.verify())
            return false;
        fbeCurrentSize += uid.FBESize();

        if ((fbeCurrentSize + f1.FBESize()) > fbeStructSize)
            return true;
        if (!f1.verify())
            return false;
        fbeCurrentSize += f1.FBESize();

        if ((fbeCurrentSize + f2.FBESize()) > fbeStructSize)
            return true;
        if (!f2.verify())
            return false;
        fbeCurrentSize += f2.FBESize();

        if ((fbeCurrentSize + f3.FBESize()) > fbeStructSize)
            return true;
        if (!f3.verify())
            return false;
        fbeCurrentSize += f3.FBESize();

        if ((fbeCurrentSize + f4.FBESize()) > fbeStructSize)
            return true;
        if (!f4.verify())
            return false;
        fbeCurrentSize += f4.FBESize();

        if ((fbeCurrentSize + f5.FBESize()) > fbeStructSize)
            return true;
        if (!f5.verify())
            return false;
        fbeCurrentSize += f5.FBESize();

        if ((fbeCurrentSize + f6.FBESize()) > fbeStructSize)
            return true;
        if (!f6.verify())
            return false;
        fbeCurrentSize += f6.FBESize();

        if ((fbeCurrentSize + f7.FBESize()) > fbeStructSize)
            return true;
        if (!f7.verify())
            return false;
        fbeCurrentSize += f7.FBESize();

        if ((fbeCurrentSize + f8.FBESize()) > fbeStructSize)
            return true;
        if (!f8.verify())
            return false;
        fbeCurrentSize += f8.FBESize();

        if ((fbeCurrentSize + f9.FBESize()) > fbeStructSize)
            return true;
        if (!f9.verify())
            return false;
        fbeCurrentSize += f9.FBESize();

        if ((fbeCurrentSize + f10.FBESize()) > fbeStructSize)
            return true;
        if (!f10.verify())
            return false;
        fbeCurrentSize += f10.FBESize();

        if ((fbeCurrentSize + f11.FBESize()) > fbeStructSize)
            return true;
        if (!f11.verify())
            return false;
        fbeCurrentSize += f11.FBESize();

        if ((fbeCurrentSize + f12.FBESize()) > fbeStructSize)
            return true;
        if (!f12.verify())
            return false;
        fbeCurrentSize += f12.FBESize();

        if ((fbeCurrentSize + f13.FBESize()) > fbeStructSize)
            return true;
        if (!f13.verify())
            return false;
        fbeCurrentSize += f13.FBESize();

        if ((fbeCurrentSize + f14.FBESize()) > fbeStructSize)
            return true;
        if (!f14.verify())
            return false;
        fbeCurrentSize += f14.FBESize();

        if ((fbeCurrentSize + f15.FBESize()) > fbeStructSize)
            return true;
        if (!f15.verify())
            return false;
        fbeCurrentSize += f15.FBESize();

        if ((fbeCurrentSize + f16.FBESize()) > fbeStructSize)
            return true;
        if (!f16.verify())
            return false;
        fbeCurrentSize += f16.FBESize();

        if ((fbeCurrentSize + f17.FBESize()) > fbeStructSize)
            return true;
        if (!f17.verify())
            return false;
        fbeCurrentSize += f17.FBESize();

        if ((fbeCurrentSize + f18.FBESize()) > fbeStructSize)
            return true;
        if (!f18.verify())
            return false;
        fbeCurrentSize += f18.FBESize();

        if ((fbeCurrentSize + f19.FBESize()) > fbeStructSize)
            return true;
        if (!f19.verify())
            return false;
        fbeCurrentSize += f19.FBESize();

        if ((fbeCurrentSize + f20.FBESize()) > fbeStructSize)
            return true;
        if (!f20.verify())
            return false;
        fbeCurrentSize += f20.FBESize();

        if ((fbeCurrentSize + f21.FBESize()) > fbeStructSize)
            return true;
        if (!f21.verify())
            return false;
        fbeCurrentSize += f21.FBESize();

        if ((fbeCurrentSize + f22.FBESize()) > fbeStructSize)
            return true;
        if (!f22.verify())
            return false;
        fbeCurrentSize += f22.FBESize();

        if ((fbeCurrentSize + f23.FBESize()) > fbeStructSize)
            return true;
        if (!f23.verify())
            return false;
        fbeCurrentSize += f23.FBESize();

        if ((fbeCurrentSize + f24.FBESize()) > fbeStructSize)
            return true;
        if (!f24.verify())
            return false;
        fbeCurrentSize += f24.FBESize();

        if ((fbeCurrentSize + f25.FBESize()) > fbeStructSize)
            return true;
        if (!f25.verify())
            return false;
        fbeCurrentSize += f25.FBESize();

        if ((fbeCurrentSize + f26.FBESize()) > fbeStructSize)
            return true;
        if (!f26.verify())
            return false;
        fbeCurrentSize += f26.FBESize();

        if ((fbeCurrentSize + f27.FBESize()) > fbeStructSize)
            return true;
        if (!f27.verify())
            return false;
        fbeCurrentSize += f27.FBESize();

        if ((fbeCurrentSize + f28.FBESize()) > fbeStructSize)
            return true;
        if (!f28.verify())
            return false;
        fbeCurrentSize += f28.FBESize();

        if ((fbeCurrentSize + f29.FBESize()) > fbeStructSize)
            return true;
        if (!f29.verify())
            return false;
        fbeCurrentSize += f29.FBESize();

        if ((fbeCurrentSize + f30.FBESize()) > fbeStructSize)
            return true;
        if (!f30.verify())
            return false;
        fbeCurrentSize += f30.FBESize();

        if ((fbeCurrentSize + f31.FBESize()) > fbeStructSize)
            return true;
        if (!f31.verify())
            return false;
        fbeCurrentSize += f31.FBESize();

        if ((fbeCurrentSize + f32.FBESize()) > fbeStructSize)
            return true;
        if (!f32.verify())
            return false;
        fbeCurrentSize += f32.FBESize();

        if ((fbeCurrentSize + f33.FBESize()) > fbeStructSize)
            return true;
        if (!f33.verify())
            return false;
        fbeCurrentSize += f33.FBESize();

        if ((fbeCurrentSize + f34.FBESize()) > fbeStructSize)
            return true;
        if (!f34.verify())
            return false;
        fbeCurrentSize += f34.FBESize();

        if ((fbeCurrentSize + f35.FBESize()) > fbeStructSize)
            return true;
        if (!f35.verify())
            return false;
        fbeCurrentSize += f35.FBESize();

        if ((fbeCurrentSize + f36.FBESize()) > fbeStructSize)
            return true;
        if (!f36.verify())
            return false;
        fbeCurrentSize += f36.FBESize();

        if ((fbeCurrentSize + f37.FBESize()) > fbeStructSize)
            return true;
        if (!f37.verify())
            return false;
        fbeCurrentSize += f37.FBESize();

        if ((fbeCurrentSize + f38.FBESize()) > fbeStructSize)
            return true;
        if (!f38.verify())
            return false;
        fbeCurrentSize += f38.FBESize();

        if ((fbeCurrentSize + f39.FBESize()) > fbeStructSize)
            return true;
        if (!f39.verify())
            return false;
        fbeCurrentSize += f39.FBESize();

        if ((fbeCurrentSize + f40.FBESize()) > fbeStructSize)
            return true;
        if (!f40.verify())
            return false;
        fbeCurrentSize += f40.FBESize();

        if ((fbeCurrentSize + f41.FBESize()) > fbeStructSize)
            return true;
        if (!f41.verify())
            return false;
        fbeCurrentSize += f41.FBESize();

        if ((fbeCurrentSize + f42.FBESize()) > fbeStructSize)
            return true;
        if (!f42.verify())
            return false;
        fbeCurrentSize += f42.FBESize();

        if ((fbeCurrentSize + f43.FBESize()) > fbeStructSize)
            return true;
        if (!f43.verify())
            return false;
        fbeCurrentSize += f43.FBESize();

        if ((fbeCurrentSize + f44.FBESize()) > fbeStructSize)
            return true;
        if (!f44.verify())
            return false;
        fbeCurrentSize += f44.FBESize();

        return true;
    }

    // Get the struct value (begin phase)
    public long getBegin()
    {
        if ((_buffer.getOffset() + FBEOffset() + FBESize()) > _buffer.getSize())
            return 0;

        int fbeStructOffset = readInt32(FBEOffset());
        assert ((fbeStructOffset > 0) && ((_buffer.getOffset() + fbeStructOffset + 4 + 4) <= _buffer.getSize())) : "Model is broken!";
        if ((fbeStructOffset == 0) || ((_buffer.getOffset() + fbeStructOffset + 4 + 4) > _buffer.getSize()))
            return 0;

        int fbeStructSize = readInt32(fbeStructOffset);
        assert (fbeStructSize >= 4 + 4) : "Model is broken!";
        if (fbeStructSize < 4 + 4)
            return 0;

        _buffer.shift(fbeStructOffset);
        return fbeStructOffset;
    }

    // Get the struct value (end phase)
    public void getEnd(long fbeBegin)
    {
        _buffer.unshift(fbeBegin);
    }

    // Get the struct value
    public StructSimple get() { return get(new StructSimple()); }
    public StructSimple get(StructSimple fbeValue)
    {
        long fbeBegin = getBegin();
        if (fbeBegin == 0)
            return fbeValue;

        int fbeStructSize = readInt32(0);
        getFields(fbeValue, fbeStructSize);
        getEnd(fbeBegin);
        return fbeValue;
    }

    // Get the struct fields values
    public void getFields(StructSimple fbeValue, long fbeStructSize)
    {
        long fbeCurrentSize = 4 + 4;

        if ((fbeCurrentSize + uid.FBESize()) <= fbeStructSize)
            fbeValue.uid = uid.get();
        else
            fbeValue.uid = 0;
        fbeCurrentSize += uid.FBESize();

        if ((fbeCurrentSize + f1.FBESize()) <= fbeStructSize)
            fbeValue.f1 = f1.get();
        else
            fbeValue.f1 = false;
        fbeCurrentSize += f1.FBESize();

        if ((fbeCurrentSize + f2.FBESize()) <= fbeStructSize)
            fbeValue.f2 = f2.get(true);
        else
            fbeValue.f2 = true;
        fbeCurrentSize += f2.FBESize();

        if ((fbeCurrentSize + f3.FBESize()) <= fbeStructSize)
            fbeValue.f3 = f3.get();
        else
            fbeValue.f3 = (byte)0;
        fbeCurrentSize += f3.FBESize();

        if ((fbeCurrentSize + f4.FBESize()) <= fbeStructSize)
            fbeValue.f4 = f4.get((byte)255);
        else
            fbeValue.f4 = (byte)255;
        fbeCurrentSize += f4.FBESize();

        if ((fbeCurrentSize + f5.FBESize()) <= fbeStructSize)
            fbeValue.f5 = f5.get();
        else
            fbeValue.f5 = '\0';
        fbeCurrentSize += f5.FBESize();

        if ((fbeCurrentSize + f6.FBESize()) <= fbeStructSize)
            fbeValue.f6 = f6.get((char)'!');
        else
            fbeValue.f6 = (char)'!';
        fbeCurrentSize += f6.FBESize();

        if ((fbeCurrentSize + f7.FBESize()) <= fbeStructSize)
            fbeValue.f7 = f7.get();
        else
            fbeValue.f7 = '\0';
        fbeCurrentSize += f7.FBESize();

        if ((fbeCurrentSize + f8.FBESize()) <= fbeStructSize)
            fbeValue.f8 = f8.get((char)0x0444);
        else
            fbeValue.f8 = (char)0x0444;
        fbeCurrentSize += f8.FBESize();

        if ((fbeCurrentSize + f9.FBESize()) <= fbeStructSize)
            fbeValue.f9 = f9.get();
        else
            fbeValue.f9 = (byte)0;
        fbeCurrentSize += f9.FBESize();

        if ((fbeCurrentSize + f10.FBESize()) <= fbeStructSize)
            fbeValue.f10 = f10.get((byte)127);
        else
            fbeValue.f10 = (byte)127;
        fbeCurrentSize += f10.FBESize();

        if ((fbeCurrentSize + f11.FBESize()) <= fbeStructSize)
            fbeValue.f11 = f11.get();
        else
            fbeValue.f11 = (byte)0;
        fbeCurrentSize += f11.FBESize();

        if ((fbeCurrentSize + f12.FBESize()) <= fbeStructSize)
            fbeValue.f12 = f12.get((byte)255);
        else
            fbeValue.f12 = (byte)255;
        fbeCurrentSize += f12.FBESize();

        if ((fbeCurrentSize + f13.FBESize()) <= fbeStructSize)
            fbeValue.f13 = f13.get();
        else
            fbeValue.f13 = (short)0;
        fbeCurrentSize += f13.FBESize();

        if ((fbeCurrentSize + f14.FBESize()) <= fbeStructSize)
            fbeValue.f14 = f14.get((short)32767);
        else
            fbeValue.f14 = (short)32767;
        fbeCurrentSize += f14.FBESize();

        if ((fbeCurrentSize + f15.FBESize()) <= fbeStructSize)
            fbeValue.f15 = f15.get();
        else
            fbeValue.f15 = (short)0;
        fbeCurrentSize += f15.FBESize();

        if ((fbeCurrentSize + f16.FBESize()) <= fbeStructSize)
            fbeValue.f16 = f16.get((short)65535);
        else
            fbeValue.f16 = (short)65535;
        fbeCurrentSize += f16.FBESize();

        if ((fbeCurrentSize + f17.FBESize()) <= fbeStructSize)
            fbeValue.f17 = f17.get();
        else
            fbeValue.f17 = 0;
        fbeCurrentSize += f17.FBESize();

        if ((fbeCurrentSize + f18.FBESize()) <= fbeStructSize)
            fbeValue.f18 = f18.get((int)2147483647);
        else
            fbeValue.f18 = (int)2147483647;
        fbeCurrentSize += f18.FBESize();

        if ((fbeCurrentSize + f19.FBESize()) <= fbeStructSize)
            fbeValue.f19 = f19.get();
        else
            fbeValue.f19 = 0;
        fbeCurrentSize += f19.FBESize();

        if ((fbeCurrentSize + f20.FBESize()) <= fbeStructSize)
            fbeValue.f20 = f20.get((int)0xFFFFFFFF);
        else
            fbeValue.f20 = (int)0xFFFFFFFF;
        fbeCurrentSize += f20.FBESize();

        if ((fbeCurrentSize + f21.FBESize()) <= fbeStructSize)
            fbeValue.f21 = f21.get();
        else
            fbeValue.f21 = 0L;
        fbeCurrentSize += f21.FBESize();

        if ((fbeCurrentSize + f22.FBESize()) <= fbeStructSize)
            fbeValue.f22 = f22.get((long)9223372036854775807L);
        else
            fbeValue.f22 = (long)9223372036854775807L;
        fbeCurrentSize += f22.FBESize();

        if ((fbeCurrentSize + f23.FBESize()) <= fbeStructSize)
            fbeValue.f23 = f23.get();
        else
            fbeValue.f23 = 0L;
        fbeCurrentSize += f23.FBESize();

        if ((fbeCurrentSize + f24.FBESize()) <= fbeStructSize)
            fbeValue.f24 = f24.get((long)0xFFFFFFFFFFFFFFFFL);
        else
            fbeValue.f24 = (long)0xFFFFFFFFFFFFFFFFL;
        fbeCurrentSize += f24.FBESize();

        if ((fbeCurrentSize + f25.FBESize()) <= fbeStructSize)
            fbeValue.f25 = f25.get();
        else
            fbeValue.f25 = 0.0f;
        fbeCurrentSize += f25.FBESize();

        if ((fbeCurrentSize + f26.FBESize()) <= fbeStructSize)
            fbeValue.f26 = f26.get((float)123.456f);
        else
            fbeValue.f26 = (float)123.456f;
        fbeCurrentSize += f26.FBESize();

        if ((fbeCurrentSize + f27.FBESize()) <= fbeStructSize)
            fbeValue.f27 = f27.get();
        else
            fbeValue.f27 = 0.0d;
        fbeCurrentSize += f27.FBESize();

        if ((fbeCurrentSize + f28.FBESize()) <= fbeStructSize)
            fbeValue.f28 = f28.get((double)-123.456e+123d);
        else
            fbeValue.f28 = (double)-123.456e+123d;
        fbeCurrentSize += f28.FBESize();

        if ((fbeCurrentSize + f29.FBESize()) <= fbeStructSize)
            fbeValue.f29 = f29.get();
        else
            fbeValue.f29 = BigDecimal.valueOf(0L);
        fbeCurrentSize += f29.FBESize();

        if ((fbeCurrentSize + f30.FBESize()) <= fbeStructSize)
            fbeValue.f30 = f30.get(BigDecimal.valueOf(123456.123456d));
        else
            fbeValue.f30 = BigDecimal.valueOf(123456.123456d);
        fbeCurrentSize += f30.FBESize();

        if ((fbeCurrentSize + f31.FBESize()) <= fbeStructSize)
            fbeValue.f31 = f31.get();
        else
            fbeValue.f31 = "";
        fbeCurrentSize += f31.FBESize();

        if ((fbeCurrentSize + f32.FBESize()) <= fbeStructSize)
            fbeValue.f32 = f32.get("Initial string!");
        else
            fbeValue.f32 = "Initial string!";
        fbeCurrentSize += f32.FBESize();

        if ((fbeCurrentSize + f33.FBESize()) <= fbeStructSize)
            fbeValue.f33 = f33.get();
        else
            fbeValue.f33 = Instant.EPOCH;
        fbeCurrentSize += f33.FBESize();

        if ((fbeCurrentSize + f34.FBESize()) <= fbeStructSize)
            fbeValue.f34 = f34.get(Instant.EPOCH);
        else
            fbeValue.f34 = Instant.EPOCH;
        fbeCurrentSize += f34.FBESize();

        if ((fbeCurrentSize + f35.FBESize()) <= fbeStructSize)
            fbeValue.f35 = f35.get(Instant.now());
        else
            fbeValue.f35 = Instant.now();
        fbeCurrentSize += f35.FBESize();

        if ((fbeCurrentSize + f36.FBESize()) <= fbeStructSize)
            fbeValue.f36 = f36.get();
        else
            fbeValue.f36 = fbe.UUIDGenerator.nil();
        fbeCurrentSize += f36.FBESize();

        if ((fbeCurrentSize + f37.FBESize()) <= fbeStructSize)
            fbeValue.f37 = f37.get(fbe.UUIDGenerator.sequential());
        else
            fbeValue.f37 = fbe.UUIDGenerator.sequential();
        fbeCurrentSize += f37.FBESize();

        if ((fbeCurrentSize + f38.FBESize()) <= fbeStructSize)
            fbeValue.f38 = f38.get(UUID.fromString("123e4567-e89b-12d3-a456-426655440000"));
        else
            fbeValue.f38 = UUID.fromString("123e4567-e89b-12d3-a456-426655440000");
        fbeCurrentSize += f38.FBESize();

        if ((fbeCurrentSize + f39.FBESize()) <= fbeStructSize)
            fbeValue.f39 = f39.get();
        else
            fbeValue.f39 = new proto.OrderSide();
        fbeCurrentSize += f39.FBESize();

        if ((fbeCurrentSize + f40.FBESize()) <= fbeStructSize)
            fbeValue.f40 = f40.get();
        else
            fbeValue.f40 = new proto.OrderType();
        fbeCurrentSize += f40.FBESize();

        if ((fbeCurrentSize + f41.FBESize()) <= fbeStructSize)
            fbeValue.f41 = f41.get();
        else
            fbeValue.f41 = new proto.Order();
        fbeCurrentSize += f41.FBESize();

        if ((fbeCurrentSize + f42.FBESize()) <= fbeStructSize)
            fbeValue.f42 = f42.get();
        else
            fbeValue.f42 = new proto.Balance();
        fbeCurrentSize += f42.FBESize();

        if ((fbeCurrentSize + f43.FBESize()) <= fbeStructSize)
            fbeValue.f43 = f43.get();
        else
            fbeValue.f43 = new proto.State();
        fbeCurrentSize += f43.FBESize();

        if ((fbeCurrentSize + f44.FBESize()) <= fbeStructSize)
            fbeValue.f44 = f44.get();
        else
            fbeValue.f44 = new proto.Account();
        fbeCurrentSize += f44.FBESize();
    }

    // Set the struct value (begin phase)
    public long setBegin()
    {
        assert ((_buffer.getOffset() + FBEOffset() + FBESize()) <= _buffer.getSize()) : "Model is broken!";
        if ((_buffer.getOffset() + FBEOffset() + FBESize()) > _buffer.getSize())
            return 0;

        int fbeStructSize = (int)FBEBody();
        int fbeStructOffset = (int)(_buffer.allocate(fbeStructSize) - _buffer.getOffset());
        assert ((fbeStructOffset > 0) && ((_buffer.getOffset() + fbeStructOffset + fbeStructSize) <= _buffer.getSize())) : "Model is broken!";
        if ((fbeStructOffset <= 0) || ((_buffer.getOffset() + fbeStructOffset + fbeStructSize) > _buffer.getSize()))
            return 0;

        write(FBEOffset(), fbeStructOffset);
        write(fbeStructOffset, fbeStructSize);
        write(fbeStructOffset + 4, (int)FBEType());

        _buffer.shift(fbeStructOffset);
        return fbeStructOffset;
    }

    // Set the struct value (end phase)
    public void setEnd(long fbeBegin)
    {
        _buffer.unshift(fbeBegin);
    }

    // Set the struct value
    public void set(StructSimple fbeValue)
    {
        long fbeBegin = setBegin();
        if (fbeBegin == 0)
            return;

        setFields(fbeValue);
        setEnd(fbeBegin);
    }

    // Set the struct fields values
    public void setFields(StructSimple fbeValue)
    {
        uid.set(fbeValue.uid);
        f1.set(fbeValue.f1);
        f2.set(fbeValue.f2);
        f3.set(fbeValue.f3);
        f4.set(fbeValue.f4);
        f5.set(fbeValue.f5);
        f6.set(fbeValue.f6);
        f7.set(fbeValue.f7);
        f8.set(fbeValue.f8);
        f9.set(fbeValue.f9);
        f10.set(fbeValue.f10);
        f11.set(fbeValue.f11);
        f12.set(fbeValue.f12);
        f13.set(fbeValue.f13);
        f14.set(fbeValue.f14);
        f15.set(fbeValue.f15);
        f16.set(fbeValue.f16);
        f17.set(fbeValue.f17);
        f18.set(fbeValue.f18);
        f19.set(fbeValue.f19);
        f20.set(fbeValue.f20);
        f21.set(fbeValue.f21);
        f22.set(fbeValue.f22);
        f23.set(fbeValue.f23);
        f24.set(fbeValue.f24);
        f25.set(fbeValue.f25);
        f26.set(fbeValue.f26);
        f27.set(fbeValue.f27);
        f28.set(fbeValue.f28);
        f29.set(fbeValue.f29);
        f30.set(fbeValue.f30);
        f31.set(fbeValue.f31);
        f32.set(fbeValue.f32);
        f33.set(fbeValue.f33);
        f34.set(fbeValue.f34);
        f35.set(fbeValue.f35);
        f36.set(fbeValue.f36);
        f37.set(fbeValue.f37);
        f38.set(fbeValue.f38);
        f39.set(fbeValue.f39);
        f40.set(fbeValue.f40);
        f41.set(fbeValue.f41);
        f42.set(fbeValue.f42);
        f43.set(fbeValue.f43);
        f44.set(fbeValue.f44);
    }
}
