// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding

package test.fbe;

import java.io.*;
import java.lang.*;
import java.lang.reflect.*;
import java.math.*;
import java.nio.charset.*;
import java.time.*;
import java.util.*;
import javafx.util.*;

import fbe.*;
import test.*;

// Fast Binary Encoding StructArray field model class
public final class FieldModelStructArray extends FieldModel
{
    public final FieldModelArrayByte f1;
    public final FieldModelArrayOptionalByte f2;
    public final FieldModelArrayBytes f3;
    public final FieldModelArrayOptionalBytes f4;
    public final FieldModelArrayEnumSimple f5;
    public final FieldModelArrayOptionalEnumSimple f6;
    public final FieldModelArrayFlagsSimple f7;
    public final FieldModelArrayOptionalFlagsSimple f8;
    public final FieldModelArrayStructSimple f9;
    public final FieldModelArrayOptionalStructSimple f10;

    public FieldModelStructArray(Buffer buffer, long offset)
    {
        super(buffer, offset);
        f1 = new FieldModelArrayByte(buffer, 4 + 4, 2);
        f2 = new FieldModelArrayOptionalByte(buffer, f1.FBEOffset() + f1.FBESize(), 2);
        f3 = new FieldModelArrayBytes(buffer, f2.FBEOffset() + f2.FBESize(), 2);
        f4 = new FieldModelArrayOptionalBytes(buffer, f3.FBEOffset() + f3.FBESize(), 2);
        f5 = new FieldModelArrayEnumSimple(buffer, f4.FBEOffset() + f4.FBESize(), 2);
        f6 = new FieldModelArrayOptionalEnumSimple(buffer, f5.FBEOffset() + f5.FBESize(), 2);
        f7 = new FieldModelArrayFlagsSimple(buffer, f6.FBEOffset() + f6.FBESize(), 2);
        f8 = new FieldModelArrayOptionalFlagsSimple(buffer, f7.FBEOffset() + f7.FBESize(), 2);
        f9 = new FieldModelArrayStructSimple(buffer, f8.FBEOffset() + f8.FBESize(), 2);
        f10 = new FieldModelArrayOptionalStructSimple(buffer, f9.FBEOffset() + f9.FBESize(), 2);
    }

    // Get the field size
    @Override
    public long FBESize() { return 4; }
    // Get the field body size
    public long FBEBody()
    {
        long fbeResult = 4 + 4
            + f1.FBESize()
            + f2.FBESize()
            + f3.FBESize()
            + f4.FBESize()
            + f5.FBESize()
            + f6.FBESize()
            + f7.FBESize()
            + f8.FBESize()
            + f9.FBESize()
            + f10.FBESize()
            ;
        return fbeResult;
    }
    // Get the field extra size
    @Override
    public long FBEExtra()
    {
        if ((_buffer.getOffset() + FBEOffset() + FBESize()) > _buffer.getSize())
            return 0;

        int fbeStructOffset = readInt32(FBEOffset());
        if ((fbeStructOffset == 0) || ((_buffer.getOffset() + fbeStructOffset + 4) > _buffer.getSize()))
            return 0;

        _buffer.shift(fbeStructOffset);

        long fbeResult = FBEBody()
            + f1.FBEExtra()
            + f2.FBEExtra()
            + f3.FBEExtra()
            + f4.FBEExtra()
            + f5.FBEExtra()
            + f6.FBEExtra()
            + f7.FBEExtra()
            + f8.FBEExtra()
            + f9.FBEExtra()
            + f10.FBEExtra()
            ;

        _buffer.unshift(fbeStructOffset);

        return fbeResult;
    }
    // Get the field type
    public static final long FBETypeConst = 125;
    public long FBEType() { return FBETypeConst; }

    // Check if the struct value is valid
    @Override
    public boolean verify() { return verify(true); }
    public boolean verify(boolean fbeVerifyType)
    {
        if ((_buffer.getOffset() + FBEOffset() + FBESize()) > _buffer.getSize())
            return true;

        int fbeStructOffset = readInt32(FBEOffset());
        if ((fbeStructOffset == 0) || ((_buffer.getOffset() + fbeStructOffset + 4 + 4) > _buffer.getSize()))
            return false;

        int fbeStructSize = readInt32(fbeStructOffset);
        if (fbeStructSize < 4 + 4)
            return false;

        int fbeStructType = readInt32(fbeStructOffset + 4);
        if (fbeVerifyType && (fbeStructType != FBEType()))
            return false;

        _buffer.shift(fbeStructOffset);
        boolean fbeResult = verifyFields(fbeStructSize);
        _buffer.unshift(fbeStructOffset);
        return fbeResult;
    }

    // Check if the struct fields are valid
    public boolean verifyFields(long fbeStructSize)
    {
        long fbeCurrentSize = 4 + 4;

        if ((fbeCurrentSize + f1.FBESize()) > fbeStructSize)
            return true;
        if (!f1.verify())
            return false;
        fbeCurrentSize += f1.FBESize();

        if ((fbeCurrentSize + f2.FBESize()) > fbeStructSize)
            return true;
        if (!f2.verify())
            return false;
        fbeCurrentSize += f2.FBESize();

        if ((fbeCurrentSize + f3.FBESize()) > fbeStructSize)
            return true;
        if (!f3.verify())
            return false;
        fbeCurrentSize += f3.FBESize();

        if ((fbeCurrentSize + f4.FBESize()) > fbeStructSize)
            return true;
        if (!f4.verify())
            return false;
        fbeCurrentSize += f4.FBESize();

        if ((fbeCurrentSize + f5.FBESize()) > fbeStructSize)
            return true;
        if (!f5.verify())
            return false;
        fbeCurrentSize += f5.FBESize();

        if ((fbeCurrentSize + f6.FBESize()) > fbeStructSize)
            return true;
        if (!f6.verify())
            return false;
        fbeCurrentSize += f6.FBESize();

        if ((fbeCurrentSize + f7.FBESize()) > fbeStructSize)
            return true;
        if (!f7.verify())
            return false;
        fbeCurrentSize += f7.FBESize();

        if ((fbeCurrentSize + f8.FBESize()) > fbeStructSize)
            return true;
        if (!f8.verify())
            return false;
        fbeCurrentSize += f8.FBESize();

        if ((fbeCurrentSize + f9.FBESize()) > fbeStructSize)
            return true;
        if (!f9.verify())
            return false;
        fbeCurrentSize += f9.FBESize();

        if ((fbeCurrentSize + f10.FBESize()) > fbeStructSize)
            return true;
        if (!f10.verify())
            return false;
        fbeCurrentSize += f10.FBESize();

        return true;
    }

    // Get the struct value (begin phase)
    public long getBegin()
    {
        if ((_buffer.getOffset() + FBEOffset() + FBESize()) > _buffer.getSize())
            return 0;

        int fbeStructOffset = readInt32(FBEOffset());
        assert ((fbeStructOffset > 0) && ((_buffer.getOffset() + fbeStructOffset + 4 + 4) <= _buffer.getSize())) : "Model is broken!";
        if ((fbeStructOffset == 0) || ((_buffer.getOffset() + fbeStructOffset + 4 + 4) > _buffer.getSize()))
            return 0;

        int fbeStructSize = readInt32(fbeStructOffset);
        assert (fbeStructSize >= 4 + 4) : "Model is broken!";
        if (fbeStructSize < 4 + 4)
            return 0;

        _buffer.shift(fbeStructOffset);
        return fbeStructOffset;
    }

    // Get the struct value (end phase)
    public void getEnd(long fbeBegin)
    {
        _buffer.unshift(fbeBegin);
    }

    // Get the struct value
    public StructArray get() { return get(new StructArray()); }
    public StructArray get(StructArray fbeValue)
    {
        long fbeBegin = getBegin();
        if (fbeBegin == 0)
            return fbeValue;

        int fbeStructSize = readInt32(0);
        getFields(fbeValue, fbeStructSize);
        getEnd(fbeBegin);
        return fbeValue;
    }

    // Get the struct fields values
    public void getFields(StructArray fbeValue, long fbeStructSize)
    {
        long fbeCurrentSize = 4 + 4;

        if ((fbeCurrentSize + f1.FBESize()) <= fbeStructSize)
            f1.get(fbeValue.f1);
        else
            fbeValue.f1 = new byte[2];
        fbeCurrentSize += f1.FBESize();

        if ((fbeCurrentSize + f2.FBESize()) <= fbeStructSize)
            f2.get(fbeValue.f2);
        else
            fbeValue.f2 = new Byte[2];
        fbeCurrentSize += f2.FBESize();

        if ((fbeCurrentSize + f3.FBESize()) <= fbeStructSize)
            f3.get(fbeValue.f3);
        else
            fbeValue.f3 = new byte[2][];
        fbeCurrentSize += f3.FBESize();

        if ((fbeCurrentSize + f4.FBESize()) <= fbeStructSize)
            f4.get(fbeValue.f4);
        else
            fbeValue.f4 = new byte[2][];
        fbeCurrentSize += f4.FBESize();

        if ((fbeCurrentSize + f5.FBESize()) <= fbeStructSize)
            f5.get(fbeValue.f5);
        else
            fbeValue.f5 = new EnumSimple[2];
        fbeCurrentSize += f5.FBESize();

        if ((fbeCurrentSize + f6.FBESize()) <= fbeStructSize)
            f6.get(fbeValue.f6);
        else
            fbeValue.f6 = new EnumSimple[2];
        fbeCurrentSize += f6.FBESize();

        if ((fbeCurrentSize + f7.FBESize()) <= fbeStructSize)
            f7.get(fbeValue.f7);
        else
            fbeValue.f7 = new FlagsSimple[2];
        fbeCurrentSize += f7.FBESize();

        if ((fbeCurrentSize + f8.FBESize()) <= fbeStructSize)
            f8.get(fbeValue.f8);
        else
            fbeValue.f8 = new FlagsSimple[2];
        fbeCurrentSize += f8.FBESize();

        if ((fbeCurrentSize + f9.FBESize()) <= fbeStructSize)
            f9.get(fbeValue.f9);
        else
            fbeValue.f9 = new StructSimple[2];
        fbeCurrentSize += f9.FBESize();

        if ((fbeCurrentSize + f10.FBESize()) <= fbeStructSize)
            f10.get(fbeValue.f10);
        else
            fbeValue.f10 = new StructSimple[2];
        fbeCurrentSize += f10.FBESize();
    }

    // Set the struct value (begin phase)
    public long setBegin()
    {
        assert ((_buffer.getOffset() + FBEOffset() + FBESize()) <= _buffer.getSize()) : "Model is broken!";
        if ((_buffer.getOffset() + FBEOffset() + FBESize()) > _buffer.getSize())
            return 0;

        int fbeStructSize = (int)FBEBody();
        int fbeStructOffset = (int)(_buffer.allocate(fbeStructSize) - _buffer.getOffset());
        assert ((fbeStructOffset > 0) && ((_buffer.getOffset() + fbeStructOffset + fbeStructSize) <= _buffer.getSize())) : "Model is broken!";
        if ((fbeStructOffset <= 0) || ((_buffer.getOffset() + fbeStructOffset + fbeStructSize) > _buffer.getSize()))
            return 0;

        write(FBEOffset(), fbeStructOffset);
        write(fbeStructOffset, fbeStructSize);
        write(fbeStructOffset + 4, (int)FBEType());

        _buffer.shift(fbeStructOffset);
        return fbeStructOffset;
    }

    // Set the struct value (end phase)
    public void setEnd(long fbeBegin)
    {
        _buffer.unshift(fbeBegin);
    }

    // Set the struct value
    public void set(StructArray fbeValue)
    {
        long fbeBegin = setBegin();
        if (fbeBegin == 0)
            return;

        setFields(fbeValue);
        setEnd(fbeBegin);
    }

    // Set the struct fields values
    public void setFields(StructArray fbeValue)
    {
        f1.set(fbeValue.f1);
        f2.set(fbeValue.f2);
        f3.set(fbeValue.f3);
        f4.set(fbeValue.f4);
        f5.set(fbeValue.f5);
        f6.set(fbeValue.f6);
        f7.set(fbeValue.f7);
        f8.set(fbeValue.f8);
        f9.set(fbeValue.f9);
        f10.set(fbeValue.f10);
    }
}
