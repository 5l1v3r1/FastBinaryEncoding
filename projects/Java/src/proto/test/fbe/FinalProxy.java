// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// Version: 1.2.0.0

package test.fbe;

import java.io.*;
import java.lang.*;
import java.lang.reflect.*;
import java.math.*;
import java.nio.ByteBuffer;
import java.nio.charset.*;
import java.time.*;
import java.util.*;

import fbe.*;
import test.*;

// Fast Binary Encoding test final proxy
public class FinalProxy extends fbe.Receiver
{
    // Imported proxy
    public proto.fbe.FinalProxy protoProxy;

    // Proxy models accessors
    private final StructSimpleFinalModel StructSimpleModel;
    private final StructOptionalFinalModel StructOptionalModel;
    private final StructNestedFinalModel StructNestedModel;
    private final StructBytesFinalModel StructBytesModel;
    private final StructArrayFinalModel StructArrayModel;
    private final StructVectorFinalModel StructVectorModel;
    private final StructListFinalModel StructListModel;
    private final StructSetFinalModel StructSetModel;
    private final StructMapFinalModel StructMapModel;
    private final StructHashFinalModel StructHashModel;
    private final StructHashExFinalModel StructHashExModel;
    private final StructEmptyFinalModel StructEmptyModel;

    public FinalProxy()
    {
        super(true);
        protoProxy = new proto.fbe.FinalProxy(getBuffer());
        StructSimpleModel = new StructSimpleFinalModel();
        StructOptionalModel = new StructOptionalFinalModel();
        StructNestedModel = new StructNestedFinalModel();
        StructBytesModel = new StructBytesFinalModel();
        StructArrayModel = new StructArrayFinalModel();
        StructVectorModel = new StructVectorFinalModel();
        StructListModel = new StructListFinalModel();
        StructSetModel = new StructSetFinalModel();
        StructMapModel = new StructMapFinalModel();
        StructHashModel = new StructHashFinalModel();
        StructHashExModel = new StructHashExFinalModel();
        StructEmptyModel = new StructEmptyFinalModel();
    }
    public FinalProxy(Buffer buffer)
    {
        super(buffer, true);
        protoProxy = new proto.fbe.FinalProxy(getBuffer());
        StructSimpleModel = new StructSimpleFinalModel();
        StructOptionalModel = new StructOptionalFinalModel();
        StructNestedModel = new StructNestedFinalModel();
        StructBytesModel = new StructBytesFinalModel();
        StructArrayModel = new StructArrayFinalModel();
        StructVectorModel = new StructVectorFinalModel();
        StructListModel = new StructListFinalModel();
        StructSetModel = new StructSetFinalModel();
        StructMapModel = new StructMapFinalModel();
        StructHashModel = new StructHashFinalModel();
        StructHashExModel = new StructHashExFinalModel();
        StructEmptyModel = new StructEmptyFinalModel();
    }

    // Proxy handlers
    protected void onProxy(StructSimpleFinalModel model, long type, byte[] buffer, long offset, long size) {}
    protected void onProxy(StructOptionalFinalModel model, long type, byte[] buffer, long offset, long size) {}
    protected void onProxy(StructNestedFinalModel model, long type, byte[] buffer, long offset, long size) {}
    protected void onProxy(StructBytesFinalModel model, long type, byte[] buffer, long offset, long size) {}
    protected void onProxy(StructArrayFinalModel model, long type, byte[] buffer, long offset, long size) {}
    protected void onProxy(StructVectorFinalModel model, long type, byte[] buffer, long offset, long size) {}
    protected void onProxy(StructListFinalModel model, long type, byte[] buffer, long offset, long size) {}
    protected void onProxy(StructSetFinalModel model, long type, byte[] buffer, long offset, long size) {}
    protected void onProxy(StructMapFinalModel model, long type, byte[] buffer, long offset, long size) {}
    protected void onProxy(StructHashFinalModel model, long type, byte[] buffer, long offset, long size) {}
    protected void onProxy(StructHashExFinalModel model, long type, byte[] buffer, long offset, long size) {}
    protected void onProxy(StructEmptyFinalModel model, long type, byte[] buffer, long offset, long size) {}

    @Override
    public boolean onReceive(long type, byte[] buffer, long offset, long size)
    {
        switch ((int)type)
        {
            case (int)test.fbe.StructSimpleFinalModel.fbeTypeConst:
            {
                // Attach the FBE stream to the proxy model
                StructSimpleModel.attach(buffer, offset);
                assert StructSimpleModel.verify() : "test.StructSimple validation failed!";

                // Call proxy handler
                onProxy(StructSimpleModel, type, buffer, offset, size);
                return true;
            }
            case (int)test.fbe.StructOptionalFinalModel.fbeTypeConst:
            {
                // Attach the FBE stream to the proxy model
                StructOptionalModel.attach(buffer, offset);
                assert StructOptionalModel.verify() : "test.StructOptional validation failed!";

                // Call proxy handler
                onProxy(StructOptionalModel, type, buffer, offset, size);
                return true;
            }
            case (int)test.fbe.StructNestedFinalModel.fbeTypeConst:
            {
                // Attach the FBE stream to the proxy model
                StructNestedModel.attach(buffer, offset);
                assert StructNestedModel.verify() : "test.StructNested validation failed!";

                // Call proxy handler
                onProxy(StructNestedModel, type, buffer, offset, size);
                return true;
            }
            case (int)test.fbe.StructBytesFinalModel.fbeTypeConst:
            {
                // Attach the FBE stream to the proxy model
                StructBytesModel.attach(buffer, offset);
                assert StructBytesModel.verify() : "test.StructBytes validation failed!";

                // Call proxy handler
                onProxy(StructBytesModel, type, buffer, offset, size);
                return true;
            }
            case (int)test.fbe.StructArrayFinalModel.fbeTypeConst:
            {
                // Attach the FBE stream to the proxy model
                StructArrayModel.attach(buffer, offset);
                assert StructArrayModel.verify() : "test.StructArray validation failed!";

                // Call proxy handler
                onProxy(StructArrayModel, type, buffer, offset, size);
                return true;
            }
            case (int)test.fbe.StructVectorFinalModel.fbeTypeConst:
            {
                // Attach the FBE stream to the proxy model
                StructVectorModel.attach(buffer, offset);
                assert StructVectorModel.verify() : "test.StructVector validation failed!";

                // Call proxy handler
                onProxy(StructVectorModel, type, buffer, offset, size);
                return true;
            }
            case (int)test.fbe.StructListFinalModel.fbeTypeConst:
            {
                // Attach the FBE stream to the proxy model
                StructListModel.attach(buffer, offset);
                assert StructListModel.verify() : "test.StructList validation failed!";

                // Call proxy handler
                onProxy(StructListModel, type, buffer, offset, size);
                return true;
            }
            case (int)test.fbe.StructSetFinalModel.fbeTypeConst:
            {
                // Attach the FBE stream to the proxy model
                StructSetModel.attach(buffer, offset);
                assert StructSetModel.verify() : "test.StructSet validation failed!";

                // Call proxy handler
                onProxy(StructSetModel, type, buffer, offset, size);
                return true;
            }
            case (int)test.fbe.StructMapFinalModel.fbeTypeConst:
            {
                // Attach the FBE stream to the proxy model
                StructMapModel.attach(buffer, offset);
                assert StructMapModel.verify() : "test.StructMap validation failed!";

                // Call proxy handler
                onProxy(StructMapModel, type, buffer, offset, size);
                return true;
            }
            case (int)test.fbe.StructHashFinalModel.fbeTypeConst:
            {
                // Attach the FBE stream to the proxy model
                StructHashModel.attach(buffer, offset);
                assert StructHashModel.verify() : "test.StructHash validation failed!";

                // Call proxy handler
                onProxy(StructHashModel, type, buffer, offset, size);
                return true;
            }
            case (int)test.fbe.StructHashExFinalModel.fbeTypeConst:
            {
                // Attach the FBE stream to the proxy model
                StructHashExModel.attach(buffer, offset);
                assert StructHashExModel.verify() : "test.StructHashEx validation failed!";

                // Call proxy handler
                onProxy(StructHashExModel, type, buffer, offset, size);
                return true;
            }
            case (int)test.fbe.StructEmptyFinalModel.fbeTypeConst:
            {
                // Attach the FBE stream to the proxy model
                StructEmptyModel.attach(buffer, offset);
                assert StructEmptyModel.verify() : "test.StructEmpty validation failed!";

                // Call proxy handler
                onProxy(StructEmptyModel, type, buffer, offset, size);
                return true;
            }
        }

        if ((protoProxy != null) && protoProxy.onReceive(type, buffer, offset, size))
            return true;

        return false;
    }
}
