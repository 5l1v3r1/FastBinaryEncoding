// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding

package test.fbe;

import java.io.*;
import java.lang.*;
import java.lang.reflect.*;
import java.math.*;
import java.nio.charset.*;
import java.time.*;
import java.util.*;
import javafx.util.*;

import fbe.*;
import test.*;

// Fast Binary Encoding StructOptional field model class
public final class FieldModelStructOptional extends FieldModel
{
    public final FieldModelStructSimple parent;
    public final FieldModelOptionalBoolean f100;
    public final FieldModelOptionalBoolean f101;
    public final FieldModelOptionalBoolean f102;
    public final FieldModelOptionalByte f103;
    public final FieldModelOptionalByte f104;
    public final FieldModelOptionalByte f105;
    public final FieldModelOptionalChar f106;
    public final FieldModelOptionalChar f107;
    public final FieldModelOptionalChar f108;
    public final FieldModelOptionalWChar f109;
    public final FieldModelOptionalWChar f110;
    public final FieldModelOptionalWChar f111;
    public final FieldModelOptionalInt8 f112;
    public final FieldModelOptionalInt8 f113;
    public final FieldModelOptionalInt8 f114;
    public final FieldModelOptionalInt8 f115;
    public final FieldModelOptionalInt8 f116;
    public final FieldModelOptionalInt8 f117;
    public final FieldModelOptionalInt16 f118;
    public final FieldModelOptionalInt16 f119;
    public final FieldModelOptionalInt16 f120;
    public final FieldModelOptionalInt16 f121;
    public final FieldModelOptionalInt16 f122;
    public final FieldModelOptionalInt16 f123;
    public final FieldModelOptionalInt32 f124;
    public final FieldModelOptionalInt32 f125;
    public final FieldModelOptionalInt32 f126;
    public final FieldModelOptionalInt32 f127;
    public final FieldModelOptionalInt32 f128;
    public final FieldModelOptionalInt32 f129;
    public final FieldModelOptionalInt64 f130;
    public final FieldModelOptionalInt64 f131;
    public final FieldModelOptionalInt64 f132;
    public final FieldModelOptionalInt64 f133;
    public final FieldModelOptionalInt64 f134;
    public final FieldModelOptionalInt64 f135;
    public final FieldModelOptionalFloat f136;
    public final FieldModelOptionalFloat f137;
    public final FieldModelOptionalFloat f138;
    public final FieldModelOptionalDouble f139;
    public final FieldModelOptionalDouble f140;
    public final FieldModelOptionalDouble f141;
    public final FieldModelOptionalDecimal f142;
    public final FieldModelOptionalDecimal f143;
    public final FieldModelOptionalDecimal f144;
    public final FieldModelOptionalString f145;
    public final FieldModelOptionalString f146;
    public final FieldModelOptionalString f147;
    public final FieldModelOptionalTimestamp f148;
    public final FieldModelOptionalTimestamp f149;
    public final FieldModelOptionalTimestamp f150;
    public final FieldModelOptionalUUID f151;
    public final FieldModelOptionalUUID f152;
    public final FieldModelOptionalUUID f153;
    public final FieldModelOptionalprotoOrderSide f154;
    public final FieldModelOptionalprotoOrderSide f155;
    public final FieldModelOptionalprotoOrderType f156;
    public final FieldModelOptionalprotoOrderType f157;
    public final FieldModelOptionalprotoOrder f158;
    public final FieldModelOptionalprotoOrder f159;
    public final FieldModelOptionalprotoBalance f160;
    public final FieldModelOptionalprotoBalance f161;
    public final FieldModelOptionalprotoState f162;
    public final FieldModelOptionalprotoState f163;
    public final FieldModelOptionalprotoAccount f164;
    public final FieldModelOptionalprotoAccount f165;

    public FieldModelStructOptional(Buffer buffer, long offset)
    {
        super(buffer, offset);
        parent = new FieldModelStructSimple(buffer, 4 + 4);
        f100 = new FieldModelOptionalBoolean(buffer, parent.FBEOffset() + parent.FBEBody() - 4 - 4);
        f101 = new FieldModelOptionalBoolean(buffer, f100.FBEOffset() + f100.FBESize());
        f102 = new FieldModelOptionalBoolean(buffer, f101.FBEOffset() + f101.FBESize());
        f103 = new FieldModelOptionalByte(buffer, f102.FBEOffset() + f102.FBESize());
        f104 = new FieldModelOptionalByte(buffer, f103.FBEOffset() + f103.FBESize());
        f105 = new FieldModelOptionalByte(buffer, f104.FBEOffset() + f104.FBESize());
        f106 = new FieldModelOptionalChar(buffer, f105.FBEOffset() + f105.FBESize());
        f107 = new FieldModelOptionalChar(buffer, f106.FBEOffset() + f106.FBESize());
        f108 = new FieldModelOptionalChar(buffer, f107.FBEOffset() + f107.FBESize());
        f109 = new FieldModelOptionalWChar(buffer, f108.FBEOffset() + f108.FBESize());
        f110 = new FieldModelOptionalWChar(buffer, f109.FBEOffset() + f109.FBESize());
        f111 = new FieldModelOptionalWChar(buffer, f110.FBEOffset() + f110.FBESize());
        f112 = new FieldModelOptionalInt8(buffer, f111.FBEOffset() + f111.FBESize());
        f113 = new FieldModelOptionalInt8(buffer, f112.FBEOffset() + f112.FBESize());
        f114 = new FieldModelOptionalInt8(buffer, f113.FBEOffset() + f113.FBESize());
        f115 = new FieldModelOptionalInt8(buffer, f114.FBEOffset() + f114.FBESize());
        f116 = new FieldModelOptionalInt8(buffer, f115.FBEOffset() + f115.FBESize());
        f117 = new FieldModelOptionalInt8(buffer, f116.FBEOffset() + f116.FBESize());
        f118 = new FieldModelOptionalInt16(buffer, f117.FBEOffset() + f117.FBESize());
        f119 = new FieldModelOptionalInt16(buffer, f118.FBEOffset() + f118.FBESize());
        f120 = new FieldModelOptionalInt16(buffer, f119.FBEOffset() + f119.FBESize());
        f121 = new FieldModelOptionalInt16(buffer, f120.FBEOffset() + f120.FBESize());
        f122 = new FieldModelOptionalInt16(buffer, f121.FBEOffset() + f121.FBESize());
        f123 = new FieldModelOptionalInt16(buffer, f122.FBEOffset() + f122.FBESize());
        f124 = new FieldModelOptionalInt32(buffer, f123.FBEOffset() + f123.FBESize());
        f125 = new FieldModelOptionalInt32(buffer, f124.FBEOffset() + f124.FBESize());
        f126 = new FieldModelOptionalInt32(buffer, f125.FBEOffset() + f125.FBESize());
        f127 = new FieldModelOptionalInt32(buffer, f126.FBEOffset() + f126.FBESize());
        f128 = new FieldModelOptionalInt32(buffer, f127.FBEOffset() + f127.FBESize());
        f129 = new FieldModelOptionalInt32(buffer, f128.FBEOffset() + f128.FBESize());
        f130 = new FieldModelOptionalInt64(buffer, f129.FBEOffset() + f129.FBESize());
        f131 = new FieldModelOptionalInt64(buffer, f130.FBEOffset() + f130.FBESize());
        f132 = new FieldModelOptionalInt64(buffer, f131.FBEOffset() + f131.FBESize());
        f133 = new FieldModelOptionalInt64(buffer, f132.FBEOffset() + f132.FBESize());
        f134 = new FieldModelOptionalInt64(buffer, f133.FBEOffset() + f133.FBESize());
        f135 = new FieldModelOptionalInt64(buffer, f134.FBEOffset() + f134.FBESize());
        f136 = new FieldModelOptionalFloat(buffer, f135.FBEOffset() + f135.FBESize());
        f137 = new FieldModelOptionalFloat(buffer, f136.FBEOffset() + f136.FBESize());
        f138 = new FieldModelOptionalFloat(buffer, f137.FBEOffset() + f137.FBESize());
        f139 = new FieldModelOptionalDouble(buffer, f138.FBEOffset() + f138.FBESize());
        f140 = new FieldModelOptionalDouble(buffer, f139.FBEOffset() + f139.FBESize());
        f141 = new FieldModelOptionalDouble(buffer, f140.FBEOffset() + f140.FBESize());
        f142 = new FieldModelOptionalDecimal(buffer, f141.FBEOffset() + f141.FBESize());
        f143 = new FieldModelOptionalDecimal(buffer, f142.FBEOffset() + f142.FBESize());
        f144 = new FieldModelOptionalDecimal(buffer, f143.FBEOffset() + f143.FBESize());
        f145 = new FieldModelOptionalString(buffer, f144.FBEOffset() + f144.FBESize());
        f146 = new FieldModelOptionalString(buffer, f145.FBEOffset() + f145.FBESize());
        f147 = new FieldModelOptionalString(buffer, f146.FBEOffset() + f146.FBESize());
        f148 = new FieldModelOptionalTimestamp(buffer, f147.FBEOffset() + f147.FBESize());
        f149 = new FieldModelOptionalTimestamp(buffer, f148.FBEOffset() + f148.FBESize());
        f150 = new FieldModelOptionalTimestamp(buffer, f149.FBEOffset() + f149.FBESize());
        f151 = new FieldModelOptionalUUID(buffer, f150.FBEOffset() + f150.FBESize());
        f152 = new FieldModelOptionalUUID(buffer, f151.FBEOffset() + f151.FBESize());
        f153 = new FieldModelOptionalUUID(buffer, f152.FBEOffset() + f152.FBESize());
        f154 = new FieldModelOptionalprotoOrderSide(buffer, f153.FBEOffset() + f153.FBESize());
        f155 = new FieldModelOptionalprotoOrderSide(buffer, f154.FBEOffset() + f154.FBESize());
        f156 = new FieldModelOptionalprotoOrderType(buffer, f155.FBEOffset() + f155.FBESize());
        f157 = new FieldModelOptionalprotoOrderType(buffer, f156.FBEOffset() + f156.FBESize());
        f158 = new FieldModelOptionalprotoOrder(buffer, f157.FBEOffset() + f157.FBESize());
        f159 = new FieldModelOptionalprotoOrder(buffer, f158.FBEOffset() + f158.FBESize());
        f160 = new FieldModelOptionalprotoBalance(buffer, f159.FBEOffset() + f159.FBESize());
        f161 = new FieldModelOptionalprotoBalance(buffer, f160.FBEOffset() + f160.FBESize());
        f162 = new FieldModelOptionalprotoState(buffer, f161.FBEOffset() + f161.FBESize());
        f163 = new FieldModelOptionalprotoState(buffer, f162.FBEOffset() + f162.FBESize());
        f164 = new FieldModelOptionalprotoAccount(buffer, f163.FBEOffset() + f163.FBESize());
        f165 = new FieldModelOptionalprotoAccount(buffer, f164.FBEOffset() + f164.FBESize());
    }

    // Get the field size
    @Override
    public long FBESize() { return 4; }
    // Get the field body size
    public long FBEBody()
    {
        long fbeResult = 4 + 4
            + parent.FBEBody() - 4 - 4
            + f100.FBESize()
            + f101.FBESize()
            + f102.FBESize()
            + f103.FBESize()
            + f104.FBESize()
            + f105.FBESize()
            + f106.FBESize()
            + f107.FBESize()
            + f108.FBESize()
            + f109.FBESize()
            + f110.FBESize()
            + f111.FBESize()
            + f112.FBESize()
            + f113.FBESize()
            + f114.FBESize()
            + f115.FBESize()
            + f116.FBESize()
            + f117.FBESize()
            + f118.FBESize()
            + f119.FBESize()
            + f120.FBESize()
            + f121.FBESize()
            + f122.FBESize()
            + f123.FBESize()
            + f124.FBESize()
            + f125.FBESize()
            + f126.FBESize()
            + f127.FBESize()
            + f128.FBESize()
            + f129.FBESize()
            + f130.FBESize()
            + f131.FBESize()
            + f132.FBESize()
            + f133.FBESize()
            + f134.FBESize()
            + f135.FBESize()
            + f136.FBESize()
            + f137.FBESize()
            + f138.FBESize()
            + f139.FBESize()
            + f140.FBESize()
            + f141.FBESize()
            + f142.FBESize()
            + f143.FBESize()
            + f144.FBESize()
            + f145.FBESize()
            + f146.FBESize()
            + f147.FBESize()
            + f148.FBESize()
            + f149.FBESize()
            + f150.FBESize()
            + f151.FBESize()
            + f152.FBESize()
            + f153.FBESize()
            + f154.FBESize()
            + f155.FBESize()
            + f156.FBESize()
            + f157.FBESize()
            + f158.FBESize()
            + f159.FBESize()
            + f160.FBESize()
            + f161.FBESize()
            + f162.FBESize()
            + f163.FBESize()
            + f164.FBESize()
            + f165.FBESize()
            ;
        return fbeResult;
    }
    // Get the field extra size
    @Override
    public long FBEExtra()
    {
        if ((_buffer.getOffset() + FBEOffset() + FBESize()) > _buffer.getSize())
            return 0;

        int fbeStructOffset = readInt32(FBEOffset());
        if ((fbeStructOffset == 0) || ((_buffer.getOffset() + fbeStructOffset + 4) > _buffer.getSize()))
            return 0;

        _buffer.shift(fbeStructOffset);

        long fbeResult = FBEBody()
            + parent.FBEExtra()
            + f100.FBEExtra()
            + f101.FBEExtra()
            + f102.FBEExtra()
            + f103.FBEExtra()
            + f104.FBEExtra()
            + f105.FBEExtra()
            + f106.FBEExtra()
            + f107.FBEExtra()
            + f108.FBEExtra()
            + f109.FBEExtra()
            + f110.FBEExtra()
            + f111.FBEExtra()
            + f112.FBEExtra()
            + f113.FBEExtra()
            + f114.FBEExtra()
            + f115.FBEExtra()
            + f116.FBEExtra()
            + f117.FBEExtra()
            + f118.FBEExtra()
            + f119.FBEExtra()
            + f120.FBEExtra()
            + f121.FBEExtra()
            + f122.FBEExtra()
            + f123.FBEExtra()
            + f124.FBEExtra()
            + f125.FBEExtra()
            + f126.FBEExtra()
            + f127.FBEExtra()
            + f128.FBEExtra()
            + f129.FBEExtra()
            + f130.FBEExtra()
            + f131.FBEExtra()
            + f132.FBEExtra()
            + f133.FBEExtra()
            + f134.FBEExtra()
            + f135.FBEExtra()
            + f136.FBEExtra()
            + f137.FBEExtra()
            + f138.FBEExtra()
            + f139.FBEExtra()
            + f140.FBEExtra()
            + f141.FBEExtra()
            + f142.FBEExtra()
            + f143.FBEExtra()
            + f144.FBEExtra()
            + f145.FBEExtra()
            + f146.FBEExtra()
            + f147.FBEExtra()
            + f148.FBEExtra()
            + f149.FBEExtra()
            + f150.FBEExtra()
            + f151.FBEExtra()
            + f152.FBEExtra()
            + f153.FBEExtra()
            + f154.FBEExtra()
            + f155.FBEExtra()
            + f156.FBEExtra()
            + f157.FBEExtra()
            + f158.FBEExtra()
            + f159.FBEExtra()
            + f160.FBEExtra()
            + f161.FBEExtra()
            + f162.FBEExtra()
            + f163.FBEExtra()
            + f164.FBEExtra()
            + f165.FBEExtra()
            ;

        _buffer.unshift(fbeStructOffset);

        return fbeResult;
    }
    // Get the field type
    public long FBEType() { return 111; }

    // Check if the struct value is valid
    @Override
    public boolean verify() { return verify(true); }
    public boolean verify(boolean fbeVerifyType)
    {
        if ((_buffer.getOffset() + FBEOffset() + FBESize()) > _buffer.getSize())
            return true;

        int fbeStructOffset = readInt32(FBEOffset());
        if ((fbeStructOffset == 0) || ((_buffer.getOffset() + fbeStructOffset + 4 + 4) > _buffer.getSize()))
            return false;

        int fbeStructSize = readInt32(fbeStructOffset);
        if (fbeStructSize < 4 + 4)
            return false;

        int fbeStructType = readInt32(fbeStructOffset + 4);
        if (fbeVerifyType && (fbeStructType != FBEType()))
            return false;

        _buffer.shift(fbeStructOffset);
        boolean fbeResult = verifyFields(fbeStructSize);
        _buffer.unshift(fbeStructOffset);
        return fbeResult;
    }

    // Check if the struct fields are valid
    public boolean verifyFields(long fbeStructSize)
    {
        long fbeCurrentSize = 4 + 4;

        if ((fbeCurrentSize + parent.FBEBody() - 4 - 4) > fbeStructSize)
            return true;
        if (!parent.verifyFields(fbeStructSize))
            return false;
        fbeCurrentSize += parent.FBEBody() - 4 - 4;

        if ((fbeCurrentSize + f100.FBESize()) > fbeStructSize)
            return true;
        if (!f100.verify())
            return false;
        fbeCurrentSize += f100.FBESize();

        if ((fbeCurrentSize + f101.FBESize()) > fbeStructSize)
            return true;
        if (!f101.verify())
            return false;
        fbeCurrentSize += f101.FBESize();

        if ((fbeCurrentSize + f102.FBESize()) > fbeStructSize)
            return true;
        if (!f102.verify())
            return false;
        fbeCurrentSize += f102.FBESize();

        if ((fbeCurrentSize + f103.FBESize()) > fbeStructSize)
            return true;
        if (!f103.verify())
            return false;
        fbeCurrentSize += f103.FBESize();

        if ((fbeCurrentSize + f104.FBESize()) > fbeStructSize)
            return true;
        if (!f104.verify())
            return false;
        fbeCurrentSize += f104.FBESize();

        if ((fbeCurrentSize + f105.FBESize()) > fbeStructSize)
            return true;
        if (!f105.verify())
            return false;
        fbeCurrentSize += f105.FBESize();

        if ((fbeCurrentSize + f106.FBESize()) > fbeStructSize)
            return true;
        if (!f106.verify())
            return false;
        fbeCurrentSize += f106.FBESize();

        if ((fbeCurrentSize + f107.FBESize()) > fbeStructSize)
            return true;
        if (!f107.verify())
            return false;
        fbeCurrentSize += f107.FBESize();

        if ((fbeCurrentSize + f108.FBESize()) > fbeStructSize)
            return true;
        if (!f108.verify())
            return false;
        fbeCurrentSize += f108.FBESize();

        if ((fbeCurrentSize + f109.FBESize()) > fbeStructSize)
            return true;
        if (!f109.verify())
            return false;
        fbeCurrentSize += f109.FBESize();

        if ((fbeCurrentSize + f110.FBESize()) > fbeStructSize)
            return true;
        if (!f110.verify())
            return false;
        fbeCurrentSize += f110.FBESize();

        if ((fbeCurrentSize + f111.FBESize()) > fbeStructSize)
            return true;
        if (!f111.verify())
            return false;
        fbeCurrentSize += f111.FBESize();

        if ((fbeCurrentSize + f112.FBESize()) > fbeStructSize)
            return true;
        if (!f112.verify())
            return false;
        fbeCurrentSize += f112.FBESize();

        if ((fbeCurrentSize + f113.FBESize()) > fbeStructSize)
            return true;
        if (!f113.verify())
            return false;
        fbeCurrentSize += f113.FBESize();

        if ((fbeCurrentSize + f114.FBESize()) > fbeStructSize)
            return true;
        if (!f114.verify())
            return false;
        fbeCurrentSize += f114.FBESize();

        if ((fbeCurrentSize + f115.FBESize()) > fbeStructSize)
            return true;
        if (!f115.verify())
            return false;
        fbeCurrentSize += f115.FBESize();

        if ((fbeCurrentSize + f116.FBESize()) > fbeStructSize)
            return true;
        if (!f116.verify())
            return false;
        fbeCurrentSize += f116.FBESize();

        if ((fbeCurrentSize + f117.FBESize()) > fbeStructSize)
            return true;
        if (!f117.verify())
            return false;
        fbeCurrentSize += f117.FBESize();

        if ((fbeCurrentSize + f118.FBESize()) > fbeStructSize)
            return true;
        if (!f118.verify())
            return false;
        fbeCurrentSize += f118.FBESize();

        if ((fbeCurrentSize + f119.FBESize()) > fbeStructSize)
            return true;
        if (!f119.verify())
            return false;
        fbeCurrentSize += f119.FBESize();

        if ((fbeCurrentSize + f120.FBESize()) > fbeStructSize)
            return true;
        if (!f120.verify())
            return false;
        fbeCurrentSize += f120.FBESize();

        if ((fbeCurrentSize + f121.FBESize()) > fbeStructSize)
            return true;
        if (!f121.verify())
            return false;
        fbeCurrentSize += f121.FBESize();

        if ((fbeCurrentSize + f122.FBESize()) > fbeStructSize)
            return true;
        if (!f122.verify())
            return false;
        fbeCurrentSize += f122.FBESize();

        if ((fbeCurrentSize + f123.FBESize()) > fbeStructSize)
            return true;
        if (!f123.verify())
            return false;
        fbeCurrentSize += f123.FBESize();

        if ((fbeCurrentSize + f124.FBESize()) > fbeStructSize)
            return true;
        if (!f124.verify())
            return false;
        fbeCurrentSize += f124.FBESize();

        if ((fbeCurrentSize + f125.FBESize()) > fbeStructSize)
            return true;
        if (!f125.verify())
            return false;
        fbeCurrentSize += f125.FBESize();

        if ((fbeCurrentSize + f126.FBESize()) > fbeStructSize)
            return true;
        if (!f126.verify())
            return false;
        fbeCurrentSize += f126.FBESize();

        if ((fbeCurrentSize + f127.FBESize()) > fbeStructSize)
            return true;
        if (!f127.verify())
            return false;
        fbeCurrentSize += f127.FBESize();

        if ((fbeCurrentSize + f128.FBESize()) > fbeStructSize)
            return true;
        if (!f128.verify())
            return false;
        fbeCurrentSize += f128.FBESize();

        if ((fbeCurrentSize + f129.FBESize()) > fbeStructSize)
            return true;
        if (!f129.verify())
            return false;
        fbeCurrentSize += f129.FBESize();

        if ((fbeCurrentSize + f130.FBESize()) > fbeStructSize)
            return true;
        if (!f130.verify())
            return false;
        fbeCurrentSize += f130.FBESize();

        if ((fbeCurrentSize + f131.FBESize()) > fbeStructSize)
            return true;
        if (!f131.verify())
            return false;
        fbeCurrentSize += f131.FBESize();

        if ((fbeCurrentSize + f132.FBESize()) > fbeStructSize)
            return true;
        if (!f132.verify())
            return false;
        fbeCurrentSize += f132.FBESize();

        if ((fbeCurrentSize + f133.FBESize()) > fbeStructSize)
            return true;
        if (!f133.verify())
            return false;
        fbeCurrentSize += f133.FBESize();

        if ((fbeCurrentSize + f134.FBESize()) > fbeStructSize)
            return true;
        if (!f134.verify())
            return false;
        fbeCurrentSize += f134.FBESize();

        if ((fbeCurrentSize + f135.FBESize()) > fbeStructSize)
            return true;
        if (!f135.verify())
            return false;
        fbeCurrentSize += f135.FBESize();

        if ((fbeCurrentSize + f136.FBESize()) > fbeStructSize)
            return true;
        if (!f136.verify())
            return false;
        fbeCurrentSize += f136.FBESize();

        if ((fbeCurrentSize + f137.FBESize()) > fbeStructSize)
            return true;
        if (!f137.verify())
            return false;
        fbeCurrentSize += f137.FBESize();

        if ((fbeCurrentSize + f138.FBESize()) > fbeStructSize)
            return true;
        if (!f138.verify())
            return false;
        fbeCurrentSize += f138.FBESize();

        if ((fbeCurrentSize + f139.FBESize()) > fbeStructSize)
            return true;
        if (!f139.verify())
            return false;
        fbeCurrentSize += f139.FBESize();

        if ((fbeCurrentSize + f140.FBESize()) > fbeStructSize)
            return true;
        if (!f140.verify())
            return false;
        fbeCurrentSize += f140.FBESize();

        if ((fbeCurrentSize + f141.FBESize()) > fbeStructSize)
            return true;
        if (!f141.verify())
            return false;
        fbeCurrentSize += f141.FBESize();

        if ((fbeCurrentSize + f142.FBESize()) > fbeStructSize)
            return true;
        if (!f142.verify())
            return false;
        fbeCurrentSize += f142.FBESize();

        if ((fbeCurrentSize + f143.FBESize()) > fbeStructSize)
            return true;
        if (!f143.verify())
            return false;
        fbeCurrentSize += f143.FBESize();

        if ((fbeCurrentSize + f144.FBESize()) > fbeStructSize)
            return true;
        if (!f144.verify())
            return false;
        fbeCurrentSize += f144.FBESize();

        if ((fbeCurrentSize + f145.FBESize()) > fbeStructSize)
            return true;
        if (!f145.verify())
            return false;
        fbeCurrentSize += f145.FBESize();

        if ((fbeCurrentSize + f146.FBESize()) > fbeStructSize)
            return true;
        if (!f146.verify())
            return false;
        fbeCurrentSize += f146.FBESize();

        if ((fbeCurrentSize + f147.FBESize()) > fbeStructSize)
            return true;
        if (!f147.verify())
            return false;
        fbeCurrentSize += f147.FBESize();

        if ((fbeCurrentSize + f148.FBESize()) > fbeStructSize)
            return true;
        if (!f148.verify())
            return false;
        fbeCurrentSize += f148.FBESize();

        if ((fbeCurrentSize + f149.FBESize()) > fbeStructSize)
            return true;
        if (!f149.verify())
            return false;
        fbeCurrentSize += f149.FBESize();

        if ((fbeCurrentSize + f150.FBESize()) > fbeStructSize)
            return true;
        if (!f150.verify())
            return false;
        fbeCurrentSize += f150.FBESize();

        if ((fbeCurrentSize + f151.FBESize()) > fbeStructSize)
            return true;
        if (!f151.verify())
            return false;
        fbeCurrentSize += f151.FBESize();

        if ((fbeCurrentSize + f152.FBESize()) > fbeStructSize)
            return true;
        if (!f152.verify())
            return false;
        fbeCurrentSize += f152.FBESize();

        if ((fbeCurrentSize + f153.FBESize()) > fbeStructSize)
            return true;
        if (!f153.verify())
            return false;
        fbeCurrentSize += f153.FBESize();

        if ((fbeCurrentSize + f154.FBESize()) > fbeStructSize)
            return true;
        if (!f154.verify())
            return false;
        fbeCurrentSize += f154.FBESize();

        if ((fbeCurrentSize + f155.FBESize()) > fbeStructSize)
            return true;
        if (!f155.verify())
            return false;
        fbeCurrentSize += f155.FBESize();

        if ((fbeCurrentSize + f156.FBESize()) > fbeStructSize)
            return true;
        if (!f156.verify())
            return false;
        fbeCurrentSize += f156.FBESize();

        if ((fbeCurrentSize + f157.FBESize()) > fbeStructSize)
            return true;
        if (!f157.verify())
            return false;
        fbeCurrentSize += f157.FBESize();

        if ((fbeCurrentSize + f158.FBESize()) > fbeStructSize)
            return true;
        if (!f158.verify())
            return false;
        fbeCurrentSize += f158.FBESize();

        if ((fbeCurrentSize + f159.FBESize()) > fbeStructSize)
            return true;
        if (!f159.verify())
            return false;
        fbeCurrentSize += f159.FBESize();

        if ((fbeCurrentSize + f160.FBESize()) > fbeStructSize)
            return true;
        if (!f160.verify())
            return false;
        fbeCurrentSize += f160.FBESize();

        if ((fbeCurrentSize + f161.FBESize()) > fbeStructSize)
            return true;
        if (!f161.verify())
            return false;
        fbeCurrentSize += f161.FBESize();

        if ((fbeCurrentSize + f162.FBESize()) > fbeStructSize)
            return true;
        if (!f162.verify())
            return false;
        fbeCurrentSize += f162.FBESize();

        if ((fbeCurrentSize + f163.FBESize()) > fbeStructSize)
            return true;
        if (!f163.verify())
            return false;
        fbeCurrentSize += f163.FBESize();

        if ((fbeCurrentSize + f164.FBESize()) > fbeStructSize)
            return true;
        if (!f164.verify())
            return false;
        fbeCurrentSize += f164.FBESize();

        if ((fbeCurrentSize + f165.FBESize()) > fbeStructSize)
            return true;
        if (!f165.verify())
            return false;
        fbeCurrentSize += f165.FBESize();

        return true;
    }

    // Get the struct value (begin phase)
    public long getBegin()
    {
        if ((_buffer.getOffset() + FBEOffset() + FBESize()) > _buffer.getSize())
            return 0;

        int fbeStructOffset = readInt32(FBEOffset());
        assert ((fbeStructOffset > 0) && ((_buffer.getOffset() + fbeStructOffset + 4 + 4) <= _buffer.getSize())) : "Model is broken!";
        if ((fbeStructOffset == 0) || ((_buffer.getOffset() + fbeStructOffset + 4 + 4) > _buffer.getSize()))
            return 0;

        int fbeStructSize = readInt32(fbeStructOffset);
        assert (fbeStructSize >= 4 + 4) : "Model is broken!";
        if (fbeStructSize < 4 + 4)
            return 0;

        _buffer.shift(fbeStructOffset);
        return fbeStructOffset;
    }

    // Get the struct value (end phase)
    public void getEnd(long fbeBegin)
    {
        _buffer.unshift(fbeBegin);
    }

    // Get the struct value
    public StructOptional get() { return get(new StructOptional()); }
    public StructOptional get(StructOptional fbeValue)
    {
        long fbeBegin = getBegin();
        if (fbeBegin == 0)
            return fbeValue;

        int fbeStructSize = readInt32(0);
        getFields(fbeValue, fbeStructSize);
        getEnd(fbeBegin);
        return fbeValue;
    }

    // Get the struct fields values
    public void getFields(StructOptional fbeValue, long fbeStructSize)
    {
        long fbeCurrentSize = 4 + 4;

        if ((fbeCurrentSize + parent.FBEBody() - 4 - 4) <= fbeStructSize)
            parent.getFields(fbeValue, fbeStructSize);
        fbeCurrentSize += parent.FBEBody() - 4 - 4;

        if ((fbeCurrentSize + f100.FBESize()) <= fbeStructSize)
            fbeValue.f100 = f100.get();
        else
            fbeValue.f100 = null;
        fbeCurrentSize += f100.FBESize();

        if ((fbeCurrentSize + f101.FBESize()) <= fbeStructSize)
            fbeValue.f101 = f101.get(true);
        else
            fbeValue.f101 = true;
        fbeCurrentSize += f101.FBESize();

        if ((fbeCurrentSize + f102.FBESize()) <= fbeStructSize)
            fbeValue.f102 = f102.get(null);
        else
            fbeValue.f102 = null;
        fbeCurrentSize += f102.FBESize();

        if ((fbeCurrentSize + f103.FBESize()) <= fbeStructSize)
            fbeValue.f103 = f103.get();
        else
            fbeValue.f103 = null;
        fbeCurrentSize += f103.FBESize();

        if ((fbeCurrentSize + f104.FBESize()) <= fbeStructSize)
            fbeValue.f104 = f104.get((byte)255);
        else
            fbeValue.f104 = (byte)255;
        fbeCurrentSize += f104.FBESize();

        if ((fbeCurrentSize + f105.FBESize()) <= fbeStructSize)
            fbeValue.f105 = f105.get(null);
        else
            fbeValue.f105 = null;
        fbeCurrentSize += f105.FBESize();

        if ((fbeCurrentSize + f106.FBESize()) <= fbeStructSize)
            fbeValue.f106 = f106.get();
        else
            fbeValue.f106 = null;
        fbeCurrentSize += f106.FBESize();

        if ((fbeCurrentSize + f107.FBESize()) <= fbeStructSize)
            fbeValue.f107 = f107.get((char)'!');
        else
            fbeValue.f107 = (char)'!';
        fbeCurrentSize += f107.FBESize();

        if ((fbeCurrentSize + f108.FBESize()) <= fbeStructSize)
            fbeValue.f108 = f108.get(null);
        else
            fbeValue.f108 = null;
        fbeCurrentSize += f108.FBESize();

        if ((fbeCurrentSize + f109.FBESize()) <= fbeStructSize)
            fbeValue.f109 = f109.get();
        else
            fbeValue.f109 = null;
        fbeCurrentSize += f109.FBESize();

        if ((fbeCurrentSize + f110.FBESize()) <= fbeStructSize)
            fbeValue.f110 = f110.get((char)0x0444);
        else
            fbeValue.f110 = (char)0x0444;
        fbeCurrentSize += f110.FBESize();

        if ((fbeCurrentSize + f111.FBESize()) <= fbeStructSize)
            fbeValue.f111 = f111.get(null);
        else
            fbeValue.f111 = null;
        fbeCurrentSize += f111.FBESize();

        if ((fbeCurrentSize + f112.FBESize()) <= fbeStructSize)
            fbeValue.f112 = f112.get();
        else
            fbeValue.f112 = null;
        fbeCurrentSize += f112.FBESize();

        if ((fbeCurrentSize + f113.FBESize()) <= fbeStructSize)
            fbeValue.f113 = f113.get((byte)127);
        else
            fbeValue.f113 = (byte)127;
        fbeCurrentSize += f113.FBESize();

        if ((fbeCurrentSize + f114.FBESize()) <= fbeStructSize)
            fbeValue.f114 = f114.get(null);
        else
            fbeValue.f114 = null;
        fbeCurrentSize += f114.FBESize();

        if ((fbeCurrentSize + f115.FBESize()) <= fbeStructSize)
            fbeValue.f115 = f115.get();
        else
            fbeValue.f115 = null;
        fbeCurrentSize += f115.FBESize();

        if ((fbeCurrentSize + f116.FBESize()) <= fbeStructSize)
            fbeValue.f116 = f116.get((byte)255);
        else
            fbeValue.f116 = (byte)255;
        fbeCurrentSize += f116.FBESize();

        if ((fbeCurrentSize + f117.FBESize()) <= fbeStructSize)
            fbeValue.f117 = f117.get(null);
        else
            fbeValue.f117 = null;
        fbeCurrentSize += f117.FBESize();

        if ((fbeCurrentSize + f118.FBESize()) <= fbeStructSize)
            fbeValue.f118 = f118.get();
        else
            fbeValue.f118 = null;
        fbeCurrentSize += f118.FBESize();

        if ((fbeCurrentSize + f119.FBESize()) <= fbeStructSize)
            fbeValue.f119 = f119.get((short)32767);
        else
            fbeValue.f119 = (short)32767;
        fbeCurrentSize += f119.FBESize();

        if ((fbeCurrentSize + f120.FBESize()) <= fbeStructSize)
            fbeValue.f120 = f120.get(null);
        else
            fbeValue.f120 = null;
        fbeCurrentSize += f120.FBESize();

        if ((fbeCurrentSize + f121.FBESize()) <= fbeStructSize)
            fbeValue.f121 = f121.get();
        else
            fbeValue.f121 = null;
        fbeCurrentSize += f121.FBESize();

        if ((fbeCurrentSize + f122.FBESize()) <= fbeStructSize)
            fbeValue.f122 = f122.get((short)65535);
        else
            fbeValue.f122 = (short)65535;
        fbeCurrentSize += f122.FBESize();

        if ((fbeCurrentSize + f123.FBESize()) <= fbeStructSize)
            fbeValue.f123 = f123.get(null);
        else
            fbeValue.f123 = null;
        fbeCurrentSize += f123.FBESize();

        if ((fbeCurrentSize + f124.FBESize()) <= fbeStructSize)
            fbeValue.f124 = f124.get();
        else
            fbeValue.f124 = null;
        fbeCurrentSize += f124.FBESize();

        if ((fbeCurrentSize + f125.FBESize()) <= fbeStructSize)
            fbeValue.f125 = f125.get((int)2147483647);
        else
            fbeValue.f125 = (int)2147483647;
        fbeCurrentSize += f125.FBESize();

        if ((fbeCurrentSize + f126.FBESize()) <= fbeStructSize)
            fbeValue.f126 = f126.get(null);
        else
            fbeValue.f126 = null;
        fbeCurrentSize += f126.FBESize();

        if ((fbeCurrentSize + f127.FBESize()) <= fbeStructSize)
            fbeValue.f127 = f127.get();
        else
            fbeValue.f127 = null;
        fbeCurrentSize += f127.FBESize();

        if ((fbeCurrentSize + f128.FBESize()) <= fbeStructSize)
            fbeValue.f128 = f128.get((int)0xFFFFFFFF);
        else
            fbeValue.f128 = (int)0xFFFFFFFF;
        fbeCurrentSize += f128.FBESize();

        if ((fbeCurrentSize + f129.FBESize()) <= fbeStructSize)
            fbeValue.f129 = f129.get(null);
        else
            fbeValue.f129 = null;
        fbeCurrentSize += f129.FBESize();

        if ((fbeCurrentSize + f130.FBESize()) <= fbeStructSize)
            fbeValue.f130 = f130.get();
        else
            fbeValue.f130 = null;
        fbeCurrentSize += f130.FBESize();

        if ((fbeCurrentSize + f131.FBESize()) <= fbeStructSize)
            fbeValue.f131 = f131.get((long)9223372036854775807L);
        else
            fbeValue.f131 = (long)9223372036854775807L;
        fbeCurrentSize += f131.FBESize();

        if ((fbeCurrentSize + f132.FBESize()) <= fbeStructSize)
            fbeValue.f132 = f132.get(null);
        else
            fbeValue.f132 = null;
        fbeCurrentSize += f132.FBESize();

        if ((fbeCurrentSize + f133.FBESize()) <= fbeStructSize)
            fbeValue.f133 = f133.get();
        else
            fbeValue.f133 = null;
        fbeCurrentSize += f133.FBESize();

        if ((fbeCurrentSize + f134.FBESize()) <= fbeStructSize)
            fbeValue.f134 = f134.get((long)0xFFFFFFFFFFFFFFFFL);
        else
            fbeValue.f134 = (long)0xFFFFFFFFFFFFFFFFL;
        fbeCurrentSize += f134.FBESize();

        if ((fbeCurrentSize + f135.FBESize()) <= fbeStructSize)
            fbeValue.f135 = f135.get(null);
        else
            fbeValue.f135 = null;
        fbeCurrentSize += f135.FBESize();

        if ((fbeCurrentSize + f136.FBESize()) <= fbeStructSize)
            fbeValue.f136 = f136.get();
        else
            fbeValue.f136 = null;
        fbeCurrentSize += f136.FBESize();

        if ((fbeCurrentSize + f137.FBESize()) <= fbeStructSize)
            fbeValue.f137 = f137.get((float)123.456f);
        else
            fbeValue.f137 = (float)123.456f;
        fbeCurrentSize += f137.FBESize();

        if ((fbeCurrentSize + f138.FBESize()) <= fbeStructSize)
            fbeValue.f138 = f138.get(null);
        else
            fbeValue.f138 = null;
        fbeCurrentSize += f138.FBESize();

        if ((fbeCurrentSize + f139.FBESize()) <= fbeStructSize)
            fbeValue.f139 = f139.get();
        else
            fbeValue.f139 = null;
        fbeCurrentSize += f139.FBESize();

        if ((fbeCurrentSize + f140.FBESize()) <= fbeStructSize)
            fbeValue.f140 = f140.get((double)-123.456e+123d);
        else
            fbeValue.f140 = (double)-123.456e+123d;
        fbeCurrentSize += f140.FBESize();

        if ((fbeCurrentSize + f141.FBESize()) <= fbeStructSize)
            fbeValue.f141 = f141.get(null);
        else
            fbeValue.f141 = null;
        fbeCurrentSize += f141.FBESize();

        if ((fbeCurrentSize + f142.FBESize()) <= fbeStructSize)
            fbeValue.f142 = f142.get();
        else
            fbeValue.f142 = null;
        fbeCurrentSize += f142.FBESize();

        if ((fbeCurrentSize + f143.FBESize()) <= fbeStructSize)
            fbeValue.f143 = f143.get(BigDecimal.valueOf(123456.123456d));
        else
            fbeValue.f143 = BigDecimal.valueOf(123456.123456d);
        fbeCurrentSize += f143.FBESize();

        if ((fbeCurrentSize + f144.FBESize()) <= fbeStructSize)
            fbeValue.f144 = f144.get(null);
        else
            fbeValue.f144 = null;
        fbeCurrentSize += f144.FBESize();

        if ((fbeCurrentSize + f145.FBESize()) <= fbeStructSize)
            fbeValue.f145 = f145.get();
        else
            fbeValue.f145 = null;
        fbeCurrentSize += f145.FBESize();

        if ((fbeCurrentSize + f146.FBESize()) <= fbeStructSize)
            fbeValue.f146 = f146.get("Initial string!");
        else
            fbeValue.f146 = "Initial string!";
        fbeCurrentSize += f146.FBESize();

        if ((fbeCurrentSize + f147.FBESize()) <= fbeStructSize)
            fbeValue.f147 = f147.get(null);
        else
            fbeValue.f147 = null;
        fbeCurrentSize += f147.FBESize();

        if ((fbeCurrentSize + f148.FBESize()) <= fbeStructSize)
            fbeValue.f148 = f148.get();
        else
            fbeValue.f148 = null;
        fbeCurrentSize += f148.FBESize();

        if ((fbeCurrentSize + f149.FBESize()) <= fbeStructSize)
            fbeValue.f149 = f149.get(Instant.now());
        else
            fbeValue.f149 = Instant.now();
        fbeCurrentSize += f149.FBESize();

        if ((fbeCurrentSize + f150.FBESize()) <= fbeStructSize)
            fbeValue.f150 = f150.get(null);
        else
            fbeValue.f150 = null;
        fbeCurrentSize += f150.FBESize();

        if ((fbeCurrentSize + f151.FBESize()) <= fbeStructSize)
            fbeValue.f151 = f151.get();
        else
            fbeValue.f151 = null;
        fbeCurrentSize += f151.FBESize();

        if ((fbeCurrentSize + f152.FBESize()) <= fbeStructSize)
            fbeValue.f152 = f152.get(UUID.fromString("123e4567-e89b-12d3-a456-426655440000"));
        else
            fbeValue.f152 = UUID.fromString("123e4567-e89b-12d3-a456-426655440000");
        fbeCurrentSize += f152.FBESize();

        if ((fbeCurrentSize + f153.FBESize()) <= fbeStructSize)
            fbeValue.f153 = f153.get(null);
        else
            fbeValue.f153 = null;
        fbeCurrentSize += f153.FBESize();

        if ((fbeCurrentSize + f154.FBESize()) <= fbeStructSize)
            fbeValue.f154 = f154.get();
        else
            fbeValue.f154 = null;
        fbeCurrentSize += f154.FBESize();

        if ((fbeCurrentSize + f155.FBESize()) <= fbeStructSize)
            fbeValue.f155 = f155.get(null);
        else
            fbeValue.f155 = null;
        fbeCurrentSize += f155.FBESize();

        if ((fbeCurrentSize + f156.FBESize()) <= fbeStructSize)
            fbeValue.f156 = f156.get();
        else
            fbeValue.f156 = null;
        fbeCurrentSize += f156.FBESize();

        if ((fbeCurrentSize + f157.FBESize()) <= fbeStructSize)
            fbeValue.f157 = f157.get(null);
        else
            fbeValue.f157 = null;
        fbeCurrentSize += f157.FBESize();

        if ((fbeCurrentSize + f158.FBESize()) <= fbeStructSize)
            fbeValue.f158 = f158.get();
        else
            fbeValue.f158 = null;
        fbeCurrentSize += f158.FBESize();

        if ((fbeCurrentSize + f159.FBESize()) <= fbeStructSize)
            fbeValue.f159 = f159.get(null);
        else
            fbeValue.f159 = null;
        fbeCurrentSize += f159.FBESize();

        if ((fbeCurrentSize + f160.FBESize()) <= fbeStructSize)
            fbeValue.f160 = f160.get();
        else
            fbeValue.f160 = null;
        fbeCurrentSize += f160.FBESize();

        if ((fbeCurrentSize + f161.FBESize()) <= fbeStructSize)
            fbeValue.f161 = f161.get(null);
        else
            fbeValue.f161 = null;
        fbeCurrentSize += f161.FBESize();

        if ((fbeCurrentSize + f162.FBESize()) <= fbeStructSize)
            fbeValue.f162 = f162.get();
        else
            fbeValue.f162 = null;
        fbeCurrentSize += f162.FBESize();

        if ((fbeCurrentSize + f163.FBESize()) <= fbeStructSize)
            fbeValue.f163 = f163.get(null);
        else
            fbeValue.f163 = null;
        fbeCurrentSize += f163.FBESize();

        if ((fbeCurrentSize + f164.FBESize()) <= fbeStructSize)
            fbeValue.f164 = f164.get();
        else
            fbeValue.f164 = null;
        fbeCurrentSize += f164.FBESize();

        if ((fbeCurrentSize + f165.FBESize()) <= fbeStructSize)
            fbeValue.f165 = f165.get(null);
        else
            fbeValue.f165 = null;
        fbeCurrentSize += f165.FBESize();
    }

    // Set the struct value (begin phase)
    public long setBegin()
    {
        assert ((_buffer.getOffset() + FBEOffset() + FBESize()) <= _buffer.getSize()) : "Model is broken!";
        if ((_buffer.getOffset() + FBEOffset() + FBESize()) > _buffer.getSize())
            return 0;

        int fbeStructSize = (int)FBEBody();
        int fbeStructOffset = (int)(_buffer.allocate(fbeStructSize) - _buffer.getOffset());
        assert ((fbeStructOffset > 0) && ((_buffer.getOffset() + fbeStructOffset + fbeStructSize) <= _buffer.getSize())) : "Model is broken!";
        if ((fbeStructOffset <= 0) || ((_buffer.getOffset() + fbeStructOffset + fbeStructSize) > _buffer.getSize()))
            return 0;

        write(FBEOffset(), fbeStructOffset);
        write(fbeStructOffset, fbeStructSize);
        write(fbeStructOffset + 4, (int)FBEType());

        _buffer.shift(fbeStructOffset);
        return fbeStructOffset;
    }

    // Set the struct value (end phase)
    public void setEnd(long fbeBegin)
    {
        _buffer.unshift(fbeBegin);
    }

    // Set the struct value
    public void set(StructOptional fbeValue)
    {
        long fbeBegin = setBegin();
        if (fbeBegin == 0)
            return;

        setFields(fbeValue);
        setEnd(fbeBegin);
    }

    // Set the struct fields values
    public void setFields(StructOptional fbeValue)
    {
        parent.setFields(fbeValue);
        f100.set(fbeValue.f100);
        f101.set(fbeValue.f101);
        f102.set(fbeValue.f102);
        f103.set(fbeValue.f103);
        f104.set(fbeValue.f104);
        f105.set(fbeValue.f105);
        f106.set(fbeValue.f106);
        f107.set(fbeValue.f107);
        f108.set(fbeValue.f108);
        f109.set(fbeValue.f109);
        f110.set(fbeValue.f110);
        f111.set(fbeValue.f111);
        f112.set(fbeValue.f112);
        f113.set(fbeValue.f113);
        f114.set(fbeValue.f114);
        f115.set(fbeValue.f115);
        f116.set(fbeValue.f116);
        f117.set(fbeValue.f117);
        f118.set(fbeValue.f118);
        f119.set(fbeValue.f119);
        f120.set(fbeValue.f120);
        f121.set(fbeValue.f121);
        f122.set(fbeValue.f122);
        f123.set(fbeValue.f123);
        f124.set(fbeValue.f124);
        f125.set(fbeValue.f125);
        f126.set(fbeValue.f126);
        f127.set(fbeValue.f127);
        f128.set(fbeValue.f128);
        f129.set(fbeValue.f129);
        f130.set(fbeValue.f130);
        f131.set(fbeValue.f131);
        f132.set(fbeValue.f132);
        f133.set(fbeValue.f133);
        f134.set(fbeValue.f134);
        f135.set(fbeValue.f135);
        f136.set(fbeValue.f136);
        f137.set(fbeValue.f137);
        f138.set(fbeValue.f138);
        f139.set(fbeValue.f139);
        f140.set(fbeValue.f140);
        f141.set(fbeValue.f141);
        f142.set(fbeValue.f142);
        f143.set(fbeValue.f143);
        f144.set(fbeValue.f144);
        f145.set(fbeValue.f145);
        f146.set(fbeValue.f146);
        f147.set(fbeValue.f147);
        f148.set(fbeValue.f148);
        f149.set(fbeValue.f149);
        f150.set(fbeValue.f150);
        f151.set(fbeValue.f151);
        f152.set(fbeValue.f152);
        f153.set(fbeValue.f153);
        f154.set(fbeValue.f154);
        f155.set(fbeValue.f155);
        f156.set(fbeValue.f156);
        f157.set(fbeValue.f157);
        f158.set(fbeValue.f158);
        f159.set(fbeValue.f159);
        f160.set(fbeValue.f160);
        f161.set(fbeValue.f161);
        f162.set(fbeValue.f162);
        f163.set(fbeValue.f163);
        f164.set(fbeValue.f164);
        f165.set(fbeValue.f165);
    }
}
