// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding

package fbe;

import java.io.*;
import java.lang.*;
import java.lang.reflect.*;
import java.math.*;
import java.nio.charset.*;
import java.time.*;
import java.util.*;

import com.google.gson.*;

final class BytesJson implements JsonSerializer<byte[]>, JsonDeserializer<byte[]>
{
    @Override
    public JsonElement serialize(byte[] src, Type typeOfSrc, JsonSerializationContext context)
    {
        return new JsonPrimitive(Base64.getEncoder().encodeToString(src));
    }

    @Override
    public byte[] deserialize(JsonElement json, Type type, JsonDeserializationContext context) throws JsonParseException
    {
        return Base64.getDecoder().decode(json.getAsString());
    }
}

final class InstantJson implements JsonSerializer<Instant>, JsonDeserializer<Instant>
{
    @Override
    public JsonElement serialize(Instant src, Type typeOfSrc, JsonSerializationContext context)
    {
        long nanoseconds = src.getEpochSecond() * 1000000000 + src.getNano();
        return new JsonPrimitive(nanoseconds);
    }

    @Override
    public Instant deserialize(JsonElement json, Type type, JsonDeserializationContext context) throws JsonParseException
    {
        long nanoseconds = json.getAsJsonPrimitive().getAsLong();
        return Instant.ofEpochSecond(nanoseconds / 1000000000, nanoseconds % 1000000000);
    }
}

final class BigDecimalJson implements JsonSerializer<BigDecimal>, JsonDeserializer<BigDecimal>
{
    @Override
    public JsonElement serialize(BigDecimal src, Type typeOfSrc, JsonSerializationContext context)
    {
        return new JsonPrimitive(src.toPlainString());
    }

    @Override
    public BigDecimal deserialize(JsonElement json, Type type, JsonDeserializationContext context) throws JsonParseException
    {
        return new BigDecimal(json.getAsJsonPrimitive().getAsString());
    }
}

final class UUIDJson implements JsonSerializer<UUID>, JsonDeserializer<UUID>
{
    @Override
    public JsonElement serialize(UUID src, Type typeOfSrc, JsonSerializationContext context)
    {
        return new JsonPrimitive(src.toString());
    }

    @Override
    public UUID deserialize(JsonElement json, Type type, JsonDeserializationContext context) throws JsonParseException
    {
        return UUID.fromString(json.getAsJsonPrimitive().getAsString());
    }
}

// Fast Binary Encoding base JSON class
public final class Json
{
    private static final Gson _engine;

    // Get the JSON engine
    public static Gson getJsonEngine() { return _engine; }

    static
    {
        _engine = Register(new GsonBuilder()).create();
    }

    private Json() {}

    public static GsonBuilder Register(GsonBuilder builder)
    {
        builder.serializeNulls();
        builder.registerTypeAdapter(byte[].class, new BytesJson());
        builder.registerTypeAdapter(Instant.class, new InstantJson());
        builder.registerTypeAdapter(BigDecimal.class, new BigDecimalJson());
        builder.registerTypeAdapter(UUID.class, new UUIDJson());
        return builder;
    }
}
