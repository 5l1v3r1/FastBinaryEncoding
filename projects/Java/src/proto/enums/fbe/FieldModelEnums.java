// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding

package enums.fbe;

import java.io.*;
import java.lang.*;
import java.lang.reflect.*;
import java.math.*;
import java.nio.charset.*;
import java.time.*;
import java.util.*;
import javafx.util.*;

import fbe.*;
import enums.*;

// Fast Binary Encoding Enums field model class
public final class FieldModelEnums extends FieldModel
{
    public final FieldModelEnumByte byte0;
    public final FieldModelEnumByte byte1;
    public final FieldModelEnumByte byte2;
    public final FieldModelEnumByte byte3;
    public final FieldModelEnumByte byte4;
    public final FieldModelEnumByte byte5;
    public final FieldModelEnumChar char0;
    public final FieldModelEnumChar char1;
    public final FieldModelEnumChar char2;
    public final FieldModelEnumChar char3;
    public final FieldModelEnumChar char4;
    public final FieldModelEnumChar char5;
    public final FieldModelEnumWChar wchar0;
    public final FieldModelEnumWChar wchar1;
    public final FieldModelEnumWChar wchar2;
    public final FieldModelEnumWChar wchar3;
    public final FieldModelEnumWChar wchar4;
    public final FieldModelEnumWChar wchar5;
    public final FieldModelEnumInt8 int8b0;
    public final FieldModelEnumInt8 int8b1;
    public final FieldModelEnumInt8 int8b2;
    public final FieldModelEnumInt8 int8b3;
    public final FieldModelEnumInt8 int8b4;
    public final FieldModelEnumInt8 int8b5;
    public final FieldModelEnumUInt8 uint8b0;
    public final FieldModelEnumUInt8 uint8b1;
    public final FieldModelEnumUInt8 uint8b2;
    public final FieldModelEnumUInt8 uint8b3;
    public final FieldModelEnumUInt8 uint8b4;
    public final FieldModelEnumUInt8 uint8b5;
    public final FieldModelEnumInt16 int16b0;
    public final FieldModelEnumInt16 int16b1;
    public final FieldModelEnumInt16 int16b2;
    public final FieldModelEnumInt16 int16b3;
    public final FieldModelEnumInt16 int16b4;
    public final FieldModelEnumInt16 int16b5;
    public final FieldModelEnumUInt16 uint16b0;
    public final FieldModelEnumUInt16 uint16b1;
    public final FieldModelEnumUInt16 uint16b2;
    public final FieldModelEnumUInt16 uint16b3;
    public final FieldModelEnumUInt16 uint16b4;
    public final FieldModelEnumUInt16 uint16b5;
    public final FieldModelEnumInt32 int32b0;
    public final FieldModelEnumInt32 int32b1;
    public final FieldModelEnumInt32 int32b2;
    public final FieldModelEnumInt32 int32b3;
    public final FieldModelEnumInt32 int32b4;
    public final FieldModelEnumInt32 int32b5;
    public final FieldModelEnumUInt32 uint32b0;
    public final FieldModelEnumUInt32 uint32b1;
    public final FieldModelEnumUInt32 uint32b2;
    public final FieldModelEnumUInt32 uint32b3;
    public final FieldModelEnumUInt32 uint32b4;
    public final FieldModelEnumUInt32 uint32b5;
    public final FieldModelEnumInt64 int64b0;
    public final FieldModelEnumInt64 int64b1;
    public final FieldModelEnumInt64 int64b2;
    public final FieldModelEnumInt64 int64b3;
    public final FieldModelEnumInt64 int64b4;
    public final FieldModelEnumInt64 int64b5;
    public final FieldModelEnumUInt64 uint64b0;
    public final FieldModelEnumUInt64 uint64b1;
    public final FieldModelEnumUInt64 uint64b2;
    public final FieldModelEnumUInt64 uint64b3;
    public final FieldModelEnumUInt64 uint64b4;
    public final FieldModelEnumUInt64 uint64b5;

    public FieldModelEnums(Buffer buffer, long offset)
    {
        super(buffer, offset);
        byte0 = new FieldModelEnumByte(buffer, 4 + 4);
        byte1 = new FieldModelEnumByte(buffer, byte0.FBEOffset() + byte0.FBESize());
        byte2 = new FieldModelEnumByte(buffer, byte1.FBEOffset() + byte1.FBESize());
        byte3 = new FieldModelEnumByte(buffer, byte2.FBEOffset() + byte2.FBESize());
        byte4 = new FieldModelEnumByte(buffer, byte3.FBEOffset() + byte3.FBESize());
        byte5 = new FieldModelEnumByte(buffer, byte4.FBEOffset() + byte4.FBESize());
        char0 = new FieldModelEnumChar(buffer, byte5.FBEOffset() + byte5.FBESize());
        char1 = new FieldModelEnumChar(buffer, char0.FBEOffset() + char0.FBESize());
        char2 = new FieldModelEnumChar(buffer, char1.FBEOffset() + char1.FBESize());
        char3 = new FieldModelEnumChar(buffer, char2.FBEOffset() + char2.FBESize());
        char4 = new FieldModelEnumChar(buffer, char3.FBEOffset() + char3.FBESize());
        char5 = new FieldModelEnumChar(buffer, char4.FBEOffset() + char4.FBESize());
        wchar0 = new FieldModelEnumWChar(buffer, char5.FBEOffset() + char5.FBESize());
        wchar1 = new FieldModelEnumWChar(buffer, wchar0.FBEOffset() + wchar0.FBESize());
        wchar2 = new FieldModelEnumWChar(buffer, wchar1.FBEOffset() + wchar1.FBESize());
        wchar3 = new FieldModelEnumWChar(buffer, wchar2.FBEOffset() + wchar2.FBESize());
        wchar4 = new FieldModelEnumWChar(buffer, wchar3.FBEOffset() + wchar3.FBESize());
        wchar5 = new FieldModelEnumWChar(buffer, wchar4.FBEOffset() + wchar4.FBESize());
        int8b0 = new FieldModelEnumInt8(buffer, wchar5.FBEOffset() + wchar5.FBESize());
        int8b1 = new FieldModelEnumInt8(buffer, int8b0.FBEOffset() + int8b0.FBESize());
        int8b2 = new FieldModelEnumInt8(buffer, int8b1.FBEOffset() + int8b1.FBESize());
        int8b3 = new FieldModelEnumInt8(buffer, int8b2.FBEOffset() + int8b2.FBESize());
        int8b4 = new FieldModelEnumInt8(buffer, int8b3.FBEOffset() + int8b3.FBESize());
        int8b5 = new FieldModelEnumInt8(buffer, int8b4.FBEOffset() + int8b4.FBESize());
        uint8b0 = new FieldModelEnumUInt8(buffer, int8b5.FBEOffset() + int8b5.FBESize());
        uint8b1 = new FieldModelEnumUInt8(buffer, uint8b0.FBEOffset() + uint8b0.FBESize());
        uint8b2 = new FieldModelEnumUInt8(buffer, uint8b1.FBEOffset() + uint8b1.FBESize());
        uint8b3 = new FieldModelEnumUInt8(buffer, uint8b2.FBEOffset() + uint8b2.FBESize());
        uint8b4 = new FieldModelEnumUInt8(buffer, uint8b3.FBEOffset() + uint8b3.FBESize());
        uint8b5 = new FieldModelEnumUInt8(buffer, uint8b4.FBEOffset() + uint8b4.FBESize());
        int16b0 = new FieldModelEnumInt16(buffer, uint8b5.FBEOffset() + uint8b5.FBESize());
        int16b1 = new FieldModelEnumInt16(buffer, int16b0.FBEOffset() + int16b0.FBESize());
        int16b2 = new FieldModelEnumInt16(buffer, int16b1.FBEOffset() + int16b1.FBESize());
        int16b3 = new FieldModelEnumInt16(buffer, int16b2.FBEOffset() + int16b2.FBESize());
        int16b4 = new FieldModelEnumInt16(buffer, int16b3.FBEOffset() + int16b3.FBESize());
        int16b5 = new FieldModelEnumInt16(buffer, int16b4.FBEOffset() + int16b4.FBESize());
        uint16b0 = new FieldModelEnumUInt16(buffer, int16b5.FBEOffset() + int16b5.FBESize());
        uint16b1 = new FieldModelEnumUInt16(buffer, uint16b0.FBEOffset() + uint16b0.FBESize());
        uint16b2 = new FieldModelEnumUInt16(buffer, uint16b1.FBEOffset() + uint16b1.FBESize());
        uint16b3 = new FieldModelEnumUInt16(buffer, uint16b2.FBEOffset() + uint16b2.FBESize());
        uint16b4 = new FieldModelEnumUInt16(buffer, uint16b3.FBEOffset() + uint16b3.FBESize());
        uint16b5 = new FieldModelEnumUInt16(buffer, uint16b4.FBEOffset() + uint16b4.FBESize());
        int32b0 = new FieldModelEnumInt32(buffer, uint16b5.FBEOffset() + uint16b5.FBESize());
        int32b1 = new FieldModelEnumInt32(buffer, int32b0.FBEOffset() + int32b0.FBESize());
        int32b2 = new FieldModelEnumInt32(buffer, int32b1.FBEOffset() + int32b1.FBESize());
        int32b3 = new FieldModelEnumInt32(buffer, int32b2.FBEOffset() + int32b2.FBESize());
        int32b4 = new FieldModelEnumInt32(buffer, int32b3.FBEOffset() + int32b3.FBESize());
        int32b5 = new FieldModelEnumInt32(buffer, int32b4.FBEOffset() + int32b4.FBESize());
        uint32b0 = new FieldModelEnumUInt32(buffer, int32b5.FBEOffset() + int32b5.FBESize());
        uint32b1 = new FieldModelEnumUInt32(buffer, uint32b0.FBEOffset() + uint32b0.FBESize());
        uint32b2 = new FieldModelEnumUInt32(buffer, uint32b1.FBEOffset() + uint32b1.FBESize());
        uint32b3 = new FieldModelEnumUInt32(buffer, uint32b2.FBEOffset() + uint32b2.FBESize());
        uint32b4 = new FieldModelEnumUInt32(buffer, uint32b3.FBEOffset() + uint32b3.FBESize());
        uint32b5 = new FieldModelEnumUInt32(buffer, uint32b4.FBEOffset() + uint32b4.FBESize());
        int64b0 = new FieldModelEnumInt64(buffer, uint32b5.FBEOffset() + uint32b5.FBESize());
        int64b1 = new FieldModelEnumInt64(buffer, int64b0.FBEOffset() + int64b0.FBESize());
        int64b2 = new FieldModelEnumInt64(buffer, int64b1.FBEOffset() + int64b1.FBESize());
        int64b3 = new FieldModelEnumInt64(buffer, int64b2.FBEOffset() + int64b2.FBESize());
        int64b4 = new FieldModelEnumInt64(buffer, int64b3.FBEOffset() + int64b3.FBESize());
        int64b5 = new FieldModelEnumInt64(buffer, int64b4.FBEOffset() + int64b4.FBESize());
        uint64b0 = new FieldModelEnumUInt64(buffer, int64b5.FBEOffset() + int64b5.FBESize());
        uint64b1 = new FieldModelEnumUInt64(buffer, uint64b0.FBEOffset() + uint64b0.FBESize());
        uint64b2 = new FieldModelEnumUInt64(buffer, uint64b1.FBEOffset() + uint64b1.FBESize());
        uint64b3 = new FieldModelEnumUInt64(buffer, uint64b2.FBEOffset() + uint64b2.FBESize());
        uint64b4 = new FieldModelEnumUInt64(buffer, uint64b3.FBEOffset() + uint64b3.FBESize());
        uint64b5 = new FieldModelEnumUInt64(buffer, uint64b4.FBEOffset() + uint64b4.FBESize());
    }

    // Get the field size
    @Override
    public long FBESize() { return 4; }
    // Get the field body size
    public long FBEBody()
    {
        long fbeResult = 4 + 4
            + byte0.FBESize()
            + byte1.FBESize()
            + byte2.FBESize()
            + byte3.FBESize()
            + byte4.FBESize()
            + byte5.FBESize()
            + char0.FBESize()
            + char1.FBESize()
            + char2.FBESize()
            + char3.FBESize()
            + char4.FBESize()
            + char5.FBESize()
            + wchar0.FBESize()
            + wchar1.FBESize()
            + wchar2.FBESize()
            + wchar3.FBESize()
            + wchar4.FBESize()
            + wchar5.FBESize()
            + int8b0.FBESize()
            + int8b1.FBESize()
            + int8b2.FBESize()
            + int8b3.FBESize()
            + int8b4.FBESize()
            + int8b5.FBESize()
            + uint8b0.FBESize()
            + uint8b1.FBESize()
            + uint8b2.FBESize()
            + uint8b3.FBESize()
            + uint8b4.FBESize()
            + uint8b5.FBESize()
            + int16b0.FBESize()
            + int16b1.FBESize()
            + int16b2.FBESize()
            + int16b3.FBESize()
            + int16b4.FBESize()
            + int16b5.FBESize()
            + uint16b0.FBESize()
            + uint16b1.FBESize()
            + uint16b2.FBESize()
            + uint16b3.FBESize()
            + uint16b4.FBESize()
            + uint16b5.FBESize()
            + int32b0.FBESize()
            + int32b1.FBESize()
            + int32b2.FBESize()
            + int32b3.FBESize()
            + int32b4.FBESize()
            + int32b5.FBESize()
            + uint32b0.FBESize()
            + uint32b1.FBESize()
            + uint32b2.FBESize()
            + uint32b3.FBESize()
            + uint32b4.FBESize()
            + uint32b5.FBESize()
            + int64b0.FBESize()
            + int64b1.FBESize()
            + int64b2.FBESize()
            + int64b3.FBESize()
            + int64b4.FBESize()
            + int64b5.FBESize()
            + uint64b0.FBESize()
            + uint64b1.FBESize()
            + uint64b2.FBESize()
            + uint64b3.FBESize()
            + uint64b4.FBESize()
            + uint64b5.FBESize()
            ;
        return fbeResult;
    }
    // Get the field extra size
    @Override
    public long FBEExtra()
    {
        if ((_buffer.getOffset() + FBEOffset() + FBESize()) > _buffer.getSize())
            return 0;

        int fbeStructOffset = readInt32(FBEOffset());
        if ((fbeStructOffset == 0) || ((_buffer.getOffset() + fbeStructOffset + 4) > _buffer.getSize()))
            return 0;

        _buffer.shift(fbeStructOffset);

        long fbeResult = FBEBody()
            + byte0.FBEExtra()
            + byte1.FBEExtra()
            + byte2.FBEExtra()
            + byte3.FBEExtra()
            + byte4.FBEExtra()
            + byte5.FBEExtra()
            + char0.FBEExtra()
            + char1.FBEExtra()
            + char2.FBEExtra()
            + char3.FBEExtra()
            + char4.FBEExtra()
            + char5.FBEExtra()
            + wchar0.FBEExtra()
            + wchar1.FBEExtra()
            + wchar2.FBEExtra()
            + wchar3.FBEExtra()
            + wchar4.FBEExtra()
            + wchar5.FBEExtra()
            + int8b0.FBEExtra()
            + int8b1.FBEExtra()
            + int8b2.FBEExtra()
            + int8b3.FBEExtra()
            + int8b4.FBEExtra()
            + int8b5.FBEExtra()
            + uint8b0.FBEExtra()
            + uint8b1.FBEExtra()
            + uint8b2.FBEExtra()
            + uint8b3.FBEExtra()
            + uint8b4.FBEExtra()
            + uint8b5.FBEExtra()
            + int16b0.FBEExtra()
            + int16b1.FBEExtra()
            + int16b2.FBEExtra()
            + int16b3.FBEExtra()
            + int16b4.FBEExtra()
            + int16b5.FBEExtra()
            + uint16b0.FBEExtra()
            + uint16b1.FBEExtra()
            + uint16b2.FBEExtra()
            + uint16b3.FBEExtra()
            + uint16b4.FBEExtra()
            + uint16b5.FBEExtra()
            + int32b0.FBEExtra()
            + int32b1.FBEExtra()
            + int32b2.FBEExtra()
            + int32b3.FBEExtra()
            + int32b4.FBEExtra()
            + int32b5.FBEExtra()
            + uint32b0.FBEExtra()
            + uint32b1.FBEExtra()
            + uint32b2.FBEExtra()
            + uint32b3.FBEExtra()
            + uint32b4.FBEExtra()
            + uint32b5.FBEExtra()
            + int64b0.FBEExtra()
            + int64b1.FBEExtra()
            + int64b2.FBEExtra()
            + int64b3.FBEExtra()
            + int64b4.FBEExtra()
            + int64b5.FBEExtra()
            + uint64b0.FBEExtra()
            + uint64b1.FBEExtra()
            + uint64b2.FBEExtra()
            + uint64b3.FBEExtra()
            + uint64b4.FBEExtra()
            + uint64b5.FBEExtra()
            ;

        _buffer.unshift(fbeStructOffset);

        return fbeResult;
    }
    // Get the field type
    public static final long FBETypeConst = 1;
    public long FBEType() { return FBETypeConst; }

    // Check if the struct value is valid
    @Override
    public boolean verify() { return verify(true); }
    public boolean verify(boolean fbeVerifyType)
    {
        if ((_buffer.getOffset() + FBEOffset() + FBESize()) > _buffer.getSize())
            return true;

        int fbeStructOffset = readInt32(FBEOffset());
        if ((fbeStructOffset == 0) || ((_buffer.getOffset() + fbeStructOffset + 4 + 4) > _buffer.getSize()))
            return false;

        int fbeStructSize = readInt32(fbeStructOffset);
        if (fbeStructSize < 4 + 4)
            return false;

        int fbeStructType = readInt32(fbeStructOffset + 4);
        if (fbeVerifyType && (fbeStructType != FBEType()))
            return false;

        _buffer.shift(fbeStructOffset);
        boolean fbeResult = verifyFields(fbeStructSize);
        _buffer.unshift(fbeStructOffset);
        return fbeResult;
    }

    // Check if the struct fields are valid
    public boolean verifyFields(long fbeStructSize)
    {
        long fbeCurrentSize = 4 + 4;

        if ((fbeCurrentSize + byte0.FBESize()) > fbeStructSize)
            return true;
        if (!byte0.verify())
            return false;
        fbeCurrentSize += byte0.FBESize();

        if ((fbeCurrentSize + byte1.FBESize()) > fbeStructSize)
            return true;
        if (!byte1.verify())
            return false;
        fbeCurrentSize += byte1.FBESize();

        if ((fbeCurrentSize + byte2.FBESize()) > fbeStructSize)
            return true;
        if (!byte2.verify())
            return false;
        fbeCurrentSize += byte2.FBESize();

        if ((fbeCurrentSize + byte3.FBESize()) > fbeStructSize)
            return true;
        if (!byte3.verify())
            return false;
        fbeCurrentSize += byte3.FBESize();

        if ((fbeCurrentSize + byte4.FBESize()) > fbeStructSize)
            return true;
        if (!byte4.verify())
            return false;
        fbeCurrentSize += byte4.FBESize();

        if ((fbeCurrentSize + byte5.FBESize()) > fbeStructSize)
            return true;
        if (!byte5.verify())
            return false;
        fbeCurrentSize += byte5.FBESize();

        if ((fbeCurrentSize + char0.FBESize()) > fbeStructSize)
            return true;
        if (!char0.verify())
            return false;
        fbeCurrentSize += char0.FBESize();

        if ((fbeCurrentSize + char1.FBESize()) > fbeStructSize)
            return true;
        if (!char1.verify())
            return false;
        fbeCurrentSize += char1.FBESize();

        if ((fbeCurrentSize + char2.FBESize()) > fbeStructSize)
            return true;
        if (!char2.verify())
            return false;
        fbeCurrentSize += char2.FBESize();

        if ((fbeCurrentSize + char3.FBESize()) > fbeStructSize)
            return true;
        if (!char3.verify())
            return false;
        fbeCurrentSize += char3.FBESize();

        if ((fbeCurrentSize + char4.FBESize()) > fbeStructSize)
            return true;
        if (!char4.verify())
            return false;
        fbeCurrentSize += char4.FBESize();

        if ((fbeCurrentSize + char5.FBESize()) > fbeStructSize)
            return true;
        if (!char5.verify())
            return false;
        fbeCurrentSize += char5.FBESize();

        if ((fbeCurrentSize + wchar0.FBESize()) > fbeStructSize)
            return true;
        if (!wchar0.verify())
            return false;
        fbeCurrentSize += wchar0.FBESize();

        if ((fbeCurrentSize + wchar1.FBESize()) > fbeStructSize)
            return true;
        if (!wchar1.verify())
            return false;
        fbeCurrentSize += wchar1.FBESize();

        if ((fbeCurrentSize + wchar2.FBESize()) > fbeStructSize)
            return true;
        if (!wchar2.verify())
            return false;
        fbeCurrentSize += wchar2.FBESize();

        if ((fbeCurrentSize + wchar3.FBESize()) > fbeStructSize)
            return true;
        if (!wchar3.verify())
            return false;
        fbeCurrentSize += wchar3.FBESize();

        if ((fbeCurrentSize + wchar4.FBESize()) > fbeStructSize)
            return true;
        if (!wchar4.verify())
            return false;
        fbeCurrentSize += wchar4.FBESize();

        if ((fbeCurrentSize + wchar5.FBESize()) > fbeStructSize)
            return true;
        if (!wchar5.verify())
            return false;
        fbeCurrentSize += wchar5.FBESize();

        if ((fbeCurrentSize + int8b0.FBESize()) > fbeStructSize)
            return true;
        if (!int8b0.verify())
            return false;
        fbeCurrentSize += int8b0.FBESize();

        if ((fbeCurrentSize + int8b1.FBESize()) > fbeStructSize)
            return true;
        if (!int8b1.verify())
            return false;
        fbeCurrentSize += int8b1.FBESize();

        if ((fbeCurrentSize + int8b2.FBESize()) > fbeStructSize)
            return true;
        if (!int8b2.verify())
            return false;
        fbeCurrentSize += int8b2.FBESize();

        if ((fbeCurrentSize + int8b3.FBESize()) > fbeStructSize)
            return true;
        if (!int8b3.verify())
            return false;
        fbeCurrentSize += int8b3.FBESize();

        if ((fbeCurrentSize + int8b4.FBESize()) > fbeStructSize)
            return true;
        if (!int8b4.verify())
            return false;
        fbeCurrentSize += int8b4.FBESize();

        if ((fbeCurrentSize + int8b5.FBESize()) > fbeStructSize)
            return true;
        if (!int8b5.verify())
            return false;
        fbeCurrentSize += int8b5.FBESize();

        if ((fbeCurrentSize + uint8b0.FBESize()) > fbeStructSize)
            return true;
        if (!uint8b0.verify())
            return false;
        fbeCurrentSize += uint8b0.FBESize();

        if ((fbeCurrentSize + uint8b1.FBESize()) > fbeStructSize)
            return true;
        if (!uint8b1.verify())
            return false;
        fbeCurrentSize += uint8b1.FBESize();

        if ((fbeCurrentSize + uint8b2.FBESize()) > fbeStructSize)
            return true;
        if (!uint8b2.verify())
            return false;
        fbeCurrentSize += uint8b2.FBESize();

        if ((fbeCurrentSize + uint8b3.FBESize()) > fbeStructSize)
            return true;
        if (!uint8b3.verify())
            return false;
        fbeCurrentSize += uint8b3.FBESize();

        if ((fbeCurrentSize + uint8b4.FBESize()) > fbeStructSize)
            return true;
        if (!uint8b4.verify())
            return false;
        fbeCurrentSize += uint8b4.FBESize();

        if ((fbeCurrentSize + uint8b5.FBESize()) > fbeStructSize)
            return true;
        if (!uint8b5.verify())
            return false;
        fbeCurrentSize += uint8b5.FBESize();

        if ((fbeCurrentSize + int16b0.FBESize()) > fbeStructSize)
            return true;
        if (!int16b0.verify())
            return false;
        fbeCurrentSize += int16b0.FBESize();

        if ((fbeCurrentSize + int16b1.FBESize()) > fbeStructSize)
            return true;
        if (!int16b1.verify())
            return false;
        fbeCurrentSize += int16b1.FBESize();

        if ((fbeCurrentSize + int16b2.FBESize()) > fbeStructSize)
            return true;
        if (!int16b2.verify())
            return false;
        fbeCurrentSize += int16b2.FBESize();

        if ((fbeCurrentSize + int16b3.FBESize()) > fbeStructSize)
            return true;
        if (!int16b3.verify())
            return false;
        fbeCurrentSize += int16b3.FBESize();

        if ((fbeCurrentSize + int16b4.FBESize()) > fbeStructSize)
            return true;
        if (!int16b4.verify())
            return false;
        fbeCurrentSize += int16b4.FBESize();

        if ((fbeCurrentSize + int16b5.FBESize()) > fbeStructSize)
            return true;
        if (!int16b5.verify())
            return false;
        fbeCurrentSize += int16b5.FBESize();

        if ((fbeCurrentSize + uint16b0.FBESize()) > fbeStructSize)
            return true;
        if (!uint16b0.verify())
            return false;
        fbeCurrentSize += uint16b0.FBESize();

        if ((fbeCurrentSize + uint16b1.FBESize()) > fbeStructSize)
            return true;
        if (!uint16b1.verify())
            return false;
        fbeCurrentSize += uint16b1.FBESize();

        if ((fbeCurrentSize + uint16b2.FBESize()) > fbeStructSize)
            return true;
        if (!uint16b2.verify())
            return false;
        fbeCurrentSize += uint16b2.FBESize();

        if ((fbeCurrentSize + uint16b3.FBESize()) > fbeStructSize)
            return true;
        if (!uint16b3.verify())
            return false;
        fbeCurrentSize += uint16b3.FBESize();

        if ((fbeCurrentSize + uint16b4.FBESize()) > fbeStructSize)
            return true;
        if (!uint16b4.verify())
            return false;
        fbeCurrentSize += uint16b4.FBESize();

        if ((fbeCurrentSize + uint16b5.FBESize()) > fbeStructSize)
            return true;
        if (!uint16b5.verify())
            return false;
        fbeCurrentSize += uint16b5.FBESize();

        if ((fbeCurrentSize + int32b0.FBESize()) > fbeStructSize)
            return true;
        if (!int32b0.verify())
            return false;
        fbeCurrentSize += int32b0.FBESize();

        if ((fbeCurrentSize + int32b1.FBESize()) > fbeStructSize)
            return true;
        if (!int32b1.verify())
            return false;
        fbeCurrentSize += int32b1.FBESize();

        if ((fbeCurrentSize + int32b2.FBESize()) > fbeStructSize)
            return true;
        if (!int32b2.verify())
            return false;
        fbeCurrentSize += int32b2.FBESize();

        if ((fbeCurrentSize + int32b3.FBESize()) > fbeStructSize)
            return true;
        if (!int32b3.verify())
            return false;
        fbeCurrentSize += int32b3.FBESize();

        if ((fbeCurrentSize + int32b4.FBESize()) > fbeStructSize)
            return true;
        if (!int32b4.verify())
            return false;
        fbeCurrentSize += int32b4.FBESize();

        if ((fbeCurrentSize + int32b5.FBESize()) > fbeStructSize)
            return true;
        if (!int32b5.verify())
            return false;
        fbeCurrentSize += int32b5.FBESize();

        if ((fbeCurrentSize + uint32b0.FBESize()) > fbeStructSize)
            return true;
        if (!uint32b0.verify())
            return false;
        fbeCurrentSize += uint32b0.FBESize();

        if ((fbeCurrentSize + uint32b1.FBESize()) > fbeStructSize)
            return true;
        if (!uint32b1.verify())
            return false;
        fbeCurrentSize += uint32b1.FBESize();

        if ((fbeCurrentSize + uint32b2.FBESize()) > fbeStructSize)
            return true;
        if (!uint32b2.verify())
            return false;
        fbeCurrentSize += uint32b2.FBESize();

        if ((fbeCurrentSize + uint32b3.FBESize()) > fbeStructSize)
            return true;
        if (!uint32b3.verify())
            return false;
        fbeCurrentSize += uint32b3.FBESize();

        if ((fbeCurrentSize + uint32b4.FBESize()) > fbeStructSize)
            return true;
        if (!uint32b4.verify())
            return false;
        fbeCurrentSize += uint32b4.FBESize();

        if ((fbeCurrentSize + uint32b5.FBESize()) > fbeStructSize)
            return true;
        if (!uint32b5.verify())
            return false;
        fbeCurrentSize += uint32b5.FBESize();

        if ((fbeCurrentSize + int64b0.FBESize()) > fbeStructSize)
            return true;
        if (!int64b0.verify())
            return false;
        fbeCurrentSize += int64b0.FBESize();

        if ((fbeCurrentSize + int64b1.FBESize()) > fbeStructSize)
            return true;
        if (!int64b1.verify())
            return false;
        fbeCurrentSize += int64b1.FBESize();

        if ((fbeCurrentSize + int64b2.FBESize()) > fbeStructSize)
            return true;
        if (!int64b2.verify())
            return false;
        fbeCurrentSize += int64b2.FBESize();

        if ((fbeCurrentSize + int64b3.FBESize()) > fbeStructSize)
            return true;
        if (!int64b3.verify())
            return false;
        fbeCurrentSize += int64b3.FBESize();

        if ((fbeCurrentSize + int64b4.FBESize()) > fbeStructSize)
            return true;
        if (!int64b4.verify())
            return false;
        fbeCurrentSize += int64b4.FBESize();

        if ((fbeCurrentSize + int64b5.FBESize()) > fbeStructSize)
            return true;
        if (!int64b5.verify())
            return false;
        fbeCurrentSize += int64b5.FBESize();

        if ((fbeCurrentSize + uint64b0.FBESize()) > fbeStructSize)
            return true;
        if (!uint64b0.verify())
            return false;
        fbeCurrentSize += uint64b0.FBESize();

        if ((fbeCurrentSize + uint64b1.FBESize()) > fbeStructSize)
            return true;
        if (!uint64b1.verify())
            return false;
        fbeCurrentSize += uint64b1.FBESize();

        if ((fbeCurrentSize + uint64b2.FBESize()) > fbeStructSize)
            return true;
        if (!uint64b2.verify())
            return false;
        fbeCurrentSize += uint64b2.FBESize();

        if ((fbeCurrentSize + uint64b3.FBESize()) > fbeStructSize)
            return true;
        if (!uint64b3.verify())
            return false;
        fbeCurrentSize += uint64b3.FBESize();

        if ((fbeCurrentSize + uint64b4.FBESize()) > fbeStructSize)
            return true;
        if (!uint64b4.verify())
            return false;
        fbeCurrentSize += uint64b4.FBESize();

        if ((fbeCurrentSize + uint64b5.FBESize()) > fbeStructSize)
            return true;
        if (!uint64b5.verify())
            return false;
        fbeCurrentSize += uint64b5.FBESize();

        return true;
    }

    // Get the struct value (begin phase)
    public long getBegin()
    {
        if ((_buffer.getOffset() + FBEOffset() + FBESize()) > _buffer.getSize())
            return 0;

        int fbeStructOffset = readInt32(FBEOffset());
        assert ((fbeStructOffset > 0) && ((_buffer.getOffset() + fbeStructOffset + 4 + 4) <= _buffer.getSize())) : "Model is broken!";
        if ((fbeStructOffset == 0) || ((_buffer.getOffset() + fbeStructOffset + 4 + 4) > _buffer.getSize()))
            return 0;

        int fbeStructSize = readInt32(fbeStructOffset);
        assert (fbeStructSize >= 4 + 4) : "Model is broken!";
        if (fbeStructSize < 4 + 4)
            return 0;

        _buffer.shift(fbeStructOffset);
        return fbeStructOffset;
    }

    // Get the struct value (end phase)
    public void getEnd(long fbeBegin)
    {
        _buffer.unshift(fbeBegin);
    }

    // Get the struct value
    public Enums get() { return get(new Enums()); }
    public Enums get(Enums fbeValue)
    {
        long fbeBegin = getBegin();
        if (fbeBegin == 0)
            return fbeValue;

        int fbeStructSize = readInt32(0);
        getFields(fbeValue, fbeStructSize);
        getEnd(fbeBegin);
        return fbeValue;
    }

    // Get the struct fields values
    public void getFields(Enums fbeValue, long fbeStructSize)
    {
        long fbeCurrentSize = 4 + 4;

        if ((fbeCurrentSize + byte0.FBESize()) <= fbeStructSize)
            fbeValue.byte0 = byte0.get(EnumByte.ENUM_VALUE_0);
        else
            fbeValue.byte0 = EnumByte.ENUM_VALUE_0;
        fbeCurrentSize += byte0.FBESize();

        if ((fbeCurrentSize + byte1.FBESize()) <= fbeStructSize)
            fbeValue.byte1 = byte1.get(EnumByte.ENUM_VALUE_1);
        else
            fbeValue.byte1 = EnumByte.ENUM_VALUE_1;
        fbeCurrentSize += byte1.FBESize();

        if ((fbeCurrentSize + byte2.FBESize()) <= fbeStructSize)
            fbeValue.byte2 = byte2.get(EnumByte.ENUM_VALUE_2);
        else
            fbeValue.byte2 = EnumByte.ENUM_VALUE_2;
        fbeCurrentSize += byte2.FBESize();

        if ((fbeCurrentSize + byte3.FBESize()) <= fbeStructSize)
            fbeValue.byte3 = byte3.get(EnumByte.ENUM_VALUE_3);
        else
            fbeValue.byte3 = EnumByte.ENUM_VALUE_3;
        fbeCurrentSize += byte3.FBESize();

        if ((fbeCurrentSize + byte4.FBESize()) <= fbeStructSize)
            fbeValue.byte4 = byte4.get(EnumByte.ENUM_VALUE_4);
        else
            fbeValue.byte4 = EnumByte.ENUM_VALUE_4;
        fbeCurrentSize += byte4.FBESize();

        if ((fbeCurrentSize + byte5.FBESize()) <= fbeStructSize)
            fbeValue.byte5 = byte5.get(EnumByte.ENUM_VALUE_5);
        else
            fbeValue.byte5 = EnumByte.ENUM_VALUE_5;
        fbeCurrentSize += byte5.FBESize();

        if ((fbeCurrentSize + char0.FBESize()) <= fbeStructSize)
            fbeValue.char0 = char0.get(EnumChar.ENUM_VALUE_0);
        else
            fbeValue.char0 = EnumChar.ENUM_VALUE_0;
        fbeCurrentSize += char0.FBESize();

        if ((fbeCurrentSize + char1.FBESize()) <= fbeStructSize)
            fbeValue.char1 = char1.get(EnumChar.ENUM_VALUE_1);
        else
            fbeValue.char1 = EnumChar.ENUM_VALUE_1;
        fbeCurrentSize += char1.FBESize();

        if ((fbeCurrentSize + char2.FBESize()) <= fbeStructSize)
            fbeValue.char2 = char2.get(EnumChar.ENUM_VALUE_2);
        else
            fbeValue.char2 = EnumChar.ENUM_VALUE_2;
        fbeCurrentSize += char2.FBESize();

        if ((fbeCurrentSize + char3.FBESize()) <= fbeStructSize)
            fbeValue.char3 = char3.get(EnumChar.ENUM_VALUE_3);
        else
            fbeValue.char3 = EnumChar.ENUM_VALUE_3;
        fbeCurrentSize += char3.FBESize();

        if ((fbeCurrentSize + char4.FBESize()) <= fbeStructSize)
            fbeValue.char4 = char4.get(EnumChar.ENUM_VALUE_4);
        else
            fbeValue.char4 = EnumChar.ENUM_VALUE_4;
        fbeCurrentSize += char4.FBESize();

        if ((fbeCurrentSize + char5.FBESize()) <= fbeStructSize)
            fbeValue.char5 = char5.get(EnumChar.ENUM_VALUE_5);
        else
            fbeValue.char5 = EnumChar.ENUM_VALUE_5;
        fbeCurrentSize += char5.FBESize();

        if ((fbeCurrentSize + wchar0.FBESize()) <= fbeStructSize)
            fbeValue.wchar0 = wchar0.get(EnumWChar.ENUM_VALUE_0);
        else
            fbeValue.wchar0 = EnumWChar.ENUM_VALUE_0;
        fbeCurrentSize += wchar0.FBESize();

        if ((fbeCurrentSize + wchar1.FBESize()) <= fbeStructSize)
            fbeValue.wchar1 = wchar1.get(EnumWChar.ENUM_VALUE_1);
        else
            fbeValue.wchar1 = EnumWChar.ENUM_VALUE_1;
        fbeCurrentSize += wchar1.FBESize();

        if ((fbeCurrentSize + wchar2.FBESize()) <= fbeStructSize)
            fbeValue.wchar2 = wchar2.get(EnumWChar.ENUM_VALUE_2);
        else
            fbeValue.wchar2 = EnumWChar.ENUM_VALUE_2;
        fbeCurrentSize += wchar2.FBESize();

        if ((fbeCurrentSize + wchar3.FBESize()) <= fbeStructSize)
            fbeValue.wchar3 = wchar3.get(EnumWChar.ENUM_VALUE_3);
        else
            fbeValue.wchar3 = EnumWChar.ENUM_VALUE_3;
        fbeCurrentSize += wchar3.FBESize();

        if ((fbeCurrentSize + wchar4.FBESize()) <= fbeStructSize)
            fbeValue.wchar4 = wchar4.get(EnumWChar.ENUM_VALUE_4);
        else
            fbeValue.wchar4 = EnumWChar.ENUM_VALUE_4;
        fbeCurrentSize += wchar4.FBESize();

        if ((fbeCurrentSize + wchar5.FBESize()) <= fbeStructSize)
            fbeValue.wchar5 = wchar5.get(EnumWChar.ENUM_VALUE_5);
        else
            fbeValue.wchar5 = EnumWChar.ENUM_VALUE_5;
        fbeCurrentSize += wchar5.FBESize();

        if ((fbeCurrentSize + int8b0.FBESize()) <= fbeStructSize)
            fbeValue.int8b0 = int8b0.get(EnumInt8.ENUM_VALUE_0);
        else
            fbeValue.int8b0 = EnumInt8.ENUM_VALUE_0;
        fbeCurrentSize += int8b0.FBESize();

        if ((fbeCurrentSize + int8b1.FBESize()) <= fbeStructSize)
            fbeValue.int8b1 = int8b1.get(EnumInt8.ENUM_VALUE_1);
        else
            fbeValue.int8b1 = EnumInt8.ENUM_VALUE_1;
        fbeCurrentSize += int8b1.FBESize();

        if ((fbeCurrentSize + int8b2.FBESize()) <= fbeStructSize)
            fbeValue.int8b2 = int8b2.get(EnumInt8.ENUM_VALUE_2);
        else
            fbeValue.int8b2 = EnumInt8.ENUM_VALUE_2;
        fbeCurrentSize += int8b2.FBESize();

        if ((fbeCurrentSize + int8b3.FBESize()) <= fbeStructSize)
            fbeValue.int8b3 = int8b3.get(EnumInt8.ENUM_VALUE_3);
        else
            fbeValue.int8b3 = EnumInt8.ENUM_VALUE_3;
        fbeCurrentSize += int8b3.FBESize();

        if ((fbeCurrentSize + int8b4.FBESize()) <= fbeStructSize)
            fbeValue.int8b4 = int8b4.get(EnumInt8.ENUM_VALUE_4);
        else
            fbeValue.int8b4 = EnumInt8.ENUM_VALUE_4;
        fbeCurrentSize += int8b4.FBESize();

        if ((fbeCurrentSize + int8b5.FBESize()) <= fbeStructSize)
            fbeValue.int8b5 = int8b5.get(EnumInt8.ENUM_VALUE_5);
        else
            fbeValue.int8b5 = EnumInt8.ENUM_VALUE_5;
        fbeCurrentSize += int8b5.FBESize();

        if ((fbeCurrentSize + uint8b0.FBESize()) <= fbeStructSize)
            fbeValue.uint8b0 = uint8b0.get(EnumUInt8.ENUM_VALUE_0);
        else
            fbeValue.uint8b0 = EnumUInt8.ENUM_VALUE_0;
        fbeCurrentSize += uint8b0.FBESize();

        if ((fbeCurrentSize + uint8b1.FBESize()) <= fbeStructSize)
            fbeValue.uint8b1 = uint8b1.get(EnumUInt8.ENUM_VALUE_1);
        else
            fbeValue.uint8b1 = EnumUInt8.ENUM_VALUE_1;
        fbeCurrentSize += uint8b1.FBESize();

        if ((fbeCurrentSize + uint8b2.FBESize()) <= fbeStructSize)
            fbeValue.uint8b2 = uint8b2.get(EnumUInt8.ENUM_VALUE_2);
        else
            fbeValue.uint8b2 = EnumUInt8.ENUM_VALUE_2;
        fbeCurrentSize += uint8b2.FBESize();

        if ((fbeCurrentSize + uint8b3.FBESize()) <= fbeStructSize)
            fbeValue.uint8b3 = uint8b3.get(EnumUInt8.ENUM_VALUE_3);
        else
            fbeValue.uint8b3 = EnumUInt8.ENUM_VALUE_3;
        fbeCurrentSize += uint8b3.FBESize();

        if ((fbeCurrentSize + uint8b4.FBESize()) <= fbeStructSize)
            fbeValue.uint8b4 = uint8b4.get(EnumUInt8.ENUM_VALUE_4);
        else
            fbeValue.uint8b4 = EnumUInt8.ENUM_VALUE_4;
        fbeCurrentSize += uint8b4.FBESize();

        if ((fbeCurrentSize + uint8b5.FBESize()) <= fbeStructSize)
            fbeValue.uint8b5 = uint8b5.get(EnumUInt8.ENUM_VALUE_5);
        else
            fbeValue.uint8b5 = EnumUInt8.ENUM_VALUE_5;
        fbeCurrentSize += uint8b5.FBESize();

        if ((fbeCurrentSize + int16b0.FBESize()) <= fbeStructSize)
            fbeValue.int16b0 = int16b0.get(EnumInt16.ENUM_VALUE_0);
        else
            fbeValue.int16b0 = EnumInt16.ENUM_VALUE_0;
        fbeCurrentSize += int16b0.FBESize();

        if ((fbeCurrentSize + int16b1.FBESize()) <= fbeStructSize)
            fbeValue.int16b1 = int16b1.get(EnumInt16.ENUM_VALUE_1);
        else
            fbeValue.int16b1 = EnumInt16.ENUM_VALUE_1;
        fbeCurrentSize += int16b1.FBESize();

        if ((fbeCurrentSize + int16b2.FBESize()) <= fbeStructSize)
            fbeValue.int16b2 = int16b2.get(EnumInt16.ENUM_VALUE_2);
        else
            fbeValue.int16b2 = EnumInt16.ENUM_VALUE_2;
        fbeCurrentSize += int16b2.FBESize();

        if ((fbeCurrentSize + int16b3.FBESize()) <= fbeStructSize)
            fbeValue.int16b3 = int16b3.get(EnumInt16.ENUM_VALUE_3);
        else
            fbeValue.int16b3 = EnumInt16.ENUM_VALUE_3;
        fbeCurrentSize += int16b3.FBESize();

        if ((fbeCurrentSize + int16b4.FBESize()) <= fbeStructSize)
            fbeValue.int16b4 = int16b4.get(EnumInt16.ENUM_VALUE_4);
        else
            fbeValue.int16b4 = EnumInt16.ENUM_VALUE_4;
        fbeCurrentSize += int16b4.FBESize();

        if ((fbeCurrentSize + int16b5.FBESize()) <= fbeStructSize)
            fbeValue.int16b5 = int16b5.get(EnumInt16.ENUM_VALUE_5);
        else
            fbeValue.int16b5 = EnumInt16.ENUM_VALUE_5;
        fbeCurrentSize += int16b5.FBESize();

        if ((fbeCurrentSize + uint16b0.FBESize()) <= fbeStructSize)
            fbeValue.uint16b0 = uint16b0.get(EnumUInt16.ENUM_VALUE_0);
        else
            fbeValue.uint16b0 = EnumUInt16.ENUM_VALUE_0;
        fbeCurrentSize += uint16b0.FBESize();

        if ((fbeCurrentSize + uint16b1.FBESize()) <= fbeStructSize)
            fbeValue.uint16b1 = uint16b1.get(EnumUInt16.ENUM_VALUE_1);
        else
            fbeValue.uint16b1 = EnumUInt16.ENUM_VALUE_1;
        fbeCurrentSize += uint16b1.FBESize();

        if ((fbeCurrentSize + uint16b2.FBESize()) <= fbeStructSize)
            fbeValue.uint16b2 = uint16b2.get(EnumUInt16.ENUM_VALUE_2);
        else
            fbeValue.uint16b2 = EnumUInt16.ENUM_VALUE_2;
        fbeCurrentSize += uint16b2.FBESize();

        if ((fbeCurrentSize + uint16b3.FBESize()) <= fbeStructSize)
            fbeValue.uint16b3 = uint16b3.get(EnumUInt16.ENUM_VALUE_3);
        else
            fbeValue.uint16b3 = EnumUInt16.ENUM_VALUE_3;
        fbeCurrentSize += uint16b3.FBESize();

        if ((fbeCurrentSize + uint16b4.FBESize()) <= fbeStructSize)
            fbeValue.uint16b4 = uint16b4.get(EnumUInt16.ENUM_VALUE_4);
        else
            fbeValue.uint16b4 = EnumUInt16.ENUM_VALUE_4;
        fbeCurrentSize += uint16b4.FBESize();

        if ((fbeCurrentSize + uint16b5.FBESize()) <= fbeStructSize)
            fbeValue.uint16b5 = uint16b5.get(EnumUInt16.ENUM_VALUE_5);
        else
            fbeValue.uint16b5 = EnumUInt16.ENUM_VALUE_5;
        fbeCurrentSize += uint16b5.FBESize();

        if ((fbeCurrentSize + int32b0.FBESize()) <= fbeStructSize)
            fbeValue.int32b0 = int32b0.get(EnumInt32.ENUM_VALUE_0);
        else
            fbeValue.int32b0 = EnumInt32.ENUM_VALUE_0;
        fbeCurrentSize += int32b0.FBESize();

        if ((fbeCurrentSize + int32b1.FBESize()) <= fbeStructSize)
            fbeValue.int32b1 = int32b1.get(EnumInt32.ENUM_VALUE_1);
        else
            fbeValue.int32b1 = EnumInt32.ENUM_VALUE_1;
        fbeCurrentSize += int32b1.FBESize();

        if ((fbeCurrentSize + int32b2.FBESize()) <= fbeStructSize)
            fbeValue.int32b2 = int32b2.get(EnumInt32.ENUM_VALUE_2);
        else
            fbeValue.int32b2 = EnumInt32.ENUM_VALUE_2;
        fbeCurrentSize += int32b2.FBESize();

        if ((fbeCurrentSize + int32b3.FBESize()) <= fbeStructSize)
            fbeValue.int32b3 = int32b3.get(EnumInt32.ENUM_VALUE_3);
        else
            fbeValue.int32b3 = EnumInt32.ENUM_VALUE_3;
        fbeCurrentSize += int32b3.FBESize();

        if ((fbeCurrentSize + int32b4.FBESize()) <= fbeStructSize)
            fbeValue.int32b4 = int32b4.get(EnumInt32.ENUM_VALUE_4);
        else
            fbeValue.int32b4 = EnumInt32.ENUM_VALUE_4;
        fbeCurrentSize += int32b4.FBESize();

        if ((fbeCurrentSize + int32b5.FBESize()) <= fbeStructSize)
            fbeValue.int32b5 = int32b5.get(EnumInt32.ENUM_VALUE_5);
        else
            fbeValue.int32b5 = EnumInt32.ENUM_VALUE_5;
        fbeCurrentSize += int32b5.FBESize();

        if ((fbeCurrentSize + uint32b0.FBESize()) <= fbeStructSize)
            fbeValue.uint32b0 = uint32b0.get(EnumUInt32.ENUM_VALUE_0);
        else
            fbeValue.uint32b0 = EnumUInt32.ENUM_VALUE_0;
        fbeCurrentSize += uint32b0.FBESize();

        if ((fbeCurrentSize + uint32b1.FBESize()) <= fbeStructSize)
            fbeValue.uint32b1 = uint32b1.get(EnumUInt32.ENUM_VALUE_1);
        else
            fbeValue.uint32b1 = EnumUInt32.ENUM_VALUE_1;
        fbeCurrentSize += uint32b1.FBESize();

        if ((fbeCurrentSize + uint32b2.FBESize()) <= fbeStructSize)
            fbeValue.uint32b2 = uint32b2.get(EnumUInt32.ENUM_VALUE_2);
        else
            fbeValue.uint32b2 = EnumUInt32.ENUM_VALUE_2;
        fbeCurrentSize += uint32b2.FBESize();

        if ((fbeCurrentSize + uint32b3.FBESize()) <= fbeStructSize)
            fbeValue.uint32b3 = uint32b3.get(EnumUInt32.ENUM_VALUE_3);
        else
            fbeValue.uint32b3 = EnumUInt32.ENUM_VALUE_3;
        fbeCurrentSize += uint32b3.FBESize();

        if ((fbeCurrentSize + uint32b4.FBESize()) <= fbeStructSize)
            fbeValue.uint32b4 = uint32b4.get(EnumUInt32.ENUM_VALUE_4);
        else
            fbeValue.uint32b4 = EnumUInt32.ENUM_VALUE_4;
        fbeCurrentSize += uint32b4.FBESize();

        if ((fbeCurrentSize + uint32b5.FBESize()) <= fbeStructSize)
            fbeValue.uint32b5 = uint32b5.get(EnumUInt32.ENUM_VALUE_5);
        else
            fbeValue.uint32b5 = EnumUInt32.ENUM_VALUE_5;
        fbeCurrentSize += uint32b5.FBESize();

        if ((fbeCurrentSize + int64b0.FBESize()) <= fbeStructSize)
            fbeValue.int64b0 = int64b0.get(EnumInt64.ENUM_VALUE_0);
        else
            fbeValue.int64b0 = EnumInt64.ENUM_VALUE_0;
        fbeCurrentSize += int64b0.FBESize();

        if ((fbeCurrentSize + int64b1.FBESize()) <= fbeStructSize)
            fbeValue.int64b1 = int64b1.get(EnumInt64.ENUM_VALUE_1);
        else
            fbeValue.int64b1 = EnumInt64.ENUM_VALUE_1;
        fbeCurrentSize += int64b1.FBESize();

        if ((fbeCurrentSize + int64b2.FBESize()) <= fbeStructSize)
            fbeValue.int64b2 = int64b2.get(EnumInt64.ENUM_VALUE_2);
        else
            fbeValue.int64b2 = EnumInt64.ENUM_VALUE_2;
        fbeCurrentSize += int64b2.FBESize();

        if ((fbeCurrentSize + int64b3.FBESize()) <= fbeStructSize)
            fbeValue.int64b3 = int64b3.get(EnumInt64.ENUM_VALUE_3);
        else
            fbeValue.int64b3 = EnumInt64.ENUM_VALUE_3;
        fbeCurrentSize += int64b3.FBESize();

        if ((fbeCurrentSize + int64b4.FBESize()) <= fbeStructSize)
            fbeValue.int64b4 = int64b4.get(EnumInt64.ENUM_VALUE_4);
        else
            fbeValue.int64b4 = EnumInt64.ENUM_VALUE_4;
        fbeCurrentSize += int64b4.FBESize();

        if ((fbeCurrentSize + int64b5.FBESize()) <= fbeStructSize)
            fbeValue.int64b5 = int64b5.get(EnumInt64.ENUM_VALUE_5);
        else
            fbeValue.int64b5 = EnumInt64.ENUM_VALUE_5;
        fbeCurrentSize += int64b5.FBESize();

        if ((fbeCurrentSize + uint64b0.FBESize()) <= fbeStructSize)
            fbeValue.uint64b0 = uint64b0.get(EnumUInt64.ENUM_VALUE_0);
        else
            fbeValue.uint64b0 = EnumUInt64.ENUM_VALUE_0;
        fbeCurrentSize += uint64b0.FBESize();

        if ((fbeCurrentSize + uint64b1.FBESize()) <= fbeStructSize)
            fbeValue.uint64b1 = uint64b1.get(EnumUInt64.ENUM_VALUE_1);
        else
            fbeValue.uint64b1 = EnumUInt64.ENUM_VALUE_1;
        fbeCurrentSize += uint64b1.FBESize();

        if ((fbeCurrentSize + uint64b2.FBESize()) <= fbeStructSize)
            fbeValue.uint64b2 = uint64b2.get(EnumUInt64.ENUM_VALUE_2);
        else
            fbeValue.uint64b2 = EnumUInt64.ENUM_VALUE_2;
        fbeCurrentSize += uint64b2.FBESize();

        if ((fbeCurrentSize + uint64b3.FBESize()) <= fbeStructSize)
            fbeValue.uint64b3 = uint64b3.get(EnumUInt64.ENUM_VALUE_3);
        else
            fbeValue.uint64b3 = EnumUInt64.ENUM_VALUE_3;
        fbeCurrentSize += uint64b3.FBESize();

        if ((fbeCurrentSize + uint64b4.FBESize()) <= fbeStructSize)
            fbeValue.uint64b4 = uint64b4.get(EnumUInt64.ENUM_VALUE_4);
        else
            fbeValue.uint64b4 = EnumUInt64.ENUM_VALUE_4;
        fbeCurrentSize += uint64b4.FBESize();

        if ((fbeCurrentSize + uint64b5.FBESize()) <= fbeStructSize)
            fbeValue.uint64b5 = uint64b5.get(EnumUInt64.ENUM_VALUE_5);
        else
            fbeValue.uint64b5 = EnumUInt64.ENUM_VALUE_5;
        fbeCurrentSize += uint64b5.FBESize();
    }

    // Set the struct value (begin phase)
    public long setBegin()
    {
        assert ((_buffer.getOffset() + FBEOffset() + FBESize()) <= _buffer.getSize()) : "Model is broken!";
        if ((_buffer.getOffset() + FBEOffset() + FBESize()) > _buffer.getSize())
            return 0;

        int fbeStructSize = (int)FBEBody();
        int fbeStructOffset = (int)(_buffer.allocate(fbeStructSize) - _buffer.getOffset());
        assert ((fbeStructOffset > 0) && ((_buffer.getOffset() + fbeStructOffset + fbeStructSize) <= _buffer.getSize())) : "Model is broken!";
        if ((fbeStructOffset <= 0) || ((_buffer.getOffset() + fbeStructOffset + fbeStructSize) > _buffer.getSize()))
            return 0;

        write(FBEOffset(), fbeStructOffset);
        write(fbeStructOffset, fbeStructSize);
        write(fbeStructOffset + 4, (int)FBEType());

        _buffer.shift(fbeStructOffset);
        return fbeStructOffset;
    }

    // Set the struct value (end phase)
    public void setEnd(long fbeBegin)
    {
        _buffer.unshift(fbeBegin);
    }

    // Set the struct value
    public void set(Enums fbeValue)
    {
        long fbeBegin = setBegin();
        if (fbeBegin == 0)
            return;

        setFields(fbeValue);
        setEnd(fbeBegin);
    }

    // Set the struct fields values
    public void setFields(Enums fbeValue)
    {
        byte0.set(fbeValue.byte0);
        byte1.set(fbeValue.byte1);
        byte2.set(fbeValue.byte2);
        byte3.set(fbeValue.byte3);
        byte4.set(fbeValue.byte4);
        byte5.set(fbeValue.byte5);
        char0.set(fbeValue.char0);
        char1.set(fbeValue.char1);
        char2.set(fbeValue.char2);
        char3.set(fbeValue.char3);
        char4.set(fbeValue.char4);
        char5.set(fbeValue.char5);
        wchar0.set(fbeValue.wchar0);
        wchar1.set(fbeValue.wchar1);
        wchar2.set(fbeValue.wchar2);
        wchar3.set(fbeValue.wchar3);
        wchar4.set(fbeValue.wchar4);
        wchar5.set(fbeValue.wchar5);
        int8b0.set(fbeValue.int8b0);
        int8b1.set(fbeValue.int8b1);
        int8b2.set(fbeValue.int8b2);
        int8b3.set(fbeValue.int8b3);
        int8b4.set(fbeValue.int8b4);
        int8b5.set(fbeValue.int8b5);
        uint8b0.set(fbeValue.uint8b0);
        uint8b1.set(fbeValue.uint8b1);
        uint8b2.set(fbeValue.uint8b2);
        uint8b3.set(fbeValue.uint8b3);
        uint8b4.set(fbeValue.uint8b4);
        uint8b5.set(fbeValue.uint8b5);
        int16b0.set(fbeValue.int16b0);
        int16b1.set(fbeValue.int16b1);
        int16b2.set(fbeValue.int16b2);
        int16b3.set(fbeValue.int16b3);
        int16b4.set(fbeValue.int16b4);
        int16b5.set(fbeValue.int16b5);
        uint16b0.set(fbeValue.uint16b0);
        uint16b1.set(fbeValue.uint16b1);
        uint16b2.set(fbeValue.uint16b2);
        uint16b3.set(fbeValue.uint16b3);
        uint16b4.set(fbeValue.uint16b4);
        uint16b5.set(fbeValue.uint16b5);
        int32b0.set(fbeValue.int32b0);
        int32b1.set(fbeValue.int32b1);
        int32b2.set(fbeValue.int32b2);
        int32b3.set(fbeValue.int32b3);
        int32b4.set(fbeValue.int32b4);
        int32b5.set(fbeValue.int32b5);
        uint32b0.set(fbeValue.uint32b0);
        uint32b1.set(fbeValue.uint32b1);
        uint32b2.set(fbeValue.uint32b2);
        uint32b3.set(fbeValue.uint32b3);
        uint32b4.set(fbeValue.uint32b4);
        uint32b5.set(fbeValue.uint32b5);
        int64b0.set(fbeValue.int64b0);
        int64b1.set(fbeValue.int64b1);
        int64b2.set(fbeValue.int64b2);
        int64b3.set(fbeValue.int64b3);
        int64b4.set(fbeValue.int64b4);
        int64b5.set(fbeValue.int64b5);
        uint64b0.set(fbeValue.uint64b0);
        uint64b1.set(fbeValue.uint64b1);
        uint64b2.set(fbeValue.uint64b2);
        uint64b3.set(fbeValue.uint64b3);
        uint64b4.set(fbeValue.uint64b4);
        uint64b5.set(fbeValue.uint64b5);
    }
}
