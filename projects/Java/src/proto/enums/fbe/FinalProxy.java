// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: enums.fbe
// Version: 1.2.0.0

package enums.fbe;

import java.io.*;
import java.lang.*;
import java.lang.reflect.*;
import java.math.*;
import java.nio.ByteBuffer;
import java.nio.charset.*;
import java.time.*;
import java.util.*;

import fbe.*;
import enums.*;

// Fast Binary Encoding enums final proxy
public class FinalProxy extends fbe.Receiver
{
    // Proxy models accessors
    private final EnumsFinalModel EnumsModel;

    public FinalProxy()
    {
        super(true);
        EnumsModel = new EnumsFinalModel();
    }
    public FinalProxy(Buffer buffer)
    {
        super(buffer, true);
        EnumsModel = new EnumsFinalModel();
    }

    // Proxy handlers
    protected void onProxy(EnumsFinalModel model, long type, byte[] buffer, long offset, long size) {}

    @Override
    public boolean onReceive(long type, byte[] buffer, long offset, long size)
    {
        switch ((int)type)
        {
            case (int)enums.fbe.EnumsFinalModel.fbeTypeConst:
            {
                // Attach the FBE stream to the proxy model
                EnumsModel.attach(buffer, offset);
                assert EnumsModel.verify() : "enums.Enums validation failed!";

                // Call proxy handler
                onProxy(EnumsModel, type, buffer, offset, size);
                return true;
            }
        }

        return false;
    }
}
