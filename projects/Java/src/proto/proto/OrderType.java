// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding

package proto;

import java.io.*;
import java.lang.*;
import java.lang.reflect.*;
import java.math.*;
import java.nio.charset.*;
import java.time.*;
import java.util.*;
import javafx.util.*;
import fbe.*;

public final class OrderType implements Comparable<OrderType>
{
    public static final OrderType market = new OrderType(OrderTypeEnum.market);
    public static final OrderType limit = new OrderType(OrderTypeEnum.limit);
    public static final OrderType stop = new OrderType(OrderTypeEnum.stop);

    private OrderTypeEnum value = OrderTypeEnum.values()[0];

    public OrderType() {}
    public OrderType(byte value) { setEnum(value); }
    public OrderType(OrderTypeEnum value) { setEnum(value); }
    public OrderType(OrderType value) { setEnum(value); }

    public OrderTypeEnum getEnum() { return value; }
    public byte getRaw() { return value.getRaw(); }

    public void setDefault() { setEnum((byte)0); }

    public void setEnum(byte value) { this.value = OrderTypeEnum.mapValue(value); }
    public void setEnum(OrderTypeEnum value) { this.value = value; }
    public void setEnum(OrderType value) { this.value = value.value; }

    @Override
    public int compareTo(OrderType other)
    {
        if (value == null)
            return -1;
        if (other.value == null)
            return 1;
        return (int)(value.getRaw() - other.value.getRaw());
    }

    @Override
    public boolean equals(Object obj)
    {
        if (obj == null)
            return false;

        if (!OrderType.class.isAssignableFrom(obj.getClass()))
            return false;

        final OrderType other = (OrderType)obj;

        if ((value == null) || (other.value == null))
            return false;
        if (value.getRaw() != other.value.getRaw())
            return false;
        return true;
    }

    @Override
    public int hashCode()
    {
        int hash = 17;
        hash = hash * 31 + ((value != null) ? value.hashCode() : 0);
        return hash;
    }

    @Override
    public String toString() { return (value != null) ? value.toString() : "<unknown>"; }
}
