// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: enums.fbe
// Version: 1.3.0.0

package com.chronoxor.enums.fbe;

import java.io.*;
import java.lang.*;
import java.lang.reflect.*;
import java.math.*;
import java.nio.ByteBuffer;
import java.nio.charset.*;
import java.time.*;
import java.util.*;

import com.chronoxor.fbe.*;
import com.chronoxor.enums.*;

// Fast Binary Encoding com.chronoxor.enums receiver
public class Receiver extends com.chronoxor.fbe.Receiver
{
    // Receiver values accessors
    private final com.chronoxor.enums.Enums EnumsValue;

    // Receiver models accessors
    private final EnumsModel EnumsModel;

    public Receiver()
    {
        super(false);
        EnumsValue = new com.chronoxor.enums.Enums();
        EnumsModel = new EnumsModel();
    }
    public Receiver(Buffer buffer)
    {
        super(buffer, false);
        EnumsValue = new com.chronoxor.enums.Enums();
        EnumsModel = new EnumsModel();
    }

    // Receive handlers
    protected void onReceive(com.chronoxor.enums.Enums value) {}

    @Override
    public boolean onReceive(long type, byte[] buffer, long offset, long size)
    {
        switch ((int)type)
        {
            case (int)com.chronoxor.enums.fbe.EnumsModel.fbeTypeConst:
            {
                // Deserialize the value from the FBE stream
                EnumsModel.attach(buffer, offset);
                assert EnumsModel.verify() : "enums.Enums validation failed!";
                long deserialized = EnumsModel.deserialize(EnumsValue);
                assert (deserialized > 0) : "enums.Enums deserialization failed!";

                // Log the value
                if (getLogging())
                {
                    String message = EnumsValue.toString();
                    onReceiveLog(message);
                }

                // Call receive handler with deserialized value
                onReceive(EnumsValue);
                return true;
            }
        }

        return false;
    }
}
